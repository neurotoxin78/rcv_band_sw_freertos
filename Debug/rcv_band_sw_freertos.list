
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026ec  08012394  08012394  00022394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a80  08014a80  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08014a80  08014a80  00024a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014a88  08014a88  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014a88  08014a88  00024a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014a8c  08014a8c  00024a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08014a90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001de50  200001f0  08014c80  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2001e040  08014c80  0003e040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002df70  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000072ec  00000000  00000000  0005e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024d8  00000000  00000000  00065480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021c8  00000000  00000000  00067958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022092  00000000  00000000  00069b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034026  00000000  00000000  0008bbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3bf0  00000000  00000000  000bfbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001737c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d54  00000000  00000000  00173818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801237c 	.word	0x0801237c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0801237c 	.word	0x0801237c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <ARGB_Init>:
/**
 * @brief Init timer & prescalers
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Init(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 8000ba6:	f006 f9b5 	bl	8006f14 <HAL_RCC_GetPCLK2Freq>
 8000baa:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <ARGB_Init+0xd8>)
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <ARGB_Init+0x1c>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <ARGB_Init+0x1e>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	fb02 f303 	mul.w	r3, r2, r3
 8000bc6:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	4a2b      	ldr	r2, [pc, #172]	; (8000c7c <ARGB_Init+0xdc>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	607b      	str	r3, [r7, #4]
#endif

    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <ARGB_Init+0xe0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	3b01      	subs	r3, #1
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <ARGB_Init+0xe0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <ARGB_Init+0xe0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fdb7 	bl	8000768 <__aeabi_ui2d>
 8000bfa:	a31b      	add	r3, pc, #108	; (adr r3, 8000c68 <ARGB_Init+0xc8>)
 8000bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c00:	f7ff fb46 	bl	8000290 <__aeabi_dmul>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	4610      	mov	r0, r2
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f7ff fe26 	bl	800085c <__aeabi_d2uiz>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	3b01      	subs	r3, #1
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <ARGB_Init+0xe4>)
 8000c1a:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fda3 	bl	8000768 <__aeabi_ui2d>
 8000c22:	a313      	add	r3, pc, #76	; (adr r3, 8000c70 <ARGB_Init+0xd0>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	f7ff fb32 	bl	8000290 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	f7ff fe12 	bl	800085c <__aeabi_d2uiz>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <ARGB_Init+0xe8>)
 8000c42:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <ARGB_Init+0xec>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <ARGB_Init+0xe0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2108      	movs	r1, #8
 8000c52:	4618      	mov	r0, r3
 8000c54:	f009 f936 	bl	8009ec4 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f002 fa3d 	bl	80030d8 <HAL_Delay>
    return ARGB_OK;
 8000c5e:	2302      	movs	r3, #2
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	1eb851ec 	.word	0x1eb851ec
 8000c6c:	3fe1eb85 	.word	0x3fe1eb85
 8000c70:	1eb851ec 	.word	0x1eb851ec
 8000c74:	3fd1eb85 	.word	0x3fd1eb85
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	014f8b59 	.word	0x014f8b59
 8000c80:	20002508 	.word	0x20002508
 8000c84:	2000020c 	.word	0x2000020c
 8000c88:	2000020d 	.word	0x2000020d
 8000c8c:	200002d6 	.word	0x200002d6

08000c90 <ARGB_Clear>:
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Clear(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f000 f885 	bl	8000da8 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
    return ARGB_OK;
 8000c9e:	2302      	movs	r3, #2
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <ARGB_SetBrightness>:
/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_SetBrightness(u8_t br) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <ARGB_SetBrightness+0x20>)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	7013      	strb	r3, [r2, #0]
    return ARGB_OK;
 8000cb4:	2302      	movs	r3, #2
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <ARGB_SetRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4623      	mov	r3, r4
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	4603      	mov	r3, r0
 8000cdc:	717b      	strb	r3, [r7, #5]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	713b      	strb	r3, [r7, #4]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d005      	beq.n	8000cf8 <ARGB_SetRGB+0x30>
        u16_t _i = i / NUM_PIXELS;
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8000cf0:	88fa      	ldrh	r2, [r7, #6]
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	80fb      	strh	r3, [r7, #6]
    }

    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <ARGB_SetRGB+0xd8>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d04:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d08:	797a      	ldrb	r2, [r7, #5]
 8000d0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d0e:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <ARGB_SetRGB+0xd8>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	3301      	adds	r3, #1
 8000d18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d20:	793a      	ldrb	r2, [r7, #4]
 8000d22:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d26:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <ARGB_SetRGB+0xd8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d38:	78fa      	ldrb	r2, [r7, #3]
 8000d3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d3e:	70fb      	strb	r3, [r7, #3]

#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8000d40:	793b      	ldrb	r3, [r7, #4]
 8000d42:	21b0      	movs	r1, #176	; 0xb0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f9cb 	bl	80010e0 <scale8>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	21f0      	movs	r1, #240	; 0xf0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f9c4 	bl	80010e0 <scale8>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 8000d5c:	793b      	ldrb	r3, [r7, #4]
 8000d5e:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8000d60:	797b      	ldrb	r3, [r7, #5]
 8000d62:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8000d68:	88fa      	ldrh	r2, [r7, #6]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <ARGB_SetRGB+0xdc>)
 8000d72:	7b7a      	ldrb	r2, [r7, #13]
 8000d74:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8000d76:	88fa      	ldrh	r2, [r7, #6]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3301      	adds	r3, #1
 8000d80:	4908      	ldr	r1, [pc, #32]	; (8000da4 <ARGB_SetRGB+0xdc>)
 8000d82:	7b3a      	ldrb	r2, [r7, #12]
 8000d84:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8000d86:	88fa      	ldrh	r2, [r7, #6]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	4904      	ldr	r1, [pc, #16]	; (8000da4 <ARGB_SetRGB+0xdc>)
 8000d92:	7afa      	ldrb	r2, [r7, #11]
 8000d94:	54ca      	strb	r2, [r1, r3]
#endif
    return ARGB_OK;
 8000d96:	2302      	movs	r3, #2
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000210 	.word	0x20000210

08000da8 <ARGB_FillRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	460b      	mov	r3, r1
 8000db4:	71bb      	strb	r3, [r7, #6]
 8000db6:	4613      	mov	r3, r2
 8000db8:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	81fb      	strh	r3, [r7, #14]
 8000dbe:	e00b      	b.n	8000dd8 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8000dc0:	89fb      	ldrh	r3, [r7, #14]
 8000dc2:	b298      	uxth	r0, r3
 8000dc4:	797b      	ldrb	r3, [r7, #5]
 8000dc6:	79ba      	ldrb	r2, [r7, #6]
 8000dc8:	79f9      	ldrb	r1, [r7, #7]
 8000dca:	f7ff ff7d 	bl	8000cc8 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	81fb      	strh	r3, [r7, #14]
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0ef      	beq.n	8000dc0 <ARGB_FillRGB+0x18>
    return ARGB_OK;
 8000de0:	2302      	movs	r3, #2
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8000df2:	4b9d      	ldr	r3, [pc, #628]	; (8001068 <ARGB_Show+0x27c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8000df8:	4b9c      	ldr	r3, [pc, #624]	; (800106c <ARGB_Show+0x280>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d105      	bne.n	8000e0e <ARGB_Show+0x22>
 8000e02:	4b9b      	ldr	r3, [pc, #620]	; (8001070 <ARGB_Show+0x284>)
 8000e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d001      	beq.n	8000e12 <ARGB_Show+0x26>
        return ARGB_BUSY;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e15e      	b.n	80010d0 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8000e12:	2300      	movs	r3, #0
 8000e14:	71fb      	strb	r3, [r7, #7]
 8000e16:	e0a6      	b.n	8000f66 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e18:	4b96      	ldr	r3, [pc, #600]	; (8001074 <ARGB_Show+0x288>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	dd04      	ble.n	8000e3a <ARGB_Show+0x4e>
 8000e30:	4b91      	ldr	r3, [pc, #580]	; (8001078 <ARGB_Show+0x28c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	461a      	mov	r2, r3
 8000e38:	e003      	b.n	8000e42 <ARGB_Show+0x56>
 8000e3a:	4b90      	ldr	r3, [pc, #576]	; (800107c <ARGB_Show+0x290>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4619      	mov	r1, r3
 8000e48:	4b8d      	ldr	r3, [pc, #564]	; (8001080 <ARGB_Show+0x294>)
 8000e4a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e4e:	4b89      	ldr	r3, [pc, #548]	; (8001074 <ARGB_Show+0x288>)
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	dd04      	ble.n	8000e70 <ARGB_Show+0x84>
 8000e66:	4b84      	ldr	r3, [pc, #528]	; (8001078 <ARGB_Show+0x28c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	e003      	b.n	8000e78 <ARGB_Show+0x8c>
 8000e70:	4b82      	ldr	r3, [pc, #520]	; (800107c <ARGB_Show+0x290>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4619      	mov	r1, r3
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	3308      	adds	r3, #8
 8000e7e:	4a80      	ldr	r2, [pc, #512]	; (8001080 <ARGB_Show+0x294>)
 8000e80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e84:	4b7b      	ldr	r3, [pc, #492]	; (8001074 <ARGB_Show+0x288>)
 8000e86:	789b      	ldrb	r3, [r3, #2]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	dd04      	ble.n	8000ea6 <ARGB_Show+0xba>
 8000e9c:	4b76      	ldr	r3, [pc, #472]	; (8001078 <ARGB_Show+0x28c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	e003      	b.n	8000eae <ARGB_Show+0xc2>
 8000ea6:	4b75      	ldr	r3, [pc, #468]	; (800107c <ARGB_Show+0x290>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4619      	mov	r1, r3
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	3310      	adds	r3, #16
 8000eb4:	4a72      	ldr	r2, [pc, #456]	; (8001080 <ARGB_Show+0x294>)
 8000eb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000eba:	4b6e      	ldr	r3, [pc, #440]	; (8001074 <ARGB_Show+0x288>)
 8000ebc:	78db      	ldrb	r3, [r3, #3]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	dd04      	ble.n	8000edc <ARGB_Show+0xf0>
 8000ed2:	4b69      	ldr	r3, [pc, #420]	; (8001078 <ARGB_Show+0x28c>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4619      	mov	r1, r3
 8000eda:	e003      	b.n	8000ee4 <ARGB_Show+0xf8>
 8000edc:	4b67      	ldr	r3, [pc, #412]	; (800107c <ARGB_Show+0x290>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	3318      	adds	r3, #24
 8000eea:	4a65      	ldr	r2, [pc, #404]	; (8001080 <ARGB_Show+0x294>)
 8000eec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000ef0:	4b60      	ldr	r3, [pc, #384]	; (8001074 <ARGB_Show+0x288>)
 8000ef2:	791b      	ldrb	r3, [r3, #4]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dd04      	ble.n	8000f12 <ARGB_Show+0x126>
 8000f08:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <ARGB_Show+0x28c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4619      	mov	r1, r3
 8000f10:	e003      	b.n	8000f1a <ARGB_Show+0x12e>
 8000f12:	4b5a      	ldr	r3, [pc, #360]	; (800107c <ARGB_Show+0x290>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4619      	mov	r1, r3
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	3320      	adds	r3, #32
 8000f20:	4a57      	ldr	r2, [pc, #348]	; (8001080 <ARGB_Show+0x294>)
 8000f22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000f26:	4b53      	ldr	r3, [pc, #332]	; (8001074 <ARGB_Show+0x288>)
 8000f28:	795b      	ldrb	r3, [r3, #5]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	dd04      	ble.n	8000f48 <ARGB_Show+0x15c>
 8000f3e:	4b4e      	ldr	r3, [pc, #312]	; (8001078 <ARGB_Show+0x28c>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	4619      	mov	r1, r3
 8000f46:	e003      	b.n	8000f50 <ARGB_Show+0x164>
 8000f48:	4b4c      	ldr	r3, [pc, #304]	; (800107c <ARGB_Show+0x290>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4619      	mov	r1, r3
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3328      	adds	r3, #40	; 0x28
 8000f56:	4a4a      	ldr	r2, [pc, #296]	; (8001080 <ARGB_Show+0x294>)
 8000f58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	f67f af54 	bls.w	8000e18 <ARGB_Show+0x2c>
#endif
        }

        //HAL_TIM_DMABurst_WriteStart(&TIM_HANDLE, TIM_DMABASE_ARR)

        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8000f74:	e0a4      	b.n	80010c0 <ARGB_Show+0x2d4>

            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8000f76:	4b43      	ldr	r3, [pc, #268]	; (8001084 <ARGB_Show+0x298>)
 8000f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d102      	bne.n	8000f88 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8000f82:	2302      	movs	r3, #2
 8000f84:	73fb      	strb	r3, [r7, #15]
                continue;
 8000f86:	e09b      	b.n	80010c0 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8000f88:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <ARGB_Show+0x298>)
 8000f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d11d      	bne.n	8000fd0 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8000f94:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <ARGB_Show+0x298>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <ARGB_Show+0x298>)
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	4a39      	ldr	r2, [pc, #228]	; (8001088 <ARGB_Show+0x29c>)
 8000fa2:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8000fa4:	4b37      	ldr	r3, [pc, #220]	; (8001084 <ARGB_Show+0x298>)
 8000fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa8:	4a38      	ldr	r2, [pc, #224]	; (800108c <ARGB_Show+0x2a0>)
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8000fac:	4b35      	ldr	r3, [pc, #212]	; (8001084 <ARGB_Show+0x298>)
 8000fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb0:	4a37      	ldr	r2, [pc, #220]	; (8001090 <ARGB_Show+0x2a4>)
 8000fb2:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <ARGB_Show+0x298>)
 8000fb6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000fb8:	4931      	ldr	r1, [pc, #196]	; (8001080 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <ARGB_Show+0x298>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	2330      	movs	r3, #48	; 0x30
 8000fc4:	f002 ffe0 	bl	8003f88 <HAL_DMA_Start_IT>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d006      	beq.n	8000fdc <ARGB_Show+0x1f0>
 8000fce:	e002      	b.n	8000fd6 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fd4:	e074      	b.n	80010c0 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fda:	e071      	b.n	80010c0 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8000fdc:	4b29      	ldr	r3, [pc, #164]	; (8001084 <ARGB_Show+0x298>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	4b28      	ldr	r3, [pc, #160]	; (8001084 <ARGB_Show+0x298>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fea:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <ARGB_Show+0x298>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a28      	ldr	r2, [pc, #160]	; (8001094 <ARGB_Show+0x2a8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d107      	bne.n	8001006 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <ARGB_Show+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <ARGB_Show+0x298>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001004:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <ARGB_Show+0x298>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a22      	ldr	r2, [pc, #136]	; (8001094 <ARGB_Show+0x2a8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d018      	beq.n	8001042 <ARGB_Show+0x256>
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <ARGB_Show+0x298>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d013      	beq.n	8001042 <ARGB_Show+0x256>
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <ARGB_Show+0x298>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <ARGB_Show+0x2ac>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00e      	beq.n	8001042 <ARGB_Show+0x256>
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <ARGB_Show+0x298>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1c      	ldr	r2, [pc, #112]	; (800109c <ARGB_Show+0x2b0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d009      	beq.n	8001042 <ARGB_Show+0x256>
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <ARGB_Show+0x298>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <ARGB_Show+0x2b4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d004      	beq.n	8001042 <ARGB_Show+0x256>
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <ARGB_Show+0x298>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <ARGB_Show+0x2b8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d132      	bne.n	80010a8 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <ARGB_Show+0x298>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2b06      	cmp	r3, #6
 8001052:	d032      	beq.n	80010ba <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <ARGB_Show+0x298>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <ARGB_Show+0x298>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0201 	orr.w	r2, r2, #1
 8001062:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001064:	e029      	b.n	80010ba <ARGB_Show+0x2ce>
 8001066:	bf00      	nop
 8001068:	200002d6 	.word	0x200002d6
 800106c:	200002d4 	.word	0x200002d4
 8001070:	20002598 	.word	0x20002598
 8001074:	20000210 	.word	0x20000210
 8001078:	2000020c 	.word	0x2000020c
 800107c:	2000020d 	.word	0x2000020d
 8001080:	20000214 	.word	0x20000214
 8001084:	20002508 	.word	0x20002508
 8001088:	08001109 	.word	0x08001109
 800108c:	08001389 	.word	0x08001389
 8001090:	080097d1 	.word	0x080097d1
 8001094:	40010000 	.word	0x40010000
 8001098:	40000400 	.word	0x40000400
 800109c:	40000800 	.word	0x40000800
 80010a0:	40000c00 	.word	0x40000c00
 80010a4:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <ARGB_Show+0x2ec>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <ARGB_Show+0x2ec>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e000      	b.n	80010bc <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80010ba:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f47f af57 	bne.w	8000f76 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <ARGB_Show+0x2f0>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	801a      	strh	r2, [r3, #0]

        return ARGB_OK;
 80010ce:	2302      	movs	r3, #2
    }
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20002508 	.word	0x20002508
 80010dc:	200002d4 	.word	0x200002d4

080010e0 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	79ba      	ldrb	r2, [r7, #6]
 80010f4:	fb02 f303 	mul.w	r3, r2, r3
 80010f8:	121b      	asrs	r3, r3, #8
 80010fa:	b2db      	uxtb	r3, r3
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001114:	60fb      	str	r3, [r7, #12]

    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	d10b      	bne.n	8001138 <ARGB_TIM_DMADelayPulseCplt+0x30>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2201      	movs	r2, #1
 8001124:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d136      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001136:	e031      	b.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	d10b      	bne.n	800115a <ARGB_TIM_DMADelayPulseCplt+0x52>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2202      	movs	r2, #2
 8001146:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d125      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001158:	e020      	b.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	d10b      	bne.n	800117c <ARGB_TIM_DMADelayPulseCplt+0x74>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2204      	movs	r2, #4
 8001168:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d114      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800117a:	e00f      	b.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	d10a      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2208      	movs	r2, #8
 800118a:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d103      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 800119c:	4b72      	ldr	r3, [pc, #456]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d17b      	bne.n	800129e <ARGB_TIM_DMADelayPulseCplt+0x196>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	72fb      	strb	r3, [r7, #11]
 80011aa:	e06c      	b.n	8001286 <ARGB_TIM_DMADelayPulseCplt+0x17e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011ac:	4b6e      	ldr	r3, [pc, #440]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	4a6c      	ldr	r2, [pc, #432]	; (800136c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 80011bc:	5cd3      	ldrb	r3, [r2, r3]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	7afb      	ldrb	r3, [r7, #11]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	dd04      	ble.n	80011dc <ARGB_TIM_DMADelayPulseCplt+0xd4>
 80011d2:	4b67      	ldr	r3, [pc, #412]	; (8001370 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	e003      	b.n	80011e4 <ARGB_TIM_DMADelayPulseCplt+0xdc>
 80011dc:	4b65      	ldr	r3, [pc, #404]	; (8001374 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4619      	mov	r1, r3
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	3318      	adds	r3, #24
 80011ea:	4a63      	ldr	r2, [pc, #396]	; (8001378 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 80011ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011f0:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	3301      	adds	r3, #1
 8001200:	4a5a      	ldr	r2, [pc, #360]	; (800136c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 8001202:	5cd3      	ldrb	r3, [r2, r3]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	7afb      	ldrb	r3, [r7, #11]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001214:	2b00      	cmp	r3, #0
 8001216:	dd04      	ble.n	8001222 <ARGB_TIM_DMADelayPulseCplt+0x11a>
 8001218:	4b55      	ldr	r3, [pc, #340]	; (8001370 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4619      	mov	r1, r3
 8001220:	e003      	b.n	800122a <ARGB_TIM_DMADelayPulseCplt+0x122>
 8001222:	4b54      	ldr	r3, [pc, #336]	; (8001374 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4619      	mov	r1, r3
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	3320      	adds	r3, #32
 8001230:	4a51      	ldr	r2, [pc, #324]	; (8001378 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 8001232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001236:	4b4c      	ldr	r3, [pc, #304]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	3302      	adds	r3, #2
 8001246:	4a49      	ldr	r2, [pc, #292]	; (800136c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125a:	2b00      	cmp	r3, #0
 800125c:	dd04      	ble.n	8001268 <ARGB_TIM_DMADelayPulseCplt+0x160>
 800125e:	4b44      	ldr	r3, [pc, #272]	; (8001370 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4619      	mov	r1, r3
 8001266:	e003      	b.n	8001270 <ARGB_TIM_DMADelayPulseCplt+0x168>
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4619      	mov	r1, r3
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	3328      	adds	r3, #40	; 0x28
 8001276:	4a40      	ldr	r2, [pc, #256]	; (8001378 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 8001278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800127c:	7afb      	ldrb	r3, [r7, #11]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	3301      	adds	r3, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	72fb      	strb	r3, [r7, #11]
 8001286:	7afb      	ldrb	r3, [r7, #11]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b07      	cmp	r3, #7
 800128c:	d98e      	bls.n	80011ac <ARGB_TIM_DMADelayPulseCplt+0xa4>
#endif
        }
        BUF_COUNTER++;
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	3301      	adds	r3, #1
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b33      	ldr	r3, [pc, #204]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e05d      	b.n	800135a <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 800129e:	4b32      	ldr	r3, [pc, #200]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d80c      	bhi.n	80012c2 <ARGB_TIM_DMADelayPulseCplt+0x1ba>
        memset((u32_t *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // second part
 80012a8:	2260      	movs	r2, #96	; 0x60
 80012aa:	2100      	movs	r1, #0
 80012ac:	4833      	ldr	r0, [pc, #204]	; (800137c <ARGB_TIM_DMADelayPulseCplt+0x274>)
 80012ae:	f010 fb8d 	bl	80119cc <memset>
        BUF_COUNTER++;
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	3301      	adds	r3, #1
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012be:	801a      	strh	r2, [r3, #0]
 80012c0:	e04b      	b.n	800135a <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 80012c2:	4b29      	ldr	r3, [pc, #164]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012d6:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 feb9 	bl	8004054 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a26      	ldr	r2, [pc, #152]	; (8001380 <ARGB_TIM_DMADelayPulseCplt+0x278>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d117      	bne.n	800131c <ARGB_TIM_DMADelayPulseCplt+0x214>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6a1a      	ldr	r2, [r3, #32]
 80012f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10f      	bne.n	800131c <ARGB_TIM_DMADelayPulseCplt+0x214>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6a1a      	ldr	r2, [r3, #32]
 8001302:	f240 4344 	movw	r3, #1092	; 0x444
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d107      	bne.n	800131c <ARGB_TIM_DMADelayPulseCplt+0x214>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800131a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6a1a      	ldr	r2, [r3, #32]
 8001322:	f241 1311 	movw	r3, #4369	; 0x1111
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10f      	bne.n	800134c <ARGB_TIM_DMADelayPulseCplt+0x244>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a1a      	ldr	r2, [r3, #32]
 8001332:	f240 4344 	movw	r3, #1092	; 0x444
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d107      	bne.n	800134c <ARGB_TIM_DMADelayPulseCplt+0x244>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]

        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST = ARGB_READY;
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <ARGB_TIM_DMADelayPulseCplt+0x27c>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
    }

    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	771a      	strb	r2, [r3, #28]
}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200002d4 	.word	0x200002d4
 800136c:	20000210 	.word	0x20000210
 8001370:	2000020c 	.word	0x2000020c
 8001374:	2000020d 	.word	0x2000020d
 8001378:	20000214 	.word	0x20000214
 800137c:	20000274 	.word	0x20000274
 8001380:	40010000 	.word	0x40010000
 8001384:	200002d6 	.word	0x200002d6

08001388 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001394:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4f      	ldr	r2, [pc, #316]	; (80014d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x150>)
 800139a:	4293      	cmp	r3, r2
 800139c:	f040 8098 	bne.w	80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x148>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a4e      	ldr	r2, [pc, #312]	; (80014dc <ARGB_TIM_DMADelayPulseHalfCplt+0x154>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	f040 8093 	bne.w	80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x148>

    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 80013aa:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d17b      	bne.n	80014ac <ARGB_TIM_DMADelayPulseHalfCplt+0x124>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	72fb      	strb	r3, [r7, #11]
 80013b8:	e06c      	b.n	8001494 <ARGB_TIM_DMADelayPulseHalfCplt+0x10c>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	4a46      	ldr	r2, [pc, #280]	; (80014e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	7afb      	ldrb	r3, [r7, #11]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013dc:	2b00      	cmp	r3, #0
 80013de:	dd04      	ble.n	80013ea <ARGB_TIM_DMADelayPulseHalfCplt+0x62>
 80013e0:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	e003      	b.n	80013f2 <ARGB_TIM_DMADelayPulseHalfCplt+0x6a>
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	7afb      	ldrb	r3, [r7, #11]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80013fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	3301      	adds	r3, #1
 800140e:	4a35      	ldr	r2, [pc, #212]	; (80014e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	7afb      	ldrb	r3, [r7, #11]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001422:	2b00      	cmp	r3, #0
 8001424:	dd04      	ble.n	8001430 <ARGB_TIM_DMADelayPulseHalfCplt+0xa8>
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	4619      	mov	r1, r3
 800142e:	e003      	b.n	8001438 <ARGB_TIM_DMADelayPulseHalfCplt+0xb0>
 8001430:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	3308      	adds	r3, #8
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001440:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	3302      	adds	r3, #2
 8001454:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	7afb      	ldrb	r3, [r7, #11]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001468:	2b00      	cmp	r3, #0
 800146a:	dd04      	ble.n	8001476 <ARGB_TIM_DMADelayPulseHalfCplt+0xee>
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4619      	mov	r1, r3
 8001474:	e003      	b.n	800147e <ARGB_TIM_DMADelayPulseHalfCplt+0xf6>
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	4619      	mov	r1, r3
 800147e:	7afb      	ldrb	r3, [r7, #11]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	3310      	adds	r3, #16
 8001484:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001486:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800148a:	7afb      	ldrb	r3, [r7, #11]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3301      	adds	r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	72fb      	strb	r3, [r7, #11]
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b07      	cmp	r3, #7
 800149a:	d98e      	bls.n	80013ba <ARGB_TIM_DMADelayPulseHalfCplt+0x32>
#endif
        }
        BUF_COUNTER++;
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014a8:	801a      	strh	r2, [r3, #0]
 80014aa:	e012      	b.n	80014d2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d80d      	bhi.n	80014d2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
        memset((u32_t*) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // first part
 80014b6:	2260      	movs	r2, #96	; 0x60
 80014b8:	2100      	movs	r1, #0
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014bc:	f010 fa86 	bl	80119cc <memset>
        BUF_COUNTER++;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014cc:	801a      	strh	r2, [r3, #0]
 80014ce:	e000      	b.n	80014d2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80014d0:	bf00      	nop
    }
}
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20002598 	.word	0x20002598
 80014dc:	20002508 	.word	0x20002508
 80014e0:	200002d4 	.word	0x200002d4
 80014e4:	20000210 	.word	0x20000210
 80014e8:	2000020c 	.word	0x2000020c
 80014ec:	2000020d 	.word	0x2000020d
 80014f0:	20000214 	.word	0x20000214

080014f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_ADC1_Init+0x98>)
 8001508:	4a21      	ldr	r2, [pc, #132]	; (8001590 <MX_ADC1_Init+0x9c>)
 800150a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_ADC1_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <MX_ADC1_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_ADC1_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_ADC1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_ADC1_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <MX_ADC1_Init+0x98>)
 800152e:	2200      	movs	r2, #0
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_ADC1_Init+0x98>)
 8001534:	4a17      	ldr	r2, [pc, #92]	; (8001594 <MX_ADC1_Init+0xa0>)
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_ADC1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_ADC1_Init+0x98>)
 8001540:	2201      	movs	r2, #1
 8001542:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_ADC1_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_ADC1_Init+0x98>)
 800154e:	2201      	movs	r2, #1
 8001550:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001552:	480e      	ldr	r0, [pc, #56]	; (800158c <MX_ADC1_Init+0x98>)
 8001554:	f001 fde4 	bl	8003120 <HAL_ADC_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800155e:	f000 fcbb 	bl	8001ed8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001562:	2309      	movs	r3, #9
 8001564:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001566:	2301      	movs	r3, #1
 8001568:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <MX_ADC1_Init+0x98>)
 8001574:	f001 ff32 	bl	80033dc <HAL_ADC_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800157e:	f000 fcab 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200002d8 	.word	0x200002d8
 8001590:	40012000 	.word	0x40012000
 8001594:	0f000001 	.word	0x0f000001

08001598 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a17      	ldr	r2, [pc, #92]	; (8001614 <HAL_ADC_MspInit+0x7c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d127      	bne.n	800160a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015f2:	2302      	movs	r3, #2
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f6:	2303      	movs	r3, #3
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_ADC_MspInit+0x84>)
 8001606:	f002 ffb1 	bl	800456c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40012000 	.word	0x40012000
 8001618:	40023800 	.word	0x40023800
 800161c:	40020400 	.word	0x40020400

08001620 <displayBand>:
int currentBand = 0;                          // First band. For this case, AM is the current band.
char buff[20];
uint32_t ticks;

void displayBand(int band_index)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af04      	add	r7, sp, #16
 8001626:	6078      	str	r0, [r7, #4]
    if(band_index != lastBand + 1 )
 8001628:	2304      	movs	r3, #4
 800162a:	3301      	adds	r3, #1
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	429a      	cmp	r2, r3
 8001630:	d07d      	beq.n	800172e <displayBand+0x10e>
    {
        ST7735_FillRectangleFast(0,0,160,80,ST7735_COLOR565(10, 10, 10));
 8001632:	f640 0341 	movw	r3, #2113	; 0x841
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2350      	movs	r3, #80	; 0x50
 800163a:	22a0      	movs	r2, #160	; 0xa0
 800163c:	2100      	movs	r1, #0
 800163e:	2000      	movs	r0, #0
 8001640:	f000 ff92 	bl	8002568 <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,64,160,16,ST7735_COLOR565(50, 50, 50));
 8001644:	f243 1386 	movw	r3, #12678	; 0x3186
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2310      	movs	r3, #16
 800164c:	22a0      	movs	r2, #160	; 0xa0
 800164e:	2140      	movs	r1, #64	; 0x40
 8001650:	2000      	movs	r0, #0
 8001652:	f000 ff89 	bl	8002568 <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,0,160,26,ST7735_COLOR565(50, 50, 50));
 8001656:	f243 1386 	movw	r3, #12678	; 0x3186
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	231a      	movs	r3, #26
 800165e:	22a0      	movs	r2, #160	; 0xa0
 8001660:	2100      	movs	r1, #0
 8001662:	2000      	movs	r0, #0
 8001664:	f000 ff80 	bl	8002568 <ST7735_FillRectangleFast>
        ST7735_WriteString(1, 2, band[band_index].name, Font_16x26, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(50, 50, 50));
 8001668:	4933      	ldr	r1, [pc, #204]	; (8001738 <displayBand+0x118>)
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	440b      	add	r3, r1
 8001676:	6819      	ldr	r1, [r3, #0]
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <displayBand+0x11c>)
 800167a:	f243 1286 	movw	r2, #12678	; 0x3186
 800167e:	9202      	str	r2, [sp, #8]
 8001680:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8001684:	9201      	str	r2, [sp, #4]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	9200      	str	r2, [sp, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	460a      	mov	r2, r1
 800168e:	2102      	movs	r1, #2
 8001690:	2001      	movs	r0, #1
 8001692:	f000 feac 	bl	80023ee <ST7735_WriteString>
        // freq
       	sprintf(buff, "%s - %s", band[band_index].WminFreq, band[band_index].WmaxFreq);
 8001696:	4928      	ldr	r1, [pc, #160]	; (8001738 <displayBand+0x118>)
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	3304      	adds	r3, #4
 80016a6:	6819      	ldr	r1, [r3, #0]
 80016a8:	4823      	ldr	r0, [pc, #140]	; (8001738 <displayBand+0x118>)
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4403      	add	r3, r0
 80016b6:	3308      	adds	r3, #8
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	460a      	mov	r2, r1
 80016bc:	4920      	ldr	r1, [pc, #128]	; (8001740 <displayBand+0x120>)
 80016be:	4821      	ldr	r0, [pc, #132]	; (8001744 <displayBand+0x124>)
 80016c0:	f010 fae6 	bl	8011c90 <siprintf>
       	ST7735_WriteString(0, 29, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <displayBand+0x128>)
 80016c6:	f640 0241 	movw	r2, #2113	; 0x841
 80016ca:	9202      	str	r2, [sp, #8]
 80016cc:	f244 52df 	movw	r2, #17887	; 0x45df
 80016d0:	9201      	str	r2, [sp, #4]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	9200      	str	r2, [sp, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1a      	ldr	r2, [pc, #104]	; (8001744 <displayBand+0x124>)
 80016da:	211d      	movs	r1, #29
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 fe86 	bl	80023ee <ST7735_WriteString>
       	sprintf(buff, "%s - %s", band[band_index].NminFreq, band[band_index].NmaxFreq);
 80016e2:	4915      	ldr	r1, [pc, #84]	; (8001738 <displayBand+0x118>)
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	330c      	adds	r3, #12
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	4810      	ldr	r0, [pc, #64]	; (8001738 <displayBand+0x118>)
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4403      	add	r3, r0
 8001702:	3310      	adds	r3, #16
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	460a      	mov	r2, r1
 8001708:	490d      	ldr	r1, [pc, #52]	; (8001740 <displayBand+0x120>)
 800170a:	480e      	ldr	r0, [pc, #56]	; (8001744 <displayBand+0x124>)
 800170c:	f010 fac0 	bl	8011c90 <siprintf>
       	ST7735_WriteString(0, 46, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <displayBand+0x128>)
 8001712:	f640 0241 	movw	r2, #2113	; 0x841
 8001716:	9202      	str	r2, [sp, #8]
 8001718:	f244 52df 	movw	r2, #17887	; 0x45df
 800171c:	9201      	str	r2, [sp, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	9200      	str	r2, [sp, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a07      	ldr	r2, [pc, #28]	; (8001744 <displayBand+0x124>)
 8001726:	212e      	movs	r1, #46	; 0x2e
 8001728:	2000      	movs	r0, #0
 800172a:	f000 fe60 	bl	80023ee <ST7735_WriteString>
    }

}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000004 	.word	0x20000004
 800173c:	20000084 	.word	0x20000084
 8001740:	08012438 	.word	0x08012438
 8001744:	20000320 	.word	0x20000320
 8001748:	2000007c 	.word	0x2000007c

0800174c <setBand>:
    HAL_GPIO_WritePin(GPIOB, CHIP, GPIO_PIN_SET); // HIGH
	delay_us(300);
}

void setBand(int band_index)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af04      	add	r7, sp, #16
 8001752:	6078      	str	r0, [r7, #4]
	ticks = band[band_index].ticks; //- START_RESISTANCE_KOM;
 8001754:	4912      	ldr	r1, [pc, #72]	; (80017a0 <setBand+0x54>)
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3314      	adds	r3, #20
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <setBand+0x58>)
 8001768:	6013      	str	r3, [r2, #0]
	sprintf(buff, "R:%ld", ticks);
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <setBand+0x58>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	490d      	ldr	r1, [pc, #52]	; (80017a8 <setBand+0x5c>)
 8001772:	480e      	ldr	r0, [pc, #56]	; (80017ac <setBand+0x60>)
 8001774:	f010 fa8c 	bl	8011c90 <siprintf>
	ST7735_WriteString(0, 64, buff, Font_11x18, ST7735_COLOR565(165, 214, 2), ST7735_COLOR565(50, 50, 50));
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <setBand+0x64>)
 800177a:	f243 1286 	movw	r2, #12678	; 0x3186
 800177e:	9202      	str	r2, [sp, #8]
 8001780:	f24a 62a0 	movw	r2, #42656	; 0xa6a0
 8001784:	9201      	str	r2, [sp, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	9200      	str	r2, [sp, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <setBand+0x60>)
 800178e:	2140      	movs	r1, #64	; 0x40
 8001790:	2000      	movs	r0, #0
 8001792:	f000 fe2c 	bl	80023ee <ST7735_WriteString>
	//setResistanceUP(CS_PIN, ticks, false);
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000004 	.word	0x20000004
 80017a4:	20000334 	.word	0x20000334
 80017a8:	08012440 	.word	0x08012440
 80017ac:	20000320 	.word	0x20000320
 80017b0:	2000007c 	.word	0x2000007c

080017b4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_CRC_Init+0x20>)
 80017ba:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <MX_CRC_Init+0x24>)
 80017bc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_CRC_Init+0x20>)
 80017c0:	f002 f99e 	bl	8003b00 <HAL_CRC_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017ca:	f000 fb85 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000338 	.word	0x20000338
 80017d8:	40023000 	.word	0x40023000

080017dc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_CRC_MspInit+0x3c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10d      	bne.n	800180a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_CRC_MspInit+0x40>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <HAL_CRC_MspInit+0x40>)
 80017f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <HAL_CRC_MspInit+0x40>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023000 	.word	0x40023000
 800181c:	40023800 	.word	0x40023800

08001820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_DMA_Init+0x3c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <MX_DMA_Init+0x3c>)
 8001830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_DMA_Init+0x3c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2105      	movs	r1, #5
 8001846:	202f      	movs	r0, #47	; 0x2f
 8001848:	f002 f916 	bl	8003a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800184c:	202f      	movs	r0, #47	; 0x2f
 800184e:	f002 f93f 	bl	8003ad0 <HAL_NVIC_EnableIRQ>

}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800

08001860 <configureTimerForRunTimeStats>:
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
return 0;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
	vTaskList(taskListStatus);
 8001884:	4803      	ldr	r0, [pc, #12]	; (8001894 <vApplicationIdleHook+0x14>)
 8001886:	f00e fa53 	bl	800fd30 <vTaskList>
	vTaskGetRunTimeStats(taskRunStatus);
 800188a:	4803      	ldr	r0, [pc, #12]	; (8001898 <vApplicationIdleHook+0x18>)
 800188c:	f00e fae6 	bl	800fe5c <vTaskGetRunTimeStats>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000340 	.word	0x20000340
 8001898:	20001340 	.word	0x20001340

0800189c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EncoderQueue */
  EncoderQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &EncoderQueue_attributes);
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <MX_FREERTOS_Init+0x58>)
 80018a2:	2102      	movs	r1, #2
 80018a4:	2001      	movs	r0, #1
 80018a6:	f00c f99c 	bl	800dbe2 <osMessageQueueNew>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <MX_FREERTOS_Init+0x5c>)
 80018ae:	6013      	str	r3, [r2, #0]

  /* creation of ButtonQueue */
  ButtonQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &ButtonQueue_attributes);
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <MX_FREERTOS_Init+0x60>)
 80018b2:	2102      	movs	r1, #2
 80018b4:	2001      	movs	r0, #1
 80018b6:	f00c f994 	bl	800dbe2 <osMessageQueueNew>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4a10      	ldr	r2, [pc, #64]	; (8001900 <MX_FREERTOS_Init+0x64>)
 80018be:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80018c0:	4a10      	ldr	r2, [pc, #64]	; (8001904 <MX_FREERTOS_Init+0x68>)
 80018c2:	2100      	movs	r1, #0
 80018c4:	4810      	ldr	r0, [pc, #64]	; (8001908 <MX_FREERTOS_Init+0x6c>)
 80018c6:	f00c f8df 	bl	800da88 <osThreadNew>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a0f      	ldr	r2, [pc, #60]	; (800190c <MX_FREERTOS_Init+0x70>)
 80018ce:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 80018d0:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <MX_FREERTOS_Init+0x74>)
 80018d2:	2100      	movs	r1, #0
 80018d4:	480f      	ldr	r0, [pc, #60]	; (8001914 <MX_FREERTOS_Init+0x78>)
 80018d6:	f00c f8d7 	bl	800da88 <osThreadNew>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <MX_FREERTOS_Init+0x7c>)
 80018de:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <MX_FREERTOS_Init+0x80>)
 80018e2:	2100      	movs	r1, #0
 80018e4:	480e      	ldr	r0, [pc, #56]	; (8001920 <MX_FREERTOS_Init+0x84>)
 80018e6:	f00c f8cf 	bl	800da88 <osThreadNew>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <MX_FREERTOS_Init+0x88>)
 80018ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	08014924 	.word	0x08014924
 80018f8:	2000234c 	.word	0x2000234c
 80018fc:	0801493c 	.word	0x0801493c
 8001900:	20002350 	.word	0x20002350
 8001904:	080148b8 	.word	0x080148b8
 8001908:	08001929 	.word	0x08001929
 800190c:	20002340 	.word	0x20002340
 8001910:	080148dc 	.word	0x080148dc
 8001914:	08001965 	.word	0x08001965
 8001918:	20002344 	.word	0x20002344
 800191c:	08014900 	.word	0x08014900
 8001920:	08001a25 	.word	0x08001a25
 8001924:	20002348 	.word	0x20002348

08001928 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001930:	f00f faf4 	bl	8010f1c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */

	for (;;) {
		CDC_Transmit_FS(taskListStatus, sizeof(taskListStatus));
 8001934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001938:	4808      	ldr	r0, [pc, #32]	; (800195c <StartDefaultTask+0x34>)
 800193a:	f00f fbad 	bl	8011098 <CDC_Transmit_FS>
		osDelay(1000);
 800193e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001942:	f00c f933 	bl	800dbac <osDelay>
		CDC_Transmit_FS(taskRunStatus, sizeof(taskRunStatus));
 8001946:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <StartDefaultTask+0x38>)
 800194c:	f00f fba4 	bl	8011098 <CDC_Transmit_FS>
		  // Some delay
		osDelay(1000);
 8001950:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001954:	f00c f92a 	bl	800dbac <osDelay>
		CDC_Transmit_FS(taskListStatus, sizeof(taskListStatus));
 8001958:	e7ec      	b.n	8001934 <StartDefaultTask+0xc>
 800195a:	bf00      	nop
 800195c:	20000340 	.word	0x20000340
 8001960:	20001340 	.word	0x20001340

08001964 <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	/* Infinite loop */
	int32_t counter = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
	int16_t button = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	817b      	strh	r3, [r7, #10]
	int32_t last_counter = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
	int16_t max_index = 5;
 8001978:	2305      	movs	r3, #5
 800197a:	827b      	strh	r3, [r7, #18]
	ST7735_FillScreenFast(ST7735_BLACK);
 800197c:	2000      	movs	r0, #0
 800197e:	f000 fe88 	bl	8002692 <ST7735_FillScreenFast>
	displayBand(last_counter);
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff fe4c 	bl	8001620 <displayBand>
	setBand(last_counter);
 8001988:	6978      	ldr	r0, [r7, #20]
 800198a:	f7ff fedf 	bl	800174c <setBand>
	for (;;) {
		//Encoder Rotate
		osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <StartDisplayTask+0xb8>)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	f107 010c 	add.w	r1, r7, #12
 8001996:	2300      	movs	r3, #0
 8001998:	2200      	movs	r2, #0
 800199a:	f00c f9f5 	bl	800dd88 <osMessageQueueGet>
		if(counter == 2) {
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d116      	bne.n	80019d2 <StartDisplayTask+0x6e>
			if(last_counter != max_index -1)
 80019a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d005      	beq.n	80019bc <StartDisplayTask+0x58>
			{
				last_counter += 1;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3301      	adds	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
				counter = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e003      	b.n	80019c4 <StartDisplayTask+0x60>
			} else
			{
				last_counter = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
				counter = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
			}
			displayBand(last_counter);
 80019c4:	6978      	ldr	r0, [r7, #20]
 80019c6:	f7ff fe2b 	bl	8001620 <displayBand>
			setBand(last_counter);
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff febe 	bl	800174c <setBand>
 80019d0:	e017      	b.n	8001a02 <StartDisplayTask+0x9e>
		}else if (counter == 1){
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d114      	bne.n	8001a02 <StartDisplayTask+0x9e>
			if(last_counter != 0)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <StartDisplayTask+0x86>
			{
				last_counter -= 1;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
				counter = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e005      	b.n	80019f6 <StartDisplayTask+0x92>
			} else
			{
				last_counter = max_index -1;
 80019ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
				counter = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
			}
			displayBand(last_counter);
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff fe12 	bl	8001620 <displayBand>
			setBand(last_counter);
 80019fc:	6978      	ldr	r0, [r7, #20]
 80019fe:	f7ff fea5 	bl	800174c <setBand>
		}else
		{

		}
		//Button click
		osMessageQueueGet(ButtonQueueHandle, &button, 0, 0);
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <StartDisplayTask+0xbc>)
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	f107 010a 	add.w	r1, r7, #10
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f00c f9bb 	bl	800dd88 <osMessageQueueGet>
		if (button)
		{

		}
		osDelay(1000);
 8001a12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a16:	f00c f8c9 	bl	800dbac <osDelay>
		osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 8001a1a:	e7b8      	b.n	800198e <StartDisplayTask+0x2a>
 8001a1c:	2000234c 	.word	0x2000234c
 8001a20:	20002350 	.word	0x20002350

08001a24 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
	int32_t counter = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
	uint8_t buttonNumber = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	76fb      	strb	r3, [r7, #27]
	uint8_t buttonSend = 1;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 8001a3c:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <StartEncoderTask+0xac>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	617b      	str	r3, [r7, #20]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	0fda      	lsrs	r2, r3, #31
 8001a4c:	4413      	add	r3, r2
 8001a4e:	105b      	asrs	r3, r3, #1
 8001a50:	425b      	negs	r3, r3
 8001a52:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001a56:	337f      	adds	r3, #127	; 0x7f
 8001a58:	617b      	str	r3, [r7, #20]
		if (currCounter != prevCounter) {
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d01e      	beq.n	8001aa0 <StartEncoderTask+0x7c>
			if (currCounter > prevCounter) {
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	dd0a      	ble.n	8001a80 <StartEncoderTask+0x5c>
				counter = 1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <StartEncoderTask+0xb0>)
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	f107 0110 	add.w	r1, r7, #16
 8001a76:	2300      	movs	r3, #0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f00c f925 	bl	800dcc8 <osMessageQueuePut>
 8001a7e:	e00d      	b.n	8001a9c <StartEncoderTask+0x78>
			} else if (currCounter < prevCounter){
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	da09      	bge.n	8001a9c <StartEncoderTask+0x78>
				counter = 2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <StartEncoderTask+0xb0>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	f107 0110 	add.w	r1, r7, #16
 8001a94:	2300      	movs	r3, #0
 8001a96:	2200      	movs	r2, #0
 8001a98:	f00c f916 	bl	800dcc8 <osMessageQueuePut>
			}
			else
			{

			}
			prevCounter = currCounter;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if(buttonPressed[buttonNumber]) {
 8001aa0:	7efb      	ldrb	r3, [r7, #27]
 8001aa2:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <StartEncoderTask+0xb4>)
 8001aa4:	5cd3      	ldrb	r3, [r2, r3]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00b      	beq.n	8001ac4 <StartEncoderTask+0xa0>
			buttonPressed[buttonNumber] = 0;
 8001aac:	7efb      	ldrb	r3, [r7, #27]
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <StartEncoderTask+0xb4>)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	54d1      	strb	r1, [r2, r3]
			osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <StartEncoderTask+0xb8>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	f107 010f 	add.w	r1, r7, #15
 8001abc:	2300      	movs	r3, #0
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f00c f902 	bl	800dcc8 <osMessageQueuePut>
		}
		osDelay(500);
 8001ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ac8:	f00c f870 	bl	800dbac <osDelay>
	for (;;) {
 8001acc:	e7b6      	b.n	8001a3c <StartEncoderTask+0x18>
 8001ace:	bf00      	nop
 8001ad0:	200024c0 	.word	0x200024c0
 8001ad4:	2000234c 	.word	0x2000234c
 8001ad8:	20002468 	.word	0x20002468
 8001adc:	20002350 	.word	0x20002350

08001ae0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
 8001af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a3a      	ldr	r2, [pc, #232]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001b00:	f043 0304 	orr.w	r3, r3, #4
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a33      	ldr	r2, [pc, #204]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a2c      	ldr	r2, [pc, #176]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a25      	ldr	r2, [pc, #148]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	211c      	movs	r1, #28
 8001b6a:	4820      	ldr	r0, [pc, #128]	; (8001bec <MX_GPIO_Init+0x10c>)
 8001b6c:	f002 ff98 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DP_INC_Pin|DP_UD_Pin|DP_CS_Pin, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001b76:	481e      	ldr	r0, [pc, #120]	; (8001bf0 <MX_GPIO_Init+0x110>)
 8001b78:	f002 ff92 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4816      	ldr	r0, [pc, #88]	; (8001bec <MX_GPIO_Init+0x10c>)
 8001b92:	f002 fceb 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8001b96:	231c      	movs	r3, #28
 8001b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	480f      	ldr	r0, [pc, #60]	; (8001bec <MX_GPIO_Init+0x10c>)
 8001bae:	f002 fcdd 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DP_INC_Pin|DP_UD_Pin|DP_CS_Pin;
 8001bb2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <MX_GPIO_Init+0x110>)
 8001bcc:	f002 fcce 	bl	800456c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2105      	movs	r1, #5
 8001bd4:	2006      	movs	r0, #6
 8001bd6:	f001 ff4f 	bl	8003a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bda:	2006      	movs	r0, #6
 8001bdc:	f001 ff78 	bl	8003ad0 <HAL_NVIC_EnableIRQ>

}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	; 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	40020400 	.word	0x40020400

08001bf4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001bfa:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <MX_I2C1_Init+0x54>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c00:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <MX_I2C1_Init+0x58>)
 8001c02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_I2C1_Init+0x50>)
 8001c32:	f002 ff7f 	bl	8004b34 <HAL_I2C_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c3c:	f000 f94c 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20002354 	.word	0x20002354
 8001c48:	40005400 	.word	0x40005400
 8001c4c:	000186a0 	.word	0x000186a0

08001c50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <HAL_I2C_MspInit+0x84>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d12b      	bne.n	8001cca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <HAL_I2C_MspInit+0x88>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a17      	ldr	r2, [pc, #92]	; (8001cd8 <HAL_I2C_MspInit+0x88>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_I2C_MspInit+0x88>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c8e:	23c0      	movs	r3, #192	; 0xc0
 8001c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c92:	2312      	movs	r3, #18
 8001c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <HAL_I2C_MspInit+0x8c>)
 8001caa:	f002 fc5f 	bl	800456c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_I2C_MspInit+0x88>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_I2C_MspInit+0x88>)
 8001cb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_I2C_MspInit+0x88>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40005400 	.word	0x40005400
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <pixel>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void pixel(void){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
    ARGB_Init();  // Initialization
 8001ce4:	f7fe ff5c 	bl	8000ba0 <ARGB_Init>

    ARGB_Clear(); // Clear stirp
 8001ce8:	f7fe ffd2 	bl	8000c90 <ARGB_Clear>
    while (ARGB_Show() != ARGB_OK); // Update - Option 1
 8001cec:	bf00      	nop
 8001cee:	f7ff f87d 	bl	8000dec <ARGB_Show>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d1fa      	bne.n	8001cee <pixel+0xe>

    ARGB_SetBrightness(50);  // Set global brightness to 40%
 8001cf8:	2032      	movs	r0, #50	; 0x32
 8001cfa:	f7fe ffd3 	bl	8000ca4 <ARGB_SetBrightness>

    ARGB_FillRGB(25, 0, 100); // Fill all the strip with Red
 8001cfe:	2264      	movs	r2, #100	; 0x64
 8001d00:	2100      	movs	r1, #0
 8001d02:	2019      	movs	r0, #25
 8001d04:	f7ff f850 	bl	8000da8 <ARGB_FillRGB>
    while (!ARGB_Show());
 8001d08:	bf00      	nop
 8001d0a:	f7ff f86f 	bl	8000dec <ARGB_Show>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0fa      	beq.n	8001d0a <pixel+0x2a>
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <Display_Init>:

void Display_Init() {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af04      	add	r7, sp, #16
    ST7735_Init();
 8001d22:	f000 fad3 	bl	80022cc <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f000 fca2 	bl	8002670 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <Display_Init+0x58>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	9202      	str	r2, [sp, #8]
 8001d32:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8001d36:	9201      	str	r2, [sp, #4]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	9200      	str	r2, [sp, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <Display_Init+0x5c>)
 8001d40:	2100      	movs	r1, #0
 8001d42:	200f      	movs	r0, #15
 8001d44:	f000 fb53 	bl	80023ee <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <Display_Init+0x60>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	9202      	str	r2, [sp, #8]
 8001d4e:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8001d52:	9201      	str	r2, [sp, #4]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	9200      	str	r2, [sp, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <Display_Init+0x64>)
 8001d5c:	2119      	movs	r1, #25
 8001d5e:	2022      	movs	r0, #34	; 0x22
 8001d60:	f000 fb45 	bl	80023ee <ST7735_WriteString>
    HAL_Delay(2000);
 8001d64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d68:	f001 f9b6 	bl	80030d8 <HAL_Delay>
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000084 	.word	0x20000084
 8001d78:	08012488 	.word	0x08012488
 8001d7c:	2000007c 	.word	0x2000007c
 8001d80:	08012494 	.word	0x08012494

08001d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d88:	f001 f964 	bl	8003054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d8c:	f000 f828 	bl	8001de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d90:	f7ff fea6 	bl	8001ae0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d94:	f7ff ff2e 	bl	8001bf4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d98:	f000 f934 	bl	8002004 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001d9c:	f000 fe58 	bl	8002a50 <MX_TIM3_Init>
  MX_CRC_Init();
 8001da0:	f7ff fd08 	bl	80017b4 <MX_CRC_Init>
  MX_TIM2_Init();
 8001da4:	f000 fdfc 	bl	80029a0 <MX_TIM2_Init>
  MX_DMA_Init();
 8001da8:	f7ff fd3a 	bl	8001820 <MX_DMA_Init>
  MX_RTC_Init();
 8001dac:	f000 f8a4 	bl	8001ef8 <MX_RTC_Init>
  MX_TIM4_Init();
 8001db0:	f000 fea2 	bl	8002af8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001db4:	f7ff fb9e 	bl	80014f4 <MX_ADC1_Init>
  MX_TIM11_Init();
 8001db8:	f000 ff14 	bl	8002be4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001dbc:	213c      	movs	r1, #60	; 0x3c
 8001dbe:	4807      	ldr	r0, [pc, #28]	; (8001ddc <main+0x58>)
 8001dc0:	f006 fe58 	bl	8008a74 <HAL_TIM_Encoder_Start>
  pixel();
 8001dc4:	f7ff ff8c 	bl	8001ce0 <pixel>
  Display_Init();
 8001dc8:	f7ff ffa8 	bl	8001d1c <Display_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001dcc:	f00b fe12 	bl	800d9f4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001dd0:	f7ff fd64 	bl	800189c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001dd4:	f00b fe32 	bl	800da3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <main+0x54>
 8001dda:	bf00      	nop
 8001ddc:	200024c0 	.word	0x200024c0

08001de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b094      	sub	sp, #80	; 0x50
 8001de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de6:	f107 0320 	add.w	r3, r7, #32
 8001dea:	2230      	movs	r2, #48	; 0x30
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f00f fdec 	bl	80119cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	4b28      	ldr	r3, [pc, #160]	; (8001eac <SystemClock_Config+0xcc>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	4a27      	ldr	r2, [pc, #156]	; (8001eac <SystemClock_Config+0xcc>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6413      	str	r3, [r2, #64]	; 0x40
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <SystemClock_Config+0xcc>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <SystemClock_Config+0xd0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <SystemClock_Config+0xd0>)
 8001e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <SystemClock_Config+0xd0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e46:	2301      	movs	r3, #1
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e54:	2319      	movs	r3, #25
 8001e56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001e58:	23c0      	movs	r3, #192	; 0xc0
 8001e5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e60:	2304      	movs	r3, #4
 8001e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e64:	f107 0320 	add.w	r3, r7, #32
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 fab7 	bl	80063dc <HAL_RCC_OscConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e74:	f000 f830 	bl	8001ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e78:	230f      	movs	r3, #15
 8001e7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	2101      	movs	r1, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 fdc9 	bl	8006a2c <HAL_RCC_ClockConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ea0:	f000 f81a 	bl	8001ed8 <Error_Handler>
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3750      	adds	r7, #80	; 0x50
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000

08001eb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ec6:	f001 f8e7 	bl	8003098 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40010000 	.word	0x40010000

08001ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
}
 8001ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <Error_Handler+0x8>

08001ee2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <MX_RTC_Init+0xac>)
 8001f12:	4a25      	ldr	r2, [pc, #148]	; (8001fa8 <MX_RTC_Init+0xb0>)
 8001f14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <MX_RTC_Init+0xac>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f1c:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <MX_RTC_Init+0xac>)
 8001f1e:	227f      	movs	r2, #127	; 0x7f
 8001f20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <MX_RTC_Init+0xac>)
 8001f24:	22ff      	movs	r2, #255	; 0xff
 8001f26:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f28:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <MX_RTC_Init+0xac>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <MX_RTC_Init+0xac>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <MX_RTC_Init+0xac>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f3a:	481a      	ldr	r0, [pc, #104]	; (8001fa4 <MX_RTC_Init+0xac>)
 8001f3c:	f005 fa46 	bl	80073cc <HAL_RTC_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001f46:	f7ff ffc7 	bl	8001ed8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2200      	movs	r2, #0
 8001f62:	4619      	mov	r1, r3
 8001f64:	480f      	ldr	r0, [pc, #60]	; (8001fa4 <MX_RTC_Init+0xac>)
 8001f66:	f005 fb09 	bl	800757c <HAL_RTC_SetTime>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001f70:	f7ff ffb2 	bl	8001ed8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001f74:	2305      	movs	r3, #5
 8001f76:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001f78:	2305      	movs	r3, #5
 8001f7a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8001f80:	2316      	movs	r3, #22
 8001f82:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f84:	463b      	mov	r3, r7
 8001f86:	2200      	movs	r2, #0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4806      	ldr	r0, [pc, #24]	; (8001fa4 <MX_RTC_Init+0xac>)
 8001f8c:	f005 fc3e 	bl	800780c <HAL_RTC_SetDate>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001f96:	f7ff ff9f 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200023a8 	.word	0x200023a8
 8001fa8:	40002800 	.word	0x40002800

08001fac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb4:	f107 0308 	add.w	r3, r7, #8
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
 8001fc4:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <HAL_RTC_MspInit+0x50>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d111      	bne.n	8001ff4 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 ffde 	bl	8006fa0 <HAL_RCCEx_PeriphCLKConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001fea:	f7ff ff75 	bl	8001ed8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <HAL_RTC_MspInit+0x54>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40002800 	.word	0x40002800
 8002000:	42470e3c 	.word	0x42470e3c

08002004 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <MX_SPI1_Init+0x64>)
 800200a:	4a18      	ldr	r2, [pc, #96]	; (800206c <MX_SPI1_Init+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <MX_SPI1_Init+0x64>)
 8002010:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002014:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <MX_SPI1_Init+0x64>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <MX_SPI1_Init+0x64>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <MX_SPI1_Init+0x64>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <MX_SPI1_Init+0x64>)
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <MX_SPI1_Init+0x64>)
 8002030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002034:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <MX_SPI1_Init+0x64>)
 8002038:	2200      	movs	r2, #0
 800203a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800203c:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <MX_SPI1_Init+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <MX_SPI1_Init+0x64>)
 8002044:	2200      	movs	r2, #0
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <MX_SPI1_Init+0x64>)
 800204a:	2200      	movs	r2, #0
 800204c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <MX_SPI1_Init+0x64>)
 8002050:	220a      	movs	r2, #10
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002054:	4804      	ldr	r0, [pc, #16]	; (8002068 <MX_SPI1_Init+0x64>)
 8002056:	f005 fda3 	bl	8007ba0 <HAL_SPI_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002060:	f7ff ff3a 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200023c8 	.word	0x200023c8
 800206c:	40013000 	.word	0x40013000

08002070 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a19      	ldr	r2, [pc, #100]	; (80020f4 <HAL_SPI_MspInit+0x84>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d12b      	bne.n	80020ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_SPI_MspInit+0x88>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <HAL_SPI_MspInit+0x88>)
 800209c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_SPI_MspInit+0x88>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_SPI_MspInit+0x88>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_SPI_MspInit+0x88>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_SPI_MspInit+0x88>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80020ca:	23a0      	movs	r3, #160	; 0xa0
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020da:	2305      	movs	r3, #5
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	4805      	ldr	r0, [pc, #20]	; (80020fc <HAL_SPI_MspInit+0x8c>)
 80020e6:	f002 fa41 	bl	800456c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80020ea:	bf00      	nop
 80020ec:	3728      	adds	r7, #40	; 0x28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40013000 	.word	0x40013000
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000

08002100 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	2110      	movs	r1, #16
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <ST7735_Select+0x14>)
 800210a:	f002 fcc9 	bl	8004aa0 <HAL_GPIO_WritePin>
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40020000 	.word	0x40020000

08002118 <ST7735_Unselect>:

void ST7735_Unselect() {
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800211c:	2201      	movs	r2, #1
 800211e:	2110      	movs	r1, #16
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <ST7735_Unselect+0x14>)
 8002122:	f002 fcbd 	bl	8004aa0 <HAL_GPIO_WritePin>
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40020000 	.word	0x40020000

08002130 <ST7735_Reset>:

static void ST7735_Reset() {
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002134:	2200      	movs	r2, #0
 8002136:	2108      	movs	r1, #8
 8002138:	4806      	ldr	r0, [pc, #24]	; (8002154 <ST7735_Reset+0x24>)
 800213a:	f002 fcb1 	bl	8004aa0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800213e:	2005      	movs	r0, #5
 8002140:	f000 ffca 	bl	80030d8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002144:	2201      	movs	r2, #1
 8002146:	2108      	movs	r1, #8
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <ST7735_Reset+0x24>)
 800214a:	f002 fca9 	bl	8004aa0 <HAL_GPIO_WritePin>
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40020000 	.word	0x40020000

08002158 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	2104      	movs	r1, #4
 8002166:	4807      	ldr	r0, [pc, #28]	; (8002184 <ST7735_WriteCommand+0x2c>)
 8002168:	f002 fc9a 	bl	8004aa0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800216c:	1df9      	adds	r1, r7, #7
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	2201      	movs	r2, #1
 8002174:	4804      	ldr	r0, [pc, #16]	; (8002188 <ST7735_WriteCommand+0x30>)
 8002176:	f005 feaf 	bl	8007ed8 <HAL_SPI_Transmit>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40020000 	.word	0x40020000
 8002188:	200023c8 	.word	0x200023c8

0800218c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002196:	2201      	movs	r2, #1
 8002198:	2104      	movs	r1, #4
 800219a:	4807      	ldr	r0, [pc, #28]	; (80021b8 <ST7735_WriteData+0x2c>)
 800219c:	f002 fc80 	bl	8004aa0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4804      	ldr	r0, [pc, #16]	; (80021bc <ST7735_WriteData+0x30>)
 80021ac:	f005 fe94 	bl	8007ed8 <HAL_SPI_Transmit>
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40020000 	.word	0x40020000
 80021bc:	200023c8 	.word	0x200023c8

080021c0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80021d2:	e034      	b.n	800223e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80021de:	7afb      	ldrb	r3, [r7, #11]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ffb9 	bl	8002158 <ST7735_WriteCommand>

        numArgs = *addr++;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80021f0:	7abb      	ldrb	r3, [r7, #10]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f8:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80021fa:	7abb      	ldrb	r3, [r7, #10]
 80021fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002200:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002202:	7abb      	ldrb	r3, [r7, #10]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002208:	7abb      	ldrb	r3, [r7, #10]
 800220a:	4619      	mov	r1, r3
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ffbd 	bl	800218c <ST7735_WriteData>
            addr += numArgs;
 8002212:	7abb      	ldrb	r3, [r7, #10]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800221a:	89bb      	ldrh	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00e      	beq.n	800223e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800222a:	89bb      	ldrh	r3, [r7, #12]
 800222c:	2bff      	cmp	r3, #255	; 0xff
 800222e:	d102      	bne.n	8002236 <ST7735_ExecuteCommandList+0x76>
 8002230:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002234:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002236:	89bb      	ldrh	r3, [r7, #12]
 8002238:	4618      	mov	r0, r3
 800223a:	f000 ff4d 	bl	80030d8 <HAL_Delay>
    while(numCommands--) {
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	1e5a      	subs	r2, r3, #1
 8002242:	73fa      	strb	r2, [r7, #15]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1c5      	bne.n	80021d4 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002252:	b590      	push	{r4, r7, lr}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	4604      	mov	r4, r0
 800225a:	4608      	mov	r0, r1
 800225c:	4611      	mov	r1, r2
 800225e:	461a      	mov	r2, r3
 8002260:	4623      	mov	r3, r4
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	4603      	mov	r3, r0
 8002266:	71bb      	strb	r3, [r7, #6]
 8002268:	460b      	mov	r3, r1
 800226a:	717b      	strb	r3, [r7, #5]
 800226c:	4613      	mov	r3, r2
 800226e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002270:	202a      	movs	r0, #42	; 0x2a
 8002272:	f7ff ff71 	bl	8002158 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002276:	2300      	movs	r3, #0
 8002278:	733b      	strb	r3, [r7, #12]
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	3301      	adds	r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	737b      	strb	r3, [r7, #13]
 8002282:	2300      	movs	r3, #0
 8002284:	73bb      	strb	r3, [r7, #14]
 8002286:	797b      	ldrb	r3, [r7, #5]
 8002288:	3301      	adds	r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800228e:	f107 030c 	add.w	r3, r7, #12
 8002292:	2104      	movs	r1, #4
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff79 	bl	800218c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800229a:	202b      	movs	r0, #43	; 0x2b
 800229c:	f7ff ff5c 	bl	8002158 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80022a0:	79bb      	ldrb	r3, [r7, #6]
 80022a2:	331a      	adds	r3, #26
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80022a8:	793b      	ldrb	r3, [r7, #4]
 80022aa:	331a      	adds	r3, #26
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	2104      	movs	r1, #4
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ff68 	bl	800218c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80022bc:	202c      	movs	r0, #44	; 0x2c
 80022be:	f7ff ff4b 	bl	8002158 <ST7735_WriteCommand>
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd90      	pop	{r4, r7, pc}
	...

080022cc <ST7735_Init>:

void ST7735_Init() {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
    ST7735_Select();
 80022d0:	f7ff ff16 	bl	8002100 <ST7735_Select>
    ST7735_Reset();
 80022d4:	f7ff ff2c 	bl	8002130 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80022d8:	4806      	ldr	r0, [pc, #24]	; (80022f4 <ST7735_Init+0x28>)
 80022da:	f7ff ff71 	bl	80021c0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <ST7735_Init+0x2c>)
 80022e0:	f7ff ff6e 	bl	80021c0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <ST7735_Init+0x30>)
 80022e6:	f7ff ff6b 	bl	80021c0 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80022ea:	f7ff ff15 	bl	8002118 <ST7735_Unselect>
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	08014954 	.word	0x08014954
 80022f8:	08014990 	.word	0x08014990
 80022fc:	080149a0 	.word	0x080149a0

08002300 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002300:	b082      	sub	sp, #8
 8002302:	b590      	push	{r4, r7, lr}
 8002304:	b089      	sub	sp, #36	; 0x24
 8002306:	af00      	add	r7, sp, #0
 8002308:	637b      	str	r3, [r7, #52]	; 0x34
 800230a:	4603      	mov	r3, r0
 800230c:	80fb      	strh	r3, [r7, #6]
 800230e:	460b      	mov	r3, r1
 8002310:	80bb      	strh	r3, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	b2d8      	uxtb	r0, r3
 800231a:	88bb      	ldrh	r3, [r7, #4]
 800231c:	b2d9      	uxtb	r1, r3
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002326:	4413      	add	r3, r2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b2dc      	uxtb	r4, r3
 800232e:	88bb      	ldrh	r3, [r7, #4]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002336:	4413      	add	r3, r2
 8002338:	b2db      	uxtb	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	4622      	mov	r2, r4
 8002340:	f7ff ff87 	bl	8002252 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	e043      	b.n	80023d2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800234a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	3b20      	subs	r3, #32
 8002350:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4619      	mov	r1, r3
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	440b      	add	r3, r1
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	e029      	b.n	80023c0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00e      	beq.n	800239a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800237c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b29b      	uxth	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	743b      	strb	r3, [r7, #16]
 8002386:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002388:	b2db      	uxtb	r3, r3
 800238a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	2102      	movs	r1, #2
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fefa 	bl	800218c <ST7735_WriteData>
 8002398:	e00f      	b.n	80023ba <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800239a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	733b      	strb	r3, [r7, #12]
 80023a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	2102      	movs	r1, #2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fee9 	bl	800218c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	3301      	adds	r3, #1
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023c4:	461a      	mov	r2, r3
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d3cf      	bcc.n	800236c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	3301      	adds	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023d6:	461a      	mov	r2, r3
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	4293      	cmp	r3, r2
 80023dc:	d3b5      	bcc.n	800234a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	3724      	adds	r7, #36	; 0x24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80023ea:	b002      	add	sp, #8
 80023ec:	4770      	bx	lr

080023ee <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80023ee:	b082      	sub	sp, #8
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af04      	add	r7, sp, #16
 80023f6:	603a      	str	r2, [r7, #0]
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	4603      	mov	r3, r0
 80023fc:	80fb      	strh	r3, [r7, #6]
 80023fe:	460b      	mov	r3, r1
 8002400:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002402:	f7ff fe7d 	bl	8002100 <ST7735_Select>

    while(*str) {
 8002406:	e02d      	b.n	8002464 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	7d3a      	ldrb	r2, [r7, #20]
 800240c:	4413      	add	r3, r2
 800240e:	2b9f      	cmp	r3, #159	; 0x9f
 8002410:	dd13      	ble.n	800243a <ST7735_WriteString+0x4c>
            x = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002416:	7d7b      	ldrb	r3, [r7, #21]
 8002418:	b29a      	uxth	r2, r3
 800241a:	88bb      	ldrh	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002420:	88bb      	ldrh	r3, [r7, #4]
 8002422:	7d7a      	ldrb	r2, [r7, #21]
 8002424:	4413      	add	r3, r2
 8002426:	2b4f      	cmp	r3, #79	; 0x4f
 8002428:	dc21      	bgt.n	800246e <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b20      	cmp	r3, #32
 8002430:	d103      	bne.n	800243a <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	3301      	adds	r3, #1
 8002436:	603b      	str	r3, [r7, #0]
                continue;
 8002438:	e014      	b.n	8002464 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	88b9      	ldrh	r1, [r7, #4]
 8002440:	88f8      	ldrh	r0, [r7, #6]
 8002442:	8c3b      	ldrh	r3, [r7, #32]
 8002444:	9302      	str	r3, [sp, #8]
 8002446:	8bbb      	ldrh	r3, [r7, #28]
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f7ff ff56 	bl	8002300 <ST7735_WriteChar>
        x += font.width;
 8002454:	7d3b      	ldrb	r3, [r7, #20]
 8002456:	b29a      	uxth	r2, r3
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	4413      	add	r3, r2
 800245c:	80fb      	strh	r3, [r7, #6]
        str++;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1cd      	bne.n	8002408 <ST7735_WriteString+0x1a>
 800246c:	e000      	b.n	8002470 <ST7735_WriteString+0x82>
                break;
 800246e:	bf00      	nop
    }

    ST7735_Unselect();
 8002470:	f7ff fe52 	bl	8002118 <ST7735_Unselect>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800247e:	b002      	add	sp, #8
 8002480:	4770      	bx	lr
	...

08002484 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	4604      	mov	r4, r0
 800248c:	4608      	mov	r0, r1
 800248e:	4611      	mov	r1, r2
 8002490:	461a      	mov	r2, r3
 8002492:	4623      	mov	r3, r4
 8002494:	80fb      	strh	r3, [r7, #6]
 8002496:	4603      	mov	r3, r0
 8002498:	80bb      	strh	r3, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	807b      	strh	r3, [r7, #2]
 800249e:	4613      	mov	r3, r2
 80024a0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	2b9f      	cmp	r3, #159	; 0x9f
 80024a6:	d857      	bhi.n	8002558 <ST7735_FillRectangle+0xd4>
 80024a8:	88bb      	ldrh	r3, [r7, #4]
 80024aa:	2b4f      	cmp	r3, #79	; 0x4f
 80024ac:	d854      	bhi.n	8002558 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80024ae:	88fa      	ldrh	r2, [r7, #6]
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	4413      	add	r3, r2
 80024b4:	2ba0      	cmp	r3, #160	; 0xa0
 80024b6:	dd03      	ble.n	80024c0 <ST7735_FillRectangle+0x3c>
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80024be:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80024c0:	88ba      	ldrh	r2, [r7, #4]
 80024c2:	883b      	ldrh	r3, [r7, #0]
 80024c4:	4413      	add	r3, r2
 80024c6:	2b50      	cmp	r3, #80	; 0x50
 80024c8:	dd03      	ble.n	80024d2 <ST7735_FillRectangle+0x4e>
 80024ca:	88bb      	ldrh	r3, [r7, #4]
 80024cc:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80024d0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80024d2:	f7ff fe15 	bl	8002100 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	b2d8      	uxtb	r0, r3
 80024da:	88bb      	ldrh	r3, [r7, #4]
 80024dc:	b2d9      	uxtb	r1, r3
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	887b      	ldrh	r3, [r7, #2]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b2dc      	uxtb	r4, r3
 80024ee:	88bb      	ldrh	r3, [r7, #4]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	883b      	ldrh	r3, [r7, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	4622      	mov	r2, r4
 8002500:	f7ff fea7 	bl	8002252 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002504:	8c3b      	ldrh	r3, [r7, #32]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	b29b      	uxth	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	733b      	strb	r3, [r7, #12]
 800250e:	8c3b      	ldrh	r3, [r7, #32]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002514:	2201      	movs	r2, #1
 8002516:	2104      	movs	r1, #4
 8002518:	4811      	ldr	r0, [pc, #68]	; (8002560 <ST7735_FillRectangle+0xdc>)
 800251a:	f002 fac1 	bl	8004aa0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800251e:	883b      	ldrh	r3, [r7, #0]
 8002520:	80bb      	strh	r3, [r7, #4]
 8002522:	e013      	b.n	800254c <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8002524:	887b      	ldrh	r3, [r7, #2]
 8002526:	80fb      	strh	r3, [r7, #6]
 8002528:	e00a      	b.n	8002540 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800252a:	f107 010c 	add.w	r1, r7, #12
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	2202      	movs	r2, #2
 8002534:	480b      	ldr	r0, [pc, #44]	; (8002564 <ST7735_FillRectangle+0xe0>)
 8002536:	f005 fccf 	bl	8007ed8 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	3b01      	subs	r3, #1
 800253e:	80fb      	strh	r3, [r7, #6]
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f1      	bne.n	800252a <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8002546:	88bb      	ldrh	r3, [r7, #4]
 8002548:	3b01      	subs	r3, #1
 800254a:	80bb      	strh	r3, [r7, #4]
 800254c:	88bb      	ldrh	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e8      	bne.n	8002524 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8002552:	f7ff fde1 	bl	8002118 <ST7735_Unselect>
 8002556:	e000      	b.n	800255a <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002558:	bf00      	nop
}
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bd90      	pop	{r4, r7, pc}
 8002560:	40020000 	.word	0x40020000
 8002564:	200023c8 	.word	0x200023c8

08002568 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	4604      	mov	r4, r0
 8002570:	4608      	mov	r0, r1
 8002572:	4611      	mov	r1, r2
 8002574:	461a      	mov	r2, r3
 8002576:	4623      	mov	r3, r4
 8002578:	80fb      	strh	r3, [r7, #6]
 800257a:	4603      	mov	r3, r0
 800257c:	80bb      	strh	r3, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	807b      	strh	r3, [r7, #2]
 8002582:	4613      	mov	r3, r2
 8002584:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	2b9f      	cmp	r3, #159	; 0x9f
 800258a:	d869      	bhi.n	8002660 <ST7735_FillRectangleFast+0xf8>
 800258c:	88bb      	ldrh	r3, [r7, #4]
 800258e:	2b4f      	cmp	r3, #79	; 0x4f
 8002590:	d866      	bhi.n	8002660 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002592:	88fa      	ldrh	r2, [r7, #6]
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	4413      	add	r3, r2
 8002598:	2ba0      	cmp	r3, #160	; 0xa0
 800259a:	dd03      	ble.n	80025a4 <ST7735_FillRectangleFast+0x3c>
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80025a2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80025a4:	88ba      	ldrh	r2, [r7, #4]
 80025a6:	883b      	ldrh	r3, [r7, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	2b50      	cmp	r3, #80	; 0x50
 80025ac:	dd03      	ble.n	80025b6 <ST7735_FillRectangleFast+0x4e>
 80025ae:	88bb      	ldrh	r3, [r7, #4]
 80025b0:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80025b4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80025b6:	f7ff fda3 	bl	8002100 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	b2d8      	uxtb	r0, r3
 80025be:	88bb      	ldrh	r3, [r7, #4]
 80025c0:	b2d9      	uxtb	r1, r3
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b2dc      	uxtb	r4, r3
 80025d2:	88bb      	ldrh	r3, [r7, #4]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	883b      	ldrh	r3, [r7, #0]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	4413      	add	r3, r2
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	4622      	mov	r2, r4
 80025e4:	f7ff fe35 	bl	8002252 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 80025e8:	8c3b      	ldrh	r3, [r7, #32]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	723b      	strb	r3, [r7, #8]
 80025f2:	8c3b      	ldrh	r3, [r7, #32]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4618      	mov	r0, r3
 80025fe:	f00f f9c7 	bl	8011990 <malloc>
 8002602:	4603      	mov	r3, r0
 8002604:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8002606:	2300      	movs	r3, #0
 8002608:	80fb      	strh	r3, [r7, #6]
 800260a:	e008      	b.n	800261e <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	893a      	ldrh	r2, [r7, #8]
 8002616:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	3301      	adds	r3, #1
 800261c:	80fb      	strh	r3, [r7, #6]
 800261e:	88fa      	ldrh	r2, [r7, #6]
 8002620:	887b      	ldrh	r3, [r7, #2]
 8002622:	429a      	cmp	r2, r3
 8002624:	d3f2      	bcc.n	800260c <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002626:	2201      	movs	r2, #1
 8002628:	2104      	movs	r1, #4
 800262a:	480f      	ldr	r0, [pc, #60]	; (8002668 <ST7735_FillRectangleFast+0x100>)
 800262c:	f002 fa38 	bl	8004aa0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8002630:	883b      	ldrh	r3, [r7, #0]
 8002632:	80bb      	strh	r3, [r7, #4]
 8002634:	e00b      	b.n	800264e <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	f04f 33ff 	mov.w	r3, #4294967295
 8002640:	68f9      	ldr	r1, [r7, #12]
 8002642:	480a      	ldr	r0, [pc, #40]	; (800266c <ST7735_FillRectangleFast+0x104>)
 8002644:	f005 fc48 	bl	8007ed8 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8002648:	88bb      	ldrh	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	80bb      	strh	r3, [r7, #4]
 800264e:	88bb      	ldrh	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <ST7735_FillRectangleFast+0xce>

    free(line);
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f00f f9a3 	bl	80119a0 <free>
    ST7735_Unselect();
 800265a:	f7ff fd5d 	bl	8002118 <ST7735_Unselect>
 800265e:	e000      	b.n	8002662 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002660:	bf00      	nop
}
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bd90      	pop	{r4, r7, pc}
 8002668:	40020000 	.word	0x40020000
 800266c:	200023c8 	.word	0x200023c8

08002670 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af02      	add	r7, sp, #8
 8002676:	4603      	mov	r3, r0
 8002678:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2350      	movs	r3, #80	; 0x50
 8002680:	22a0      	movs	r2, #160	; 0xa0
 8002682:	2100      	movs	r1, #0
 8002684:	2000      	movs	r0, #0
 8002686:	f7ff fefd 	bl	8002484 <ST7735_FillRectangle>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af02      	add	r7, sp, #8
 8002698:	4603      	mov	r3, r0
 800269a:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	2350      	movs	r3, #80	; 0x50
 80026a2:	22a0      	movs	r2, #160	; 0xa0
 80026a4:	2100      	movs	r1, #0
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7ff ff5e 	bl	8002568 <ST7735_FillRectangleFast>
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <HAL_MspInit+0x74>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a19      	ldr	r2, [pc, #100]	; (8002728 <HAL_MspInit+0x74>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b17      	ldr	r3, [pc, #92]	; (8002728 <HAL_MspInit+0x74>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_MspInit+0x74>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <HAL_MspInit+0x74>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_MspInit+0x74>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	210f      	movs	r1, #15
 80026f6:	f06f 0001 	mvn.w	r0, #1
 80026fa:	f001 f9bd 	bl	8003a78 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2105      	movs	r1, #5
 8002702:	2005      	movs	r0, #5
 8002704:	f001 f9b8 	bl	8003a78 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002708:	2005      	movs	r0, #5
 800270a:	f001 f9e1 	bl	8003ad0 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800270e:	2200      	movs	r2, #0
 8002710:	2105      	movs	r1, #5
 8002712:	2005      	movs	r0, #5
 8002714:	f001 f9b0 	bl	8003a78 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002718:	2005      	movs	r0, #5
 800271a:	f001 f9d9 	bl	8003ad0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800

0800272c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	; 0x30
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800273c:	2200      	movs	r2, #0
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	2019      	movs	r0, #25
 8002742:	f001 f999 	bl	8003a78 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002746:	2019      	movs	r0, #25
 8002748:	f001 f9c2 	bl	8003ad0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <HAL_InitTick+0xa0>)
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <HAL_InitTick+0xa0>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6453      	str	r3, [r2, #68]	; 0x44
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_InitTick+0xa0>)
 800275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002768:	f107 0210 	add.w	r2, r7, #16
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f004 fbe2 	bl	8006f3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002778:	f004 fbcc 	bl	8006f14 <HAL_RCC_GetPCLK2Freq>
 800277c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <HAL_InitTick+0xa4>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0c9b      	lsrs	r3, r3, #18
 8002788:	3b01      	subs	r3, #1
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_InitTick+0xa8>)
 800278e:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <HAL_InitTick+0xac>)
 8002790:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_InitTick+0xa8>)
 8002794:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002798:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800279a:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <HAL_InitTick+0xa8>)
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <HAL_InitTick+0xa8>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_InitTick+0xa8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80027ac:	4809      	ldr	r0, [pc, #36]	; (80027d4 <HAL_InitTick+0xa8>)
 80027ae:	f005 fda9 	bl	8008304 <HAL_TIM_Base_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d104      	bne.n	80027c2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80027b8:	4806      	ldr	r0, [pc, #24]	; (80027d4 <HAL_InitTick+0xa8>)
 80027ba:	f005 fe69 	bl	8008490 <HAL_TIM_Base_Start_IT>
 80027be:	4603      	mov	r3, r0
 80027c0:	e000      	b.n	80027c4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3730      	adds	r7, #48	; 0x30
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40023800 	.word	0x40023800
 80027d0:	431bde83 	.word	0x431bde83
 80027d4:	20002420 	.word	0x20002420
 80027d8:	40010000 	.word	0x40010000

080027dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <NMI_Handler+0x4>

080027e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e6:	e7fe      	b.n	80027e6 <HardFault_Handler+0x4>

080027e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <MemManage_Handler+0x4>

080027ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <BusFault_Handler+0x4>

080027f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <UsageFault_Handler+0x4>

080027fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 800281a:	2001      	movs	r0, #1
 800281c:	f002 f972 	bl	8004b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}

08002824 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800282a:	f006 f9e1 	bl	8008bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20002420 	.word	0x20002420

08002838 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <TIM2_IRQHandler+0x10>)
 800283e:	f006 f9d7 	bl	8008bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20002478 	.word	0x20002478

0800284c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002850:	4808      	ldr	r0, [pc, #32]	; (8002874 <TIM3_IRQHandler+0x28>)
 8002852:	f006 f9cd 	bl	8008bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <TIM3_IRQHandler+0x2c>)
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <TIM3_IRQHandler+0x2c>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	4a04      	ldr	r2, [pc, #16]	; (8002878 <TIM3_IRQHandler+0x2c>)
 8002868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800286c:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200024c0 	.word	0x200024c0
 8002878:	40000400 	.word	0x40000400

0800287c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <TIM4_IRQHandler+0x10>)
 8002882:	f006 f9b5 	bl	8008bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20002508 	.word	0x20002508

08002890 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002894:	4802      	ldr	r0, [pc, #8]	; (80028a0 <DMA1_Stream7_IRQHandler+0x10>)
 8002896:	f001 fbff 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20002598 	.word	0x20002598

080028a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80028a8:	4802      	ldr	r0, [pc, #8]	; (80028b4 <OTG_FS_IRQHandler+0x10>)
 80028aa:	f002 fc6a 	bl	8005182 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2001d908 	.word	0x2001d908

080028b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 80028c2:	23ff      	movs	r3, #255	; 0xff
 80028c4:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 80028d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db11      	blt.n	80028fc <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 80028d8:	f000 fbf2 	bl	80030c0 <HAL_GetTick>
 80028dc:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_GPIO_EXTI_Callback+0x50>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b63      	cmp	r3, #99	; 0x63
 80028e8:	d90a      	bls.n	8002900 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 80028ea:	4a07      	ldr	r2, [pc, #28]	; (8002908 <HAL_GPIO_EXTI_Callback+0x50>)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 80028f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f4:	4a05      	ldr	r2, [pc, #20]	; (800290c <HAL_GPIO_EXTI_Callback+0x54>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	54d1      	strb	r1, [r2, r3]
 80028fa:	e002      	b.n	8002902 <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 80028fc:	bf00      	nop
 80028fe:	e000      	b.n	8002902 <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 8002900:	bf00      	nop
}
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20002470 	.word	0x20002470
 800290c:	20002468 	.word	0x20002468

08002910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <_sbrk+0x5c>)
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <_sbrk+0x60>)
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <_sbrk+0x64>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <_sbrk+0x64>)
 800292e:	4a12      	ldr	r2, [pc, #72]	; (8002978 <_sbrk+0x68>)
 8002930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	429a      	cmp	r2, r3
 800293e:	d207      	bcs.n	8002950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002940:	f00e fffc 	bl	801193c <__errno>
 8002944:	4603      	mov	r3, r0
 8002946:	220c      	movs	r2, #12
 8002948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	e009      	b.n	8002964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <_sbrk+0x64>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <_sbrk+0x64>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	4a05      	ldr	r2, [pc, #20]	; (8002974 <_sbrk+0x64>)
 8002960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20020000 	.word	0x20020000
 8002970:	00000800 	.word	0x00000800
 8002974:	20002474 	.word	0x20002474
 8002978:	2001e040 	.word	0x2001e040

0800297c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <SystemInit+0x20>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	4a05      	ldr	r2, [pc, #20]	; (800299c <SystemInit+0x20>)
 8002988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800298c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a6:	f107 0320 	add.w	r3, r7, #32
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	60da      	str	r2, [r3, #12]
 80029bc:	611a      	str	r2, [r3, #16]
 80029be:	615a      	str	r2, [r3, #20]
 80029c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <MX_TIM2_Init+0xac>)
 80029c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <MX_TIM2_Init+0xac>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d0:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <MX_TIM2_Init+0xac>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <MX_TIM2_Init+0xac>)
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <MX_TIM2_Init+0xac>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <MX_TIM2_Init+0xac>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029ea:	4818      	ldr	r0, [pc, #96]	; (8002a4c <MX_TIM2_Init+0xac>)
 80029ec:	f005 fde2 	bl	80085b4 <HAL_TIM_PWM_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80029f6:	f7ff fa6f 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a02:	f107 0320 	add.w	r3, r7, #32
 8002a06:	4619      	mov	r1, r3
 8002a08:	4810      	ldr	r0, [pc, #64]	; (8002a4c <MX_TIM2_Init+0xac>)
 8002a0a:	f007 fac7 	bl	8009f9c <HAL_TIMEx_MasterConfigSynchronization>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002a14:	f7ff fa60 	bl	8001ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a18:	2360      	movs	r3, #96	; 0x60
 8002a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4807      	ldr	r0, [pc, #28]	; (8002a4c <MX_TIM2_Init+0xac>)
 8002a30:	f006 f9e6 	bl	8008e00 <HAL_TIM_PWM_ConfigChannel>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002a3a:	f7ff fa4d 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a3e:	4803      	ldr	r0, [pc, #12]	; (8002a4c <MX_TIM2_Init+0xac>)
 8002a40:	f000 f9fc 	bl	8002e3c <HAL_TIM_MspPostInit>

}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	; 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20002478 	.word	0x20002478

08002a50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08c      	sub	sp, #48	; 0x30
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a56:	f107 030c 	add.w	r3, r7, #12
 8002a5a:	2224      	movs	r2, #36	; 0x24
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f00e ffb4 	bl	80119cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a6c:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <MX_TIM3_Init+0xa0>)
 8002a6e:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <MX_TIM3_Init+0xa4>)
 8002a70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a72:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <MX_TIM3_Init+0xa0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <MX_TIM3_Init+0xa0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <MX_TIM3_Init+0xa0>)
 8002a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <MX_TIM3_Init+0xa0>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <MX_TIM3_Init+0xa0>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a92:	2301      	movs	r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 8002aa2:	2306      	movs	r3, #6
 8002aa4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8002ab2:	2306      	movs	r3, #6
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002ab6:	f107 030c 	add.w	r3, r7, #12
 8002aba:	4619      	mov	r1, r3
 8002abc:	480c      	ldr	r0, [pc, #48]	; (8002af0 <MX_TIM3_Init+0xa0>)
 8002abe:	f005 fe3f 	bl	8008740 <HAL_TIM_Encoder_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002ac8:	f7ff fa06 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002acc:	2300      	movs	r3, #0
 8002ace:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <MX_TIM3_Init+0xa0>)
 8002ada:	f007 fa5f 	bl	8009f9c <HAL_TIMEx_MasterConfigSynchronization>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002ae4:	f7ff f9f8 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ae8:	bf00      	nop
 8002aea:	3730      	adds	r7, #48	; 0x30
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	200024c0 	.word	0x200024c0
 8002af4:	40000400 	.word	0x40000400

08002af8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08e      	sub	sp, #56	; 0x38
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b0c:	f107 0320 	add.w	r3, r7, #32
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
 8002b24:	615a      	str	r2, [r3, #20]
 8002b26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b28:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <MX_TIM4_Init+0xe4>)
 8002b2a:	4a2d      	ldr	r2, [pc, #180]	; (8002be0 <MX_TIM4_Init+0xe8>)
 8002b2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b2e:	4b2b      	ldr	r3, [pc, #172]	; (8002bdc <MX_TIM4_Init+0xe4>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b34:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <MX_TIM4_Init+0xe4>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 8002b3a:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <MX_TIM4_Init+0xe4>)
 8002b3c:	223c      	movs	r2, #60	; 0x3c
 8002b3e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b40:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <MX_TIM4_Init+0xe4>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b46:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <MX_TIM4_Init+0xe4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b4c:	4823      	ldr	r0, [pc, #140]	; (8002bdc <MX_TIM4_Init+0xe4>)
 8002b4e:	f005 fbd9 	bl	8008304 <HAL_TIM_Base_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002b58:	f7ff f9be 	bl	8001ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b66:	4619      	mov	r1, r3
 8002b68:	481c      	ldr	r0, [pc, #112]	; (8002bdc <MX_TIM4_Init+0xe4>)
 8002b6a:	f006 faef 	bl	800914c <HAL_TIM_ConfigClockSource>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002b74:	f7ff f9b0 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b78:	4818      	ldr	r0, [pc, #96]	; (8002bdc <MX_TIM4_Init+0xe4>)
 8002b7a:	f005 fd1b 	bl	80085b4 <HAL_TIM_PWM_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002b84:	f7ff f9a8 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b90:	f107 0320 	add.w	r3, r7, #32
 8002b94:	4619      	mov	r1, r3
 8002b96:	4811      	ldr	r0, [pc, #68]	; (8002bdc <MX_TIM4_Init+0xe4>)
 8002b98:	f007 fa00 	bl	8009f9c <HAL_TIMEx_MasterConfigSynchronization>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002ba2:	f7ff f999 	bl	8001ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ba6:	2360      	movs	r3, #96	; 0x60
 8002ba8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bb6:	1d3b      	adds	r3, r7, #4
 8002bb8:	2208      	movs	r2, #8
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4807      	ldr	r0, [pc, #28]	; (8002bdc <MX_TIM4_Init+0xe4>)
 8002bbe:	f006 f91f 	bl	8008e00 <HAL_TIM_PWM_ConfigChannel>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002bc8:	f7ff f986 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002bcc:	4803      	ldr	r0, [pc, #12]	; (8002bdc <MX_TIM4_Init+0xe4>)
 8002bce:	f000 f935 	bl	8002e3c <HAL_TIM_MspPostInit>

}
 8002bd2:	bf00      	nop
 8002bd4:	3738      	adds	r7, #56	; 0x38
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20002508 	.word	0x20002508
 8002be0:	40000800 	.word	0x40000800

08002be4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <MX_TIM11_Init+0x40>)
 8002bea:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <MX_TIM11_Init+0x44>)
 8002bec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <MX_TIM11_Init+0x40>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <MX_TIM11_Init+0x40>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <MX_TIM11_Init+0x40>)
 8002bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c00:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <MX_TIM11_Init+0x40>)
 8002c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c08:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <MX_TIM11_Init+0x40>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002c10:	4804      	ldr	r0, [pc, #16]	; (8002c24 <MX_TIM11_Init+0x40>)
 8002c12:	f005 fb77 	bl	8008304 <HAL_TIM_Base_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002c1c:	f7ff f95c 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20002550 	.word	0x20002550
 8002c28:	40014800 	.word	0x40014800

08002c2c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d115      	bne.n	8002c6a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_TIM_PWM_MspInit+0x48>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <HAL_TIM_PWM_MspInit+0x48>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_TIM_PWM_MspInit+0x48>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2105      	movs	r1, #5
 8002c5e:	201c      	movs	r0, #28
 8002c60:	f000 ff0a 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c64:	201c      	movs	r0, #28
 8002c66:	f000 ff33 	bl	8003ad0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800

08002c78 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a2c      	ldr	r2, [pc, #176]	; (8002d48 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d151      	bne.n	8002d3e <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	4a2a      	ldr	r2, [pc, #168]	; (8002d4c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a23      	ldr	r2, [pc, #140]	; (8002d4c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8002cee:	2340      	movs	r3, #64	; 0x40
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	4619      	mov	r1, r3
 8002d08:	4811      	ldr	r0, [pc, #68]	; (8002d50 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002d0a:	f001 fc2f 	bl	800456c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8002d0e:	2320      	movs	r3, #32
 8002d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	2302      	movs	r3, #2
 8002d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	4619      	mov	r1, r3
 8002d28:	480a      	ldr	r0, [pc, #40]	; (8002d54 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002d2a:	f001 fc1f 	bl	800456c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2105      	movs	r1, #5
 8002d32:	201d      	movs	r0, #29
 8002d34:	f000 fea0 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d38:	201d      	movs	r0, #29
 8002d3a:	f000 fec9 	bl	8003ad0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002d3e:	bf00      	nop
 8002d40:	3728      	adds	r7, #40	; 0x28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400

08002d58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a30      	ldr	r2, [pc, #192]	; (8002e28 <HAL_TIM_Base_MspInit+0xd0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d147      	bne.n	8002dfa <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <HAL_TIM_Base_MspInit+0xd4>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <HAL_TIM_Base_MspInit+0xd4>)
 8002d74:	f043 0304 	orr.w	r3, r3, #4
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HAL_TIM_Base_MspInit+0xd4>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002d86:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <HAL_TIM_Base_MspInit+0xd8>)
 8002d88:	4a2a      	ldr	r2, [pc, #168]	; (8002e34 <HAL_TIM_Base_MspInit+0xdc>)
 8002d8a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_TIM_Base_MspInit+0xd8>)
 8002d8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d92:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d94:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <HAL_TIM_Base_MspInit+0xd8>)
 8002d96:	2240      	movs	r2, #64	; 0x40
 8002d98:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d9a:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <HAL_TIM_Base_MspInit+0xd8>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002da0:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <HAL_TIM_Base_MspInit+0xd8>)
 8002da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002da6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002da8:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <HAL_TIM_Base_MspInit+0xd8>)
 8002daa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dae:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002db0:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <HAL_TIM_Base_MspInit+0xd8>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8002db6:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <HAL_TIM_Base_MspInit+0xd8>)
 8002db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dbc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <HAL_TIM_Base_MspInit+0xd8>)
 8002dc0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002dc4:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <HAL_TIM_Base_MspInit+0xd8>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002dcc:	4818      	ldr	r0, [pc, #96]	; (8002e30 <HAL_TIM_Base_MspInit+0xd8>)
 8002dce:	f000 fec1 	bl	8003b54 <HAL_DMA_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002dd8:	f7ff f87e 	bl	8001ed8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <HAL_TIM_Base_MspInit+0xd8>)
 8002de0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002de2:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <HAL_TIM_Base_MspInit+0xd8>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002de8:	2200      	movs	r2, #0
 8002dea:	2105      	movs	r1, #5
 8002dec:	201e      	movs	r0, #30
 8002dee:	f000 fe43 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002df2:	201e      	movs	r0, #30
 8002df4:	f000 fe6c 	bl	8003ad0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002df8:	e012      	b.n	8002e20 <HAL_TIM_Base_MspInit+0xc8>
  else if(tim_baseHandle->Instance==TIM11)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <HAL_TIM_Base_MspInit+0xe0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d10d      	bne.n	8002e20 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <HAL_TIM_Base_MspInit+0xd4>)
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0c:	4a07      	ldr	r2, [pc, #28]	; (8002e2c <HAL_TIM_Base_MspInit+0xd4>)
 8002e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e12:	6453      	str	r3, [r2, #68]	; 0x44
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_TIM_Base_MspInit+0xd4>)
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40000800 	.word	0x40000800
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	20002598 	.word	0x20002598
 8002e34:	400260b8 	.word	0x400260b8
 8002e38:	40014800 	.word	0x40014800

08002e3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d11e      	bne.n	8002e9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	4b22      	ldr	r3, [pc, #136]	; (8002eec <HAL_TIM_MspPostInit+0xb0>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a21      	ldr	r2, [pc, #132]	; (8002eec <HAL_TIM_MspPostInit+0xb0>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b1f      	ldr	r3, [pc, #124]	; (8002eec <HAL_TIM_MspPostInit+0xb0>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e86:	2303      	movs	r3, #3
 8002e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8002e8e:	f107 0314 	add.w	r3, r7, #20
 8002e92:	4619      	mov	r1, r3
 8002e94:	4816      	ldr	r0, [pc, #88]	; (8002ef0 <HAL_TIM_MspPostInit+0xb4>)
 8002e96:	f001 fb69 	bl	800456c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002e9a:	e023      	b.n	8002ee4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <HAL_TIM_MspPostInit+0xb8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d11e      	bne.n	8002ee4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_TIM_MspPostInit+0xb0>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <HAL_TIM_MspPostInit+0xb0>)
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_TIM_MspPostInit+0xb0>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4619      	mov	r1, r3
 8002ede:	4806      	ldr	r0, [pc, #24]	; (8002ef8 <HAL_TIM_MspPostInit+0xbc>)
 8002ee0:	f001 fb44 	bl	800456c <HAL_GPIO_Init>
}
 8002ee4:	bf00      	nop
 8002ee6:	3728      	adds	r7, #40	; 0x28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	40000800 	.word	0x40000800
 8002ef8:	40020400 	.word	0x40020400

08002efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f00:	480d      	ldr	r0, [pc, #52]	; (8002f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f02:	490e      	ldr	r1, [pc, #56]	; (8002f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f04:	4a0e      	ldr	r2, [pc, #56]	; (8002f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f08:	e002      	b.n	8002f10 <LoopCopyDataInit>

08002f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f0e:	3304      	adds	r3, #4

08002f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f14:	d3f9      	bcc.n	8002f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f16:	4a0b      	ldr	r2, [pc, #44]	; (8002f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f18:	4c0b      	ldr	r4, [pc, #44]	; (8002f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f1c:	e001      	b.n	8002f22 <LoopFillZerobss>

08002f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f20:	3204      	adds	r2, #4

08002f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f24:	d3fb      	bcc.n	8002f1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f26:	f7ff fd29 	bl	800297c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f2a:	f00e fd0d 	bl	8011948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f2e:	f7fe ff29 	bl	8001d84 <main>
  bx  lr    
 8002f32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f3c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002f40:	08014a90 	.word	0x08014a90
  ldr r2, =_sbss
 8002f44:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002f48:	2001e040 	.word	0x2001e040

08002f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f4c:	e7fe      	b.n	8002f4c <ADC_IRQHandler>

08002f4e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f5c:	b672      	cpsid	i
}
 8002f5e:	bf00      	nop
 8002f60:	f7fe ffba 	bl	8001ed8 <Error_Handler>
 8002f64:	e7fe      	b.n	8002f64 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7a1b      	ldrb	r3, [r3, #8]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d904      	bls.n	8002f78 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f6e:	b672      	cpsid	i
}
 8002f70:	bf00      	nop
 8002f72:	f7fe ffb1 	bl	8001ed8 <Error_Handler>
 8002f76:	e7fe      	b.n	8002f76 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7a1b      	ldrb	r3, [r3, #8]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	b2d1      	uxtb	r1, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	7211      	strb	r1, [r2, #8]
 8002f84:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f86:	f3ef 8211 	mrs	r2, BASEPRI
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	60fa      	str	r2, [r7, #12]
 8002f9c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d104      	bne.n	8002fc6 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fbc:	b672      	cpsid	i
}
 8002fbe:	bf00      	nop
 8002fc0:	f7fe ff8a 	bl	8001ed8 <Error_Handler>
 8002fc4:	e7fe      	b.n	8002fc4 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	7a1b      	ldrb	r3, [r3, #8]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	7a1b      	ldrb	r3, [r3, #8]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d904      	bls.n	8002fe4 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fda:	b672      	cpsid	i
}
 8002fdc:	bf00      	nop
 8002fde:	f7fe ff7b 	bl	8001ed8 <Error_Handler>
 8002fe2:	e7fe      	b.n	8002fe2 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7a1b      	ldrb	r3, [r3, #8]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ff8:	bf00      	nop
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003010:	b672      	cpsid	i
}
 8003012:	bf00      	nop
 8003014:	f7fe ff60 	bl	8001ed8 <Error_Handler>
 8003018:	e7fe      	b.n	8003018 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff96 	bl	8002f4e <stm32_lock_acquire>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d104      	bne.n	8003042 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003038:	b672      	cpsid	i
}
 800303a:	bf00      	nop
 800303c:	f7fe ff4c 	bl	8001ed8 <Error_Handler>
 8003040:	e7fe      	b.n	8003040 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff ffb2 	bl	8002fae <stm32_lock_release>
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <HAL_Init+0x40>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <HAL_Init+0x40>)
 800305e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_Init+0x40>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <HAL_Init+0x40>)
 800306a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800306e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_Init+0x40>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a07      	ldr	r2, [pc, #28]	; (8003094 <HAL_Init+0x40>)
 8003076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800307c:	2003      	movs	r0, #3
 800307e:	f000 fcdb 	bl	8003a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003082:	200f      	movs	r0, #15
 8003084:	f7ff fb52 	bl	800272c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003088:	f7ff fb14 	bl	80026b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023c00 	.word	0x40023c00

08003098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_IncTick+0x20>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_IncTick+0x24>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4413      	add	r3, r2
 80030a8:	4a04      	ldr	r2, [pc, #16]	; (80030bc <HAL_IncTick+0x24>)
 80030aa:	6013      	str	r3, [r2, #0]
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000094 	.word	0x20000094
 80030bc:	20002604 	.word	0x20002604

080030c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return uwTick;
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_GetTick+0x14>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20002604 	.word	0x20002604

080030d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7ff ffee 	bl	80030c0 <HAL_GetTick>
 80030e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d005      	beq.n	80030fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030f2:	4b0a      	ldr	r3, [pc, #40]	; (800311c <HAL_Delay+0x44>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030fe:	bf00      	nop
 8003100:	f7ff ffde 	bl	80030c0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	429a      	cmp	r2, r3
 800310e:	d8f7      	bhi.n	8003100 <HAL_Delay+0x28>
  {
  }
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000094 	.word	0x20000094

08003120 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e14e      	b.n	80033d4 <HAL_ADC_Init+0x2b4>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a90      	ldr	r2, [pc, #576]	; (800337c <HAL_ADC_Init+0x25c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_ADC_Init+0x2a>
 8003140:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003144:	488e      	ldr	r0, [pc, #568]	; (8003380 <HAL_ADC_Init+0x260>)
 8003146:	f7fe fecc 	bl	8001ee2 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d013      	beq.n	800317a <HAL_ADC_Init+0x5a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315a:	d00e      	beq.n	800317a <HAL_ADC_Init+0x5a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003164:	d009      	beq.n	800317a <HAL_ADC_Init+0x5a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800316e:	d004      	beq.n	800317a <HAL_ADC_Init+0x5a>
 8003170:	f240 1143 	movw	r1, #323	; 0x143
 8003174:	4882      	ldr	r0, [pc, #520]	; (8003380 <HAL_ADC_Init+0x260>)
 8003176:	f7fe feb4 	bl	8001ee2 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d013      	beq.n	80031aa <HAL_ADC_Init+0x8a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800318a:	d00e      	beq.n	80031aa <HAL_ADC_Init+0x8a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003194:	d009      	beq.n	80031aa <HAL_ADC_Init+0x8a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800319e:	d004      	beq.n	80031aa <HAL_ADC_Init+0x8a>
 80031a0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80031a4:	4876      	ldr	r0, [pc, #472]	; (8003380 <HAL_ADC_Init+0x260>)
 80031a6:	f7fe fe9c 	bl	8001ee2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_ADC_Init+0xa4>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d004      	beq.n	80031c4 <HAL_ADC_Init+0xa4>
 80031ba:	f240 1145 	movw	r1, #325	; 0x145
 80031be:	4870      	ldr	r0, [pc, #448]	; (8003380 <HAL_ADC_Init+0x260>)
 80031c0:	f7fe fe8f 	bl	8001ee2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7e1b      	ldrb	r3, [r3, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_ADC_Init+0xbe>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	7e1b      	ldrb	r3, [r3, #24]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d004      	beq.n	80031de <HAL_ADC_Init+0xbe>
 80031d4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80031d8:	4869      	ldr	r0, [pc, #420]	; (8003380 <HAL_ADC_Init+0x260>)
 80031da:	f7fe fe82 	bl	8001ee2 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d054      	beq.n	8003290 <HAL_ADC_Init+0x170>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031ee:	d04f      	beq.n	8003290 <HAL_ADC_Init+0x170>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031f8:	d04a      	beq.n	8003290 <HAL_ADC_Init+0x170>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003202:	d045      	beq.n	8003290 <HAL_ADC_Init+0x170>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800320c:	d040      	beq.n	8003290 <HAL_ADC_Init+0x170>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003216:	d03b      	beq.n	8003290 <HAL_ADC_Init+0x170>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003220:	d036      	beq.n	8003290 <HAL_ADC_Init+0x170>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800322a:	d031      	beq.n	8003290 <HAL_ADC_Init+0x170>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003234:	d02c      	beq.n	8003290 <HAL_ADC_Init+0x170>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800323e:	d027      	beq.n	8003290 <HAL_ADC_Init+0x170>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003248:	d022      	beq.n	8003290 <HAL_ADC_Init+0x170>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8003252:	d01d      	beq.n	8003290 <HAL_ADC_Init+0x170>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800325c:	d018      	beq.n	8003290 <HAL_ADC_Init+0x170>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8003266:	d013      	beq.n	8003290 <HAL_ADC_Init+0x170>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003270:	d00e      	beq.n	8003290 <HAL_ADC_Init+0x170>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800327a:	d009      	beq.n	8003290 <HAL_ADC_Init+0x170>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003280:	4a40      	ldr	r2, [pc, #256]	; (8003384 <HAL_ADC_Init+0x264>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d004      	beq.n	8003290 <HAL_ADC_Init+0x170>
 8003286:	f240 1147 	movw	r1, #327	; 0x147
 800328a:	483d      	ldr	r0, [pc, #244]	; (8003380 <HAL_ADC_Init+0x260>)
 800328c:	f7fe fe29 	bl	8001ee2 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <HAL_ADC_Init+0x18c>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a0:	d004      	beq.n	80032ac <HAL_ADC_Init+0x18c>
 80032a2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80032a6:	4836      	ldr	r0, [pc, #216]	; (8003380 <HAL_ADC_Init+0x260>)
 80032a8:	f7fe fe1b 	bl	8001ee2 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_ADC_Init+0x19c>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d904      	bls.n	80032c6 <HAL_ADC_Init+0x1a6>
 80032bc:	f240 1149 	movw	r1, #329	; 0x149
 80032c0:	482f      	ldr	r0, [pc, #188]	; (8003380 <HAL_ADC_Init+0x260>)
 80032c2:	f7fe fe0e 	bl	8001ee2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <HAL_ADC_Init+0x1c4>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d004      	beq.n	80032e4 <HAL_ADC_Init+0x1c4>
 80032da:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80032de:	4828      	ldr	r0, [pc, #160]	; (8003380 <HAL_ADC_Init+0x260>)
 80032e0:	f7fe fdff 	bl	8001ee2 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d00c      	beq.n	8003306 <HAL_ADC_Init+0x1e6>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_ADC_Init+0x1e6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d004      	beq.n	8003306 <HAL_ADC_Init+0x1e6>
 80032fc:	f240 114b 	movw	r1, #331	; 0x14b
 8003300:	481f      	ldr	r0, [pc, #124]	; (8003380 <HAL_ADC_Init+0x260>)
 8003302:	f7fe fdee 	bl	8001ee2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <HAL_ADC_Init+0x204>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d004      	beq.n	8003324 <HAL_ADC_Init+0x204>
 800331a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800331e:	4818      	ldr	r0, [pc, #96]	; (8003380 <HAL_ADC_Init+0x260>)
 8003320:	f7fe fddf 	bl	8001ee2 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	4a16      	ldr	r2, [pc, #88]	; (8003384 <HAL_ADC_Init+0x264>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d017      	beq.n	800335e <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d013      	beq.n	800335e <HAL_ADC_Init+0x23e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800333e:	d00e      	beq.n	800335e <HAL_ADC_Init+0x23e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003348:	d009      	beq.n	800335e <HAL_ADC_Init+0x23e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003352:	d004      	beq.n	800335e <HAL_ADC_Init+0x23e>
 8003354:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003358:	4809      	ldr	r0, [pc, #36]	; (8003380 <HAL_ADC_Init+0x260>)
 800335a:	f7fe fdc2 	bl	8001ee2 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d110      	bne.n	8003388 <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fe f916 	bl	8001598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800337a:	e005      	b.n	8003388 <HAL_ADC_Init+0x268>
 800337c:	40012000 	.word	0x40012000
 8003380:	080124a0 	.word	0x080124a0
 8003384:	0f000001 	.word	0x0f000001
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	d118      	bne.n	80033c6 <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800339c:	f023 0302 	bic.w	r3, r3, #2
 80033a0:	f043 0202 	orr.w	r2, r3, #2
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f98d 	bl	80036c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	f023 0303 	bic.w	r3, r3, #3
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40
 80033c4:	e001      	b.n	80033ca <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b12      	cmp	r3, #18
 80033f0:	d909      	bls.n	8003406 <HAL_ADC_ConfigChannel+0x2a>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a72      	ldr	r2, [pc, #456]	; (80035c0 <HAL_ADC_ConfigChannel+0x1e4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_ADC_ConfigChannel+0x2a>
 80033fc:	f240 618b 	movw	r1, #1675	; 0x68b
 8003400:	4870      	ldr	r0, [pc, #448]	; (80035c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003402:	f7fe fd6e 	bl	8001ee2 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_ADC_ConfigChannel+0x3a>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b10      	cmp	r3, #16
 8003414:	d904      	bls.n	8003420 <HAL_ADC_ConfigChannel+0x44>
 8003416:	f240 618c 	movw	r1, #1676	; 0x68c
 800341a:	486a      	ldr	r0, [pc, #424]	; (80035c4 <HAL_ADC_ConfigChannel+0x1e8>)
 800341c:	f7fe fd61 	bl	8001ee2 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d020      	beq.n	800346a <HAL_ADC_ConfigChannel+0x8e>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d01c      	beq.n	800346a <HAL_ADC_ConfigChannel+0x8e>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d018      	beq.n	800346a <HAL_ADC_ConfigChannel+0x8e>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d014      	beq.n	800346a <HAL_ADC_ConfigChannel+0x8e>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d010      	beq.n	800346a <HAL_ADC_ConfigChannel+0x8e>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b05      	cmp	r3, #5
 800344e:	d00c      	beq.n	800346a <HAL_ADC_ConfigChannel+0x8e>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b06      	cmp	r3, #6
 8003456:	d008      	beq.n	800346a <HAL_ADC_ConfigChannel+0x8e>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b07      	cmp	r3, #7
 800345e:	d004      	beq.n	800346a <HAL_ADC_ConfigChannel+0x8e>
 8003460:	f240 618d 	movw	r1, #1677	; 0x68d
 8003464:	4857      	ldr	r0, [pc, #348]	; (80035c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003466:	f7fe fd3c 	bl	8001ee2 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x9c>
 8003474:	2302      	movs	r3, #2
 8003476:	e118      	b.n	80036aa <HAL_ADC_ConfigChannel+0x2ce>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b09      	cmp	r3, #9
 8003486:	d925      	bls.n	80034d4 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68d9      	ldr	r1, [r3, #12]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	3b1e      	subs	r3, #30
 800349e:	2207      	movs	r2, #7
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43da      	mvns	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	400a      	ands	r2, r1
 80034ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68d9      	ldr	r1, [r3, #12]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	4618      	mov	r0, r3
 80034c0:	4603      	mov	r3, r0
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4403      	add	r3, r0
 80034c6:	3b1e      	subs	r3, #30
 80034c8:	409a      	lsls	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	e022      	b.n	800351a <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6919      	ldr	r1, [r3, #16]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	2207      	movs	r2, #7
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43da      	mvns	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	400a      	ands	r2, r1
 80034f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6919      	ldr	r1, [r3, #16]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	4618      	mov	r0, r3
 800350a:	4603      	mov	r3, r0
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4403      	add	r3, r0
 8003510:	409a      	lsls	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b06      	cmp	r3, #6
 8003520:	d824      	bhi.n	800356c <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	3b05      	subs	r3, #5
 8003534:	221f      	movs	r2, #31
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43da      	mvns	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	400a      	ands	r2, r1
 8003542:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	4618      	mov	r0, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	3b05      	subs	r3, #5
 800355e:	fa00 f203 	lsl.w	r2, r0, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
 800356a:	e051      	b.n	8003610 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b0c      	cmp	r3, #12
 8003572:	d829      	bhi.n	80035c8 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	3b23      	subs	r3, #35	; 0x23
 8003586:	221f      	movs	r2, #31
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43da      	mvns	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	400a      	ands	r2, r1
 8003594:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	4618      	mov	r0, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	3b23      	subs	r3, #35	; 0x23
 80035b0:	fa00 f203 	lsl.w	r2, r0, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
 80035bc:	e028      	b.n	8003610 <HAL_ADC_ConfigChannel+0x234>
 80035be:	bf00      	nop
 80035c0:	10000012 	.word	0x10000012
 80035c4:	080124a0 	.word	0x080124a0
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	3b41      	subs	r3, #65	; 0x41
 80035da:	221f      	movs	r2, #31
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43da      	mvns	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	400a      	ands	r2, r1
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	4618      	mov	r0, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	3b41      	subs	r3, #65	; 0x41
 8003604:	fa00 f203 	lsl.w	r2, r0, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003610:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <HAL_ADC_ConfigChannel+0x2d8>)
 8003612:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <HAL_ADC_ConfigChannel+0x2dc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d10f      	bne.n	800363e <HAL_ADC_ConfigChannel+0x262>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b12      	cmp	r3, #18
 8003624:	d10b      	bne.n	800363e <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <HAL_ADC_ConfigChannel+0x2dc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d12b      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x2c4>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1b      	ldr	r2, [pc, #108]	; (80036bc <HAL_ADC_ConfigChannel+0x2e0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <HAL_ADC_ConfigChannel+0x27e>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b11      	cmp	r3, #17
 8003658:	d122      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a11      	ldr	r2, [pc, #68]	; (80036bc <HAL_ADC_ConfigChannel+0x2e0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d111      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800367c:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <HAL_ADC_ConfigChannel+0x2e4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a10      	ldr	r2, [pc, #64]	; (80036c4 <HAL_ADC_ConfigChannel+0x2e8>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	0c9a      	lsrs	r2, r3, #18
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003692:	e002      	b.n	800369a <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	3b01      	subs	r3, #1
 8003698:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f9      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40012300 	.word	0x40012300
 80036b8:	40012000 	.word	0x40012000
 80036bc:	10000012 	.word	0x10000012
 80036c0:	2000008c 	.word	0x2000008c
 80036c4:	431bde83 	.word	0x431bde83

080036c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036d0:	4b7f      	ldr	r3, [pc, #508]	; (80038d0 <ADC_Init+0x208>)
 80036d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	021a      	lsls	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6899      	ldr	r1, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	4a5e      	ldr	r2, [pc, #376]	; (80038d4 <ADC_Init+0x20c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d022      	beq.n	80037a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800376e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6899      	ldr	r1, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	e00f      	b.n	80037c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0202 	bic.w	r2, r2, #2
 80037d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	7e1b      	ldrb	r3, [r3, #24]
 80037e0:	005a      	lsls	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d028      	beq.n	8003846 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <ADC_Init+0x13c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	2b08      	cmp	r3, #8
 8003802:	d904      	bls.n	800380e <ADC_Init+0x146>
 8003804:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003808:	4833      	ldr	r0, [pc, #204]	; (80038d8 <ADC_Init+0x210>)
 800380a:	f7fe fb6a 	bl	8001ee2 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800381c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800382c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	3b01      	subs	r3, #1
 800383a:	035a      	lsls	r2, r3, #13
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	e007      	b.n	8003856 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003854:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003864:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	3b01      	subs	r3, #1
 8003872:	051a      	lsls	r2, r3, #20
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800388a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6899      	ldr	r1, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003898:	025a      	lsls	r2, r3, #9
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6899      	ldr	r1, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	029a      	lsls	r2, r3, #10
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	609a      	str	r2, [r3, #8]
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40012300 	.word	0x40012300
 80038d4:	0f000001 	.word	0x0f000001
 80038d8:	080124a0 	.word	0x080124a0

080038dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <__NVIC_SetPriorityGrouping+0x44>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038f8:	4013      	ands	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800390e:	4a04      	ldr	r2, [pc, #16]	; (8003920 <__NVIC_SetPriorityGrouping+0x44>)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	60d3      	str	r3, [r2, #12]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003928:	4b04      	ldr	r3, [pc, #16]	; (800393c <__NVIC_GetPriorityGrouping+0x18>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	0a1b      	lsrs	r3, r3, #8
 800392e:	f003 0307 	and.w	r3, r3, #7
}
 8003932:	4618      	mov	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	2b00      	cmp	r3, #0
 8003950:	db0b      	blt.n	800396a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	f003 021f 	and.w	r2, r3, #31
 8003958:	4907      	ldr	r1, [pc, #28]	; (8003978 <__NVIC_EnableIRQ+0x38>)
 800395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	2001      	movs	r0, #1
 8003962:	fa00 f202 	lsl.w	r2, r0, r2
 8003966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	e000e100 	.word	0xe000e100

0800397c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	6039      	str	r1, [r7, #0]
 8003986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	2b00      	cmp	r3, #0
 800398e:	db0a      	blt.n	80039a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	b2da      	uxtb	r2, r3
 8003994:	490c      	ldr	r1, [pc, #48]	; (80039c8 <__NVIC_SetPriority+0x4c>)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	0112      	lsls	r2, r2, #4
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	440b      	add	r3, r1
 80039a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a4:	e00a      	b.n	80039bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	4908      	ldr	r1, [pc, #32]	; (80039cc <__NVIC_SetPriority+0x50>)
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	3b04      	subs	r3, #4
 80039b4:	0112      	lsls	r2, r2, #4
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	440b      	add	r3, r1
 80039ba:	761a      	strb	r2, [r3, #24]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000e100 	.word	0xe000e100
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b089      	sub	sp, #36	; 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f1c3 0307 	rsb	r3, r3, #7
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	bf28      	it	cs
 80039ee:	2304      	movcs	r3, #4
 80039f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d902      	bls.n	8003a00 <NVIC_EncodePriority+0x30>
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3b03      	subs	r3, #3
 80039fe:	e000      	b.n	8003a02 <NVIC_EncodePriority+0x32>
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	401a      	ands	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a18:	f04f 31ff 	mov.w	r1, #4294967295
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a22:	43d9      	mvns	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a28:	4313      	orrs	r3, r2
         );
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3724      	adds	r7, #36	; 0x24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b07      	cmp	r3, #7
 8003a44:	d00f      	beq.n	8003a66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b06      	cmp	r3, #6
 8003a4a:	d00c      	beq.n	8003a66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d009      	beq.n	8003a66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d006      	beq.n	8003a66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d003      	beq.n	8003a66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a5e:	2190      	movs	r1, #144	; 0x90
 8003a60:	4804      	ldr	r0, [pc, #16]	; (8003a74 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003a62:	f7fe fa3e 	bl	8001ee2 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ff38 	bl	80038dc <__NVIC_SetPriorityGrouping>
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	080124d8 	.word	0x080124d8

08003a78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b0f      	cmp	r3, #15
 8003a8e:	d903      	bls.n	8003a98 <HAL_NVIC_SetPriority+0x20>
 8003a90:	21a8      	movs	r1, #168	; 0xa8
 8003a92:	480e      	ldr	r0, [pc, #56]	; (8003acc <HAL_NVIC_SetPriority+0x54>)
 8003a94:	f7fe fa25 	bl	8001ee2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b0f      	cmp	r3, #15
 8003a9c:	d903      	bls.n	8003aa6 <HAL_NVIC_SetPriority+0x2e>
 8003a9e:	21a9      	movs	r1, #169	; 0xa9
 8003aa0:	480a      	ldr	r0, [pc, #40]	; (8003acc <HAL_NVIC_SetPriority+0x54>)
 8003aa2:	f7fe fa1e 	bl	8001ee2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa6:	f7ff ff3d 	bl	8003924 <__NVIC_GetPriorityGrouping>
 8003aaa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	6978      	ldr	r0, [r7, #20]
 8003ab2:	f7ff ff8d 	bl	80039d0 <NVIC_EncodePriority>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abc:	4611      	mov	r1, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ff5c 	bl	800397c <__NVIC_SetPriority>
}
 8003ac4:	bf00      	nop
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	080124d8 	.word	0x080124d8

08003ad0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da03      	bge.n	8003aea <HAL_NVIC_EnableIRQ+0x1a>
 8003ae2:	21bc      	movs	r1, #188	; 0xbc
 8003ae4:	4805      	ldr	r0, [pc, #20]	; (8003afc <HAL_NVIC_EnableIRQ+0x2c>)
 8003ae6:	f7fe f9fc 	bl	8001ee2 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ff26 	bl	8003940 <__NVIC_EnableIRQ>
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	080124d8 	.word	0x080124d8

08003b00 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e017      	b.n	8003b42 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a0d      	ldr	r2, [pc, #52]	; (8003b4c <HAL_CRC_Init+0x4c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <HAL_CRC_Init+0x24>
 8003b1c:	2168      	movs	r1, #104	; 0x68
 8003b1e:	480c      	ldr	r0, [pc, #48]	; (8003b50 <HAL_CRC_Init+0x50>)
 8003b20:	f7fe f9df 	bl	8001ee2 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	795b      	ldrb	r3, [r3, #5]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7fd fe51 	bl	80017dc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023000 	.word	0x40023000
 8003b50:	08012514 	.word	0x08012514

08003b54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b60:	f7ff faae 	bl	80030c0 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e203      	b.n	8003f78 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a8b      	ldr	r2, [pc, #556]	; (8003da4 <HAL_DMA_Init+0x250>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d04e      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a8a      	ldr	r2, [pc, #552]	; (8003da8 <HAL_DMA_Init+0x254>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d049      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a88      	ldr	r2, [pc, #544]	; (8003dac <HAL_DMA_Init+0x258>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d044      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a87      	ldr	r2, [pc, #540]	; (8003db0 <HAL_DMA_Init+0x25c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d03f      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a85      	ldr	r2, [pc, #532]	; (8003db4 <HAL_DMA_Init+0x260>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d03a      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a84      	ldr	r2, [pc, #528]	; (8003db8 <HAL_DMA_Init+0x264>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d035      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a82      	ldr	r2, [pc, #520]	; (8003dbc <HAL_DMA_Init+0x268>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d030      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a81      	ldr	r2, [pc, #516]	; (8003dc0 <HAL_DMA_Init+0x26c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d02b      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a7f      	ldr	r2, [pc, #508]	; (8003dc4 <HAL_DMA_Init+0x270>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d026      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a7e      	ldr	r2, [pc, #504]	; (8003dc8 <HAL_DMA_Init+0x274>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d021      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a7c      	ldr	r2, [pc, #496]	; (8003dcc <HAL_DMA_Init+0x278>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01c      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a7b      	ldr	r2, [pc, #492]	; (8003dd0 <HAL_DMA_Init+0x27c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d017      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a79      	ldr	r2, [pc, #484]	; (8003dd4 <HAL_DMA_Init+0x280>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d012      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a78      	ldr	r2, [pc, #480]	; (8003dd8 <HAL_DMA_Init+0x284>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00d      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a76      	ldr	r2, [pc, #472]	; (8003ddc <HAL_DMA_Init+0x288>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d008      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a75      	ldr	r2, [pc, #468]	; (8003de0 <HAL_DMA_Init+0x28c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <HAL_DMA_Init+0xc4>
 8003c10:	21b7      	movs	r1, #183	; 0xb7
 8003c12:	4874      	ldr	r0, [pc, #464]	; (8003de4 <HAL_DMA_Init+0x290>)
 8003c14:	f7fe f965 	bl	8001ee2 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d026      	beq.n	8003c6e <HAL_DMA_Init+0x11a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c28:	d021      	beq.n	8003c6e <HAL_DMA_Init+0x11a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c32:	d01c      	beq.n	8003c6e <HAL_DMA_Init+0x11a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003c3c:	d017      	beq.n	8003c6e <HAL_DMA_Init+0x11a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c46:	d012      	beq.n	8003c6e <HAL_DMA_Init+0x11a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003c50:	d00d      	beq.n	8003c6e <HAL_DMA_Init+0x11a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c5a:	d008      	beq.n	8003c6e <HAL_DMA_Init+0x11a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003c64:	d003      	beq.n	8003c6e <HAL_DMA_Init+0x11a>
 8003c66:	21b8      	movs	r1, #184	; 0xb8
 8003c68:	485e      	ldr	r0, [pc, #376]	; (8003de4 <HAL_DMA_Init+0x290>)
 8003c6a:	f7fe f93a 	bl	8001ee2 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_DMA_Init+0x13a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d007      	beq.n	8003c8e <HAL_DMA_Init+0x13a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b80      	cmp	r3, #128	; 0x80
 8003c84:	d003      	beq.n	8003c8e <HAL_DMA_Init+0x13a>
 8003c86:	21b9      	movs	r1, #185	; 0xb9
 8003c88:	4856      	ldr	r0, [pc, #344]	; (8003de4 <HAL_DMA_Init+0x290>)
 8003c8a:	f7fe f92a 	bl	8001ee2 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c96:	d007      	beq.n	8003ca8 <HAL_DMA_Init+0x154>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_DMA_Init+0x154>
 8003ca0:	21ba      	movs	r1, #186	; 0xba
 8003ca2:	4850      	ldr	r0, [pc, #320]	; (8003de4 <HAL_DMA_Init+0x290>)
 8003ca4:	f7fe f91d 	bl	8001ee2 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb0:	d007      	beq.n	8003cc2 <HAL_DMA_Init+0x16e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_DMA_Init+0x16e>
 8003cba:	21bb      	movs	r1, #187	; 0xbb
 8003cbc:	4849      	ldr	r0, [pc, #292]	; (8003de4 <HAL_DMA_Init+0x290>)
 8003cbe:	f7fe f910 	bl	8001ee2 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_DMA_Init+0x192>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd2:	d008      	beq.n	8003ce6 <HAL_DMA_Init+0x192>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cdc:	d003      	beq.n	8003ce6 <HAL_DMA_Init+0x192>
 8003cde:	21bc      	movs	r1, #188	; 0xbc
 8003ce0:	4840      	ldr	r0, [pc, #256]	; (8003de4 <HAL_DMA_Init+0x290>)
 8003ce2:	f7fe f8fe 	bl	8001ee2 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <HAL_DMA_Init+0x1b6>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf6:	d008      	beq.n	8003d0a <HAL_DMA_Init+0x1b6>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d00:	d003      	beq.n	8003d0a <HAL_DMA_Init+0x1b6>
 8003d02:	21bd      	movs	r1, #189	; 0xbd
 8003d04:	4837      	ldr	r0, [pc, #220]	; (8003de4 <HAL_DMA_Init+0x290>)
 8003d06:	f7fe f8ec 	bl	8001ee2 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00c      	beq.n	8003d2c <HAL_DMA_Init+0x1d8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1a:	d007      	beq.n	8003d2c <HAL_DMA_Init+0x1d8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d003      	beq.n	8003d2c <HAL_DMA_Init+0x1d8>
 8003d24:	21be      	movs	r1, #190	; 0xbe
 8003d26:	482f      	ldr	r0, [pc, #188]	; (8003de4 <HAL_DMA_Init+0x290>)
 8003d28:	f7fe f8db 	bl	8001ee2 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d012      	beq.n	8003d5a <HAL_DMA_Init+0x206>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3c:	d00d      	beq.n	8003d5a <HAL_DMA_Init+0x206>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d46:	d008      	beq.n	8003d5a <HAL_DMA_Init+0x206>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d50:	d003      	beq.n	8003d5a <HAL_DMA_Init+0x206>
 8003d52:	21bf      	movs	r1, #191	; 0xbf
 8003d54:	4823      	ldr	r0, [pc, #140]	; (8003de4 <HAL_DMA_Init+0x290>)
 8003d56:	f7fe f8c4 	bl	8001ee2 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d007      	beq.n	8003d72 <HAL_DMA_Init+0x21e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d003      	beq.n	8003d72 <HAL_DMA_Init+0x21e>
 8003d6a:	21c0      	movs	r1, #192	; 0xc0
 8003d6c:	481d      	ldr	r0, [pc, #116]	; (8003de4 <HAL_DMA_Init+0x290>)
 8003d6e:	f7fe f8b8 	bl	8001ee2 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d064      	beq.n	8003e44 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d032      	beq.n	8003de8 <HAL_DMA_Init+0x294>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d02e      	beq.n	8003de8 <HAL_DMA_Init+0x294>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d02a      	beq.n	8003de8 <HAL_DMA_Init+0x294>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d026      	beq.n	8003de8 <HAL_DMA_Init+0x294>
 8003d9a:	21c5      	movs	r1, #197	; 0xc5
 8003d9c:	4811      	ldr	r0, [pc, #68]	; (8003de4 <HAL_DMA_Init+0x290>)
 8003d9e:	f7fe f8a0 	bl	8001ee2 <assert_failed>
 8003da2:	e021      	b.n	8003de8 <HAL_DMA_Init+0x294>
 8003da4:	40026010 	.word	0x40026010
 8003da8:	40026028 	.word	0x40026028
 8003dac:	40026040 	.word	0x40026040
 8003db0:	40026058 	.word	0x40026058
 8003db4:	40026070 	.word	0x40026070
 8003db8:	40026088 	.word	0x40026088
 8003dbc:	400260a0 	.word	0x400260a0
 8003dc0:	400260b8 	.word	0x400260b8
 8003dc4:	40026410 	.word	0x40026410
 8003dc8:	40026428 	.word	0x40026428
 8003dcc:	40026440 	.word	0x40026440
 8003dd0:	40026458 	.word	0x40026458
 8003dd4:	40026470 	.word	0x40026470
 8003dd8:	40026488 	.word	0x40026488
 8003ddc:	400264a0 	.word	0x400264a0
 8003de0:	400264b8 	.word	0x400264b8
 8003de4:	0801254c 	.word	0x0801254c
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d012      	beq.n	8003e16 <HAL_DMA_Init+0x2c2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003df8:	d00d      	beq.n	8003e16 <HAL_DMA_Init+0x2c2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e02:	d008      	beq.n	8003e16 <HAL_DMA_Init+0x2c2>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e0c:	d003      	beq.n	8003e16 <HAL_DMA_Init+0x2c2>
 8003e0e:	21c6      	movs	r1, #198	; 0xc6
 8003e10:	485b      	ldr	r0, [pc, #364]	; (8003f80 <HAL_DMA_Init+0x42c>)
 8003e12:	f7fe f866 	bl	8001ee2 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d012      	beq.n	8003e44 <HAL_DMA_Init+0x2f0>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e26:	d00d      	beq.n	8003e44 <HAL_DMA_Init+0x2f0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e30:	d008      	beq.n	8003e44 <HAL_DMA_Init+0x2f0>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e3a:	d003      	beq.n	8003e44 <HAL_DMA_Init+0x2f0>
 8003e3c:	21c7      	movs	r1, #199	; 0xc7
 8003e3e:	4850      	ldr	r0, [pc, #320]	; (8003f80 <HAL_DMA_Init+0x42c>)
 8003e40:	f7fe f84f 	bl	8001ee2 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0201 	bic.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e64:	e00f      	b.n	8003e86 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e66:	f7ff f92b 	bl	80030c0 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b05      	cmp	r3, #5
 8003e72:	d908      	bls.n	8003e86 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e078      	b.n	8003f78 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e8      	bne.n	8003e66 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4b39      	ldr	r3, [pc, #228]	; (8003f84 <HAL_DMA_Init+0x430>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d107      	bne.n	8003ef0 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0307 	bic.w	r3, r3, #7
 8003f06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d117      	bne.n	8003f4a <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00e      	beq.n	8003f4a <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 faa1 	bl	8004474 <DMA_CheckFifoParam>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2240      	movs	r2, #64	; 0x40
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f46:	2301      	movs	r3, #1
 8003f48:	e016      	b.n	8003f78 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa58 	bl	8004408 <DMA_CalcBaseAndBitshift>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f60:	223f      	movs	r2, #63	; 0x3f
 8003f62:	409a      	lsls	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	0801254c 	.word	0x0801254c
 8003f84:	f010803f 	.word	0xf010803f

08003f88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_DMA_Start_IT+0x26>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fac:	d304      	bcc.n	8003fb8 <HAL_DMA_Start_IT+0x30>
 8003fae:	f240 11cb 	movw	r1, #459	; 0x1cb
 8003fb2:	4827      	ldr	r0, [pc, #156]	; (8004050 <HAL_DMA_Start_IT+0xc8>)
 8003fb4:	f7fd ff95 	bl	8001ee2 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_DMA_Start_IT+0x3e>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e040      	b.n	8004048 <HAL_DMA_Start_IT+0xc0>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d12f      	bne.n	800403a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f9dc 	bl	80043ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff8:	223f      	movs	r2, #63	; 0x3f
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0216 	orr.w	r2, r2, #22
 800400e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0208 	orr.w	r2, r2, #8
 8004026:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e005      	b.n	8004046 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004042:	2302      	movs	r3, #2
 8004044:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004046:	7dfb      	ldrb	r3, [r7, #23]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	0801254c 	.word	0x0801254c

08004054 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d004      	beq.n	8004072 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2280      	movs	r2, #128	; 0x80
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e00c      	b.n	800408c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2205      	movs	r2, #5
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040a4:	4b8e      	ldr	r3, [pc, #568]	; (80042e0 <HAL_DMA_IRQHandler+0x248>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a8e      	ldr	r2, [pc, #568]	; (80042e4 <HAL_DMA_IRQHandler+0x24c>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	0a9b      	lsrs	r3, r3, #10
 80040b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c2:	2208      	movs	r2, #8
 80040c4:	409a      	lsls	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01a      	beq.n	8004104 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d013      	beq.n	8004104 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0204 	bic.w	r2, r2, #4
 80040ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	2208      	movs	r2, #8
 80040f2:	409a      	lsls	r2, r3
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	f043 0201 	orr.w	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004108:	2201      	movs	r2, #1
 800410a:	409a      	lsls	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d012      	beq.n	800413a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004126:	2201      	movs	r2, #1
 8004128:	409a      	lsls	r2, r3
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	f043 0202 	orr.w	r2, r3, #2
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413e:	2204      	movs	r2, #4
 8004140:	409a      	lsls	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4013      	ands	r3, r2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d012      	beq.n	8004170 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00b      	beq.n	8004170 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	2204      	movs	r2, #4
 800415e:	409a      	lsls	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004168:	f043 0204 	orr.w	r2, r3, #4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004174:	2210      	movs	r2, #16
 8004176:	409a      	lsls	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d043      	beq.n	8004208 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d03c      	beq.n	8004208 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	2210      	movs	r2, #16
 8004194:	409a      	lsls	r2, r3
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d018      	beq.n	80041da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d108      	bne.n	80041c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d024      	beq.n	8004208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
 80041c6:	e01f      	b.n	8004208 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01b      	beq.n	8004208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4798      	blx	r3
 80041d8:	e016      	b.n	8004208 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d107      	bne.n	80041f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0208 	bic.w	r2, r2, #8
 80041f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420c:	2220      	movs	r2, #32
 800420e:	409a      	lsls	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 808f 	beq.w	8004338 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 8087 	beq.w	8004338 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422e:	2220      	movs	r2, #32
 8004230:	409a      	lsls	r2, r3
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b05      	cmp	r3, #5
 8004240:	d136      	bne.n	80042b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0216 	bic.w	r2, r2, #22
 8004250:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004260:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d103      	bne.n	8004272 <HAL_DMA_IRQHandler+0x1da>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0208 	bic.w	r2, r2, #8
 8004280:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004286:	223f      	movs	r2, #63	; 0x3f
 8004288:	409a      	lsls	r2, r3
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d07e      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
        }
        return;
 80042ae:	e079      	b.n	80043a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01d      	beq.n	80042fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10d      	bne.n	80042e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d031      	beq.n	8004338 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
 80042dc:	e02c      	b.n	8004338 <HAL_DMA_IRQHandler+0x2a0>
 80042de:	bf00      	nop
 80042e0:	2000008c 	.word	0x2000008c
 80042e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d023      	beq.n	8004338 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	4798      	blx	r3
 80042f8:	e01e      	b.n	8004338 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10f      	bne.n	8004328 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0210 	bic.w	r2, r2, #16
 8004316:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	2b00      	cmp	r3, #0
 800433e:	d032      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d022      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2205      	movs	r2, #5
 8004350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0201 	bic.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	3301      	adds	r3, #1
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	429a      	cmp	r2, r3
 800436e:	d307      	bcc.n	8004380 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f2      	bne.n	8004364 <HAL_DMA_IRQHandler+0x2cc>
 800437e:	e000      	b.n	8004382 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004380:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
 80043a2:	e000      	b.n	80043a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80043a4:	bf00      	nop
    }
  }
}
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	d108      	bne.n	80043ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043ea:	e007      	b.n	80043fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	60da      	str	r2, [r3, #12]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	3b10      	subs	r3, #16
 8004418:	4a14      	ldr	r2, [pc, #80]	; (800446c <DMA_CalcBaseAndBitshift+0x64>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	091b      	lsrs	r3, r3, #4
 8004420:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004422:	4a13      	ldr	r2, [pc, #76]	; (8004470 <DMA_CalcBaseAndBitshift+0x68>)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4413      	add	r3, r2
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d909      	bls.n	800444a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800443e:	f023 0303 	bic.w	r3, r3, #3
 8004442:	1d1a      	adds	r2, r3, #4
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	659a      	str	r2, [r3, #88]	; 0x58
 8004448:	e007      	b.n	800445a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004452:	f023 0303 	bic.w	r3, r3, #3
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	aaaaaaab 	.word	0xaaaaaaab
 8004470:	080149e4 	.word	0x080149e4

08004474 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d11f      	bne.n	80044ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d856      	bhi.n	8004542 <DMA_CheckFifoParam+0xce>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <DMA_CheckFifoParam+0x28>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044ad 	.word	0x080044ad
 80044a0:	080044bf 	.word	0x080044bf
 80044a4:	080044ad 	.word	0x080044ad
 80044a8:	08004543 	.word	0x08004543
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d046      	beq.n	8004546 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044bc:	e043      	b.n	8004546 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044c6:	d140      	bne.n	800454a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044cc:	e03d      	b.n	800454a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d6:	d121      	bne.n	800451c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d837      	bhi.n	800454e <DMA_CheckFifoParam+0xda>
 80044de:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <DMA_CheckFifoParam+0x70>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	080044f5 	.word	0x080044f5
 80044e8:	080044fb 	.word	0x080044fb
 80044ec:	080044f5 	.word	0x080044f5
 80044f0:	0800450d 	.word	0x0800450d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      break;
 80044f8:	e030      	b.n	800455c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d025      	beq.n	8004552 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450a:	e022      	b.n	8004552 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004514:	d11f      	bne.n	8004556 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800451a:	e01c      	b.n	8004556 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d903      	bls.n	800452a <DMA_CheckFifoParam+0xb6>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d003      	beq.n	8004530 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004528:	e018      	b.n	800455c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
      break;
 800452e:	e015      	b.n	800455c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00e      	beq.n	800455a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
      break;
 8004540:	e00b      	b.n	800455a <DMA_CheckFifoParam+0xe6>
      break;
 8004542:	bf00      	nop
 8004544:	e00a      	b.n	800455c <DMA_CheckFifoParam+0xe8>
      break;
 8004546:	bf00      	nop
 8004548:	e008      	b.n	800455c <DMA_CheckFifoParam+0xe8>
      break;
 800454a:	bf00      	nop
 800454c:	e006      	b.n	800455c <DMA_CheckFifoParam+0xe8>
      break;
 800454e:	bf00      	nop
 8004550:	e004      	b.n	800455c <DMA_CheckFifoParam+0xe8>
      break;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <DMA_CheckFifoParam+0xe8>
      break;   
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <DMA_CheckFifoParam+0xe8>
      break;
 800455a:	bf00      	nop
    }
  } 
  
  return status; 
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop

0800456c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800457a:	2300      	movs	r3, #0
 800457c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a33      	ldr	r2, [pc, #204]	; (8004654 <HAL_GPIO_Init+0xe8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d017      	beq.n	80045ba <HAL_GPIO_Init+0x4e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a32      	ldr	r2, [pc, #200]	; (8004658 <HAL_GPIO_Init+0xec>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <HAL_GPIO_Init+0x4e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a31      	ldr	r2, [pc, #196]	; (800465c <HAL_GPIO_Init+0xf0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00f      	beq.n	80045ba <HAL_GPIO_Init+0x4e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a30      	ldr	r2, [pc, #192]	; (8004660 <HAL_GPIO_Init+0xf4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00b      	beq.n	80045ba <HAL_GPIO_Init+0x4e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a2f      	ldr	r2, [pc, #188]	; (8004664 <HAL_GPIO_Init+0xf8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <HAL_GPIO_Init+0x4e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a2e      	ldr	r2, [pc, #184]	; (8004668 <HAL_GPIO_Init+0xfc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x4e>
 80045b2:	21ac      	movs	r1, #172	; 0xac
 80045b4:	482d      	ldr	r0, [pc, #180]	; (800466c <HAL_GPIO_Init+0x100>)
 80045b6:	f7fd fc94 	bl	8001ee2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_GPIO_Init+0x64>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_GPIO_Init+0x6c>
 80045d0:	21ad      	movs	r1, #173	; 0xad
 80045d2:	4826      	ldr	r0, [pc, #152]	; (800466c <HAL_GPIO_Init+0x100>)
 80045d4:	f7fd fc85 	bl	8001ee2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d035      	beq.n	800464c <HAL_GPIO_Init+0xe0>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d031      	beq.n	800464c <HAL_GPIO_Init+0xe0>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b11      	cmp	r3, #17
 80045ee:	d02d      	beq.n	800464c <HAL_GPIO_Init+0xe0>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d029      	beq.n	800464c <HAL_GPIO_Init+0xe0>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b12      	cmp	r3, #18
 80045fe:	d025      	beq.n	800464c <HAL_GPIO_Init+0xe0>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004608:	d020      	beq.n	800464c <HAL_GPIO_Init+0xe0>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004612:	d01b      	beq.n	800464c <HAL_GPIO_Init+0xe0>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800461c:	d016      	beq.n	800464c <HAL_GPIO_Init+0xe0>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8004626:	d011      	beq.n	800464c <HAL_GPIO_Init+0xe0>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8004630:	d00c      	beq.n	800464c <HAL_GPIO_Init+0xe0>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800463a:	d007      	beq.n	800464c <HAL_GPIO_Init+0xe0>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b03      	cmp	r3, #3
 8004642:	d003      	beq.n	800464c <HAL_GPIO_Init+0xe0>
 8004644:	21ae      	movs	r1, #174	; 0xae
 8004646:	4809      	ldr	r0, [pc, #36]	; (800466c <HAL_GPIO_Init+0x100>)
 8004648:	f7fd fc4b 	bl	8001ee2 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
 8004650:	e20c      	b.n	8004a6c <HAL_GPIO_Init+0x500>
 8004652:	bf00      	nop
 8004654:	40020000 	.word	0x40020000
 8004658:	40020400 	.word	0x40020400
 800465c:	40020800 	.word	0x40020800
 8004660:	40020c00 	.word	0x40020c00
 8004664:	40021000 	.word	0x40021000
 8004668:	40021c00 	.word	0x40021c00
 800466c:	08012584 	.word	0x08012584
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004670:	2201      	movs	r2, #1
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	429a      	cmp	r2, r3
 800468a:	f040 81ec 	bne.w	8004a66 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b01      	cmp	r3, #1
 8004698:	d005      	beq.n	80046a6 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d144      	bne.n	8004730 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00f      	beq.n	80046ce <HAL_GPIO_Init+0x162>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d00b      	beq.n	80046ce <HAL_GPIO_Init+0x162>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d007      	beq.n	80046ce <HAL_GPIO_Init+0x162>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_Init+0x162>
 80046c6:	21c0      	movs	r1, #192	; 0xc0
 80046c8:	4884      	ldr	r0, [pc, #528]	; (80048dc <HAL_GPIO_Init+0x370>)
 80046ca:	f7fd fc0a 	bl	8001ee2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	2203      	movs	r2, #3
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004704:	2201      	movs	r2, #1
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	f003 0201 	and.w	r2, r3, #1
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	2b03      	cmp	r3, #3
 800473a:	d027      	beq.n	800478c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00b      	beq.n	800475c <HAL_GPIO_Init+0x1f0>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d007      	beq.n	800475c <HAL_GPIO_Init+0x1f0>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x1f0>
 8004754:	21d1      	movs	r1, #209	; 0xd1
 8004756:	4861      	ldr	r0, [pc, #388]	; (80048dc <HAL_GPIO_Init+0x370>)
 8004758:	f7fd fbc3 	bl	8001ee2 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	2203      	movs	r2, #3
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4013      	ands	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b02      	cmp	r3, #2
 8004796:	f040 80a3 	bne.w	80048e0 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d077      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b09      	cmp	r3, #9
 80047a8:	d073      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d06f      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d06b      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d067      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d063      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d05f      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d05b      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d057      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d053      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d04f      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d04b      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d047      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b04      	cmp	r3, #4
 8004808:	d043      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b05      	cmp	r3, #5
 8004810:	d03f      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b05      	cmp	r3, #5
 8004818:	d03b      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b05      	cmp	r3, #5
 8004820:	d037      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b06      	cmp	r3, #6
 8004828:	d033      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b06      	cmp	r3, #6
 8004830:	d02f      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b05      	cmp	r3, #5
 8004838:	d02b      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b06      	cmp	r3, #6
 8004840:	d027      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b07      	cmp	r3, #7
 8004848:	d023      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b07      	cmp	r3, #7
 8004850:	d01f      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b07      	cmp	r3, #7
 8004858:	d01b      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b08      	cmp	r3, #8
 8004860:	d017      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b0a      	cmp	r3, #10
 8004868:	d013      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b09      	cmp	r3, #9
 8004870:	d00f      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	2b09      	cmp	r3, #9
 8004878:	d00b      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b0c      	cmp	r3, #12
 8004880:	d007      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b0f      	cmp	r3, #15
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_Init+0x326>
 800488a:	21de      	movs	r1, #222	; 0xde
 800488c:	4813      	ldr	r0, [pc, #76]	; (80048dc <HAL_GPIO_Init+0x370>)
 800488e:	f7fd fb28 	bl	8001ee2 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	08da      	lsrs	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3208      	adds	r2, #8
 800489a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	220f      	movs	r2, #15
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43db      	mvns	r3, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4013      	ands	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	08da      	lsrs	r2, r3, #3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3208      	adds	r2, #8
 80048d4:	69b9      	ldr	r1, [r7, #24]
 80048d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80048da:	e001      	b.n	80048e0 <HAL_GPIO_Init+0x374>
 80048dc:	08012584 	.word	0x08012584
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	2203      	movs	r2, #3
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 0203 	and.w	r2, r3, #3
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80a2 	beq.w	8004a66 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	4b56      	ldr	r3, [pc, #344]	; (8004a80 <HAL_GPIO_Init+0x514>)
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	4a55      	ldr	r2, [pc, #340]	; (8004a80 <HAL_GPIO_Init+0x514>)
 800492c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004930:	6453      	str	r3, [r2, #68]	; 0x44
 8004932:	4b53      	ldr	r3, [pc, #332]	; (8004a80 <HAL_GPIO_Init+0x514>)
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800493e:	4a51      	ldr	r2, [pc, #324]	; (8004a84 <HAL_GPIO_Init+0x518>)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	089b      	lsrs	r3, r3, #2
 8004944:	3302      	adds	r3, #2
 8004946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	220f      	movs	r2, #15
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43db      	mvns	r3, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4013      	ands	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a48      	ldr	r2, [pc, #288]	; (8004a88 <HAL_GPIO_Init+0x51c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d019      	beq.n	800499e <HAL_GPIO_Init+0x432>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a47      	ldr	r2, [pc, #284]	; (8004a8c <HAL_GPIO_Init+0x520>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <HAL_GPIO_Init+0x42e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a46      	ldr	r2, [pc, #280]	; (8004a90 <HAL_GPIO_Init+0x524>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00d      	beq.n	8004996 <HAL_GPIO_Init+0x42a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a45      	ldr	r2, [pc, #276]	; (8004a94 <HAL_GPIO_Init+0x528>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <HAL_GPIO_Init+0x426>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a44      	ldr	r2, [pc, #272]	; (8004a98 <HAL_GPIO_Init+0x52c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d101      	bne.n	800498e <HAL_GPIO_Init+0x422>
 800498a:	2304      	movs	r3, #4
 800498c:	e008      	b.n	80049a0 <HAL_GPIO_Init+0x434>
 800498e:	2307      	movs	r3, #7
 8004990:	e006      	b.n	80049a0 <HAL_GPIO_Init+0x434>
 8004992:	2303      	movs	r3, #3
 8004994:	e004      	b.n	80049a0 <HAL_GPIO_Init+0x434>
 8004996:	2302      	movs	r3, #2
 8004998:	e002      	b.n	80049a0 <HAL_GPIO_Init+0x434>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <HAL_GPIO_Init+0x434>
 800499e:	2300      	movs	r3, #0
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	f002 0203 	and.w	r2, r2, #3
 80049a6:	0092      	lsls	r2, r2, #2
 80049a8:	4093      	lsls	r3, r2
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049b0:	4934      	ldr	r1, [pc, #208]	; (8004a84 <HAL_GPIO_Init+0x518>)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	3302      	adds	r3, #2
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049be:	4b37      	ldr	r3, [pc, #220]	; (8004a9c <HAL_GPIO_Init+0x530>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049e2:	4a2e      	ldr	r2, [pc, #184]	; (8004a9c <HAL_GPIO_Init+0x530>)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049e8:	4b2c      	ldr	r3, [pc, #176]	; (8004a9c <HAL_GPIO_Init+0x530>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a0c:	4a23      	ldr	r2, [pc, #140]	; (8004a9c <HAL_GPIO_Init+0x530>)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a12:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <HAL_GPIO_Init+0x530>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a36:	4a19      	ldr	r2, [pc, #100]	; (8004a9c <HAL_GPIO_Init+0x530>)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a3c:	4b17      	ldr	r3, [pc, #92]	; (8004a9c <HAL_GPIO_Init+0x530>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a60:	4a0e      	ldr	r2, [pc, #56]	; (8004a9c <HAL_GPIO_Init+0x530>)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	f67f adfe 	bls.w	8004670 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3720      	adds	r7, #32
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40013800 	.word	0x40013800
 8004a88:	40020000 	.word	0x40020000
 8004a8c:	40020400 	.word	0x40020400
 8004a90:	40020800 	.word	0x40020800
 8004a94:	40020c00 	.word	0x40020c00
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40013c00 	.word	0x40013c00

08004aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	807b      	strh	r3, [r7, #2]
 8004aac:	4613      	mov	r3, r2
 8004aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004ab0:	887b      	ldrh	r3, [r7, #2]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d004      	beq.n	8004ac0 <HAL_GPIO_WritePin+0x20>
 8004ab6:	887b      	ldrh	r3, [r7, #2]
 8004ab8:	0c1b      	lsrs	r3, r3, #16
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d004      	beq.n	8004aca <HAL_GPIO_WritePin+0x2a>
 8004ac0:	f240 119d 	movw	r1, #413	; 0x19d
 8004ac4:	480e      	ldr	r0, [pc, #56]	; (8004b00 <HAL_GPIO_WritePin+0x60>)
 8004ac6:	f7fd fa0c 	bl	8001ee2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004aca:	787b      	ldrb	r3, [r7, #1]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <HAL_GPIO_WritePin+0x40>
 8004ad0:	787b      	ldrb	r3, [r7, #1]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d004      	beq.n	8004ae0 <HAL_GPIO_WritePin+0x40>
 8004ad6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8004ada:	4809      	ldr	r0, [pc, #36]	; (8004b00 <HAL_GPIO_WritePin+0x60>)
 8004adc:	f7fd fa01 	bl	8001ee2 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004ae0:	787b      	ldrb	r3, [r7, #1]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ae6:	887a      	ldrh	r2, [r7, #2]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004aec:	e003      	b.n	8004af6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004aee:	887b      	ldrh	r3, [r7, #2]
 8004af0:	041a      	lsls	r2, r3, #16
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	619a      	str	r2, [r3, #24]
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	08012584 	.word	0x08012584

08004b04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b0e:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d006      	beq.n	8004b28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b1a:	4a05      	ldr	r2, [pc, #20]	; (8004b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fd fec8 	bl	80028b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b28:	bf00      	nop
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40013c00 	.word	0x40013c00

08004b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e1bd      	b.n	8004ec2 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a93      	ldr	r2, [pc, #588]	; (8004d98 <HAL_I2C_Init+0x264>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00e      	beq.n	8004b6e <HAL_I2C_Init+0x3a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a91      	ldr	r2, [pc, #580]	; (8004d9c <HAL_I2C_Init+0x268>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d009      	beq.n	8004b6e <HAL_I2C_Init+0x3a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a90      	ldr	r2, [pc, #576]	; (8004da0 <HAL_I2C_Init+0x26c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d004      	beq.n	8004b6e <HAL_I2C_Init+0x3a>
 8004b64:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8004b68:	488e      	ldr	r0, [pc, #568]	; (8004da4 <HAL_I2C_Init+0x270>)
 8004b6a:	f7fd f9ba 	bl	8001ee2 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d004      	beq.n	8004b80 <HAL_I2C_Init+0x4c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	4a8b      	ldr	r2, [pc, #556]	; (8004da8 <HAL_I2C_Init+0x274>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d904      	bls.n	8004b8a <HAL_I2C_Init+0x56>
 8004b80:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004b84:	4887      	ldr	r0, [pc, #540]	; (8004da4 <HAL_I2C_Init+0x270>)
 8004b86:	f7fd f9ac 	bl	8001ee2 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <HAL_I2C_Init+0x72>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b9a:	d004      	beq.n	8004ba6 <HAL_I2C_Init+0x72>
 8004b9c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004ba0:	4880      	ldr	r0, [pc, #512]	; (8004da4 <HAL_I2C_Init+0x270>)
 8004ba2:	f7fd f99e 	bl	8001ee2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bae:	f023 0303 	bic.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d004      	beq.n	8004bc0 <HAL_I2C_Init+0x8c>
 8004bb6:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004bba:	487a      	ldr	r0, [pc, #488]	; (8004da4 <HAL_I2C_Init+0x270>)
 8004bbc:	f7fd f991 	bl	8001ee2 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc8:	d009      	beq.n	8004bde <HAL_I2C_Init+0xaa>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bd2:	d004      	beq.n	8004bde <HAL_I2C_Init+0xaa>
 8004bd4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004bd8:	4872      	ldr	r0, [pc, #456]	; (8004da4 <HAL_I2C_Init+0x270>)
 8004bda:	f7fd f982 	bl	8001ee2 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <HAL_I2C_Init+0xc4>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d004      	beq.n	8004bf8 <HAL_I2C_Init+0xc4>
 8004bee:	f240 11c3 	movw	r1, #451	; 0x1c3
 8004bf2:	486c      	ldr	r0, [pc, #432]	; (8004da4 <HAL_I2C_Init+0x270>)
 8004bf4:	f7fd f975 	bl	8001ee2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d004      	beq.n	8004c0e <HAL_I2C_Init+0xda>
 8004c04:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004c08:	4866      	ldr	r0, [pc, #408]	; (8004da4 <HAL_I2C_Init+0x270>)
 8004c0a:	f7fd f96a 	bl	8001ee2 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <HAL_I2C_Init+0xf4>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	2b40      	cmp	r3, #64	; 0x40
 8004c1c:	d004      	beq.n	8004c28 <HAL_I2C_Init+0xf4>
 8004c1e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004c22:	4860      	ldr	r0, [pc, #384]	; (8004da4 <HAL_I2C_Init+0x270>)
 8004c24:	f7fd f95d 	bl	8001ee2 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_I2C_Init+0x10e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	2b80      	cmp	r3, #128	; 0x80
 8004c36:	d004      	beq.n	8004c42 <HAL_I2C_Init+0x10e>
 8004c38:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8004c3c:	4859      	ldr	r0, [pc, #356]	; (8004da4 <HAL_I2C_Init+0x270>)
 8004c3e:	f7fd f950 	bl	8001ee2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fc fffa 	bl	8001c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2224      	movs	r2, #36	; 0x24
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c94:	f002 f92a 	bl	8006eec <HAL_RCC_GetPCLK1Freq>
 8004c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4a43      	ldr	r2, [pc, #268]	; (8004dac <HAL_I2C_Init+0x278>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d807      	bhi.n	8004cb4 <HAL_I2C_Init+0x180>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a42      	ldr	r2, [pc, #264]	; (8004db0 <HAL_I2C_Init+0x27c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	bf94      	ite	ls
 8004cac:	2301      	movls	r3, #1
 8004cae:	2300      	movhi	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e006      	b.n	8004cc2 <HAL_I2C_Init+0x18e>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4a3f      	ldr	r2, [pc, #252]	; (8004db4 <HAL_I2C_Init+0x280>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	bf94      	ite	ls
 8004cbc:	2301      	movls	r3, #1
 8004cbe:	2300      	movhi	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e0fb      	b.n	8004ec2 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a3a      	ldr	r2, [pc, #232]	; (8004db8 <HAL_I2C_Init+0x284>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	0c9b      	lsrs	r3, r3, #18
 8004cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <HAL_I2C_Init+0x278>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d802      	bhi.n	8004d04 <HAL_I2C_Init+0x1d0>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	3301      	adds	r3, #1
 8004d02:	e009      	b.n	8004d18 <HAL_I2C_Init+0x1e4>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	4a2b      	ldr	r2, [pc, #172]	; (8004dbc <HAL_I2C_Init+0x288>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	099b      	lsrs	r3, r3, #6
 8004d16:	3301      	adds	r3, #1
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6812      	ldr	r2, [r2, #0]
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	491e      	ldr	r1, [pc, #120]	; (8004dac <HAL_I2C_Init+0x278>)
 8004d34:	428b      	cmp	r3, r1
 8004d36:	d819      	bhi.n	8004d6c <HAL_I2C_Init+0x238>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1e59      	subs	r1, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d46:	1c59      	adds	r1, r3, #1
 8004d48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d4c:	400b      	ands	r3, r1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_I2C_Init+0x234>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1e59      	subs	r1, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d60:	3301      	adds	r3, #1
 8004d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d66:	e065      	b.n	8004e34 <HAL_I2C_Init+0x300>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	e063      	b.n	8004e34 <HAL_I2C_Init+0x300>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d125      	bne.n	8004dc0 <HAL_I2C_Init+0x28c>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1e58      	subs	r0, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6859      	ldr	r1, [r3, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	440b      	add	r3, r1
 8004d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d86:	3301      	adds	r3, #1
 8004d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	e026      	b.n	8004de6 <HAL_I2C_Init+0x2b2>
 8004d98:	40005400 	.word	0x40005400
 8004d9c:	40005800 	.word	0x40005800
 8004da0:	40005c00 	.word	0x40005c00
 8004da4:	080125c0 	.word	0x080125c0
 8004da8:	00061a80 	.word	0x00061a80
 8004dac:	000186a0 	.word	0x000186a0
 8004db0:	001e847f 	.word	0x001e847f
 8004db4:	003d08ff 	.word	0x003d08ff
 8004db8:	431bde83 	.word	0x431bde83
 8004dbc:	10624dd3 	.word	0x10624dd3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	1e58      	subs	r0, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6859      	ldr	r1, [r3, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	0099      	lsls	r1, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_I2C_Init+0x2ba>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e022      	b.n	8004e34 <HAL_I2C_Init+0x300>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10e      	bne.n	8004e14 <HAL_I2C_Init+0x2e0>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1e58      	subs	r0, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6859      	ldr	r1, [r3, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	440b      	add	r3, r1
 8004e04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e08:	3301      	adds	r3, #1
 8004e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e12:	e00f      	b.n	8004e34 <HAL_I2C_Init+0x300>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1e58      	subs	r0, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6859      	ldr	r1, [r3, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	0099      	lsls	r1, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	6809      	ldr	r1, [r1, #0]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6911      	ldr	r1, [r2, #16]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	68d2      	ldr	r2, [r2, #12]
 8004e6e:	4311      	orrs	r1, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	430b      	orrs	r3, r1
 8004e76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop

08004ecc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ece:	b08f      	sub	sp, #60	; 0x3c
 8004ed0:	af0a      	add	r7, sp, #40	; 0x28
 8004ed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e118      	b.n	8005110 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ee6:	d003      	beq.n	8004ef0 <HAL_PCD_Init+0x24>
 8004ee8:	2187      	movs	r1, #135	; 0x87
 8004eea:	488b      	ldr	r0, [pc, #556]	; (8005118 <HAL_PCD_Init+0x24c>)
 8004eec:	f7fc fff9 	bl	8001ee2 <assert_failed>

  USBx = hpcd->Instance;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f00c fa0c 	bl	8011328 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2203      	movs	r2, #3
 8004f14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f005 fa1b 	bl	800a36a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	687e      	ldr	r6, [r7, #4]
 8004f3c:	466d      	mov	r5, sp
 8004f3e:	f106 0410 	add.w	r4, r6, #16
 8004f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f52:	1d33      	adds	r3, r6, #4
 8004f54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f56:	6838      	ldr	r0, [r7, #0]
 8004f58:	f005 f8f2 	bl	800a140 <USB_CoreInit>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e0d0      	b.n	8005110 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2100      	movs	r1, #0
 8004f74:	4618      	mov	r0, r3
 8004f76:	f005 fa09 	bl	800a38c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
 8004f7e:	e04a      	b.n	8005016 <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f80:	7bfa      	ldrb	r2, [r7, #15]
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	333d      	adds	r3, #61	; 0x3d
 8004f90:	2201      	movs	r2, #1
 8004f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f94:	7bfa      	ldrb	r2, [r7, #15]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	333c      	adds	r3, #60	; 0x3c
 8004fa4:	7bfa      	ldrb	r2, [r7, #15]
 8004fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fa8:	7bfa      	ldrb	r2, [r7, #15]
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	b298      	uxth	r0, r3
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3344      	adds	r3, #68	; 0x44
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fc0:	7bfa      	ldrb	r2, [r7, #15]
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	3340      	adds	r3, #64	; 0x40
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fd4:	7bfa      	ldrb	r2, [r7, #15]
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	3348      	adds	r3, #72	; 0x48
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fe8:	7bfa      	ldrb	r2, [r7, #15]
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	334c      	adds	r3, #76	; 0x4c
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ffc:	7bfa      	ldrb	r2, [r7, #15]
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	3354      	adds	r3, #84	; 0x54
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	3301      	adds	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	7bfa      	ldrb	r2, [r7, #15]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	d3af      	bcc.n	8004f80 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005020:	2300      	movs	r3, #0
 8005022:	73fb      	strb	r3, [r7, #15]
 8005024:	e044      	b.n	80050b0 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005026:	7bfa      	ldrb	r2, [r7, #15]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800503c:	7bfa      	ldrb	r2, [r7, #15]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800504e:	7bfa      	ldrb	r2, [r7, #15]
 8005050:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005052:	7bfa      	ldrb	r2, [r7, #15]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005064:	2200      	movs	r2, #0
 8005066:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005068:	7bfa      	ldrb	r2, [r7, #15]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800507e:	7bfa      	ldrb	r2, [r7, #15]
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005094:	7bfa      	ldrb	r2, [r7, #15]
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	4613      	mov	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	3301      	adds	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
 80050b0:	7bfa      	ldrb	r2, [r7, #15]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d3b5      	bcc.n	8005026 <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	687e      	ldr	r6, [r7, #4]
 80050c2:	466d      	mov	r5, sp
 80050c4:	f106 0410 	add.w	r4, r6, #16
 80050c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80050d8:	1d33      	adds	r3, r6, #4
 80050da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050dc:	6838      	ldr	r0, [r7, #0]
 80050de:	f005 f9a1 	bl	800a424 <USB_DevInit>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e00d      	b.n	8005110 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f006 faf0 	bl	800b6ee <USB_DevDisconnect>

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005118:	080125f8 	.word	0x080125f8

0800511c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_PCD_Start+0x1c>
 8005134:	2302      	movs	r3, #2
 8005136:	e020      	b.n	800517a <HAL_PCD_Start+0x5e>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	2b01      	cmp	r3, #1
 8005146:	d109      	bne.n	800515c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800514c:	2b01      	cmp	r3, #1
 800514e:	d005      	beq.n	800515c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f005 f8f1 	bl	800a348 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f006 fa9e 	bl	800b6ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005182:	b590      	push	{r4, r7, lr}
 8005184:	b08d      	sub	sp, #52	; 0x34
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f006 fb5c 	bl	800b856 <USB_GetMode>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f040 848a 	bne.w	8005aba <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f006 fac0 	bl	800b730 <USB_ReadInterrupts>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 8480 	beq.w	8005ab8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	0a1b      	lsrs	r3, r3, #8
 80051c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f006 faad 	bl	800b730 <USB_ReadInterrupts>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d107      	bne.n	80051f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f002 0202 	and.w	r2, r2, #2
 80051ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f006 fa9b 	bl	800b730 <USB_ReadInterrupts>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b10      	cmp	r3, #16
 8005202:	d161      	bne.n	80052c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0210 	bic.w	r2, r2, #16
 8005212:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	f003 020f 	and.w	r2, r3, #15
 8005220:	4613      	mov	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	4413      	add	r3, r2
 8005230:	3304      	adds	r3, #4
 8005232:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	0c5b      	lsrs	r3, r3, #17
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	2b02      	cmp	r3, #2
 800523e:	d124      	bne.n	800528a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005246:	4013      	ands	r3, r2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d035      	beq.n	80052b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800525a:	b29b      	uxth	r3, r3
 800525c:	461a      	mov	r2, r3
 800525e:	6a38      	ldr	r0, [r7, #32]
 8005260:	f006 f8d2 	bl	800b408 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005270:	441a      	add	r2, r3
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	6a1a      	ldr	r2, [r3, #32]
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005282:	441a      	add	r2, r3
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	621a      	str	r2, [r3, #32]
 8005288:	e016      	b.n	80052b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	0c5b      	lsrs	r3, r3, #17
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	2b06      	cmp	r3, #6
 8005294:	d110      	bne.n	80052b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800529c:	2208      	movs	r2, #8
 800529e:	4619      	mov	r1, r3
 80052a0:	6a38      	ldr	r0, [r7, #32]
 80052a2:	f006 f8b1 	bl	800b408 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	6a1a      	ldr	r2, [r3, #32]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052b2:	441a      	add	r2, r3
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0210 	orr.w	r2, r2, #16
 80052c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f006 fa2f 	bl	800b730 <USB_ReadInterrupts>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052dc:	f040 80a7 	bne.w	800542e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f006 fa34 	bl	800b756 <USB_ReadDevAllOutEpInterrupt>
 80052ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80052f0:	e099      	b.n	8005426 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 808e 	beq.w	800541a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f006 fa58 	bl	800b7be <USB_ReadDevOutEPInterrupt>
 800530e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00c      	beq.n	8005334 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	461a      	mov	r2, r3
 8005328:	2301      	movs	r3, #1
 800532a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800532c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fec2 	bl	80060b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	461a      	mov	r2, r3
 800534c:	2308      	movs	r3, #8
 800534e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 ff98 	bl	8006288 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	461a      	mov	r2, r3
 8005370:	2310      	movs	r3, #16
 8005372:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d030      	beq.n	80053e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d109      	bne.n	800539e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800539c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800539e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a0:	4613      	mov	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	4413      	add	r3, r2
 80053b0:	3304      	adds	r3, #4
 80053b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	78db      	ldrb	r3, [r3, #3]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d108      	bne.n	80053ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2200      	movs	r2, #0
 80053c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	4619      	mov	r1, r3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f00c f8a9 	bl	8011520 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	461a      	mov	r2, r3
 80053dc:	2302      	movs	r3, #2
 80053de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d008      	beq.n	80053fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f6:	461a      	mov	r2, r3
 80053f8:	2320      	movs	r3, #32
 80053fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005412:	461a      	mov	r2, r3
 8005414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005418:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	3301      	adds	r3, #1
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	085b      	lsrs	r3, r3, #1
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	2b00      	cmp	r3, #0
 800542a:	f47f af62 	bne.w	80052f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f006 f97c 	bl	800b730 <USB_ReadInterrupts>
 8005438:	4603      	mov	r3, r0
 800543a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800543e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005442:	f040 80db 	bne.w	80055fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f006 f99d 	bl	800b78a <USB_ReadDevAllInEpInterrupt>
 8005450:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005456:	e0cd      	b.n	80055f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 80c2 	beq.w	80055e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	4611      	mov	r1, r2
 800546e:	4618      	mov	r0, r3
 8005470:	f006 f9c3 	bl	800b7fa <USB_ReadDevInEPInterrupt>
 8005474:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d057      	beq.n	8005530 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	2201      	movs	r2, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	43db      	mvns	r3, r3
 800549a:	69f9      	ldr	r1, [r7, #28]
 800549c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054a0:	4013      	ands	r3, r2
 80054a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	461a      	mov	r2, r3
 80054b2:	2301      	movs	r3, #1
 80054b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d132      	bne.n	8005524 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c2:	4613      	mov	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	334c      	adds	r3, #76	; 0x4c
 80054ce:	6819      	ldr	r1, [r3, #0]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4403      	add	r3, r0
 80054de:	3348      	adds	r3, #72	; 0x48
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4419      	add	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	4613      	mov	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4403      	add	r3, r0
 80054f2:	334c      	adds	r3, #76	; 0x4c
 80054f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d113      	bne.n	8005524 <HAL_PCD_IRQHandler+0x3a2>
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	3354      	adds	r3, #84	; 0x54
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d108      	bne.n	8005524 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800551c:	461a      	mov	r2, r3
 800551e:	2101      	movs	r1, #1
 8005520:	f006 f9ca 	bl	800b8b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	b2db      	uxtb	r3, r3
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f00b ff7d 	bl	801142a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d008      	beq.n	800554c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005546:	461a      	mov	r2, r3
 8005548:	2308      	movs	r3, #8
 800554a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005562:	461a      	mov	r2, r3
 8005564:	2310      	movs	r3, #16
 8005566:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	461a      	mov	r2, r3
 8005580:	2340      	movs	r3, #64	; 0x40
 8005582:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d023      	beq.n	80055d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800558e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005590:	6a38      	ldr	r0, [r7, #32]
 8005592:	f005 f8ab 	bl	800a6ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005598:	4613      	mov	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	3338      	adds	r3, #56	; 0x38
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4413      	add	r3, r2
 80055a6:	3304      	adds	r3, #4
 80055a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	78db      	ldrb	r3, [r3, #3]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d108      	bne.n	80055c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2200      	movs	r2, #0
 80055b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f00b ffc0 	bl	8011544 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	461a      	mov	r2, r3
 80055d2:	2302      	movs	r3, #2
 80055d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80055e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fcdb 	bl	8005f9e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	3301      	adds	r3, #1
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f47f af2e 	bne.w	8005458 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f006 f895 	bl	800b730 <USB_ReadInterrupts>
 8005606:	4603      	mov	r3, r0
 8005608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800560c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005610:	d122      	bne.n	8005658 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800562c:	2b01      	cmp	r3, #1
 800562e:	d108      	bne.n	8005642 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005638:	2100      	movs	r1, #0
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fec2 	bl	80063c4 <HAL_PCDEx_LPM_Callback>
 8005640:	e002      	b.n	8005648 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f00b ff5e 	bl	8011504 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f006 f867 	bl	800b730 <USB_ReadInterrupts>
 8005662:	4603      	mov	r3, r0
 8005664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d112      	bne.n	8005694 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d102      	bne.n	8005684 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f00b ff1a 	bl	80114b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005692:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f006 f849 	bl	800b730 <USB_ReadInterrupts>
 800569e:	4603      	mov	r3, r0
 80056a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	f040 80b7 	bne.w	800581a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2110      	movs	r1, #16
 80056c6:	4618      	mov	r0, r3
 80056c8:	f005 f810 	bl	800a6ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056cc:	2300      	movs	r3, #0
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056d0:	e046      	b.n	8005760 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056de:	461a      	mov	r2, r3
 80056e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005700:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005704:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	461a      	mov	r2, r3
 8005714:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005718:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800572a:	0151      	lsls	r1, r2, #5
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	440a      	add	r2, r1
 8005730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005734:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005738:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005754:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005758:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575c:	3301      	adds	r3, #1
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005766:	429a      	cmp	r2, r3
 8005768:	d3b3      	bcc.n	80056d2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005778:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800577c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005782:	2b00      	cmp	r3, #0
 8005784:	d016      	beq.n	80057b4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005796:	f043 030b 	orr.w	r3, r3, #11
 800579a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ac:	f043 030b 	orr.w	r3, r3, #11
 80057b0:	6453      	str	r3, [r2, #68]	; 0x44
 80057b2:	e015      	b.n	80057e0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80057ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057da:	f043 030b 	orr.w	r3, r3, #11
 80057de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80057f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005804:	461a      	mov	r2, r3
 8005806:	f006 f857 	bl	800b8b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f005 ff86 	bl	800b730 <USB_ReadInterrupts>
 8005824:	4603      	mov	r3, r0
 8005826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800582a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800582e:	d124      	bne.n	800587a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f006 f81c 	bl	800b872 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f004 ffd1 	bl	800a7e6 <USB_GetDevSpeed>
 8005844:	4603      	mov	r3, r0
 8005846:	461a      	mov	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681c      	ldr	r4, [r3, #0]
 8005850:	f001 fb40 	bl	8006ed4 <HAL_RCC_GetHCLKFreq>
 8005854:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800585a:	b2db      	uxtb	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	4620      	mov	r0, r4
 8005860:	f004 fcd0 	bl	800a204 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f00b fe08 	bl	801147a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005878:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f005 ff56 	bl	800b730 <USB_ReadInterrupts>
 8005884:	4603      	mov	r3, r0
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b08      	cmp	r3, #8
 800588c:	d10a      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f00b fde5 	bl	801145e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f002 0208 	and.w	r2, r2, #8
 80058a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f005 ff41 	bl	800b730 <USB_ReadInterrupts>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b80      	cmp	r3, #128	; 0x80
 80058b6:	d122      	bne.n	80058fe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058c4:	2301      	movs	r3, #1
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
 80058c8:	e014      	b.n	80058f4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ce:	4613      	mov	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d105      	bne.n	80058ee <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fb27 	bl	8005f3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	3301      	adds	r3, #1
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d3e5      	bcc.n	80058ca <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f005 ff14 	bl	800b730 <USB_ReadInterrupts>
 8005908:	4603      	mov	r3, r0
 800590a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800590e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005912:	d13b      	bne.n	800598c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005914:	2301      	movs	r3, #1
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
 8005918:	e02b      	b.n	8005972 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592e:	4613      	mov	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	3340      	adds	r3, #64	; 0x40
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d115      	bne.n	800596c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005940:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005942:	2b00      	cmp	r3, #0
 8005944:	da12      	bge.n	800596c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594a:	4613      	mov	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	333f      	adds	r3, #63	; 0x3f
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	b2db      	uxtb	r3, r3
 800595e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005962:	b2db      	uxtb	r3, r3
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fae8 	bl	8005f3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	3301      	adds	r3, #1
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005978:	429a      	cmp	r2, r3
 800597a:	d3ce      	bcc.n	800591a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800598a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f005 fecd 	bl	800b730 <USB_ReadInterrupts>
 8005996:	4603      	mov	r3, r0
 8005998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800599c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059a0:	d155      	bne.n	8005a4e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059a2:	2301      	movs	r3, #1
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
 80059a6:	e045      	b.n	8005a34 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059bc:	4613      	mov	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d12e      	bne.n	8005a2e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80059d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	da2b      	bge.n	8005a2e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80059e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d121      	bne.n	8005a2e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ee:	4613      	mov	r3, r2
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80059fc:	2201      	movs	r2, #1
 80059fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a2a:	6053      	str	r3, [r2, #4]
            break;
 8005a2c:	e007      	b.n	8005a3e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	3301      	adds	r3, #1
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d3b4      	bcc.n	80059a8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695a      	ldr	r2, [r3, #20]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f005 fe6c 	bl	800b730 <USB_ReadInterrupts>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a62:	d10a      	bne.n	8005a7a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f00b fd7f 	bl	8011568 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695a      	ldr	r2, [r3, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f005 fe56 	bl	800b730 <USB_ReadInterrupts>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d115      	bne.n	8005aba <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f00b fd6f 	bl	8011584 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6859      	ldr	r1, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	e000      	b.n	8005aba <HAL_PCD_IRQHandler+0x938>
      return;
 8005ab8:	bf00      	nop
    }
  }
}
 8005aba:	3734      	adds	r7, #52	; 0x34
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd90      	pop	{r4, r7, pc}

08005ac0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_PCD_SetAddress+0x1a>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e013      	b.n	8005b02 <HAL_PCD_SetAddress+0x42>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	78fa      	ldrb	r2, [r7, #3]
 8005ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f005 fdb4 	bl	800b660 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	4608      	mov	r0, r1
 8005b14:	4611      	mov	r1, r2
 8005b16:	461a      	mov	r2, r3
 8005b18:	4603      	mov	r3, r0
 8005b1a:	70fb      	strb	r3, [r7, #3]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	803b      	strh	r3, [r7, #0]
 8005b20:	4613      	mov	r3, r2
 8005b22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	da0f      	bge.n	8005b50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	f003 020f 	and.w	r2, r3, #15
 8005b36:	4613      	mov	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	3338      	adds	r3, #56	; 0x38
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	4413      	add	r3, r2
 8005b44:	3304      	adds	r3, #4
 8005b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	705a      	strb	r2, [r3, #1]
 8005b4e:	e00f      	b.n	8005b70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	f003 020f 	and.w	r2, r3, #15
 8005b56:	4613      	mov	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	3304      	adds	r3, #4
 8005b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005b7c:	883a      	ldrh	r2, [r7, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	78ba      	ldrb	r2, [r7, #2]
 8005b86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b9a:	78bb      	ldrb	r3, [r7, #2]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d102      	bne.n	8005ba6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_PCD_EP_Open+0xaa>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e00e      	b.n	8005bd2 <HAL_PCD_EP_Open+0xc8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68f9      	ldr	r1, [r7, #12]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f004 fe34 	bl	800a830 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	da0f      	bge.n	8005c0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	f003 020f 	and.w	r2, r3, #15
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	3338      	adds	r3, #56	; 0x38
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	4413      	add	r3, r2
 8005c02:	3304      	adds	r3, #4
 8005c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	705a      	strb	r2, [r3, #1]
 8005c0c:	e00f      	b.n	8005c2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	f003 020f 	and.w	r2, r3, #15
 8005c14:	4613      	mov	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	3304      	adds	r3, #4
 8005c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_PCD_EP_Close+0x6e>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e00e      	b.n	8005c66 <HAL_PCD_EP_Close+0x8c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68f9      	ldr	r1, [r7, #12]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f004 fe72 	bl	800a940 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b086      	sub	sp, #24
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	f003 020f 	and.w	r2, r3, #15
 8005c84:	4613      	mov	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	3304      	adds	r3, #4
 8005c96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2200      	movs	r2, #0
 8005cae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cb0:	7afb      	ldrb	r3, [r7, #11]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d102      	bne.n	8005cca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cca:	7afb      	ldrb	r3, [r7, #11]
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6979      	ldr	r1, [r7, #20]
 8005ce2:	f005 f951 	bl	800af88 <USB_EP0StartXfer>
 8005ce6:	e008      	b.n	8005cfa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6979      	ldr	r1, [r7, #20]
 8005cf6:	f004 feff 	bl	800aaf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	f003 020f 	and.w	r2, r3, #15
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005d26:	681b      	ldr	r3, [r3, #0]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	460b      	mov	r3, r1
 8005d42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d44:	7afb      	ldrb	r3, [r7, #11]
 8005d46:	f003 020f 	and.w	r2, r3, #15
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	3338      	adds	r3, #56	; 0x38
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	3304      	adds	r3, #4
 8005d5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2201      	movs	r2, #1
 8005d72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d74:	7afb      	ldrb	r3, [r7, #11]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d102      	bne.n	8005d8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d8e:	7afb      	ldrb	r3, [r7, #11]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	6979      	ldr	r1, [r7, #20]
 8005da6:	f005 f8ef 	bl	800af88 <USB_EP0StartXfer>
 8005daa:	e008      	b.n	8005dbe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	6979      	ldr	r1, [r7, #20]
 8005dba:	f004 fe9d 	bl	800aaf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	f003 020f 	and.w	r2, r3, #15
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d901      	bls.n	8005de6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e050      	b.n	8005e88 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da0f      	bge.n	8005e0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 020f 	and.w	r2, r3, #15
 8005df4:	4613      	mov	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	3338      	adds	r3, #56	; 0x38
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4413      	add	r3, r2
 8005e02:	3304      	adds	r3, #4
 8005e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	705a      	strb	r2, [r3, #1]
 8005e0c:	e00d      	b.n	8005e2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e0e:	78fa      	ldrb	r2, [r7, #3]
 8005e10:	4613      	mov	r3, r2
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	4413      	add	r3, r2
 8005e20:	3304      	adds	r3, #4
 8005e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_PCD_EP_SetStall+0x82>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e01e      	b.n	8005e88 <HAL_PCD_EP_SetStall+0xc0>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f005 fb2d 	bl	800b4b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	b2d9      	uxtb	r1, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f005 fd1d 	bl	800b8b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	f003 020f 	and.w	r2, r3, #15
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d901      	bls.n	8005eae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e042      	b.n	8005f34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	da0f      	bge.n	8005ed6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	f003 020f 	and.w	r2, r3, #15
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	3338      	adds	r3, #56	; 0x38
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	3304      	adds	r3, #4
 8005ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	705a      	strb	r2, [r3, #1]
 8005ed4:	e00f      	b.n	8005ef6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ed6:	78fb      	ldrb	r3, [r7, #3]
 8005ed8:	f003 020f 	and.w	r2, r3, #15
 8005edc:	4613      	mov	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	4413      	add	r3, r2
 8005eec:	3304      	adds	r3, #4
 8005eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_PCD_EP_ClrStall+0x86>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e00e      	b.n	8005f34 <HAL_PCD_EP_ClrStall+0xa4>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68f9      	ldr	r1, [r7, #12]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f005 fb35 	bl	800b594 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	da0c      	bge.n	8005f6a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	f003 020f 	and.w	r2, r3, #15
 8005f56:	4613      	mov	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	3338      	adds	r3, #56	; 0x38
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	4413      	add	r3, r2
 8005f64:	3304      	adds	r3, #4
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e00c      	b.n	8005f84 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	f003 020f 	and.w	r2, r3, #15
 8005f70:	4613      	mov	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	4413      	add	r3, r2
 8005f80:	3304      	adds	r3, #4
 8005f82:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68f9      	ldr	r1, [r7, #12]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f005 f954 	bl	800b238 <USB_EPStopXfer>
 8005f90:	4603      	mov	r3, r0
 8005f92:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005f94:	7afb      	ldrb	r3, [r7, #11]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b08a      	sub	sp, #40	; 0x28
 8005fa2:	af02      	add	r7, sp, #8
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	3338      	adds	r3, #56	; 0x38
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a1a      	ldr	r2, [r3, #32]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d901      	bls.n	8005fd6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e06c      	b.n	80060b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d902      	bls.n	8005ff2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3303      	adds	r3, #3
 8005ff6:	089b      	lsrs	r3, r3, #2
 8005ff8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ffa:	e02b      	b.n	8006054 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	699a      	ldr	r2, [r3, #24]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	429a      	cmp	r2, r3
 8006010:	d902      	bls.n	8006018 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	3303      	adds	r3, #3
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6919      	ldr	r1, [r3, #16]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006030:	b2db      	uxtb	r3, r3
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	4603      	mov	r3, r0
 8006036:	6978      	ldr	r0, [r7, #20]
 8006038:	f005 f9a8 	bl	800b38c <USB_WritePacket>

    ep->xfer_buff  += len;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	441a      	add	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	441a      	add	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	b29b      	uxth	r3, r3
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	429a      	cmp	r2, r3
 8006068:	d809      	bhi.n	800607e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1a      	ldr	r2, [r3, #32]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006072:	429a      	cmp	r2, r3
 8006074:	d203      	bcs.n	800607e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1be      	bne.n	8005ffc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	429a      	cmp	r2, r3
 8006088:	d811      	bhi.n	80060ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	2201      	movs	r2, #1
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	43db      	mvns	r3, r3
 80060a4:	6939      	ldr	r1, [r7, #16]
 80060a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060aa:	4013      	ands	r3, r2
 80060ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	333c      	adds	r3, #60	; 0x3c
 80060d0:	3304      	adds	r3, #4
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d17b      	bne.n	80061e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d015      	beq.n	8006124 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	4a61      	ldr	r2, [pc, #388]	; (8006280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	f240 80b9 	bls.w	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80b3 	beq.w	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611a:	461a      	mov	r2, r3
 800611c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006120:	6093      	str	r3, [r2, #8]
 8006122:	e0a7      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	461a      	mov	r2, r3
 800613c:	2320      	movs	r3, #32
 800613e:	6093      	str	r3, [r2, #8]
 8006140:	e098      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 8093 	bne.w	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4a4b      	ldr	r2, [pc, #300]	; (8006280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d90f      	bls.n	8006176 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616c:	461a      	mov	r2, r3
 800616e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006172:	6093      	str	r3, [r2, #8]
 8006174:	e07e      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	4613      	mov	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	4413      	add	r3, r2
 8006188:	3304      	adds	r3, #4
 800618a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	0159      	lsls	r1, r3, #5
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	440b      	add	r3, r1
 8006198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a2:	1ad2      	subs	r2, r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d114      	bne.n	80061d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061c0:	461a      	mov	r2, r3
 80061c2:	2101      	movs	r1, #1
 80061c4:	f005 fb78 	bl	800b8b8 <USB_EP0_OutStart>
 80061c8:	e006      	b.n	80061d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	441a      	add	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f00b f908 	bl	80113f4 <HAL_PCD_DataOutStageCallback>
 80061e4:	e046      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	4a26      	ldr	r2, [pc, #152]	; (8006284 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d124      	bne.n	8006238 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006204:	461a      	mov	r2, r3
 8006206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620a:	6093      	str	r3, [r2, #8]
 800620c:	e032      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	461a      	mov	r2, r3
 8006226:	2320      	movs	r3, #32
 8006228:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f00b f8df 	bl	80113f4 <HAL_PCD_DataOutStageCallback>
 8006236:	e01d      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d114      	bne.n	8006268 <PCD_EP_OutXfrComplete_int+0x1b0>
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	4613      	mov	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d108      	bne.n	8006268 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006260:	461a      	mov	r2, r3
 8006262:	2100      	movs	r1, #0
 8006264:	f005 fb28 	bl	800b8b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f00b f8c0 	bl	80113f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	4f54300a 	.word	0x4f54300a
 8006284:	4f54310a 	.word	0x4f54310a

08006288 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	333c      	adds	r3, #60	; 0x3c
 80062a0:	3304      	adds	r3, #4
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4a15      	ldr	r2, [pc, #84]	; (8006310 <PCD_EP_OutSetupPacket_int+0x88>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d90e      	bls.n	80062dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d009      	beq.n	80062dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d4:	461a      	mov	r2, r3
 80062d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f00b f877 	bl	80113d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <PCD_EP_OutSetupPacket_int+0x88>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d90c      	bls.n	8006304 <PCD_EP_OutSetupPacket_int+0x7c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d108      	bne.n	8006304 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062fc:	461a      	mov	r2, r3
 80062fe:	2101      	movs	r1, #1
 8006300:	f005 fada 	bl	800b8b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	4f54300a 	.word	0x4f54300a

08006314 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
 8006320:	4613      	mov	r3, r2
 8006322:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d107      	bne.n	8006342 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006332:	883b      	ldrh	r3, [r7, #0]
 8006334:	0419      	lsls	r1, r3, #16
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	430a      	orrs	r2, r1
 800633e:	629a      	str	r2, [r3, #40]	; 0x28
 8006340:	e028      	b.n	8006394 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	0c1b      	lsrs	r3, r3, #16
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4413      	add	r3, r2
 800634e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006350:	2300      	movs	r3, #0
 8006352:	73fb      	strb	r3, [r7, #15]
 8006354:	e00d      	b.n	8006372 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	3340      	adds	r3, #64	; 0x40
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	0c1b      	lsrs	r3, r3, #16
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	4413      	add	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	3301      	adds	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
 8006372:	7bfa      	ldrb	r2, [r7, #15]
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	3b01      	subs	r3, #1
 8006378:	429a      	cmp	r2, r3
 800637a:	d3ec      	bcc.n	8006356 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800637c:	883b      	ldrh	r3, [r7, #0]
 800637e:	0418      	lsls	r0, r3, #16
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6819      	ldr	r1, [r3, #0]
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	3b01      	subs	r3, #1
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	4302      	orrs	r2, r0
 800638c:	3340      	adds	r3, #64	; 0x40
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	887a      	ldrh	r2, [r7, #2]
 80063b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e314      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b0f      	cmp	r3, #15
 80063f4:	d903      	bls.n	80063fe <HAL_RCC_OscConfig+0x22>
 80063f6:	21e6      	movs	r1, #230	; 0xe6
 80063f8:	4897      	ldr	r0, [pc, #604]	; (8006658 <HAL_RCC_OscConfig+0x27c>)
 80063fa:	f7fb fd72 	bl	8001ee2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 8088 	beq.w	800651c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00d      	beq.n	8006430 <HAL_RCC_OscConfig+0x54>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641c:	d008      	beq.n	8006430 <HAL_RCC_OscConfig+0x54>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006426:	d003      	beq.n	8006430 <HAL_RCC_OscConfig+0x54>
 8006428:	21eb      	movs	r1, #235	; 0xeb
 800642a:	488b      	ldr	r0, [pc, #556]	; (8006658 <HAL_RCC_OscConfig+0x27c>)
 800642c:	f7fb fd59 	bl	8001ee2 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006430:	4b8a      	ldr	r3, [pc, #552]	; (800665c <HAL_RCC_OscConfig+0x280>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 030c 	and.w	r3, r3, #12
 8006438:	2b04      	cmp	r3, #4
 800643a:	d00c      	beq.n	8006456 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800643c:	4b87      	ldr	r3, [pc, #540]	; (800665c <HAL_RCC_OscConfig+0x280>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006444:	2b08      	cmp	r3, #8
 8006446:	d112      	bne.n	800646e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006448:	4b84      	ldr	r3, [pc, #528]	; (800665c <HAL_RCC_OscConfig+0x280>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006454:	d10b      	bne.n	800646e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006456:	4b81      	ldr	r3, [pc, #516]	; (800665c <HAL_RCC_OscConfig+0x280>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d05b      	beq.n	800651a <HAL_RCC_OscConfig+0x13e>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d157      	bne.n	800651a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e2d4      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006476:	d106      	bne.n	8006486 <HAL_RCC_OscConfig+0xaa>
 8006478:	4b78      	ldr	r3, [pc, #480]	; (800665c <HAL_RCC_OscConfig+0x280>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a77      	ldr	r2, [pc, #476]	; (800665c <HAL_RCC_OscConfig+0x280>)
 800647e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	e01d      	b.n	80064c2 <HAL_RCC_OscConfig+0xe6>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800648e:	d10c      	bne.n	80064aa <HAL_RCC_OscConfig+0xce>
 8006490:	4b72      	ldr	r3, [pc, #456]	; (800665c <HAL_RCC_OscConfig+0x280>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a71      	ldr	r2, [pc, #452]	; (800665c <HAL_RCC_OscConfig+0x280>)
 8006496:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	4b6f      	ldr	r3, [pc, #444]	; (800665c <HAL_RCC_OscConfig+0x280>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a6e      	ldr	r2, [pc, #440]	; (800665c <HAL_RCC_OscConfig+0x280>)
 80064a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	e00b      	b.n	80064c2 <HAL_RCC_OscConfig+0xe6>
 80064aa:	4b6c      	ldr	r3, [pc, #432]	; (800665c <HAL_RCC_OscConfig+0x280>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a6b      	ldr	r2, [pc, #428]	; (800665c <HAL_RCC_OscConfig+0x280>)
 80064b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	4b69      	ldr	r3, [pc, #420]	; (800665c <HAL_RCC_OscConfig+0x280>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a68      	ldr	r2, [pc, #416]	; (800665c <HAL_RCC_OscConfig+0x280>)
 80064bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d013      	beq.n	80064f2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ca:	f7fc fdf9 	bl	80030c0 <HAL_GetTick>
 80064ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064d2:	f7fc fdf5 	bl	80030c0 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b64      	cmp	r3, #100	; 0x64
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e299      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064e4:	4b5d      	ldr	r3, [pc, #372]	; (800665c <HAL_RCC_OscConfig+0x280>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f0      	beq.n	80064d2 <HAL_RCC_OscConfig+0xf6>
 80064f0:	e014      	b.n	800651c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f2:	f7fc fde5 	bl	80030c0 <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064fa:	f7fc fde1 	bl	80030c0 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b64      	cmp	r3, #100	; 0x64
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e285      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800650c:	4b53      	ldr	r3, [pc, #332]	; (800665c <HAL_RCC_OscConfig+0x280>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f0      	bne.n	80064fa <HAL_RCC_OscConfig+0x11e>
 8006518:	e000      	b.n	800651c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800651a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d079      	beq.n	800661c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <HAL_RCC_OscConfig+0x166>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d004      	beq.n	8006542 <HAL_RCC_OscConfig+0x166>
 8006538:	f240 111d 	movw	r1, #285	; 0x11d
 800653c:	4846      	ldr	r0, [pc, #280]	; (8006658 <HAL_RCC_OscConfig+0x27c>)
 800653e:	f7fb fcd0 	bl	8001ee2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b1f      	cmp	r3, #31
 8006548:	d904      	bls.n	8006554 <HAL_RCC_OscConfig+0x178>
 800654a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800654e:	4842      	ldr	r0, [pc, #264]	; (8006658 <HAL_RCC_OscConfig+0x27c>)
 8006550:	f7fb fcc7 	bl	8001ee2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006554:	4b41      	ldr	r3, [pc, #260]	; (800665c <HAL_RCC_OscConfig+0x280>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f003 030c 	and.w	r3, r3, #12
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006560:	4b3e      	ldr	r3, [pc, #248]	; (800665c <HAL_RCC_OscConfig+0x280>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006568:	2b08      	cmp	r3, #8
 800656a:	d11c      	bne.n	80065a6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800656c:	4b3b      	ldr	r3, [pc, #236]	; (800665c <HAL_RCC_OscConfig+0x280>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d116      	bne.n	80065a6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006578:	4b38      	ldr	r3, [pc, #224]	; (800665c <HAL_RCC_OscConfig+0x280>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <HAL_RCC_OscConfig+0x1b4>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d001      	beq.n	8006590 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e243      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006590:	4b32      	ldr	r3, [pc, #200]	; (800665c <HAL_RCC_OscConfig+0x280>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	00db      	lsls	r3, r3, #3
 800659e:	492f      	ldr	r1, [pc, #188]	; (800665c <HAL_RCC_OscConfig+0x280>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065a4:	e03a      	b.n	800661c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d020      	beq.n	80065f0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065ae:	4b2c      	ldr	r3, [pc, #176]	; (8006660 <HAL_RCC_OscConfig+0x284>)
 80065b0:	2201      	movs	r2, #1
 80065b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b4:	f7fc fd84 	bl	80030c0 <HAL_GetTick>
 80065b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ba:	e008      	b.n	80065ce <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065bc:	f7fc fd80 	bl	80030c0 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e224      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ce:	4b23      	ldr	r3, [pc, #140]	; (800665c <HAL_RCC_OscConfig+0x280>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0f0      	beq.n	80065bc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065da:	4b20      	ldr	r3, [pc, #128]	; (800665c <HAL_RCC_OscConfig+0x280>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	491c      	ldr	r1, [pc, #112]	; (800665c <HAL_RCC_OscConfig+0x280>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	600b      	str	r3, [r1, #0]
 80065ee:	e015      	b.n	800661c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065f0:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <HAL_RCC_OscConfig+0x284>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f6:	f7fc fd63 	bl	80030c0 <HAL_GetTick>
 80065fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065fc:	e008      	b.n	8006610 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065fe:	f7fc fd5f 	bl	80030c0 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e203      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006610:	4b12      	ldr	r3, [pc, #72]	; (800665c <HAL_RCC_OscConfig+0x280>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1f0      	bne.n	80065fe <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b00      	cmp	r3, #0
 8006626:	d045      	beq.n	80066b4 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d008      	beq.n	8006642 <HAL_RCC_OscConfig+0x266>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d004      	beq.n	8006642 <HAL_RCC_OscConfig+0x266>
 8006638:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800663c:	4806      	ldr	r0, [pc, #24]	; (8006658 <HAL_RCC_OscConfig+0x27c>)
 800663e:	f7fb fc50 	bl	8001ee2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01e      	beq.n	8006688 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800664a:	4b06      	ldr	r3, [pc, #24]	; (8006664 <HAL_RCC_OscConfig+0x288>)
 800664c:	2201      	movs	r2, #1
 800664e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006650:	f7fc fd36 	bl	80030c0 <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006656:	e010      	b.n	800667a <HAL_RCC_OscConfig+0x29e>
 8006658:	08012630 	.word	0x08012630
 800665c:	40023800 	.word	0x40023800
 8006660:	42470000 	.word	0x42470000
 8006664:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006668:	f7fc fd2a 	bl	80030c0 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e1ce      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800667a:	4b5e      	ldr	r3, [pc, #376]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 800667c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f0      	beq.n	8006668 <HAL_RCC_OscConfig+0x28c>
 8006686:	e015      	b.n	80066b4 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006688:	4b5b      	ldr	r3, [pc, #364]	; (80067f8 <HAL_RCC_OscConfig+0x41c>)
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800668e:	f7fc fd17 	bl	80030c0 <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006696:	f7fc fd13 	bl	80030c0 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e1b7      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066a8:	4b52      	ldr	r3, [pc, #328]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 80066aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f0      	bne.n	8006696 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 80b0 	beq.w	8006822 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066c2:	2300      	movs	r3, #0
 80066c4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00c      	beq.n	80066e8 <HAL_RCC_OscConfig+0x30c>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d008      	beq.n	80066e8 <HAL_RCC_OscConfig+0x30c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	2b05      	cmp	r3, #5
 80066dc:	d004      	beq.n	80066e8 <HAL_RCC_OscConfig+0x30c>
 80066de:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80066e2:	4846      	ldr	r0, [pc, #280]	; (80067fc <HAL_RCC_OscConfig+0x420>)
 80066e4:	f7fb fbfd 	bl	8001ee2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066e8:	4b42      	ldr	r3, [pc, #264]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10f      	bne.n	8006714 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066f4:	2300      	movs	r3, #0
 80066f6:	60bb      	str	r3, [r7, #8]
 80066f8:	4b3e      	ldr	r3, [pc, #248]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	4a3d      	ldr	r2, [pc, #244]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 80066fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006702:	6413      	str	r3, [r2, #64]	; 0x40
 8006704:	4b3b      	ldr	r3, [pc, #236]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006710:	2301      	movs	r3, #1
 8006712:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006714:	4b3a      	ldr	r3, [pc, #232]	; (8006800 <HAL_RCC_OscConfig+0x424>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671c:	2b00      	cmp	r3, #0
 800671e:	d118      	bne.n	8006752 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006720:	4b37      	ldr	r3, [pc, #220]	; (8006800 <HAL_RCC_OscConfig+0x424>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a36      	ldr	r2, [pc, #216]	; (8006800 <HAL_RCC_OscConfig+0x424>)
 8006726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800672a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800672c:	f7fc fcc8 	bl	80030c0 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006734:	f7fc fcc4 	bl	80030c0 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e168      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006746:	4b2e      	ldr	r3, [pc, #184]	; (8006800 <HAL_RCC_OscConfig+0x424>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0f0      	beq.n	8006734 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d106      	bne.n	8006768 <HAL_RCC_OscConfig+0x38c>
 800675a:	4b26      	ldr	r3, [pc, #152]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	4a25      	ldr	r2, [pc, #148]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	6713      	str	r3, [r2, #112]	; 0x70
 8006766:	e01c      	b.n	80067a2 <HAL_RCC_OscConfig+0x3c6>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b05      	cmp	r3, #5
 800676e:	d10c      	bne.n	800678a <HAL_RCC_OscConfig+0x3ae>
 8006770:	4b20      	ldr	r3, [pc, #128]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 8006772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006774:	4a1f      	ldr	r2, [pc, #124]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 8006776:	f043 0304 	orr.w	r3, r3, #4
 800677a:	6713      	str	r3, [r2, #112]	; 0x70
 800677c:	4b1d      	ldr	r3, [pc, #116]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 800677e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006780:	4a1c      	ldr	r2, [pc, #112]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 8006782:	f043 0301 	orr.w	r3, r3, #1
 8006786:	6713      	str	r3, [r2, #112]	; 0x70
 8006788:	e00b      	b.n	80067a2 <HAL_RCC_OscConfig+0x3c6>
 800678a:	4b1a      	ldr	r3, [pc, #104]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 800678c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678e:	4a19      	ldr	r2, [pc, #100]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 8006790:	f023 0301 	bic.w	r3, r3, #1
 8006794:	6713      	str	r3, [r2, #112]	; 0x70
 8006796:	4b17      	ldr	r3, [pc, #92]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	4a16      	ldr	r2, [pc, #88]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 800679c:	f023 0304 	bic.w	r3, r3, #4
 80067a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d015      	beq.n	80067d6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067aa:	f7fc fc89 	bl	80030c0 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b0:	e00a      	b.n	80067c8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067b2:	f7fc fc85 	bl	80030c0 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e127      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c8:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <HAL_RCC_OscConfig+0x418>)
 80067ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0ee      	beq.n	80067b2 <HAL_RCC_OscConfig+0x3d6>
 80067d4:	e01c      	b.n	8006810 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067d6:	f7fc fc73 	bl	80030c0 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067dc:	e012      	b.n	8006804 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067de:	f7fc fc6f 	bl	80030c0 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d909      	bls.n	8006804 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e111      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
 80067f4:	40023800 	.word	0x40023800
 80067f8:	42470e80 	.word	0x42470e80
 80067fc:	08012630 	.word	0x08012630
 8006800:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006804:	4b86      	ldr	r3, [pc, #536]	; (8006a20 <HAL_RCC_OscConfig+0x644>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e6      	bne.n	80067de <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006810:	7dfb      	ldrb	r3, [r7, #23]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d105      	bne.n	8006822 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006816:	4b82      	ldr	r3, [pc, #520]	; (8006a20 <HAL_RCC_OscConfig+0x644>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	4a81      	ldr	r2, [pc, #516]	; (8006a20 <HAL_RCC_OscConfig+0x644>)
 800681c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006820:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00c      	beq.n	8006844 <HAL_RCC_OscConfig+0x468>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d008      	beq.n	8006844 <HAL_RCC_OscConfig+0x468>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d004      	beq.n	8006844 <HAL_RCC_OscConfig+0x468>
 800683a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800683e:	4879      	ldr	r0, [pc, #484]	; (8006a24 <HAL_RCC_OscConfig+0x648>)
 8006840:	f7fb fb4f 	bl	8001ee2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80e4 	beq.w	8006a16 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800684e:	4b74      	ldr	r3, [pc, #464]	; (8006a20 <HAL_RCC_OscConfig+0x644>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 030c 	and.w	r3, r3, #12
 8006856:	2b08      	cmp	r3, #8
 8006858:	f000 80a5 	beq.w	80069a6 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	2b02      	cmp	r3, #2
 8006862:	f040 8089 	bne.w	8006978 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d009      	beq.n	8006882 <HAL_RCC_OscConfig+0x4a6>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006876:	d004      	beq.n	8006882 <HAL_RCC_OscConfig+0x4a6>
 8006878:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800687c:	4869      	ldr	r0, [pc, #420]	; (8006a24 <HAL_RCC_OscConfig+0x648>)
 800687e:	f7fb fb30 	bl	8001ee2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	2b3f      	cmp	r3, #63	; 0x3f
 8006888:	d904      	bls.n	8006894 <HAL_RCC_OscConfig+0x4b8>
 800688a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800688e:	4865      	ldr	r0, [pc, #404]	; (8006a24 <HAL_RCC_OscConfig+0x648>)
 8006890:	f7fb fb27 	bl	8001ee2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	2b31      	cmp	r3, #49	; 0x31
 800689a:	d904      	bls.n	80068a6 <HAL_RCC_OscConfig+0x4ca>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80068a4:	d904      	bls.n	80068b0 <HAL_RCC_OscConfig+0x4d4>
 80068a6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80068aa:	485e      	ldr	r0, [pc, #376]	; (8006a24 <HAL_RCC_OscConfig+0x648>)
 80068ac:	f7fb fb19 	bl	8001ee2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d010      	beq.n	80068da <HAL_RCC_OscConfig+0x4fe>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068bc:	2b04      	cmp	r3, #4
 80068be:	d00c      	beq.n	80068da <HAL_RCC_OscConfig+0x4fe>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	2b06      	cmp	r3, #6
 80068c6:	d008      	beq.n	80068da <HAL_RCC_OscConfig+0x4fe>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d004      	beq.n	80068da <HAL_RCC_OscConfig+0x4fe>
 80068d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80068d4:	4853      	ldr	r0, [pc, #332]	; (8006a24 <HAL_RCC_OscConfig+0x648>)
 80068d6:	f7fb fb04 	bl	8001ee2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d903      	bls.n	80068ea <HAL_RCC_OscConfig+0x50e>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e6:	2b0f      	cmp	r3, #15
 80068e8:	d904      	bls.n	80068f4 <HAL_RCC_OscConfig+0x518>
 80068ea:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80068ee:	484d      	ldr	r0, [pc, #308]	; (8006a24 <HAL_RCC_OscConfig+0x648>)
 80068f0:	f7fb faf7 	bl	8001ee2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f4:	4b4c      	ldr	r3, [pc, #304]	; (8006a28 <HAL_RCC_OscConfig+0x64c>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fa:	f7fc fbe1 	bl	80030c0 <HAL_GetTick>
 80068fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006900:	e008      	b.n	8006914 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006902:	f7fc fbdd 	bl	80030c0 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e081      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006914:	4b42      	ldr	r3, [pc, #264]	; (8006a20 <HAL_RCC_OscConfig+0x644>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1f0      	bne.n	8006902 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	69da      	ldr	r2, [r3, #28]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	019b      	lsls	r3, r3, #6
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	3b01      	subs	r3, #1
 800693a:	041b      	lsls	r3, r3, #16
 800693c:	431a      	orrs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	061b      	lsls	r3, r3, #24
 8006944:	4936      	ldr	r1, [pc, #216]	; (8006a20 <HAL_RCC_OscConfig+0x644>)
 8006946:	4313      	orrs	r3, r2
 8006948:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800694a:	4b37      	ldr	r3, [pc, #220]	; (8006a28 <HAL_RCC_OscConfig+0x64c>)
 800694c:	2201      	movs	r2, #1
 800694e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006950:	f7fc fbb6 	bl	80030c0 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006958:	f7fc fbb2 	bl	80030c0 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e056      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800696a:	4b2d      	ldr	r3, [pc, #180]	; (8006a20 <HAL_RCC_OscConfig+0x644>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0f0      	beq.n	8006958 <HAL_RCC_OscConfig+0x57c>
 8006976:	e04e      	b.n	8006a16 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006978:	4b2b      	ldr	r3, [pc, #172]	; (8006a28 <HAL_RCC_OscConfig+0x64c>)
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800697e:	f7fc fb9f 	bl	80030c0 <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006984:	e008      	b.n	8006998 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006986:	f7fc fb9b 	bl	80030c0 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d901      	bls.n	8006998 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e03f      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006998:	4b21      	ldr	r3, [pc, #132]	; (8006a20 <HAL_RCC_OscConfig+0x644>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f0      	bne.n	8006986 <HAL_RCC_OscConfig+0x5aa>
 80069a4:	e037      	b.n	8006a16 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e032      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069b2:	4b1b      	ldr	r3, [pc, #108]	; (8006a20 <HAL_RCC_OscConfig+0x644>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d028      	beq.n	8006a12 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d121      	bne.n	8006a12 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069d8:	429a      	cmp	r2, r3
 80069da:	d11a      	bne.n	8006a12 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069e2:	4013      	ands	r3, r2
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d111      	bne.n	8006a12 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	085b      	lsrs	r3, r3, #1
 80069fa:	3b01      	subs	r3, #1
 80069fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d107      	bne.n	8006a12 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d001      	beq.n	8006a16 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	40023800 	.word	0x40023800
 8006a24:	08012630 	.word	0x08012630
 8006a28:	42470060 	.word	0x42470060

08006a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e174      	b.n	8006d2a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_RCC_ClockConfig+0x24>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b0f      	cmp	r3, #15
 8006a4e:	d904      	bls.n	8006a5a <HAL_RCC_ClockConfig+0x2e>
 8006a50:	f240 215a 	movw	r1, #602	; 0x25a
 8006a54:	487b      	ldr	r0, [pc, #492]	; (8006c44 <HAL_RCC_ClockConfig+0x218>)
 8006a56:	f7fb fa44 	bl	8001ee2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d019      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x68>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d016      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x68>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d013      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x68>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d010      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x68>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d00d      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x68>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b05      	cmp	r3, #5
 8006a7c:	d00a      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x68>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b06      	cmp	r3, #6
 8006a82:	d007      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x68>
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b07      	cmp	r3, #7
 8006a88:	d004      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x68>
 8006a8a:	f240 215b 	movw	r1, #603	; 0x25b
 8006a8e:	486d      	ldr	r0, [pc, #436]	; (8006c44 <HAL_RCC_ClockConfig+0x218>)
 8006a90:	f7fb fa27 	bl	8001ee2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a94:	4b6c      	ldr	r3, [pc, #432]	; (8006c48 <HAL_RCC_ClockConfig+0x21c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d90c      	bls.n	8006abc <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aa2:	4b69      	ldr	r3, [pc, #420]	; (8006c48 <HAL_RCC_ClockConfig+0x21c>)
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aaa:	4b67      	ldr	r3, [pc, #412]	; (8006c48 <HAL_RCC_ClockConfig+0x21c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0307 	and.w	r3, r3, #7
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d001      	beq.n	8006abc <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e136      	b.n	8006d2a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d049      	beq.n	8006b5c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ad4:	4b5d      	ldr	r3, [pc, #372]	; (8006c4c <HAL_RCC_ClockConfig+0x220>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	4a5c      	ldr	r2, [pc, #368]	; (8006c4c <HAL_RCC_ClockConfig+0x220>)
 8006ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006aec:	4b57      	ldr	r3, [pc, #348]	; (8006c4c <HAL_RCC_ClockConfig+0x220>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	4a56      	ldr	r2, [pc, #344]	; (8006c4c <HAL_RCC_ClockConfig+0x220>)
 8006af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d024      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x11e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b80      	cmp	r3, #128	; 0x80
 8006b06:	d020      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x11e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b90      	cmp	r3, #144	; 0x90
 8006b0e:	d01c      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x11e>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	2ba0      	cmp	r3, #160	; 0xa0
 8006b16:	d018      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x11e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	2bb0      	cmp	r3, #176	; 0xb0
 8006b1e:	d014      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x11e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2bc0      	cmp	r3, #192	; 0xc0
 8006b26:	d010      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x11e>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2bd0      	cmp	r3, #208	; 0xd0
 8006b2e:	d00c      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x11e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	2be0      	cmp	r3, #224	; 0xe0
 8006b36:	d008      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x11e>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2bf0      	cmp	r3, #240	; 0xf0
 8006b3e:	d004      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x11e>
 8006b40:	f240 217e 	movw	r1, #638	; 0x27e
 8006b44:	483f      	ldr	r0, [pc, #252]	; (8006c44 <HAL_RCC_ClockConfig+0x218>)
 8006b46:	f7fb f9cc 	bl	8001ee2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b4a:	4b40      	ldr	r3, [pc, #256]	; (8006c4c <HAL_RCC_ClockConfig+0x220>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	493d      	ldr	r1, [pc, #244]	; (8006c4c <HAL_RCC_ClockConfig+0x220>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d059      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d010      	beq.n	8006b92 <HAL_RCC_ClockConfig+0x166>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d00c      	beq.n	8006b92 <HAL_RCC_ClockConfig+0x166>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d008      	beq.n	8006b92 <HAL_RCC_ClockConfig+0x166>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d004      	beq.n	8006b92 <HAL_RCC_ClockConfig+0x166>
 8006b88:	f240 2185 	movw	r1, #645	; 0x285
 8006b8c:	482d      	ldr	r0, [pc, #180]	; (8006c44 <HAL_RCC_ClockConfig+0x218>)
 8006b8e:	f7fb f9a8 	bl	8001ee2 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d107      	bne.n	8006baa <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b9a:	4b2c      	ldr	r3, [pc, #176]	; (8006c4c <HAL_RCC_ClockConfig+0x220>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d119      	bne.n	8006bda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e0bf      	b.n	8006d2a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d003      	beq.n	8006bba <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d107      	bne.n	8006bca <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bba:	4b24      	ldr	r3, [pc, #144]	; (8006c4c <HAL_RCC_ClockConfig+0x220>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d109      	bne.n	8006bda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e0af      	b.n	8006d2a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bca:	4b20      	ldr	r3, [pc, #128]	; (8006c4c <HAL_RCC_ClockConfig+0x220>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e0a7      	b.n	8006d2a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bda:	4b1c      	ldr	r3, [pc, #112]	; (8006c4c <HAL_RCC_ClockConfig+0x220>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f023 0203 	bic.w	r2, r3, #3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	4919      	ldr	r1, [pc, #100]	; (8006c4c <HAL_RCC_ClockConfig+0x220>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bec:	f7fc fa68 	bl	80030c0 <HAL_GetTick>
 8006bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf2:	e00a      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bf4:	f7fc fa64 	bl	80030c0 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e08f      	b.n	8006d2a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c0a:	4b10      	ldr	r3, [pc, #64]	; (8006c4c <HAL_RCC_ClockConfig+0x220>)
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f003 020c 	and.w	r2, r3, #12
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d1eb      	bne.n	8006bf4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <HAL_RCC_ClockConfig+0x21c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d212      	bcs.n	8006c50 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c2a:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <HAL_RCC_ClockConfig+0x21c>)
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c32:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <HAL_RCC_ClockConfig+0x21c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d007      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e072      	b.n	8006d2a <HAL_RCC_ClockConfig+0x2fe>
 8006c44:	08012630 	.word	0x08012630
 8006c48:	40023c00 	.word	0x40023c00
 8006c4c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d025      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d018      	beq.n	8006c96 <HAL_RCC_ClockConfig+0x26a>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6c:	d013      	beq.n	8006c96 <HAL_RCC_ClockConfig+0x26a>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c76:	d00e      	beq.n	8006c96 <HAL_RCC_ClockConfig+0x26a>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006c80:	d009      	beq.n	8006c96 <HAL_RCC_ClockConfig+0x26a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006c8a:	d004      	beq.n	8006c96 <HAL_RCC_ClockConfig+0x26a>
 8006c8c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8006c90:	4828      	ldr	r0, [pc, #160]	; (8006d34 <HAL_RCC_ClockConfig+0x308>)
 8006c92:	f7fb f926 	bl	8001ee2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c96:	4b28      	ldr	r3, [pc, #160]	; (8006d38 <HAL_RCC_ClockConfig+0x30c>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	4925      	ldr	r1, [pc, #148]	; (8006d38 <HAL_RCC_ClockConfig+0x30c>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d026      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d018      	beq.n	8006cee <HAL_RCC_ClockConfig+0x2c2>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc4:	d013      	beq.n	8006cee <HAL_RCC_ClockConfig+0x2c2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cce:	d00e      	beq.n	8006cee <HAL_RCC_ClockConfig+0x2c2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006cd8:	d009      	beq.n	8006cee <HAL_RCC_ClockConfig+0x2c2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006ce2:	d004      	beq.n	8006cee <HAL_RCC_ClockConfig+0x2c2>
 8006ce4:	f240 21ca 	movw	r1, #714	; 0x2ca
 8006ce8:	4812      	ldr	r0, [pc, #72]	; (8006d34 <HAL_RCC_ClockConfig+0x308>)
 8006cea:	f7fb f8fa 	bl	8001ee2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cee:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <HAL_RCC_ClockConfig+0x30c>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	490e      	ldr	r1, [pc, #56]	; (8006d38 <HAL_RCC_ClockConfig+0x30c>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d02:	f000 f821 	bl	8006d48 <HAL_RCC_GetSysClockFreq>
 8006d06:	4602      	mov	r2, r0
 8006d08:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <HAL_RCC_ClockConfig+0x30c>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	091b      	lsrs	r3, r3, #4
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	490a      	ldr	r1, [pc, #40]	; (8006d3c <HAL_RCC_ClockConfig+0x310>)
 8006d14:	5ccb      	ldrb	r3, [r1, r3]
 8006d16:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1a:	4a09      	ldr	r2, [pc, #36]	; (8006d40 <HAL_RCC_ClockConfig+0x314>)
 8006d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d1e:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <HAL_RCC_ClockConfig+0x318>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fb fd02 	bl	800272c <HAL_InitTick>

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	08012630 	.word	0x08012630
 8006d38:	40023800 	.word	0x40023800
 8006d3c:	080149cc 	.word	0x080149cc
 8006d40:	2000008c 	.word	0x2000008c
 8006d44:	20000090 	.word	0x20000090

08006d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d4c:	b090      	sub	sp, #64	; 0x40
 8006d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	637b      	str	r3, [r7, #52]	; 0x34
 8006d54:	2300      	movs	r3, #0
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d58:	2300      	movs	r3, #0
 8006d5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d60:	4b59      	ldr	r3, [pc, #356]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f003 030c 	and.w	r3, r3, #12
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d00d      	beq.n	8006d88 <HAL_RCC_GetSysClockFreq+0x40>
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	f200 80a1 	bhi.w	8006eb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_RCC_GetSysClockFreq+0x34>
 8006d76:	2b04      	cmp	r3, #4
 8006d78:	d003      	beq.n	8006d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d7a:	e09b      	b.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d7c:	4b53      	ldr	r3, [pc, #332]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x184>)
 8006d7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006d80:	e09b      	b.n	8006eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d82:	4b53      	ldr	r3, [pc, #332]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d86:	e098      	b.n	8006eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d88:	4b4f      	ldr	r3, [pc, #316]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d92:	4b4d      	ldr	r3, [pc, #308]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d028      	beq.n	8006df0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d9e:	4b4a      	ldr	r3, [pc, #296]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	099b      	lsrs	r3, r3, #6
 8006da4:	2200      	movs	r2, #0
 8006da6:	623b      	str	r3, [r7, #32]
 8006da8:	627a      	str	r2, [r7, #36]	; 0x24
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006db0:	2100      	movs	r1, #0
 8006db2:	4b47      	ldr	r3, [pc, #284]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006db4:	fb03 f201 	mul.w	r2, r3, r1
 8006db8:	2300      	movs	r3, #0
 8006dba:	fb00 f303 	mul.w	r3, r0, r3
 8006dbe:	4413      	add	r3, r2
 8006dc0:	4a43      	ldr	r2, [pc, #268]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006dc2:	fba0 1202 	umull	r1, r2, r0, r2
 8006dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dc8:	460a      	mov	r2, r1
 8006dca:	62ba      	str	r2, [r7, #40]	; 0x28
 8006dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dce:	4413      	add	r3, r2
 8006dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	61bb      	str	r3, [r7, #24]
 8006dd8:	61fa      	str	r2, [r7, #28]
 8006dda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006de2:	f7f9 fd5b 	bl	800089c <__aeabi_uldivmod>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4613      	mov	r3, r2
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dee:	e053      	b.n	8006e98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006df0:	4b35      	ldr	r3, [pc, #212]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	099b      	lsrs	r3, r3, #6
 8006df6:	2200      	movs	r2, #0
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	617a      	str	r2, [r7, #20]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e02:	f04f 0b00 	mov.w	fp, #0
 8006e06:	4652      	mov	r2, sl
 8006e08:	465b      	mov	r3, fp
 8006e0a:	f04f 0000 	mov.w	r0, #0
 8006e0e:	f04f 0100 	mov.w	r1, #0
 8006e12:	0159      	lsls	r1, r3, #5
 8006e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e18:	0150      	lsls	r0, r2, #5
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	ebb2 080a 	subs.w	r8, r2, sl
 8006e22:	eb63 090b 	sbc.w	r9, r3, fp
 8006e26:	f04f 0200 	mov.w	r2, #0
 8006e2a:	f04f 0300 	mov.w	r3, #0
 8006e2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e3a:	ebb2 0408 	subs.w	r4, r2, r8
 8006e3e:	eb63 0509 	sbc.w	r5, r3, r9
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	00eb      	lsls	r3, r5, #3
 8006e4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e50:	00e2      	lsls	r2, r4, #3
 8006e52:	4614      	mov	r4, r2
 8006e54:	461d      	mov	r5, r3
 8006e56:	eb14 030a 	adds.w	r3, r4, sl
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	eb45 030b 	adc.w	r3, r5, fp
 8006e60:	607b      	str	r3, [r7, #4]
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	f04f 0300 	mov.w	r3, #0
 8006e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e6e:	4629      	mov	r1, r5
 8006e70:	028b      	lsls	r3, r1, #10
 8006e72:	4621      	mov	r1, r4
 8006e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e78:	4621      	mov	r1, r4
 8006e7a:	028a      	lsls	r2, r1, #10
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e82:	2200      	movs	r2, #0
 8006e84:	60bb      	str	r3, [r7, #8]
 8006e86:	60fa      	str	r2, [r7, #12]
 8006e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e8c:	f7f9 fd06 	bl	800089c <__aeabi_uldivmod>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4613      	mov	r3, r2
 8006e96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e98:	4b0b      	ldr	r3, [pc, #44]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	0c1b      	lsrs	r3, r3, #16
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006ea8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006eb2:	e002      	b.n	8006eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006eb4:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x184>)
 8006eb6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3740      	adds	r7, #64	; 0x40
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ec6:	bf00      	nop
 8006ec8:	40023800 	.word	0x40023800
 8006ecc:	00f42400 	.word	0x00f42400
 8006ed0:	017d7840 	.word	0x017d7840

08006ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ed8:	4b03      	ldr	r3, [pc, #12]	; (8006ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eda:	681b      	ldr	r3, [r3, #0]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	2000008c 	.word	0x2000008c

08006eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ef0:	f7ff fff0 	bl	8006ed4 <HAL_RCC_GetHCLKFreq>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	0a9b      	lsrs	r3, r3, #10
 8006efc:	f003 0307 	and.w	r3, r3, #7
 8006f00:	4903      	ldr	r1, [pc, #12]	; (8006f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f02:	5ccb      	ldrb	r3, [r1, r3]
 8006f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	080149dc 	.word	0x080149dc

08006f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f18:	f7ff ffdc 	bl	8006ed4 <HAL_RCC_GetHCLKFreq>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	0b5b      	lsrs	r3, r3, #13
 8006f24:	f003 0307 	and.w	r3, r3, #7
 8006f28:	4903      	ldr	r1, [pc, #12]	; (8006f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f2a:	5ccb      	ldrb	r3, [r1, r3]
 8006f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40023800 	.word	0x40023800
 8006f38:	080149dc 	.word	0x080149dc

08006f3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	220f      	movs	r2, #15
 8006f4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f4c:	4b12      	ldr	r3, [pc, #72]	; (8006f98 <HAL_RCC_GetClockConfig+0x5c>)
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f003 0203 	and.w	r2, r3, #3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f58:	4b0f      	ldr	r3, [pc, #60]	; (8006f98 <HAL_RCC_GetClockConfig+0x5c>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <HAL_RCC_GetClockConfig+0x5c>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f70:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <HAL_RCC_GetClockConfig+0x5c>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	08db      	lsrs	r3, r3, #3
 8006f76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f7e:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <HAL_RCC_GetClockConfig+0x60>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0207 	and.w	r2, r3, #7
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	601a      	str	r2, [r3, #0]
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	40023c00 	.word	0x40023c00

08006fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b0f      	cmp	r3, #15
 8006fbe:	d904      	bls.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8006fc0:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8006fc4:	4834      	ldr	r0, [pc, #208]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006fc6:	f7fa ff8c 	bl	8001ee2 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d105      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d066      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d903      	bls.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	2b07      	cmp	r3, #7
 8006ff0:	d904      	bls.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006ff2:	f640 11de 	movw	r1, #2526	; 0x9de
 8006ff6:	4828      	ldr	r0, [pc, #160]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006ff8:	f7fa ff73 	bl	8001ee2 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2b31      	cmp	r3, #49	; 0x31
 8007002:	d904      	bls.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800700c:	d904      	bls.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800700e:	f640 11df 	movw	r1, #2527	; 0x9df
 8007012:	4821      	ldr	r0, [pc, #132]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007014:	f7fa ff65 	bl	8001ee2 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d903      	bls.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2b3f      	cmp	r3, #63	; 0x3f
 8007026:	d904      	bls.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8007028:	f640 11e1 	movw	r1, #2529	; 0x9e1
 800702c:	481a      	ldr	r0, [pc, #104]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800702e:	f7fa ff58 	bl	8001ee2 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007032:	4b1a      	ldr	r3, [pc, #104]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007038:	f7fc f842 	bl	80030c0 <HAL_GetTick>
 800703c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800703e:	e008      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007040:	f7fc f83e 	bl	80030c0 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d901      	bls.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e1b3      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007052:	4b13      	ldr	r3, [pc, #76]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1f0      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	019b      	lsls	r3, r3, #6
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	071b      	lsls	r3, r3, #28
 8007070:	490b      	ldr	r1, [pc, #44]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8007072:	4313      	orrs	r3, r2
 8007074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007078:	4b08      	ldr	r3, [pc, #32]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800707a:	2201      	movs	r2, #1
 800707c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800707e:	f7fc f81f 	bl	80030c0 <HAL_GetTick>
 8007082:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007084:	e00e      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007086:	f7fc f81b 	bl	80030c0 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d907      	bls.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e190      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007098:	08012668 	.word	0x08012668
 800709c:	42470068 	.word	0x42470068
 80070a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070a4:	4b88      	ldr	r3, [pc, #544]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0ea      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 8173 	beq.w	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c6:	f000 80a6 	beq.w	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070d2:	f000 80a0 	beq.w	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	4a7c      	ldr	r2, [pc, #496]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	f000 809a 	beq.w	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	4a7a      	ldr	r2, [pc, #488]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	f000 8094 	beq.w	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	4a78      	ldr	r2, [pc, #480]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	f000 808e 	beq.w	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	4a76      	ldr	r2, [pc, #472]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007100:	4293      	cmp	r3, r2
 8007102:	f000 8088 	beq.w	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	4a74      	ldr	r2, [pc, #464]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	f000 8082 	beq.w	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	4a72      	ldr	r2, [pc, #456]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d07c      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	4a70      	ldr	r2, [pc, #448]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d077      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	4a6f      	ldr	r2, [pc, #444]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d072      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	4a6d      	ldr	r2, [pc, #436]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d06d      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	4a6c      	ldr	r2, [pc, #432]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d068      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	4a6a      	ldr	r2, [pc, #424]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d063      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	4a69      	ldr	r2, [pc, #420]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d05e      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	4a67      	ldr	r2, [pc, #412]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d059      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	4a66      	ldr	r2, [pc, #408]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d054      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	4a64      	ldr	r2, [pc, #400]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d04f      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	4a63      	ldr	r2, [pc, #396]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d04a      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	4a61      	ldr	r2, [pc, #388]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d045      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	4a60      	ldr	r2, [pc, #384]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d040      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	4a5e      	ldr	r2, [pc, #376]	; (8007314 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d03b      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	4a5d      	ldr	r2, [pc, #372]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d036      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	4a5b      	ldr	r2, [pc, #364]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d031      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	4a5a      	ldr	r2, [pc, #360]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d02c      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	4a58      	ldr	r2, [pc, #352]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d027      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	4a57      	ldr	r2, [pc, #348]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d022      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	4a55      	ldr	r2, [pc, #340]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d01d      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	4a54      	ldr	r2, [pc, #336]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d018      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	4a52      	ldr	r2, [pc, #328]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d013      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	4a51      	ldr	r2, [pc, #324]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00e      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	4a4f      	ldr	r2, [pc, #316]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d009      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	4a4e      	ldr	r2, [pc, #312]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d004      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800720c:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8007210:	484c      	ldr	r0, [pc, #304]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8007212:	f7fa fe66 	bl	8001ee2 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007216:	2300      	movs	r3, #0
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	4b2b      	ldr	r3, [pc, #172]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	4a2a      	ldr	r2, [pc, #168]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007224:	6413      	str	r3, [r2, #64]	; 0x40
 8007226:	4b28      	ldr	r3, [pc, #160]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007232:	4b45      	ldr	r3, [pc, #276]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a44      	ldr	r2, [pc, #272]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800723c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800723e:	f7fb ff3f 	bl	80030c0 <HAL_GetTick>
 8007242:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007244:	e008      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007246:	f7fb ff3b 	bl	80030c0 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d901      	bls.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e0b0      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007258:	4b3b      	ldr	r3, [pc, #236]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0f0      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007264:	4b18      	ldr	r3, [pc, #96]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d073      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	429a      	cmp	r2, r3
 8007280:	d06c      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007282:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800728a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800728c:	4b2f      	ldr	r3, [pc, #188]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800728e:	2201      	movs	r2, #1
 8007290:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007292:	4b2e      	ldr	r3, [pc, #184]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007298:	4a0b      	ldr	r2, [pc, #44]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800729e:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d158      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80072aa:	f7fb ff09 	bl	80030c0 <HAL_GetTick>
 80072ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072b0:	e04e      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072b2:	f7fb ff05 	bl	80030c0 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d945      	bls.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e078      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80072c8:	40023800 	.word	0x40023800
 80072cc:	00020300 	.word	0x00020300
 80072d0:	00030300 	.word	0x00030300
 80072d4:	00040300 	.word	0x00040300
 80072d8:	00050300 	.word	0x00050300
 80072dc:	00060300 	.word	0x00060300
 80072e0:	00070300 	.word	0x00070300
 80072e4:	00080300 	.word	0x00080300
 80072e8:	00090300 	.word	0x00090300
 80072ec:	000a0300 	.word	0x000a0300
 80072f0:	000b0300 	.word	0x000b0300
 80072f4:	000c0300 	.word	0x000c0300
 80072f8:	000d0300 	.word	0x000d0300
 80072fc:	000e0300 	.word	0x000e0300
 8007300:	000f0300 	.word	0x000f0300
 8007304:	00100300 	.word	0x00100300
 8007308:	00110300 	.word	0x00110300
 800730c:	00120300 	.word	0x00120300
 8007310:	00130300 	.word	0x00130300
 8007314:	00140300 	.word	0x00140300
 8007318:	00150300 	.word	0x00150300
 800731c:	00160300 	.word	0x00160300
 8007320:	00170300 	.word	0x00170300
 8007324:	00180300 	.word	0x00180300
 8007328:	00190300 	.word	0x00190300
 800732c:	001a0300 	.word	0x001a0300
 8007330:	001b0300 	.word	0x001b0300
 8007334:	001c0300 	.word	0x001c0300
 8007338:	001d0300 	.word	0x001d0300
 800733c:	001e0300 	.word	0x001e0300
 8007340:	001f0300 	.word	0x001f0300
 8007344:	08012668 	.word	0x08012668
 8007348:	40007000 	.word	0x40007000
 800734c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007350:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0aa      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007368:	d10d      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800736a:	4b16      	ldr	r3, [pc, #88]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800737a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800737e:	4911      	ldr	r1, [pc, #68]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007380:	4313      	orrs	r3, r2
 8007382:	608b      	str	r3, [r1, #8]
 8007384:	e005      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007386:	4b0f      	ldr	r3, [pc, #60]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	4a0e      	ldr	r2, [pc, #56]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800738c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007390:	6093      	str	r3, [r2, #8]
 8007392:	4b0c      	ldr	r3, [pc, #48]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007394:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800739e:	4909      	ldr	r1, [pc, #36]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	7d1a      	ldrb	r2, [r3, #20]
 80073b4:	4b04      	ldr	r3, [pc, #16]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80073b6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	40023800 	.word	0x40023800
 80073c8:	424711e0 	.word	0x424711e0

080073cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e0c4      	b.n	800756c <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a63      	ldr	r2, [pc, #396]	; (8007574 <HAL_RTC_Init+0x1a8>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d004      	beq.n	80073f6 <HAL_RTC_Init+0x2a>
 80073ec:	f44f 7182 	mov.w	r1, #260	; 0x104
 80073f0:	4861      	ldr	r0, [pc, #388]	; (8007578 <HAL_RTC_Init+0x1ac>)
 80073f2:	f7fa fd76 	bl	8001ee2 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b40      	cmp	r3, #64	; 0x40
 80073fc:	d008      	beq.n	8007410 <HAL_RTC_Init+0x44>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d004      	beq.n	8007410 <HAL_RTC_Init+0x44>
 8007406:	f240 1105 	movw	r1, #261	; 0x105
 800740a:	485b      	ldr	r0, [pc, #364]	; (8007578 <HAL_RTC_Init+0x1ac>)
 800740c:	f7fa fd69 	bl	8001ee2 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	2b7f      	cmp	r3, #127	; 0x7f
 8007416:	d904      	bls.n	8007422 <HAL_RTC_Init+0x56>
 8007418:	f44f 7183 	mov.w	r1, #262	; 0x106
 800741c:	4856      	ldr	r0, [pc, #344]	; (8007578 <HAL_RTC_Init+0x1ac>)
 800741e:	f7fa fd60 	bl	8001ee2 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800742a:	d304      	bcc.n	8007436 <HAL_RTC_Init+0x6a>
 800742c:	f240 1107 	movw	r1, #263	; 0x107
 8007430:	4851      	ldr	r0, [pc, #324]	; (8007578 <HAL_RTC_Init+0x1ac>)
 8007432:	f7fa fd56 	bl	8001ee2 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d013      	beq.n	8007466 <HAL_RTC_Init+0x9a>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007446:	d00e      	beq.n	8007466 <HAL_RTC_Init+0x9a>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007450:	d009      	beq.n	8007466 <HAL_RTC_Init+0x9a>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800745a:	d004      	beq.n	8007466 <HAL_RTC_Init+0x9a>
 800745c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8007460:	4845      	ldr	r0, [pc, #276]	; (8007578 <HAL_RTC_Init+0x1ac>)
 8007462:	f7fa fd3e 	bl	8001ee2 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d009      	beq.n	8007482 <HAL_RTC_Init+0xb6>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007476:	d004      	beq.n	8007482 <HAL_RTC_Init+0xb6>
 8007478:	f240 1109 	movw	r1, #265	; 0x109
 800747c:	483e      	ldr	r0, [pc, #248]	; (8007578 <HAL_RTC_Init+0x1ac>)
 800747e:	f7fa fd30 	bl	8001ee2 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d009      	beq.n	800749e <HAL_RTC_Init+0xd2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007492:	d004      	beq.n	800749e <HAL_RTC_Init+0xd2>
 8007494:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8007498:	4837      	ldr	r0, [pc, #220]	; (8007578 <HAL_RTC_Init+0x1ac>)
 800749a:	f7fa fd22 	bl	8001ee2 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	7f5b      	ldrb	r3, [r3, #29]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d105      	bne.n	80074b4 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fa fd7c 	bl	8001fac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	22ca      	movs	r2, #202	; 0xca
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2253      	movs	r2, #83	; 0x53
 80074c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fad2 	bl	8007a74 <RTC_EnterInitMode>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d12c      	bne.n	8007534 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6812      	ldr	r2, [r2, #0]
 80074e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ec:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6899      	ldr	r1, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	68d2      	ldr	r2, [r2, #12]
 8007514:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6919      	ldr	r1, [r3, #16]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	041a      	lsls	r2, r3, #16
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fad9 	bl	8007ae2 <RTC_ExitInitMode>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d113      	bne.n	8007562 <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007548:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	699a      	ldr	r2, [r3, #24]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	22ff      	movs	r2, #255	; 0xff
 8007568:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800756a:	7bfb      	ldrb	r3, [r7, #15]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	40002800 	.word	0x40002800
 8007578:	080126a4 	.word	0x080126a4

0800757c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800757c:	b590      	push	{r4, r7, lr}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d007      	beq.n	80075a2 <HAL_RTC_SetTime+0x26>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d004      	beq.n	80075a2 <HAL_RTC_SetTime+0x26>
 8007598:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 800759c:	489a      	ldr	r0, [pc, #616]	; (8007808 <HAL_RTC_SetTime+0x28c>)
 800759e:	f7fa fca0 	bl	8001ee2 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075aa:	d00d      	beq.n	80075c8 <HAL_RTC_SetTime+0x4c>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b4:	d008      	beq.n	80075c8 <HAL_RTC_SetTime+0x4c>
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d004      	beq.n	80075c8 <HAL_RTC_SetTime+0x4c>
 80075be:	f240 21b5 	movw	r1, #693	; 0x2b5
 80075c2:	4891      	ldr	r0, [pc, #580]	; (8007808 <HAL_RTC_SetTime+0x28c>)
 80075c4:	f7fa fc8d 	bl	8001ee2 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <HAL_RTC_SetTime+0x68>
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075d8:	d004      	beq.n	80075e4 <HAL_RTC_SetTime+0x68>
 80075da:	f240 21b6 	movw	r1, #694	; 0x2b6
 80075de:	488a      	ldr	r0, [pc, #552]	; (8007808 <HAL_RTC_SetTime+0x28c>)
 80075e0:	f7fa fc7f 	bl	8001ee2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	7f1b      	ldrb	r3, [r3, #28]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_RTC_SetTime+0x74>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e107      	b.n	8007800 <HAL_RTC_SetTime+0x284>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2202      	movs	r2, #2
 80075fa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d15c      	bne.n	80076bc <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760c:	2b00      	cmp	r3, #0
 800760e:	d01a      	beq.n	8007646 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_RTC_SetTime+0xa4>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b0c      	cmp	r3, #12
 800761e:	d904      	bls.n	800762a <HAL_RTC_SetTime+0xae>
 8007620:	f240 21c1 	movw	r1, #705	; 0x2c1
 8007624:	4878      	ldr	r0, [pc, #480]	; (8007808 <HAL_RTC_SetTime+0x28c>)
 8007626:	f7fa fc5c 	bl	8001ee2 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	78db      	ldrb	r3, [r3, #3]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d015      	beq.n	800765e <HAL_RTC_SetTime+0xe2>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	78db      	ldrb	r3, [r3, #3]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d011      	beq.n	800765e <HAL_RTC_SetTime+0xe2>
 800763a:	f240 21c2 	movw	r1, #706	; 0x2c2
 800763e:	4872      	ldr	r0, [pc, #456]	; (8007808 <HAL_RTC_SetTime+0x28c>)
 8007640:	f7fa fc4f 	bl	8001ee2 <assert_failed>
 8007644:	e00b      	b.n	800765e <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2200      	movs	r2, #0
 800764a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b17      	cmp	r3, #23
 8007652:	d904      	bls.n	800765e <HAL_RTC_SetTime+0xe2>
 8007654:	f240 21c7 	movw	r1, #711	; 0x2c7
 8007658:	486b      	ldr	r0, [pc, #428]	; (8007808 <HAL_RTC_SetTime+0x28c>)
 800765a:	f7fa fc42 	bl	8001ee2 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	2b3b      	cmp	r3, #59	; 0x3b
 8007664:	d904      	bls.n	8007670 <HAL_RTC_SetTime+0xf4>
 8007666:	f240 21c9 	movw	r1, #713	; 0x2c9
 800766a:	4867      	ldr	r0, [pc, #412]	; (8007808 <HAL_RTC_SetTime+0x28c>)
 800766c:	f7fa fc39 	bl	8001ee2 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	789b      	ldrb	r3, [r3, #2]
 8007674:	2b3b      	cmp	r3, #59	; 0x3b
 8007676:	d904      	bls.n	8007682 <HAL_RTC_SetTime+0x106>
 8007678:	f240 21ca 	movw	r1, #714	; 0x2ca
 800767c:	4862      	ldr	r0, [pc, #392]	; (8007808 <HAL_RTC_SetTime+0x28c>)
 800767e:	f7fa fc30 	bl	8001ee2 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fa50 	bl	8007b2c <RTC_ByteToBcd2>
 800768c:	4603      	mov	r3, r0
 800768e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	785b      	ldrb	r3, [r3, #1]
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fa49 	bl	8007b2c <RTC_ByteToBcd2>
 800769a:	4603      	mov	r3, r0
 800769c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800769e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	789b      	ldrb	r3, [r3, #2]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 fa41 	bl	8007b2c <RTC_ByteToBcd2>
 80076aa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80076ac:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	78db      	ldrb	r3, [r3, #3]
 80076b4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80076b6:	4313      	orrs	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	e062      	b.n	8007782 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d022      	beq.n	8007710 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fa49 	bl	8007b66 <RTC_Bcd2ToByte>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <HAL_RTC_SetTime+0x16e>
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 fa41 	bl	8007b66 <RTC_Bcd2ToByte>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b0c      	cmp	r3, #12
 80076e8:	d904      	bls.n	80076f4 <HAL_RTC_SetTime+0x178>
 80076ea:	f240 21d5 	movw	r1, #725	; 0x2d5
 80076ee:	4846      	ldr	r0, [pc, #280]	; (8007808 <HAL_RTC_SetTime+0x28c>)
 80076f0:	f7fa fbf7 	bl	8001ee2 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	78db      	ldrb	r3, [r3, #3]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d019      	beq.n	8007730 <HAL_RTC_SetTime+0x1b4>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	78db      	ldrb	r3, [r3, #3]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d015      	beq.n	8007730 <HAL_RTC_SetTime+0x1b4>
 8007704:	f240 21d6 	movw	r1, #726	; 0x2d6
 8007708:	483f      	ldr	r0, [pc, #252]	; (8007808 <HAL_RTC_SetTime+0x28c>)
 800770a:	f7fa fbea 	bl	8001ee2 <assert_failed>
 800770e:	e00f      	b.n	8007730 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2200      	movs	r2, #0
 8007714:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fa23 	bl	8007b66 <RTC_Bcd2ToByte>
 8007720:	4603      	mov	r3, r0
 8007722:	2b17      	cmp	r3, #23
 8007724:	d904      	bls.n	8007730 <HAL_RTC_SetTime+0x1b4>
 8007726:	f240 21db 	movw	r1, #731	; 0x2db
 800772a:	4837      	ldr	r0, [pc, #220]	; (8007808 <HAL_RTC_SetTime+0x28c>)
 800772c:	f7fa fbd9 	bl	8001ee2 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	785b      	ldrb	r3, [r3, #1]
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fa16 	bl	8007b66 <RTC_Bcd2ToByte>
 800773a:	4603      	mov	r3, r0
 800773c:	2b3b      	cmp	r3, #59	; 0x3b
 800773e:	d904      	bls.n	800774a <HAL_RTC_SetTime+0x1ce>
 8007740:	f240 21dd 	movw	r1, #733	; 0x2dd
 8007744:	4830      	ldr	r0, [pc, #192]	; (8007808 <HAL_RTC_SetTime+0x28c>)
 8007746:	f7fa fbcc 	bl	8001ee2 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	789b      	ldrb	r3, [r3, #2]
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fa09 	bl	8007b66 <RTC_Bcd2ToByte>
 8007754:	4603      	mov	r3, r0
 8007756:	2b3b      	cmp	r3, #59	; 0x3b
 8007758:	d904      	bls.n	8007764 <HAL_RTC_SetTime+0x1e8>
 800775a:	f240 21de 	movw	r1, #734	; 0x2de
 800775e:	482a      	ldr	r0, [pc, #168]	; (8007808 <HAL_RTC_SetTime+0x28c>)
 8007760:	f7fa fbbf 	bl	8001ee2 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	785b      	ldrb	r3, [r3, #1]
 800776e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007770:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007776:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	78db      	ldrb	r3, [r3, #3]
 800777c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800777e:	4313      	orrs	r3, r2
 8007780:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	22ca      	movs	r2, #202	; 0xca
 8007788:	625a      	str	r2, [r3, #36]	; 0x24
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2253      	movs	r2, #83	; 0x53
 8007790:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 f96e 	bl	8007a74 <RTC_EnterInitMode>
 8007798:	4603      	mov	r3, r0
 800779a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800779c:	7cfb      	ldrb	r3, [r7, #19]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d120      	bne.n	80077e4 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80077ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80077b0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6899      	ldr	r1, [r3, #8]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	431a      	orrs	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 f981 	bl	8007ae2 <RTC_ExitInitMode>
 80077e0:	4603      	mov	r3, r0
 80077e2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80077e4:	7cfb      	ldrb	r3, [r7, #19]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d102      	bne.n	80077f0 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2201      	movs	r2, #1
 80077ee:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	22ff      	movs	r2, #255	; 0xff
 80077f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	771a      	strb	r2, [r3, #28]

  return status;
 80077fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8007800:	4618      	mov	r0, r3
 8007802:	371c      	adds	r7, #28
 8007804:	46bd      	mov	sp, r7
 8007806:	bd90      	pop	{r4, r7, pc}
 8007808:	080126a4 	.word	0x080126a4

0800780c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800780c:	b590      	push	{r4, r7, lr}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <HAL_RTC_SetDate+0x26>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d004      	beq.n	8007832 <HAL_RTC_SetDate+0x26>
 8007828:	f240 3153 	movw	r1, #851	; 0x353
 800782c:	487c      	ldr	r0, [pc, #496]	; (8007a20 <HAL_RTC_SetDate+0x214>)
 800782e:	f7fa fb58 	bl	8001ee2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	7f1b      	ldrb	r3, [r3, #28]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d101      	bne.n	800783e <HAL_RTC_SetDate+0x32>
 800783a:	2302      	movs	r3, #2
 800783c:	e0ec      	b.n	8007a18 <HAL_RTC_SetDate+0x20c>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2201      	movs	r2, #1
 8007842:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2202      	movs	r2, #2
 8007848:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10e      	bne.n	800786e <HAL_RTC_SetDate+0x62>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b00      	cmp	r3, #0
 800785a:	d008      	beq.n	800786e <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	785b      	ldrb	r3, [r3, #1]
 8007860:	f023 0310 	bic.w	r3, r3, #16
 8007864:	b2db      	uxtb	r3, r3
 8007866:	330a      	adds	r3, #10
 8007868:	b2da      	uxtb	r2, r3
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d01c      	beq.n	80078b0 <HAL_RTC_SetDate+0xa4>
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d018      	beq.n	80078b0 <HAL_RTC_SetDate+0xa4>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b03      	cmp	r3, #3
 8007884:	d014      	beq.n	80078b0 <HAL_RTC_SetDate+0xa4>
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b04      	cmp	r3, #4
 800788c:	d010      	beq.n	80078b0 <HAL_RTC_SetDate+0xa4>
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b05      	cmp	r3, #5
 8007894:	d00c      	beq.n	80078b0 <HAL_RTC_SetDate+0xa4>
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b06      	cmp	r3, #6
 800789c:	d008      	beq.n	80078b0 <HAL_RTC_SetDate+0xa4>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b07      	cmp	r3, #7
 80078a4:	d004      	beq.n	80078b0 <HAL_RTC_SetDate+0xa4>
 80078a6:	f240 315f 	movw	r1, #863	; 0x35f
 80078aa:	485d      	ldr	r0, [pc, #372]	; (8007a20 <HAL_RTC_SetDate+0x214>)
 80078ac:	f7fa fb19 	bl	8001ee2 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d13f      	bne.n	8007936 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	78db      	ldrb	r3, [r3, #3]
 80078ba:	2b63      	cmp	r3, #99	; 0x63
 80078bc:	d904      	bls.n	80078c8 <HAL_RTC_SetDate+0xbc>
 80078be:	f240 3163 	movw	r1, #867	; 0x363
 80078c2:	4857      	ldr	r0, [pc, #348]	; (8007a20 <HAL_RTC_SetDate+0x214>)
 80078c4:	f7fa fb0d 	bl	8001ee2 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_RTC_SetDate+0xcc>
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	785b      	ldrb	r3, [r3, #1]
 80078d4:	2b0c      	cmp	r3, #12
 80078d6:	d904      	bls.n	80078e2 <HAL_RTC_SetDate+0xd6>
 80078d8:	f44f 7159 	mov.w	r1, #868	; 0x364
 80078dc:	4850      	ldr	r0, [pc, #320]	; (8007a20 <HAL_RTC_SetDate+0x214>)
 80078de:	f7fa fb00 	bl	8001ee2 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	789b      	ldrb	r3, [r3, #2]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_RTC_SetDate+0xe6>
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	789b      	ldrb	r3, [r3, #2]
 80078ee:	2b1f      	cmp	r3, #31
 80078f0:	d904      	bls.n	80078fc <HAL_RTC_SetDate+0xf0>
 80078f2:	f240 3165 	movw	r1, #869	; 0x365
 80078f6:	484a      	ldr	r0, [pc, #296]	; (8007a20 <HAL_RTC_SetDate+0x214>)
 80078f8:	f7fa faf3 	bl	8001ee2 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	78db      	ldrb	r3, [r3, #3]
 8007900:	4618      	mov	r0, r3
 8007902:	f000 f913 	bl	8007b2c <RTC_ByteToBcd2>
 8007906:	4603      	mov	r3, r0
 8007908:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	785b      	ldrb	r3, [r3, #1]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 f90c 	bl	8007b2c <RTC_ByteToBcd2>
 8007914:	4603      	mov	r3, r0
 8007916:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007918:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	789b      	ldrb	r3, [r3, #2]
 800791e:	4618      	mov	r0, r3
 8007920:	f000 f904 	bl	8007b2c <RTC_ByteToBcd2>
 8007924:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007926:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007930:	4313      	orrs	r3, r2
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e045      	b.n	80079c2 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	78db      	ldrb	r3, [r3, #3]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 f913 	bl	8007b66 <RTC_Bcd2ToByte>
 8007940:	4603      	mov	r3, r0
 8007942:	2b63      	cmp	r3, #99	; 0x63
 8007944:	d904      	bls.n	8007950 <HAL_RTC_SetDate+0x144>
 8007946:	f240 316e 	movw	r1, #878	; 0x36e
 800794a:	4835      	ldr	r0, [pc, #212]	; (8007a20 <HAL_RTC_SetDate+0x214>)
 800794c:	f7fa fac9 	bl	8001ee2 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	785b      	ldrb	r3, [r3, #1]
 8007954:	4618      	mov	r0, r3
 8007956:	f000 f906 	bl	8007b66 <RTC_Bcd2ToByte>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d007      	beq.n	8007970 <HAL_RTC_SetDate+0x164>
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	4618      	mov	r0, r3
 8007966:	f000 f8fe 	bl	8007b66 <RTC_Bcd2ToByte>
 800796a:	4603      	mov	r3, r0
 800796c:	2b0c      	cmp	r3, #12
 800796e:	d904      	bls.n	800797a <HAL_RTC_SetDate+0x16e>
 8007970:	f240 316f 	movw	r1, #879	; 0x36f
 8007974:	482a      	ldr	r0, [pc, #168]	; (8007a20 <HAL_RTC_SetDate+0x214>)
 8007976:	f7fa fab4 	bl	8001ee2 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	789b      	ldrb	r3, [r3, #2]
 800797e:	4618      	mov	r0, r3
 8007980:	f000 f8f1 	bl	8007b66 <RTC_Bcd2ToByte>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d007      	beq.n	800799a <HAL_RTC_SetDate+0x18e>
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	789b      	ldrb	r3, [r3, #2]
 800798e:	4618      	mov	r0, r3
 8007990:	f000 f8e9 	bl	8007b66 <RTC_Bcd2ToByte>
 8007994:	4603      	mov	r3, r0
 8007996:	2b1f      	cmp	r3, #31
 8007998:	d904      	bls.n	80079a4 <HAL_RTC_SetDate+0x198>
 800799a:	f44f 715c 	mov.w	r1, #880	; 0x370
 800799e:	4820      	ldr	r0, [pc, #128]	; (8007a20 <HAL_RTC_SetDate+0x214>)
 80079a0:	f7fa fa9f 	bl	8001ee2 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	78db      	ldrb	r3, [r3, #3]
 80079a8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	785b      	ldrb	r3, [r3, #1]
 80079ae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80079b0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80079b6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	22ca      	movs	r2, #202	; 0xca
 80079c8:	625a      	str	r2, [r3, #36]	; 0x24
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2253      	movs	r2, #83	; 0x53
 80079d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f84e 	bl	8007a74 <RTC_EnterInitMode>
 80079d8:	4603      	mov	r3, r0
 80079da:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80079dc:	7cfb      	ldrb	r3, [r7, #19]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10c      	bne.n	80079fc <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80079ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80079f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f875 	bl	8007ae2 <RTC_ExitInitMode>
 80079f8:	4603      	mov	r3, r0
 80079fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80079fc:	7cfb      	ldrb	r3, [r7, #19]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d102      	bne.n	8007a08 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2201      	movs	r2, #1
 8007a06:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	22ff      	movs	r2, #255	; 0xff
 8007a0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	771a      	strb	r2, [r3, #28]

  return status;
 8007a16:	7cfb      	ldrb	r3, [r7, #19]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	371c      	adds	r7, #28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd90      	pop	{r4, r7, pc}
 8007a20:	080126a4 	.word	0x080126a4

08007a24 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68da      	ldr	r2, [r3, #12]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a3e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a40:	f7fb fb3e 	bl	80030c0 <HAL_GetTick>
 8007a44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a46:	e009      	b.n	8007a5c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a48:	f7fb fb3a 	bl	80030c0 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a56:	d901      	bls.n	8007a5c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e007      	b.n	8007a6c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f003 0320 	and.w	r3, r3, #32
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0ee      	beq.n	8007a48 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d122      	bne.n	8007ad8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007aa0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007aa2:	f7fb fb0d 	bl	80030c0 <HAL_GetTick>
 8007aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007aa8:	e00c      	b.n	8007ac4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007aaa:	f7fb fb09 	bl	80030c0 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ab8:	d904      	bls.n	8007ac4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2204      	movs	r2, #4
 8007abe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d102      	bne.n	8007ad8 <RTC_EnterInitMode+0x64>
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d1e8      	bne.n	8007aaa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68da      	ldr	r2, [r3, #12]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007afc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10a      	bne.n	8007b22 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7ff ff89 	bl	8007a24 <HAL_RTC_WaitForSynchro>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d004      	beq.n	8007b22 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2204      	movs	r2, #4
 8007b1c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007b3a:	e005      	b.n	8007b48 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	3b0a      	subs	r3, #10
 8007b46:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007b48:	79fb      	ldrb	r3, [r7, #7]
 8007b4a:	2b09      	cmp	r3, #9
 8007b4c:	d8f6      	bhi.n	8007b3c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	79fb      	ldrb	r3, [r7, #7]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	b2db      	uxtb	r3, r3
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	091b      	lsrs	r3, r3, #4
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	0092      	lsls	r2, r2, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007b84:	79fb      	ldrb	r3, [r7, #7]
 8007b86:	f003 030f 	and.w	r3, r3, #15
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	4413      	add	r3, r2
 8007b90:	b2db      	uxtb	r3, r3
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
	...

08007ba0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e18c      	b.n	8007ecc <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a75      	ldr	r2, [pc, #468]	; (8007d8c <HAL_SPI_Init+0x1ec>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d018      	beq.n	8007bee <HAL_SPI_Init+0x4e>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a73      	ldr	r2, [pc, #460]	; (8007d90 <HAL_SPI_Init+0x1f0>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d013      	beq.n	8007bee <HAL_SPI_Init+0x4e>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a72      	ldr	r2, [pc, #456]	; (8007d94 <HAL_SPI_Init+0x1f4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d00e      	beq.n	8007bee <HAL_SPI_Init+0x4e>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a70      	ldr	r2, [pc, #448]	; (8007d98 <HAL_SPI_Init+0x1f8>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d009      	beq.n	8007bee <HAL_SPI_Init+0x4e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a6f      	ldr	r2, [pc, #444]	; (8007d9c <HAL_SPI_Init+0x1fc>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d004      	beq.n	8007bee <HAL_SPI_Init+0x4e>
 8007be4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007be8:	486d      	ldr	r0, [pc, #436]	; (8007da0 <HAL_SPI_Init+0x200>)
 8007bea:	f7fa f97a 	bl	8001ee2 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <HAL_SPI_Init+0x6a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bfe:	d004      	beq.n	8007c0a <HAL_SPI_Init+0x6a>
 8007c00:	f240 1141 	movw	r1, #321	; 0x141
 8007c04:	4866      	ldr	r0, [pc, #408]	; (8007da0 <HAL_SPI_Init+0x200>)
 8007c06:	f7fa f96c 	bl	8001ee2 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00e      	beq.n	8007c30 <HAL_SPI_Init+0x90>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c1a:	d009      	beq.n	8007c30 <HAL_SPI_Init+0x90>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c24:	d004      	beq.n	8007c30 <HAL_SPI_Init+0x90>
 8007c26:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007c2a:	485d      	ldr	r0, [pc, #372]	; (8007da0 <HAL_SPI_Init+0x200>)
 8007c2c:	f7fa f959 	bl	8001ee2 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c38:	d008      	beq.n	8007c4c <HAL_SPI_Init+0xac>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <HAL_SPI_Init+0xac>
 8007c42:	f240 1143 	movw	r1, #323	; 0x143
 8007c46:	4856      	ldr	r0, [pc, #344]	; (8007da0 <HAL_SPI_Init+0x200>)
 8007c48:	f7fa f94b 	bl	8001ee2 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c54:	d00d      	beq.n	8007c72 <HAL_SPI_Init+0xd2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d009      	beq.n	8007c72 <HAL_SPI_Init+0xd2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c66:	d004      	beq.n	8007c72 <HAL_SPI_Init+0xd2>
 8007c68:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007c6c:	484c      	ldr	r0, [pc, #304]	; (8007da0 <HAL_SPI_Init+0x200>)
 8007c6e:	f7fa f938 	bl	8001ee2 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d020      	beq.n	8007cbc <HAL_SPI_Init+0x11c>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	2b08      	cmp	r3, #8
 8007c80:	d01c      	beq.n	8007cbc <HAL_SPI_Init+0x11c>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	2b10      	cmp	r3, #16
 8007c88:	d018      	beq.n	8007cbc <HAL_SPI_Init+0x11c>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	2b18      	cmp	r3, #24
 8007c90:	d014      	beq.n	8007cbc <HAL_SPI_Init+0x11c>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	d010      	beq.n	8007cbc <HAL_SPI_Init+0x11c>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	2b28      	cmp	r3, #40	; 0x28
 8007ca0:	d00c      	beq.n	8007cbc <HAL_SPI_Init+0x11c>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	2b30      	cmp	r3, #48	; 0x30
 8007ca8:	d008      	beq.n	8007cbc <HAL_SPI_Init+0x11c>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	2b38      	cmp	r3, #56	; 0x38
 8007cb0:	d004      	beq.n	8007cbc <HAL_SPI_Init+0x11c>
 8007cb2:	f240 1145 	movw	r1, #325	; 0x145
 8007cb6:	483a      	ldr	r0, [pc, #232]	; (8007da0 <HAL_SPI_Init+0x200>)
 8007cb8:	f7fa f913 	bl	8001ee2 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d008      	beq.n	8007cd6 <HAL_SPI_Init+0x136>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a1b      	ldr	r3, [r3, #32]
 8007cc8:	2b80      	cmp	r3, #128	; 0x80
 8007cca:	d004      	beq.n	8007cd6 <HAL_SPI_Init+0x136>
 8007ccc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007cd0:	4833      	ldr	r0, [pc, #204]	; (8007da0 <HAL_SPI_Init+0x200>)
 8007cd2:	f7fa f906 	bl	8001ee2 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d008      	beq.n	8007cf0 <HAL_SPI_Init+0x150>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d004      	beq.n	8007cf0 <HAL_SPI_Init+0x150>
 8007ce6:	f240 1147 	movw	r1, #327	; 0x147
 8007cea:	482d      	ldr	r0, [pc, #180]	; (8007da0 <HAL_SPI_Init+0x200>)
 8007cec:	f7fa f8f9 	bl	8001ee2 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d155      	bne.n	8007da4 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d008      	beq.n	8007d12 <HAL_SPI_Init+0x172>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d004      	beq.n	8007d12 <HAL_SPI_Init+0x172>
 8007d08:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8007d0c:	4824      	ldr	r0, [pc, #144]	; (8007da0 <HAL_SPI_Init+0x200>)
 8007d0e:	f7fa f8e8 	bl	8001ee2 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d008      	beq.n	8007d2c <HAL_SPI_Init+0x18c>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d004      	beq.n	8007d2c <HAL_SPI_Init+0x18c>
 8007d22:	f240 114b 	movw	r1, #331	; 0x14b
 8007d26:	481e      	ldr	r0, [pc, #120]	; (8007da0 <HAL_SPI_Init+0x200>)
 8007d28:	f7fa f8db 	bl	8001ee2 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d34:	d125      	bne.n	8007d82 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d05d      	beq.n	8007dfa <HAL_SPI_Init+0x25a>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	2b08      	cmp	r3, #8
 8007d44:	d059      	beq.n	8007dfa <HAL_SPI_Init+0x25a>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	2b10      	cmp	r3, #16
 8007d4c:	d055      	beq.n	8007dfa <HAL_SPI_Init+0x25a>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	2b18      	cmp	r3, #24
 8007d54:	d051      	beq.n	8007dfa <HAL_SPI_Init+0x25a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	d04d      	beq.n	8007dfa <HAL_SPI_Init+0x25a>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	2b28      	cmp	r3, #40	; 0x28
 8007d64:	d049      	beq.n	8007dfa <HAL_SPI_Init+0x25a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	2b30      	cmp	r3, #48	; 0x30
 8007d6c:	d045      	beq.n	8007dfa <HAL_SPI_Init+0x25a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	2b38      	cmp	r3, #56	; 0x38
 8007d74:	d041      	beq.n	8007dfa <HAL_SPI_Init+0x25a>
 8007d76:	f240 114f 	movw	r1, #335	; 0x14f
 8007d7a:	4809      	ldr	r0, [pc, #36]	; (8007da0 <HAL_SPI_Init+0x200>)
 8007d7c:	f7fa f8b1 	bl	8001ee2 <assert_failed>
 8007d80:	e03b      	b.n	8007dfa <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	61da      	str	r2, [r3, #28]
 8007d88:	e037      	b.n	8007dfa <HAL_SPI_Init+0x25a>
 8007d8a:	bf00      	nop
 8007d8c:	40013000 	.word	0x40013000
 8007d90:	40003800 	.word	0x40003800
 8007d94:	40003c00 	.word	0x40003c00
 8007d98:	40013400 	.word	0x40013400
 8007d9c:	40015000 	.word	0x40015000
 8007da0:	080126dc 	.word	0x080126dc
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d020      	beq.n	8007dee <HAL_SPI_Init+0x24e>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d01c      	beq.n	8007dee <HAL_SPI_Init+0x24e>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	2b10      	cmp	r3, #16
 8007dba:	d018      	beq.n	8007dee <HAL_SPI_Init+0x24e>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	2b18      	cmp	r3, #24
 8007dc2:	d014      	beq.n	8007dee <HAL_SPI_Init+0x24e>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	2b20      	cmp	r3, #32
 8007dca:	d010      	beq.n	8007dee <HAL_SPI_Init+0x24e>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	2b28      	cmp	r3, #40	; 0x28
 8007dd2:	d00c      	beq.n	8007dee <HAL_SPI_Init+0x24e>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	2b30      	cmp	r3, #48	; 0x30
 8007dda:	d008      	beq.n	8007dee <HAL_SPI_Init+0x24e>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	2b38      	cmp	r3, #56	; 0x38
 8007de2:	d004      	beq.n	8007dee <HAL_SPI_Init+0x24e>
 8007de4:	f240 1159 	movw	r1, #345	; 0x159
 8007de8:	483a      	ldr	r0, [pc, #232]	; (8007ed4 <HAL_SPI_Init+0x334>)
 8007dea:	f7fa f87a 	bl	8001ee2 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d106      	bne.n	8007e1a <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7fa f92b 	bl	8002070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e30:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e42:	431a      	orrs	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	431a      	orrs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	431a      	orrs	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7e:	ea42 0103 	orr.w	r1, r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	0c1b      	lsrs	r3, r3, #16
 8007e98:	f003 0104 	and.w	r1, r3, #4
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	f003 0210 	and.w	r2, r3, #16
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	69da      	ldr	r2, [r3, #28]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007eba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	080126dc 	.word	0x080126dc

08007ed8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d009      	beq.n	8007f08 <HAL_SPI_Transmit+0x30>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007efc:	d004      	beq.n	8007f08 <HAL_SPI_Transmit+0x30>
 8007efe:	f44f 7142 	mov.w	r1, #776	; 0x308
 8007f02:	4880      	ldr	r0, [pc, #512]	; (8008104 <HAL_SPI_Transmit+0x22c>)
 8007f04:	f7f9 ffed 	bl	8001ee2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d101      	bne.n	8007f16 <HAL_SPI_Transmit+0x3e>
 8007f12:	2302      	movs	r3, #2
 8007f14:	e128      	b.n	8008168 <HAL_SPI_Transmit+0x290>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f1e:	f7fb f8cf 	bl	80030c0 <HAL_GetTick>
 8007f22:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f24:	88fb      	ldrh	r3, [r7, #6]
 8007f26:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d002      	beq.n	8007f3a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8007f34:	2302      	movs	r3, #2
 8007f36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f38:	e10d      	b.n	8008156 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <HAL_SPI_Transmit+0x6e>
 8007f40:	88fb      	ldrh	r3, [r7, #6]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f4a:	e104      	b.n	8008156 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2203      	movs	r2, #3
 8007f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	88fa      	ldrh	r2, [r7, #6]
 8007f64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	88fa      	ldrh	r2, [r7, #6]
 8007f6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f92:	d10f      	bne.n	8007fb4 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbe:	2b40      	cmp	r3, #64	; 0x40
 8007fc0:	d007      	beq.n	8007fd2 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fda:	d14b      	bne.n	8008074 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <HAL_SPI_Transmit+0x112>
 8007fe4:	8afb      	ldrh	r3, [r7, #22]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d13e      	bne.n	8008068 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fee:	881a      	ldrh	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffa:	1c9a      	adds	r2, r3, #2
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008004:	b29b      	uxth	r3, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	b29a      	uxth	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800800e:	e02b      	b.n	8008068 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b02      	cmp	r3, #2
 800801c:	d112      	bne.n	8008044 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	881a      	ldrh	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	1c9a      	adds	r2, r3, #2
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008038:	b29b      	uxth	r3, r3
 800803a:	3b01      	subs	r3, #1
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	86da      	strh	r2, [r3, #54]	; 0x36
 8008042:	e011      	b.n	8008068 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008044:	f7fb f83c 	bl	80030c0 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	429a      	cmp	r2, r3
 8008052:	d803      	bhi.n	800805c <HAL_SPI_Transmit+0x184>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805a:	d102      	bne.n	8008062 <HAL_SPI_Transmit+0x18a>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d102      	bne.n	8008068 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008066:	e076      	b.n	8008156 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800806c:	b29b      	uxth	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1ce      	bne.n	8008010 <HAL_SPI_Transmit+0x138>
 8008072:	e04e      	b.n	8008112 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <HAL_SPI_Transmit+0x1aa>
 800807c:	8afb      	ldrh	r3, [r7, #22]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d142      	bne.n	8008108 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	330c      	adds	r3, #12
 800808c:	7812      	ldrb	r2, [r2, #0]
 800808e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800809e:	b29b      	uxth	r3, r3
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080a8:	e02e      	b.n	8008108 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d113      	bne.n	80080e0 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	330c      	adds	r3, #12
 80080c2:	7812      	ldrb	r2, [r2, #0]
 80080c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80080de:	e013      	b.n	8008108 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080e0:	f7fa ffee 	bl	80030c0 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d803      	bhi.n	80080f8 <HAL_SPI_Transmit+0x220>
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f6:	d102      	bne.n	80080fe <HAL_SPI_Transmit+0x226>
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d104      	bne.n	8008108 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008102:	e028      	b.n	8008156 <HAL_SPI_Transmit+0x27e>
 8008104:	080126dc 	.word	0x080126dc
    while (hspi->TxXferCount > 0U)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800810c:	b29b      	uxth	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1cb      	bne.n	80080aa <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 f8b2 	bl	8008280 <SPI_EndRxTxTransaction>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2220      	movs	r2, #32
 8008126:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008130:	2300      	movs	r3, #0
 8008132:	613b      	str	r3, [r7, #16]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	613b      	str	r3, [r7, #16]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	613b      	str	r3, [r7, #16]
 8008144:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	77fb      	strb	r3, [r7, #31]
 8008152:	e000      	b.n	8008156 <HAL_SPI_Transmit+0x27e>
  }

error:
 8008154:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008166:	7ffb      	ldrb	r3, [r7, #31]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3720      	adds	r7, #32
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008180:	f7fa ff9e 	bl	80030c0 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008188:	1a9b      	subs	r3, r3, r2
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	4413      	add	r3, r2
 800818e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008190:	f7fa ff96 	bl	80030c0 <HAL_GetTick>
 8008194:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008196:	4b39      	ldr	r3, [pc, #228]	; (800827c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	015b      	lsls	r3, r3, #5
 800819c:	0d1b      	lsrs	r3, r3, #20
 800819e:	69fa      	ldr	r2, [r7, #28]
 80081a0:	fb02 f303 	mul.w	r3, r2, r3
 80081a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081a6:	e054      	b.n	8008252 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ae:	d050      	beq.n	8008252 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081b0:	f7fa ff86 	bl	80030c0 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	69fa      	ldr	r2, [r7, #28]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d902      	bls.n	80081c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d13d      	bne.n	8008242 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081de:	d111      	bne.n	8008204 <SPI_WaitFlagStateUntilTimeout+0x94>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081e8:	d004      	beq.n	80081f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f2:	d107      	bne.n	8008204 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008202:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800820c:	d10f      	bne.n	800822e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800822c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e017      	b.n	8008272 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	3b01      	subs	r3, #1
 8008250:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	4013      	ands	r3, r2
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	429a      	cmp	r2, r3
 8008260:	bf0c      	ite	eq
 8008262:	2301      	moveq	r3, #1
 8008264:	2300      	movne	r3, #0
 8008266:	b2db      	uxtb	r3, r3
 8008268:	461a      	mov	r2, r3
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	429a      	cmp	r2, r3
 800826e:	d19b      	bne.n	80081a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3720      	adds	r7, #32
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	2000008c 	.word	0x2000008c

08008280 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af02      	add	r7, sp, #8
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800828c:	4b1b      	ldr	r3, [pc, #108]	; (80082fc <SPI_EndRxTxTransaction+0x7c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a1b      	ldr	r2, [pc, #108]	; (8008300 <SPI_EndRxTxTransaction+0x80>)
 8008292:	fba2 2303 	umull	r2, r3, r2, r3
 8008296:	0d5b      	lsrs	r3, r3, #21
 8008298:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800829c:	fb02 f303 	mul.w	r3, r2, r3
 80082a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082aa:	d112      	bne.n	80082d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2200      	movs	r2, #0
 80082b4:	2180      	movs	r1, #128	; 0x80
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f7ff ff5a 	bl	8008170 <SPI_WaitFlagStateUntilTimeout>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d016      	beq.n	80082f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c6:	f043 0220 	orr.w	r2, r3, #32
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e00f      	b.n	80082f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00a      	beq.n	80082ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	3b01      	subs	r3, #1
 80082dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e8:	2b80      	cmp	r3, #128	; 0x80
 80082ea:	d0f2      	beq.n	80082d2 <SPI_EndRxTxTransaction+0x52>
 80082ec:	e000      	b.n	80082f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80082ee:	bf00      	nop
  }

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	2000008c 	.word	0x2000008c
 8008300:	165e9f81 	.word	0x165e9f81

08008304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e0a7      	b.n	8008466 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a55      	ldr	r2, [pc, #340]	; (8008470 <HAL_TIM_Base_Init+0x16c>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d027      	beq.n	8008370 <HAL_TIM_Base_Init+0x6c>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008328:	d022      	beq.n	8008370 <HAL_TIM_Base_Init+0x6c>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a51      	ldr	r2, [pc, #324]	; (8008474 <HAL_TIM_Base_Init+0x170>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d01d      	beq.n	8008370 <HAL_TIM_Base_Init+0x6c>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a4f      	ldr	r2, [pc, #316]	; (8008478 <HAL_TIM_Base_Init+0x174>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d018      	beq.n	8008370 <HAL_TIM_Base_Init+0x6c>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a4e      	ldr	r2, [pc, #312]	; (800847c <HAL_TIM_Base_Init+0x178>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d013      	beq.n	8008370 <HAL_TIM_Base_Init+0x6c>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a4c      	ldr	r2, [pc, #304]	; (8008480 <HAL_TIM_Base_Init+0x17c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00e      	beq.n	8008370 <HAL_TIM_Base_Init+0x6c>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a4b      	ldr	r2, [pc, #300]	; (8008484 <HAL_TIM_Base_Init+0x180>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d009      	beq.n	8008370 <HAL_TIM_Base_Init+0x6c>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a49      	ldr	r2, [pc, #292]	; (8008488 <HAL_TIM_Base_Init+0x184>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d004      	beq.n	8008370 <HAL_TIM_Base_Init+0x6c>
 8008366:	f240 1113 	movw	r1, #275	; 0x113
 800836a:	4848      	ldr	r0, [pc, #288]	; (800848c <HAL_TIM_Base_Init+0x188>)
 800836c:	f7f9 fdb9 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d014      	beq.n	80083a2 <HAL_TIM_Base_Init+0x9e>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	2b10      	cmp	r3, #16
 800837e:	d010      	beq.n	80083a2 <HAL_TIM_Base_Init+0x9e>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2b20      	cmp	r3, #32
 8008386:	d00c      	beq.n	80083a2 <HAL_TIM_Base_Init+0x9e>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	2b40      	cmp	r3, #64	; 0x40
 800838e:	d008      	beq.n	80083a2 <HAL_TIM_Base_Init+0x9e>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2b60      	cmp	r3, #96	; 0x60
 8008396:	d004      	beq.n	80083a2 <HAL_TIM_Base_Init+0x9e>
 8008398:	f44f 718a 	mov.w	r1, #276	; 0x114
 800839c:	483b      	ldr	r0, [pc, #236]	; (800848c <HAL_TIM_Base_Init+0x188>)
 800839e:	f7f9 fda0 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00e      	beq.n	80083c8 <HAL_TIM_Base_Init+0xc4>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083b2:	d009      	beq.n	80083c8 <HAL_TIM_Base_Init+0xc4>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083bc:	d004      	beq.n	80083c8 <HAL_TIM_Base_Init+0xc4>
 80083be:	f240 1115 	movw	r1, #277	; 0x115
 80083c2:	4832      	ldr	r0, [pc, #200]	; (800848c <HAL_TIM_Base_Init+0x188>)
 80083c4:	f7f9 fd8d 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d008      	beq.n	80083e2 <HAL_TIM_Base_Init+0xde>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	2b80      	cmp	r3, #128	; 0x80
 80083d6:	d004      	beq.n	80083e2 <HAL_TIM_Base_Init+0xde>
 80083d8:	f44f 718b 	mov.w	r1, #278	; 0x116
 80083dc:	482b      	ldr	r0, [pc, #172]	; (800848c <HAL_TIM_Base_Init+0x188>)
 80083de:	f7f9 fd80 	bl	8001ee2 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d106      	bne.n	80083fc <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7fa fcae 	bl	8002d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3304      	adds	r3, #4
 800840c:	4619      	mov	r1, r3
 800840e:	4610      	mov	r0, r2
 8008410:	f001 fa28 	bl	8009864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	40010000 	.word	0x40010000
 8008474:	40000400 	.word	0x40000400
 8008478:	40000800 	.word	0x40000800
 800847c:	40000c00 	.word	0x40000c00
 8008480:	40014000 	.word	0x40014000
 8008484:	40014400 	.word	0x40014400
 8008488:	40014800 	.word	0x40014800
 800848c:	08012714 	.word	0x08012714

08008490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a3d      	ldr	r2, [pc, #244]	; (8008594 <HAL_TIM_Base_Start_IT+0x104>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d027      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x62>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084aa:	d022      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x62>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a39      	ldr	r2, [pc, #228]	; (8008598 <HAL_TIM_Base_Start_IT+0x108>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d01d      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x62>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a38      	ldr	r2, [pc, #224]	; (800859c <HAL_TIM_Base_Start_IT+0x10c>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d018      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x62>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a36      	ldr	r2, [pc, #216]	; (80085a0 <HAL_TIM_Base_Start_IT+0x110>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d013      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x62>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a35      	ldr	r2, [pc, #212]	; (80085a4 <HAL_TIM_Base_Start_IT+0x114>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d00e      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x62>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a33      	ldr	r2, [pc, #204]	; (80085a8 <HAL_TIM_Base_Start_IT+0x118>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d009      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x62>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a32      	ldr	r2, [pc, #200]	; (80085ac <HAL_TIM_Base_Start_IT+0x11c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d004      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0x62>
 80084e8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80084ec:	4830      	ldr	r0, [pc, #192]	; (80085b0 <HAL_TIM_Base_Start_IT+0x120>)
 80084ee:	f7f9 fcf8 	bl	8001ee2 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d001      	beq.n	8008502 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e044      	b.n	800858c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2202      	movs	r2, #2
 8008506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68da      	ldr	r2, [r3, #12]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f042 0201 	orr.w	r2, r2, #1
 8008518:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a1d      	ldr	r2, [pc, #116]	; (8008594 <HAL_TIM_Base_Start_IT+0x104>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d018      	beq.n	8008556 <HAL_TIM_Base_Start_IT+0xc6>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800852c:	d013      	beq.n	8008556 <HAL_TIM_Base_Start_IT+0xc6>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a19      	ldr	r2, [pc, #100]	; (8008598 <HAL_TIM_Base_Start_IT+0x108>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d00e      	beq.n	8008556 <HAL_TIM_Base_Start_IT+0xc6>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a17      	ldr	r2, [pc, #92]	; (800859c <HAL_TIM_Base_Start_IT+0x10c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d009      	beq.n	8008556 <HAL_TIM_Base_Start_IT+0xc6>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a16      	ldr	r2, [pc, #88]	; (80085a0 <HAL_TIM_Base_Start_IT+0x110>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d004      	beq.n	8008556 <HAL_TIM_Base_Start_IT+0xc6>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a14      	ldr	r2, [pc, #80]	; (80085a4 <HAL_TIM_Base_Start_IT+0x114>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d111      	bne.n	800857a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f003 0307 	and.w	r3, r3, #7
 8008560:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b06      	cmp	r3, #6
 8008566:	d010      	beq.n	800858a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0201 	orr.w	r2, r2, #1
 8008576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008578:	e007      	b.n	800858a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f042 0201 	orr.w	r2, r2, #1
 8008588:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	40010000 	.word	0x40010000
 8008598:	40000400 	.word	0x40000400
 800859c:	40000800 	.word	0x40000800
 80085a0:	40000c00 	.word	0x40000c00
 80085a4:	40014000 	.word	0x40014000
 80085a8:	40014400 	.word	0x40014400
 80085ac:	40014800 	.word	0x40014800
 80085b0:	08012714 	.word	0x08012714

080085b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e0a7      	b.n	8008716 <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a55      	ldr	r2, [pc, #340]	; (8008720 <HAL_TIM_PWM_Init+0x16c>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d027      	beq.n	8008620 <HAL_TIM_PWM_Init+0x6c>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d8:	d022      	beq.n	8008620 <HAL_TIM_PWM_Init+0x6c>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a51      	ldr	r2, [pc, #324]	; (8008724 <HAL_TIM_PWM_Init+0x170>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d01d      	beq.n	8008620 <HAL_TIM_PWM_Init+0x6c>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a4f      	ldr	r2, [pc, #316]	; (8008728 <HAL_TIM_PWM_Init+0x174>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d018      	beq.n	8008620 <HAL_TIM_PWM_Init+0x6c>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a4e      	ldr	r2, [pc, #312]	; (800872c <HAL_TIM_PWM_Init+0x178>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d013      	beq.n	8008620 <HAL_TIM_PWM_Init+0x6c>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a4c      	ldr	r2, [pc, #304]	; (8008730 <HAL_TIM_PWM_Init+0x17c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00e      	beq.n	8008620 <HAL_TIM_PWM_Init+0x6c>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a4b      	ldr	r2, [pc, #300]	; (8008734 <HAL_TIM_PWM_Init+0x180>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d009      	beq.n	8008620 <HAL_TIM_PWM_Init+0x6c>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a49      	ldr	r2, [pc, #292]	; (8008738 <HAL_TIM_PWM_Init+0x184>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d004      	beq.n	8008620 <HAL_TIM_PWM_Init+0x6c>
 8008616:	f240 5129 	movw	r1, #1321	; 0x529
 800861a:	4848      	ldr	r0, [pc, #288]	; (800873c <HAL_TIM_PWM_Init+0x188>)
 800861c:	f7f9 fc61 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d014      	beq.n	8008652 <HAL_TIM_PWM_Init+0x9e>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	2b10      	cmp	r3, #16
 800862e:	d010      	beq.n	8008652 <HAL_TIM_PWM_Init+0x9e>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	2b20      	cmp	r3, #32
 8008636:	d00c      	beq.n	8008652 <HAL_TIM_PWM_Init+0x9e>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	2b40      	cmp	r3, #64	; 0x40
 800863e:	d008      	beq.n	8008652 <HAL_TIM_PWM_Init+0x9e>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	2b60      	cmp	r3, #96	; 0x60
 8008646:	d004      	beq.n	8008652 <HAL_TIM_PWM_Init+0x9e>
 8008648:	f240 512a 	movw	r1, #1322	; 0x52a
 800864c:	483b      	ldr	r0, [pc, #236]	; (800873c <HAL_TIM_PWM_Init+0x188>)
 800864e:	f7f9 fc48 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00e      	beq.n	8008678 <HAL_TIM_PWM_Init+0xc4>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008662:	d009      	beq.n	8008678 <HAL_TIM_PWM_Init+0xc4>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800866c:	d004      	beq.n	8008678 <HAL_TIM_PWM_Init+0xc4>
 800866e:	f240 512b 	movw	r1, #1323	; 0x52b
 8008672:	4832      	ldr	r0, [pc, #200]	; (800873c <HAL_TIM_PWM_Init+0x188>)
 8008674:	f7f9 fc35 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d008      	beq.n	8008692 <HAL_TIM_PWM_Init+0xde>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	2b80      	cmp	r3, #128	; 0x80
 8008686:	d004      	beq.n	8008692 <HAL_TIM_PWM_Init+0xde>
 8008688:	f240 512c 	movw	r1, #1324	; 0x52c
 800868c:	482b      	ldr	r0, [pc, #172]	; (800873c <HAL_TIM_PWM_Init+0x188>)
 800868e:	f7f9 fc28 	bl	8001ee2 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d106      	bne.n	80086ac <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7fa fac0 	bl	8002c2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2202      	movs	r2, #2
 80086b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3304      	adds	r3, #4
 80086bc:	4619      	mov	r1, r3
 80086be:	4610      	mov	r0, r2
 80086c0:	f001 f8d0 	bl	8009864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	40010000 	.word	0x40010000
 8008724:	40000400 	.word	0x40000400
 8008728:	40000800 	.word	0x40000800
 800872c:	40000c00 	.word	0x40000c00
 8008730:	40014000 	.word	0x40014000
 8008734:	40014400 	.word	0x40014400
 8008738:	40014800 	.word	0x40014800
 800873c:	08012714 	.word	0x08012714

08008740 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e18a      	b.n	8008a6a <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a78      	ldr	r2, [pc, #480]	; (800893c <HAL_TIM_Encoder_Init+0x1fc>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d01d      	beq.n	800879a <HAL_TIM_Encoder_Init+0x5a>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008766:	d018      	beq.n	800879a <HAL_TIM_Encoder_Init+0x5a>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a74      	ldr	r2, [pc, #464]	; (8008940 <HAL_TIM_Encoder_Init+0x200>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d013      	beq.n	800879a <HAL_TIM_Encoder_Init+0x5a>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a73      	ldr	r2, [pc, #460]	; (8008944 <HAL_TIM_Encoder_Init+0x204>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00e      	beq.n	800879a <HAL_TIM_Encoder_Init+0x5a>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a71      	ldr	r2, [pc, #452]	; (8008948 <HAL_TIM_Encoder_Init+0x208>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d009      	beq.n	800879a <HAL_TIM_Encoder_Init+0x5a>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a70      	ldr	r2, [pc, #448]	; (800894c <HAL_TIM_Encoder_Init+0x20c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d004      	beq.n	800879a <HAL_TIM_Encoder_Init+0x5a>
 8008790:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8008794:	486e      	ldr	r0, [pc, #440]	; (8008950 <HAL_TIM_Encoder_Init+0x210>)
 8008796:	f7f9 fba4 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d014      	beq.n	80087cc <HAL_TIM_Encoder_Init+0x8c>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	2b10      	cmp	r3, #16
 80087a8:	d010      	beq.n	80087cc <HAL_TIM_Encoder_Init+0x8c>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	2b20      	cmp	r3, #32
 80087b0:	d00c      	beq.n	80087cc <HAL_TIM_Encoder_Init+0x8c>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	2b40      	cmp	r3, #64	; 0x40
 80087b8:	d008      	beq.n	80087cc <HAL_TIM_Encoder_Init+0x8c>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	2b60      	cmp	r3, #96	; 0x60
 80087c0:	d004      	beq.n	80087cc <HAL_TIM_Encoder_Init+0x8c>
 80087c2:	f640 31d2 	movw	r1, #3026	; 0xbd2
 80087c6:	4862      	ldr	r0, [pc, #392]	; (8008950 <HAL_TIM_Encoder_Init+0x210>)
 80087c8:	f7f9 fb8b 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00e      	beq.n	80087f2 <HAL_TIM_Encoder_Init+0xb2>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087dc:	d009      	beq.n	80087f2 <HAL_TIM_Encoder_Init+0xb2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e6:	d004      	beq.n	80087f2 <HAL_TIM_Encoder_Init+0xb2>
 80087e8:	f640 31d3 	movw	r1, #3027	; 0xbd3
 80087ec:	4858      	ldr	r0, [pc, #352]	; (8008950 <HAL_TIM_Encoder_Init+0x210>)
 80087ee:	f7f9 fb78 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d008      	beq.n	800880c <HAL_TIM_Encoder_Init+0xcc>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	2b80      	cmp	r3, #128	; 0x80
 8008800:	d004      	beq.n	800880c <HAL_TIM_Encoder_Init+0xcc>
 8008802:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8008806:	4852      	ldr	r0, [pc, #328]	; (8008950 <HAL_TIM_Encoder_Init+0x210>)
 8008808:	f7f9 fb6b 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d00c      	beq.n	800882e <HAL_TIM_Encoder_Init+0xee>
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b02      	cmp	r3, #2
 800881a:	d008      	beq.n	800882e <HAL_TIM_Encoder_Init+0xee>
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b03      	cmp	r3, #3
 8008822:	d004      	beq.n	800882e <HAL_TIM_Encoder_Init+0xee>
 8008824:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8008828:	4849      	ldr	r0, [pc, #292]	; (8008950 <HAL_TIM_Encoder_Init+0x210>)
 800882a:	f7f9 fb5a 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d00c      	beq.n	8008850 <HAL_TIM_Encoder_Init+0x110>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	2b02      	cmp	r3, #2
 800883c:	d008      	beq.n	8008850 <HAL_TIM_Encoder_Init+0x110>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	2b03      	cmp	r3, #3
 8008844:	d004      	beq.n	8008850 <HAL_TIM_Encoder_Init+0x110>
 8008846:	f640 31d6 	movw	r1, #3030	; 0xbd6
 800884a:	4841      	ldr	r0, [pc, #260]	; (8008950 <HAL_TIM_Encoder_Init+0x210>)
 800884c:	f7f9 fb49 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d00c      	beq.n	8008872 <HAL_TIM_Encoder_Init+0x132>
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	2b02      	cmp	r3, #2
 800885e:	d008      	beq.n	8008872 <HAL_TIM_Encoder_Init+0x132>
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	2b03      	cmp	r3, #3
 8008866:	d004      	beq.n	8008872 <HAL_TIM_Encoder_Init+0x132>
 8008868:	f640 31d7 	movw	r1, #3031	; 0xbd7
 800886c:	4838      	ldr	r0, [pc, #224]	; (8008950 <HAL_TIM_Encoder_Init+0x210>)
 800886e:	f7f9 fb38 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d008      	beq.n	800888c <HAL_TIM_Encoder_Init+0x14c>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d004      	beq.n	800888c <HAL_TIM_Encoder_Init+0x14c>
 8008882:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8008886:	4832      	ldr	r0, [pc, #200]	; (8008950 <HAL_TIM_Encoder_Init+0x210>)
 8008888:	f7f9 fb2b 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d008      	beq.n	80088a6 <HAL_TIM_Encoder_Init+0x166>
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d004      	beq.n	80088a6 <HAL_TIM_Encoder_Init+0x166>
 800889c:	f640 31d9 	movw	r1, #3033	; 0xbd9
 80088a0:	482b      	ldr	r0, [pc, #172]	; (8008950 <HAL_TIM_Encoder_Init+0x210>)
 80088a2:	f7f9 fb1e 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d010      	beq.n	80088d0 <HAL_TIM_Encoder_Init+0x190>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	2b04      	cmp	r3, #4
 80088b4:	d00c      	beq.n	80088d0 <HAL_TIM_Encoder_Init+0x190>
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	2b08      	cmp	r3, #8
 80088bc:	d008      	beq.n	80088d0 <HAL_TIM_Encoder_Init+0x190>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	2b0c      	cmp	r3, #12
 80088c4:	d004      	beq.n	80088d0 <HAL_TIM_Encoder_Init+0x190>
 80088c6:	f640 31da 	movw	r1, #3034	; 0xbda
 80088ca:	4821      	ldr	r0, [pc, #132]	; (8008950 <HAL_TIM_Encoder_Init+0x210>)
 80088cc:	f7f9 fb09 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d010      	beq.n	80088fa <HAL_TIM_Encoder_Init+0x1ba>
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	2b04      	cmp	r3, #4
 80088de:	d00c      	beq.n	80088fa <HAL_TIM_Encoder_Init+0x1ba>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d008      	beq.n	80088fa <HAL_TIM_Encoder_Init+0x1ba>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	2b0c      	cmp	r3, #12
 80088ee:	d004      	beq.n	80088fa <HAL_TIM_Encoder_Init+0x1ba>
 80088f0:	f640 31db 	movw	r1, #3035	; 0xbdb
 80088f4:	4816      	ldr	r0, [pc, #88]	; (8008950 <HAL_TIM_Encoder_Init+0x210>)
 80088f6:	f7f9 faf4 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	2b0f      	cmp	r3, #15
 8008900:	d904      	bls.n	800890c <HAL_TIM_Encoder_Init+0x1cc>
 8008902:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8008906:	4812      	ldr	r0, [pc, #72]	; (8008950 <HAL_TIM_Encoder_Init+0x210>)
 8008908:	f7f9 faeb 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	2b0f      	cmp	r3, #15
 8008912:	d904      	bls.n	800891e <HAL_TIM_Encoder_Init+0x1de>
 8008914:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8008918:	480d      	ldr	r0, [pc, #52]	; (8008950 <HAL_TIM_Encoder_Init+0x210>)
 800891a:	f7f9 fae2 	bl	8001ee2 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d114      	bne.n	8008954 <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fa f9a0 	bl	8002c78 <HAL_TIM_Encoder_MspInit>
 8008938:	e00c      	b.n	8008954 <HAL_TIM_Encoder_Init+0x214>
 800893a:	bf00      	nop
 800893c:	40010000 	.word	0x40010000
 8008940:	40000400 	.word	0x40000400
 8008944:	40000800 	.word	0x40000800
 8008948:	40000c00 	.word	0x40000c00
 800894c:	40014000 	.word	0x40014000
 8008950:	08012714 	.word	0x08012714
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800896a:	f023 0307 	bic.w	r3, r3, #7
 800896e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3304      	adds	r3, #4
 8008978:	4619      	mov	r1, r3
 800897a:	4610      	mov	r0, r2
 800897c:	f000 ff72 	bl	8009864 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	4313      	orrs	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a8:	f023 0303 	bic.w	r3, r3, #3
 80089ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	021b      	lsls	r3, r3, #8
 80089b8:	4313      	orrs	r3, r2
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	4313      	orrs	r3, r2
 80089be:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80089c6:	f023 030c 	bic.w	r3, r3, #12
 80089ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	69db      	ldr	r3, [r3, #28]
 80089e0:	021b      	lsls	r3, r3, #8
 80089e2:	4313      	orrs	r3, r2
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	011a      	lsls	r2, r3, #4
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	031b      	lsls	r3, r3, #12
 80089f6:	4313      	orrs	r3, r2
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008a04:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008a0c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop

08008a74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a4d      	ldr	r2, [pc, #308]	; (8008bd8 <HAL_TIM_Encoder_Start+0x164>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d01d      	beq.n	8008ae4 <HAL_TIM_Encoder_Start+0x70>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab0:	d018      	beq.n	8008ae4 <HAL_TIM_Encoder_Start+0x70>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a49      	ldr	r2, [pc, #292]	; (8008bdc <HAL_TIM_Encoder_Start+0x168>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d013      	beq.n	8008ae4 <HAL_TIM_Encoder_Start+0x70>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a47      	ldr	r2, [pc, #284]	; (8008be0 <HAL_TIM_Encoder_Start+0x16c>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00e      	beq.n	8008ae4 <HAL_TIM_Encoder_Start+0x70>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a46      	ldr	r2, [pc, #280]	; (8008be4 <HAL_TIM_Encoder_Start+0x170>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d009      	beq.n	8008ae4 <HAL_TIM_Encoder_Start+0x70>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a44      	ldr	r2, [pc, #272]	; (8008be8 <HAL_TIM_Encoder_Start+0x174>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d004      	beq.n	8008ae4 <HAL_TIM_Encoder_Start+0x70>
 8008ada:	f640 418e 	movw	r1, #3214	; 0xc8e
 8008ade:	4843      	ldr	r0, [pc, #268]	; (8008bec <HAL_TIM_Encoder_Start+0x178>)
 8008ae0:	f7f9 f9ff 	bl	8001ee2 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d110      	bne.n	8008b0c <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d102      	bne.n	8008af6 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008af0:	7b7b      	ldrb	r3, [r7, #13]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d001      	beq.n	8008afa <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e069      	b.n	8008bce <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2202      	movs	r2, #2
 8008afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2202      	movs	r2, #2
 8008b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b0a:	e031      	b.n	8008b70 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	d110      	bne.n	8008b34 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d102      	bne.n	8008b1e <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b18:	7b3b      	ldrb	r3, [r7, #12]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d001      	beq.n	8008b22 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e055      	b.n	8008bce <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2202      	movs	r2, #2
 8008b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b32:	e01d      	b.n	8008b70 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d108      	bne.n	8008b4c <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d105      	bne.n	8008b4c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b40:	7b7b      	ldrb	r3, [r7, #13]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d102      	bne.n	8008b4c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b46:	7b3b      	ldrb	r3, [r7, #12]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d001      	beq.n	8008b50 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e03e      	b.n	8008bce <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2202      	movs	r2, #2
 8008b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2202      	movs	r2, #2
 8008b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <HAL_TIM_Encoder_Start+0x10a>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d008      	beq.n	8008b8e <HAL_TIM_Encoder_Start+0x11a>
 8008b7c:	e00f      	b.n	8008b9e <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2201      	movs	r2, #1
 8008b84:	2100      	movs	r1, #0
 8008b86:	4618      	mov	r0, r3
 8008b88:	f001 f99c 	bl	8009ec4 <TIM_CCxChannelCmd>
      break;
 8008b8c:	e016      	b.n	8008bbc <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2201      	movs	r2, #1
 8008b94:	2104      	movs	r1, #4
 8008b96:	4618      	mov	r0, r3
 8008b98:	f001 f994 	bl	8009ec4 <TIM_CCxChannelCmd>
      break;
 8008b9c:	e00e      	b.n	8008bbc <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f001 f98c 	bl	8009ec4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	2104      	movs	r1, #4
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f001 f985 	bl	8009ec4 <TIM_CCxChannelCmd>
      break;
 8008bba:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f042 0201 	orr.w	r2, r2, #1
 8008bca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	40010000 	.word	0x40010000
 8008bdc:	40000400 	.word	0x40000400
 8008be0:	40000800 	.word	0x40000800
 8008be4:	40000c00 	.word	0x40000c00
 8008be8:	40014000 	.word	0x40014000
 8008bec:	08012714 	.word	0x08012714

08008bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d122      	bne.n	8008c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d11b      	bne.n	8008c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f06f 0202 	mvn.w	r2, #2
 8008c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	f003 0303 	and.w	r3, r3, #3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fda4 	bl	8009780 <HAL_TIM_IC_CaptureCallback>
 8008c38:	e005      	b.n	8008c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fd96 	bl	800976c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fda7 	bl	8009794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	f003 0304 	and.w	r3, r3, #4
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d122      	bne.n	8008ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b04      	cmp	r3, #4
 8008c66:	d11b      	bne.n	8008ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f06f 0204 	mvn.w	r2, #4
 8008c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2202      	movs	r2, #2
 8008c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fd7a 	bl	8009780 <HAL_TIM_IC_CaptureCallback>
 8008c8c:	e005      	b.n	8008c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fd6c 	bl	800976c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fd7d 	bl	8009794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	f003 0308 	and.w	r3, r3, #8
 8008caa:	2b08      	cmp	r3, #8
 8008cac:	d122      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f003 0308 	and.w	r3, r3, #8
 8008cb8:	2b08      	cmp	r3, #8
 8008cba:	d11b      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f06f 0208 	mvn.w	r2, #8
 8008cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2204      	movs	r2, #4
 8008cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fd50 	bl	8009780 <HAL_TIM_IC_CaptureCallback>
 8008ce0:	e005      	b.n	8008cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fd42 	bl	800976c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fd53 	bl	8009794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0310 	and.w	r3, r3, #16
 8008cfe:	2b10      	cmp	r3, #16
 8008d00:	d122      	bne.n	8008d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f003 0310 	and.w	r3, r3, #16
 8008d0c:	2b10      	cmp	r3, #16
 8008d0e:	d11b      	bne.n	8008d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f06f 0210 	mvn.w	r2, #16
 8008d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2208      	movs	r2, #8
 8008d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fd26 	bl	8009780 <HAL_TIM_IC_CaptureCallback>
 8008d34:	e005      	b.n	8008d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fd18 	bl	800976c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fd29 	bl	8009794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d10e      	bne.n	8008d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d107      	bne.n	8008d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0201 	mvn.w	r2, #1
 8008d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7f9 f8a0 	bl	8001eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d7e:	2b80      	cmp	r3, #128	; 0x80
 8008d80:	d10e      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d8c:	2b80      	cmp	r3, #128	; 0x80
 8008d8e:	d107      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f001 f9c6 	bl	800a12c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008daa:	2b40      	cmp	r3, #64	; 0x40
 8008dac:	d10e      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db8:	2b40      	cmp	r3, #64	; 0x40
 8008dba:	d107      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fcee 	bl	80097a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b20      	cmp	r3, #32
 8008dd8:	d10e      	bne.n	8008df8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f003 0320 	and.w	r3, r3, #32
 8008de4:	2b20      	cmp	r3, #32
 8008de6:	d107      	bne.n	8008df8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f06f 0220 	mvn.w	r2, #32
 8008df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f001 f990 	bl	800a118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d010      	beq.n	8008e38 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d00d      	beq.n	8008e38 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b08      	cmp	r3, #8
 8008e20:	d00a      	beq.n	8008e38 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b0c      	cmp	r3, #12
 8008e26:	d007      	beq.n	8008e38 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b3c      	cmp	r3, #60	; 0x3c
 8008e2c:	d004      	beq.n	8008e38 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008e2e:	f241 0177 	movw	r1, #4215	; 0x1077
 8008e32:	4893      	ldr	r0, [pc, #588]	; (8009080 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008e34:	f7f9 f855 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b60      	cmp	r3, #96	; 0x60
 8008e3e:	d008      	beq.n	8008e52 <HAL_TIM_PWM_ConfigChannel+0x52>
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b70      	cmp	r3, #112	; 0x70
 8008e46:	d004      	beq.n	8008e52 <HAL_TIM_PWM_ConfigChannel+0x52>
 8008e48:	f241 0178 	movw	r1, #4216	; 0x1078
 8008e4c:	488c      	ldr	r0, [pc, #560]	; (8009080 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008e4e:	f7f9 f848 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d008      	beq.n	8008e6c <HAL_TIM_PWM_ConfigChannel+0x6c>
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d004      	beq.n	8008e6c <HAL_TIM_PWM_ConfigChannel+0x6c>
 8008e62:	f241 0179 	movw	r1, #4217	; 0x1079
 8008e66:	4886      	ldr	r0, [pc, #536]	; (8009080 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008e68:	f7f9 f83b 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d008      	beq.n	8008e86 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	2b04      	cmp	r3, #4
 8008e7a:	d004      	beq.n	8008e86 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008e7c:	f241 017a 	movw	r1, #4218	; 0x107a
 8008e80:	487f      	ldr	r0, [pc, #508]	; (8009080 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008e82:	f7f9 f82e 	bl	8001ee2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d101      	bne.n	8008e94 <HAL_TIM_PWM_ConfigChannel+0x94>
 8008e90:	2302      	movs	r3, #2
 8008e92:	e14c      	b.n	800912e <HAL_TIM_PWM_ConfigChannel+0x32e>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b0c      	cmp	r3, #12
 8008ea0:	f200 813d 	bhi.w	800911e <HAL_TIM_PWM_ConfigChannel+0x31e>
 8008ea4:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <HAL_TIM_PWM_ConfigChannel+0xac>)
 8008ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eaa:	bf00      	nop
 8008eac:	08008ee1 	.word	0x08008ee1
 8008eb0:	0800911f 	.word	0x0800911f
 8008eb4:	0800911f 	.word	0x0800911f
 8008eb8:	0800911f 	.word	0x0800911f
 8008ebc:	08008f7b 	.word	0x08008f7b
 8008ec0:	0800911f 	.word	0x0800911f
 8008ec4:	0800911f 	.word	0x0800911f
 8008ec8:	0800911f 	.word	0x0800911f
 8008ecc:	08009003 	.word	0x08009003
 8008ed0:	0800911f 	.word	0x0800911f
 8008ed4:	0800911f 	.word	0x0800911f
 8008ed8:	0800911f 	.word	0x0800911f
 8008edc:	080090a1 	.word	0x080090a1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a67      	ldr	r2, [pc, #412]	; (8009084 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d027      	beq.n	8008f3a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef2:	d022      	beq.n	8008f3a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a63      	ldr	r2, [pc, #396]	; (8009088 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d01d      	beq.n	8008f3a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a62      	ldr	r2, [pc, #392]	; (800908c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d018      	beq.n	8008f3a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a60      	ldr	r2, [pc, #384]	; (8009090 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d013      	beq.n	8008f3a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a5f      	ldr	r2, [pc, #380]	; (8009094 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d00e      	beq.n	8008f3a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a5d      	ldr	r2, [pc, #372]	; (8009098 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d009      	beq.n	8008f3a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a5c      	ldr	r2, [pc, #368]	; (800909c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d004      	beq.n	8008f3a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008f30:	f241 0184 	movw	r1, #4228	; 0x1084
 8008f34:	4852      	ldr	r0, [pc, #328]	; (8009080 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008f36:	f7f8 ffd4 	bl	8001ee2 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68b9      	ldr	r1, [r7, #8]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 fd0f 	bl	8009964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	699a      	ldr	r2, [r3, #24]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0208 	orr.w	r2, r2, #8
 8008f54:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	699a      	ldr	r2, [r3, #24]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0204 	bic.w	r2, r2, #4
 8008f64:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6999      	ldr	r1, [r3, #24]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	691a      	ldr	r2, [r3, #16]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	619a      	str	r2, [r3, #24]
      break;
 8008f78:	e0d4      	b.n	8009124 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a41      	ldr	r2, [pc, #260]	; (8009084 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d01d      	beq.n	8008fc0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8c:	d018      	beq.n	8008fc0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a3d      	ldr	r2, [pc, #244]	; (8009088 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d013      	beq.n	8008fc0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a3b      	ldr	r2, [pc, #236]	; (800908c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d00e      	beq.n	8008fc0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a3a      	ldr	r2, [pc, #232]	; (8009090 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d009      	beq.n	8008fc0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a38      	ldr	r2, [pc, #224]	; (8009094 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d004      	beq.n	8008fc0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008fb6:	f241 0195 	movw	r1, #4245	; 0x1095
 8008fba:	4831      	ldr	r0, [pc, #196]	; (8009080 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008fbc:	f7f8 ff91 	bl	8001ee2 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68b9      	ldr	r1, [r7, #8]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fd5c 	bl	8009a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	699a      	ldr	r2, [r3, #24]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699a      	ldr	r2, [r3, #24]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6999      	ldr	r1, [r3, #24]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	021a      	lsls	r2, r3, #8
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	619a      	str	r2, [r3, #24]
      break;
 8009000:	e090      	b.n	8009124 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a1f      	ldr	r2, [pc, #124]	; (8009084 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d018      	beq.n	800903e <HAL_TIM_PWM_ConfigChannel+0x23e>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009014:	d013      	beq.n	800903e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a1b      	ldr	r2, [pc, #108]	; (8009088 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d00e      	beq.n	800903e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a19      	ldr	r2, [pc, #100]	; (800908c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d009      	beq.n	800903e <HAL_TIM_PWM_ConfigChannel+0x23e>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a18      	ldr	r2, [pc, #96]	; (8009090 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d004      	beq.n	800903e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8009034:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8009038:	4811      	ldr	r0, [pc, #68]	; (8009080 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800903a:	f7f8 ff52 	bl	8001ee2 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68b9      	ldr	r1, [r7, #8]
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fdb1 	bl	8009bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	69da      	ldr	r2, [r3, #28]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f042 0208 	orr.w	r2, r2, #8
 8009058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69da      	ldr	r2, [r3, #28]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f022 0204 	bic.w	r2, r2, #4
 8009068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	69d9      	ldr	r1, [r3, #28]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	691a      	ldr	r2, [r3, #16]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	430a      	orrs	r2, r1
 800907a:	61da      	str	r2, [r3, #28]
      break;
 800907c:	e052      	b.n	8009124 <HAL_TIM_PWM_ConfigChannel+0x324>
 800907e:	bf00      	nop
 8009080:	08012714 	.word	0x08012714
 8009084:	40010000 	.word	0x40010000
 8009088:	40000400 	.word	0x40000400
 800908c:	40000800 	.word	0x40000800
 8009090:	40000c00 	.word	0x40000c00
 8009094:	40014000 	.word	0x40014000
 8009098:	40014400 	.word	0x40014400
 800909c:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a24      	ldr	r2, [pc, #144]	; (8009138 <HAL_TIM_PWM_ConfigChannel+0x338>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d018      	beq.n	80090dc <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090b2:	d013      	beq.n	80090dc <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a20      	ldr	r2, [pc, #128]	; (800913c <HAL_TIM_PWM_ConfigChannel+0x33c>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00e      	beq.n	80090dc <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a1f      	ldr	r2, [pc, #124]	; (8009140 <HAL_TIM_PWM_ConfigChannel+0x340>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d009      	beq.n	80090dc <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a1d      	ldr	r2, [pc, #116]	; (8009144 <HAL_TIM_PWM_ConfigChannel+0x344>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d004      	beq.n	80090dc <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80090d2:	f241 01b7 	movw	r1, #4279	; 0x10b7
 80090d6:	481c      	ldr	r0, [pc, #112]	; (8009148 <HAL_TIM_PWM_ConfigChannel+0x348>)
 80090d8:	f7f8 ff03 	bl	8001ee2 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68b9      	ldr	r1, [r7, #8]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fdf6 	bl	8009cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	69da      	ldr	r2, [r3, #28]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	69da      	ldr	r2, [r3, #28]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009106:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	69d9      	ldr	r1, [r3, #28]
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	021a      	lsls	r2, r3, #8
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	430a      	orrs	r2, r1
 800911a:	61da      	str	r2, [r3, #28]
      break;
 800911c:	e002      	b.n	8009124 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	75fb      	strb	r3, [r7, #23]
      break;
 8009122:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800912c:	7dfb      	ldrb	r3, [r7, #23]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	40010000 	.word	0x40010000
 800913c:	40000400 	.word	0x40000400
 8009140:	40000800 	.word	0x40000800
 8009144:	40000c00 	.word	0x40000c00
 8009148:	08012714 	.word	0x08012714

0800914c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009160:	2b01      	cmp	r3, #1
 8009162:	d101      	bne.n	8009168 <HAL_TIM_ConfigClockSource+0x1c>
 8009164:	2302      	movs	r3, #2
 8009166:	e2f0      	b.n	800974a <HAL_TIM_ConfigClockSource+0x5fe>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009180:	d029      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x8a>
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b70      	cmp	r3, #112	; 0x70
 8009188:	d025      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x8a>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009192:	d020      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x8a>
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b40      	cmp	r3, #64	; 0x40
 800919a:	d01c      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x8a>
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b50      	cmp	r3, #80	; 0x50
 80091a2:	d018      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x8a>
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b60      	cmp	r3, #96	; 0x60
 80091aa:	d014      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x8a>
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d010      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x8a>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b10      	cmp	r3, #16
 80091ba:	d00c      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x8a>
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b20      	cmp	r3, #32
 80091c2:	d008      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x8a>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b30      	cmp	r3, #48	; 0x30
 80091ca:	d004      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x8a>
 80091cc:	f241 41b7 	movw	r1, #5303	; 0x14b7
 80091d0:	487c      	ldr	r0, [pc, #496]	; (80093c4 <HAL_TIM_ConfigClockSource+0x278>)
 80091d2:	f7f8 fe86 	bl	8001ee2 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80091e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091fe:	f000 80f1 	beq.w	80093e4 <HAL_TIM_ConfigClockSource+0x298>
 8009202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009206:	f200 8293 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x5e4>
 800920a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800920e:	d02d      	beq.n	800926c <HAL_TIM_ConfigClockSource+0x120>
 8009210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009214:	f200 828c 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x5e4>
 8009218:	2b70      	cmp	r3, #112	; 0x70
 800921a:	d05d      	beq.n	80092d8 <HAL_TIM_ConfigClockSource+0x18c>
 800921c:	2b70      	cmp	r3, #112	; 0x70
 800921e:	f200 8287 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x5e4>
 8009222:	2b60      	cmp	r3, #96	; 0x60
 8009224:	f000 81a0 	beq.w	8009568 <HAL_TIM_ConfigClockSource+0x41c>
 8009228:	2b60      	cmp	r3, #96	; 0x60
 800922a:	f200 8281 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x5e4>
 800922e:	2b50      	cmp	r3, #80	; 0x50
 8009230:	f000 8144 	beq.w	80094bc <HAL_TIM_ConfigClockSource+0x370>
 8009234:	2b50      	cmp	r3, #80	; 0x50
 8009236:	f200 827b 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x5e4>
 800923a:	2b40      	cmp	r3, #64	; 0x40
 800923c:	f000 81f6 	beq.w	800962c <HAL_TIM_ConfigClockSource+0x4e0>
 8009240:	2b40      	cmp	r3, #64	; 0x40
 8009242:	f200 8275 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x5e4>
 8009246:	2b30      	cmp	r3, #48	; 0x30
 8009248:	f000 8246 	beq.w	80096d8 <HAL_TIM_ConfigClockSource+0x58c>
 800924c:	2b30      	cmp	r3, #48	; 0x30
 800924e:	f200 826f 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x5e4>
 8009252:	2b20      	cmp	r3, #32
 8009254:	f000 8240 	beq.w	80096d8 <HAL_TIM_ConfigClockSource+0x58c>
 8009258:	2b20      	cmp	r3, #32
 800925a:	f200 8269 	bhi.w	8009730 <HAL_TIM_ConfigClockSource+0x5e4>
 800925e:	2b00      	cmp	r3, #0
 8009260:	f000 823a 	beq.w	80096d8 <HAL_TIM_ConfigClockSource+0x58c>
 8009264:	2b10      	cmp	r3, #16
 8009266:	f000 8237 	beq.w	80096d8 <HAL_TIM_ConfigClockSource+0x58c>
 800926a:	e261      	b.n	8009730 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a55      	ldr	r2, [pc, #340]	; (80093c8 <HAL_TIM_ConfigClockSource+0x27c>)
 8009272:	4293      	cmp	r3, r2
 8009274:	f000 825f 	beq.w	8009736 <HAL_TIM_ConfigClockSource+0x5ea>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009280:	f000 8259 	beq.w	8009736 <HAL_TIM_ConfigClockSource+0x5ea>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a50      	ldr	r2, [pc, #320]	; (80093cc <HAL_TIM_ConfigClockSource+0x280>)
 800928a:	4293      	cmp	r3, r2
 800928c:	f000 8253 	beq.w	8009736 <HAL_TIM_ConfigClockSource+0x5ea>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a4e      	ldr	r2, [pc, #312]	; (80093d0 <HAL_TIM_ConfigClockSource+0x284>)
 8009296:	4293      	cmp	r3, r2
 8009298:	f000 824d 	beq.w	8009736 <HAL_TIM_ConfigClockSource+0x5ea>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a4c      	ldr	r2, [pc, #304]	; (80093d4 <HAL_TIM_ConfigClockSource+0x288>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	f000 8247 	beq.w	8009736 <HAL_TIM_ConfigClockSource+0x5ea>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a4a      	ldr	r2, [pc, #296]	; (80093d8 <HAL_TIM_ConfigClockSource+0x28c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	f000 8241 	beq.w	8009736 <HAL_TIM_ConfigClockSource+0x5ea>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a48      	ldr	r2, [pc, #288]	; (80093dc <HAL_TIM_ConfigClockSource+0x290>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	f000 823b 	beq.w	8009736 <HAL_TIM_ConfigClockSource+0x5ea>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a46      	ldr	r2, [pc, #280]	; (80093e0 <HAL_TIM_ConfigClockSource+0x294>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	f000 8235 	beq.w	8009736 <HAL_TIM_ConfigClockSource+0x5ea>
 80092cc:	f241 41c3 	movw	r1, #5315	; 0x14c3
 80092d0:	483c      	ldr	r0, [pc, #240]	; (80093c4 <HAL_TIM_ConfigClockSource+0x278>)
 80092d2:	f7f8 fe06 	bl	8001ee2 <assert_failed>
      break;
 80092d6:	e22e      	b.n	8009736 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a3a      	ldr	r2, [pc, #232]	; (80093c8 <HAL_TIM_ConfigClockSource+0x27c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d01d      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x1d2>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ea:	d018      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x1d2>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a36      	ldr	r2, [pc, #216]	; (80093cc <HAL_TIM_ConfigClockSource+0x280>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d013      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x1d2>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a35      	ldr	r2, [pc, #212]	; (80093d0 <HAL_TIM_ConfigClockSource+0x284>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d00e      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x1d2>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a33      	ldr	r2, [pc, #204]	; (80093d4 <HAL_TIM_ConfigClockSource+0x288>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d009      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x1d2>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a32      	ldr	r2, [pc, #200]	; (80093d8 <HAL_TIM_ConfigClockSource+0x28c>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d004      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x1d2>
 8009314:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8009318:	482a      	ldr	r0, [pc, #168]	; (80093c4 <HAL_TIM_ConfigClockSource+0x278>)
 800931a:	f7f8 fde2 	bl	8001ee2 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d013      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x202>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800932e:	d00e      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x202>
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009338:	d009      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x202>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009342:	d004      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x202>
 8009344:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8009348:	481e      	ldr	r0, [pc, #120]	; (80093c4 <HAL_TIM_ConfigClockSource+0x278>)
 800934a:	f7f8 fdca 	bl	8001ee2 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009356:	d014      	beq.n	8009382 <HAL_TIM_ConfigClockSource+0x236>
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d010      	beq.n	8009382 <HAL_TIM_ConfigClockSource+0x236>
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00c      	beq.n	8009382 <HAL_TIM_ConfigClockSource+0x236>
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	2b02      	cmp	r3, #2
 800936e:	d008      	beq.n	8009382 <HAL_TIM_ConfigClockSource+0x236>
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	2b0a      	cmp	r3, #10
 8009376:	d004      	beq.n	8009382 <HAL_TIM_ConfigClockSource+0x236>
 8009378:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800937c:	4811      	ldr	r0, [pc, #68]	; (80093c4 <HAL_TIM_ConfigClockSource+0x278>)
 800937e:	f7f8 fdb0 	bl	8001ee2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	2b0f      	cmp	r3, #15
 8009388:	d904      	bls.n	8009394 <HAL_TIM_ConfigClockSource+0x248>
 800938a:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800938e:	480d      	ldr	r0, [pc, #52]	; (80093c4 <HAL_TIM_ConfigClockSource+0x278>)
 8009390:	f7f8 fda7 	bl	8001ee2 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6818      	ldr	r0, [r3, #0]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	6899      	ldr	r1, [r3, #8]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f000 fd6e 	bl	8009e84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	609a      	str	r2, [r3, #8]
      break;
 80093c0:	e1ba      	b.n	8009738 <HAL_TIM_ConfigClockSource+0x5ec>
 80093c2:	bf00      	nop
 80093c4:	08012714 	.word	0x08012714
 80093c8:	40010000 	.word	0x40010000
 80093cc:	40000400 	.word	0x40000400
 80093d0:	40000800 	.word	0x40000800
 80093d4:	40000c00 	.word	0x40000c00
 80093d8:	40014000 	.word	0x40014000
 80093dc:	40014400 	.word	0x40014400
 80093e0:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a8a      	ldr	r2, [pc, #552]	; (8009614 <HAL_TIM_ConfigClockSource+0x4c8>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d018      	beq.n	8009420 <HAL_TIM_ConfigClockSource+0x2d4>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093f6:	d013      	beq.n	8009420 <HAL_TIM_ConfigClockSource+0x2d4>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a86      	ldr	r2, [pc, #536]	; (8009618 <HAL_TIM_ConfigClockSource+0x4cc>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d00e      	beq.n	8009420 <HAL_TIM_ConfigClockSource+0x2d4>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a85      	ldr	r2, [pc, #532]	; (800961c <HAL_TIM_ConfigClockSource+0x4d0>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d009      	beq.n	8009420 <HAL_TIM_ConfigClockSource+0x2d4>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a83      	ldr	r2, [pc, #524]	; (8009620 <HAL_TIM_ConfigClockSource+0x4d4>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d004      	beq.n	8009420 <HAL_TIM_ConfigClockSource+0x2d4>
 8009416:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800941a:	4882      	ldr	r0, [pc, #520]	; (8009624 <HAL_TIM_ConfigClockSource+0x4d8>)
 800941c:	f7f8 fd61 	bl	8001ee2 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d013      	beq.n	8009450 <HAL_TIM_ConfigClockSource+0x304>
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009430:	d00e      	beq.n	8009450 <HAL_TIM_ConfigClockSource+0x304>
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800943a:	d009      	beq.n	8009450 <HAL_TIM_ConfigClockSource+0x304>
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009444:	d004      	beq.n	8009450 <HAL_TIM_ConfigClockSource+0x304>
 8009446:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800944a:	4876      	ldr	r0, [pc, #472]	; (8009624 <HAL_TIM_ConfigClockSource+0x4d8>)
 800944c:	f7f8 fd49 	bl	8001ee2 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009458:	d014      	beq.n	8009484 <HAL_TIM_ConfigClockSource+0x338>
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d010      	beq.n	8009484 <HAL_TIM_ConfigClockSource+0x338>
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00c      	beq.n	8009484 <HAL_TIM_ConfigClockSource+0x338>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	2b02      	cmp	r3, #2
 8009470:	d008      	beq.n	8009484 <HAL_TIM_ConfigClockSource+0x338>
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	2b0a      	cmp	r3, #10
 8009478:	d004      	beq.n	8009484 <HAL_TIM_ConfigClockSource+0x338>
 800947a:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800947e:	4869      	ldr	r0, [pc, #420]	; (8009624 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009480:	f7f8 fd2f 	bl	8001ee2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	2b0f      	cmp	r3, #15
 800948a:	d904      	bls.n	8009496 <HAL_TIM_ConfigClockSource+0x34a>
 800948c:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8009490:	4864      	ldr	r0, [pc, #400]	; (8009624 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009492:	f7f8 fd26 	bl	8001ee2 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	6899      	ldr	r1, [r3, #8]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	f000 fced 	bl	8009e84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	689a      	ldr	r2, [r3, #8]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094b8:	609a      	str	r2, [r3, #8]
      break;
 80094ba:	e13d      	b.n	8009738 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a54      	ldr	r2, [pc, #336]	; (8009614 <HAL_TIM_ConfigClockSource+0x4c8>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d01d      	beq.n	8009502 <HAL_TIM_ConfigClockSource+0x3b6>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ce:	d018      	beq.n	8009502 <HAL_TIM_ConfigClockSource+0x3b6>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a50      	ldr	r2, [pc, #320]	; (8009618 <HAL_TIM_ConfigClockSource+0x4cc>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d013      	beq.n	8009502 <HAL_TIM_ConfigClockSource+0x3b6>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a4f      	ldr	r2, [pc, #316]	; (800961c <HAL_TIM_ConfigClockSource+0x4d0>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d00e      	beq.n	8009502 <HAL_TIM_ConfigClockSource+0x3b6>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a4d      	ldr	r2, [pc, #308]	; (8009620 <HAL_TIM_ConfigClockSource+0x4d4>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d009      	beq.n	8009502 <HAL_TIM_ConfigClockSource+0x3b6>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a4d      	ldr	r2, [pc, #308]	; (8009628 <HAL_TIM_ConfigClockSource+0x4dc>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d004      	beq.n	8009502 <HAL_TIM_ConfigClockSource+0x3b6>
 80094f8:	f241 41f6 	movw	r1, #5366	; 0x14f6
 80094fc:	4849      	ldr	r0, [pc, #292]	; (8009624 <HAL_TIM_ConfigClockSource+0x4d8>)
 80094fe:	f7f8 fcf0 	bl	8001ee2 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800950a:	d014      	beq.n	8009536 <HAL_TIM_ConfigClockSource+0x3ea>
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d010      	beq.n	8009536 <HAL_TIM_ConfigClockSource+0x3ea>
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00c      	beq.n	8009536 <HAL_TIM_ConfigClockSource+0x3ea>
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	2b02      	cmp	r3, #2
 8009522:	d008      	beq.n	8009536 <HAL_TIM_ConfigClockSource+0x3ea>
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	2b0a      	cmp	r3, #10
 800952a:	d004      	beq.n	8009536 <HAL_TIM_ConfigClockSource+0x3ea>
 800952c:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8009530:	483c      	ldr	r0, [pc, #240]	; (8009624 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009532:	f7f8 fcd6 	bl	8001ee2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	2b0f      	cmp	r3, #15
 800953c:	d904      	bls.n	8009548 <HAL_TIM_ConfigClockSource+0x3fc>
 800953e:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8009542:	4838      	ldr	r0, [pc, #224]	; (8009624 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009544:	f7f8 fccd 	bl	8001ee2 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	6859      	ldr	r1, [r3, #4]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	461a      	mov	r2, r3
 8009556:	f000 fc1b 	bl	8009d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2150      	movs	r1, #80	; 0x50
 8009560:	4618      	mov	r0, r3
 8009562:	f000 fc74 	bl	8009e4e <TIM_ITRx_SetConfig>
      break;
 8009566:	e0e7      	b.n	8009738 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a29      	ldr	r2, [pc, #164]	; (8009614 <HAL_TIM_ConfigClockSource+0x4c8>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d01d      	beq.n	80095ae <HAL_TIM_ConfigClockSource+0x462>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800957a:	d018      	beq.n	80095ae <HAL_TIM_ConfigClockSource+0x462>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a25      	ldr	r2, [pc, #148]	; (8009618 <HAL_TIM_ConfigClockSource+0x4cc>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d013      	beq.n	80095ae <HAL_TIM_ConfigClockSource+0x462>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a24      	ldr	r2, [pc, #144]	; (800961c <HAL_TIM_ConfigClockSource+0x4d0>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d00e      	beq.n	80095ae <HAL_TIM_ConfigClockSource+0x462>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a22      	ldr	r2, [pc, #136]	; (8009620 <HAL_TIM_ConfigClockSource+0x4d4>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d009      	beq.n	80095ae <HAL_TIM_ConfigClockSource+0x462>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a22      	ldr	r2, [pc, #136]	; (8009628 <HAL_TIM_ConfigClockSource+0x4dc>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d004      	beq.n	80095ae <HAL_TIM_ConfigClockSource+0x462>
 80095a4:	f241 5106 	movw	r1, #5382	; 0x1506
 80095a8:	481e      	ldr	r0, [pc, #120]	; (8009624 <HAL_TIM_ConfigClockSource+0x4d8>)
 80095aa:	f7f8 fc9a 	bl	8001ee2 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095b6:	d014      	beq.n	80095e2 <HAL_TIM_ConfigClockSource+0x496>
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d010      	beq.n	80095e2 <HAL_TIM_ConfigClockSource+0x496>
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00c      	beq.n	80095e2 <HAL_TIM_ConfigClockSource+0x496>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d008      	beq.n	80095e2 <HAL_TIM_ConfigClockSource+0x496>
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	2b0a      	cmp	r3, #10
 80095d6:	d004      	beq.n	80095e2 <HAL_TIM_ConfigClockSource+0x496>
 80095d8:	f241 5109 	movw	r1, #5385	; 0x1509
 80095dc:	4811      	ldr	r0, [pc, #68]	; (8009624 <HAL_TIM_ConfigClockSource+0x4d8>)
 80095de:	f7f8 fc80 	bl	8001ee2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	2b0f      	cmp	r3, #15
 80095e8:	d904      	bls.n	80095f4 <HAL_TIM_ConfigClockSource+0x4a8>
 80095ea:	f241 510a 	movw	r1, #5386	; 0x150a
 80095ee:	480d      	ldr	r0, [pc, #52]	; (8009624 <HAL_TIM_ConfigClockSource+0x4d8>)
 80095f0:	f7f8 fc77 	bl	8001ee2 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6818      	ldr	r0, [r3, #0]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	6859      	ldr	r1, [r3, #4]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	461a      	mov	r2, r3
 8009602:	f000 fbf4 	bl	8009dee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2160      	movs	r1, #96	; 0x60
 800960c:	4618      	mov	r0, r3
 800960e:	f000 fc1e 	bl	8009e4e <TIM_ITRx_SetConfig>
      break;
 8009612:	e091      	b.n	8009738 <HAL_TIM_ConfigClockSource+0x5ec>
 8009614:	40010000 	.word	0x40010000
 8009618:	40000400 	.word	0x40000400
 800961c:	40000800 	.word	0x40000800
 8009620:	40000c00 	.word	0x40000c00
 8009624:	08012714 	.word	0x08012714
 8009628:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a48      	ldr	r2, [pc, #288]	; (8009754 <HAL_TIM_ConfigClockSource+0x608>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d01d      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0x526>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800963e:	d018      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0x526>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a44      	ldr	r2, [pc, #272]	; (8009758 <HAL_TIM_ConfigClockSource+0x60c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d013      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0x526>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a43      	ldr	r2, [pc, #268]	; (800975c <HAL_TIM_ConfigClockSource+0x610>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d00e      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0x526>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a41      	ldr	r2, [pc, #260]	; (8009760 <HAL_TIM_ConfigClockSource+0x614>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d009      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0x526>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a40      	ldr	r2, [pc, #256]	; (8009764 <HAL_TIM_ConfigClockSource+0x618>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d004      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0x526>
 8009668:	f241 5116 	movw	r1, #5398	; 0x1516
 800966c:	483e      	ldr	r0, [pc, #248]	; (8009768 <HAL_TIM_ConfigClockSource+0x61c>)
 800966e:	f7f8 fc38 	bl	8001ee2 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800967a:	d014      	beq.n	80096a6 <HAL_TIM_ConfigClockSource+0x55a>
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d010      	beq.n	80096a6 <HAL_TIM_ConfigClockSource+0x55a>
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00c      	beq.n	80096a6 <HAL_TIM_ConfigClockSource+0x55a>
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	2b02      	cmp	r3, #2
 8009692:	d008      	beq.n	80096a6 <HAL_TIM_ConfigClockSource+0x55a>
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	2b0a      	cmp	r3, #10
 800969a:	d004      	beq.n	80096a6 <HAL_TIM_ConfigClockSource+0x55a>
 800969c:	f241 5119 	movw	r1, #5401	; 0x1519
 80096a0:	4831      	ldr	r0, [pc, #196]	; (8009768 <HAL_TIM_ConfigClockSource+0x61c>)
 80096a2:	f7f8 fc1e 	bl	8001ee2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	2b0f      	cmp	r3, #15
 80096ac:	d904      	bls.n	80096b8 <HAL_TIM_ConfigClockSource+0x56c>
 80096ae:	f241 511a 	movw	r1, #5402	; 0x151a
 80096b2:	482d      	ldr	r0, [pc, #180]	; (8009768 <HAL_TIM_ConfigClockSource+0x61c>)
 80096b4:	f7f8 fc15 	bl	8001ee2 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	6859      	ldr	r1, [r3, #4]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	461a      	mov	r2, r3
 80096c6:	f000 fb63 	bl	8009d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2140      	movs	r1, #64	; 0x40
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fbbc 	bl	8009e4e <TIM_ITRx_SetConfig>
      break;
 80096d6:	e02f      	b.n	8009738 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a1d      	ldr	r2, [pc, #116]	; (8009754 <HAL_TIM_ConfigClockSource+0x608>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d01d      	beq.n	800971e <HAL_TIM_ConfigClockSource+0x5d2>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ea:	d018      	beq.n	800971e <HAL_TIM_ConfigClockSource+0x5d2>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a19      	ldr	r2, [pc, #100]	; (8009758 <HAL_TIM_ConfigClockSource+0x60c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d013      	beq.n	800971e <HAL_TIM_ConfigClockSource+0x5d2>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a18      	ldr	r2, [pc, #96]	; (800975c <HAL_TIM_ConfigClockSource+0x610>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d00e      	beq.n	800971e <HAL_TIM_ConfigClockSource+0x5d2>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a16      	ldr	r2, [pc, #88]	; (8009760 <HAL_TIM_ConfigClockSource+0x614>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d009      	beq.n	800971e <HAL_TIM_ConfigClockSource+0x5d2>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a15      	ldr	r2, [pc, #84]	; (8009764 <HAL_TIM_ConfigClockSource+0x618>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d004      	beq.n	800971e <HAL_TIM_ConfigClockSource+0x5d2>
 8009714:	f241 5129 	movw	r1, #5417	; 0x1529
 8009718:	4813      	ldr	r0, [pc, #76]	; (8009768 <HAL_TIM_ConfigClockSource+0x61c>)
 800971a:	f7f8 fbe2 	bl	8001ee2 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4619      	mov	r1, r3
 8009728:	4610      	mov	r0, r2
 800972a:	f000 fb90 	bl	8009e4e <TIM_ITRx_SetConfig>
      break;
 800972e:	e003      	b.n	8009738 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	73fb      	strb	r3, [r7, #15]
      break;
 8009734:	e000      	b.n	8009738 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 8009736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009748:	7bfb      	ldrb	r3, [r7, #15]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	40010000 	.word	0x40010000
 8009758:	40000400 	.word	0x40000400
 800975c:	40000800 	.word	0x40000800
 8009760:	40000c00 	.word	0x40000c00
 8009764:	40014000 	.word	0x40014000
 8009768:	08012714 	.word	0x08012714

0800976c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097dc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d107      	bne.n	80097f8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2201      	movs	r2, #1
 80097ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097f6:	e02a      	b.n	800984e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d107      	bne.n	8009812 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2202      	movs	r2, #2
 8009806:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009810:	e01d      	b.n	800984e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	429a      	cmp	r2, r3
 800981a:	d107      	bne.n	800982c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2204      	movs	r2, #4
 8009820:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800982a:	e010      	b.n	800984e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	429a      	cmp	r2, r3
 8009834:	d107      	bne.n	8009846 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2208      	movs	r2, #8
 800983a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009844:	e003      	b.n	800984e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f7ff ffb4 	bl	80097bc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	771a      	strb	r2, [r3, #28]
}
 800985a:	bf00      	nop
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
	...

08009864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a34      	ldr	r2, [pc, #208]	; (8009948 <TIM_Base_SetConfig+0xe4>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d00f      	beq.n	800989c <TIM_Base_SetConfig+0x38>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009882:	d00b      	beq.n	800989c <TIM_Base_SetConfig+0x38>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a31      	ldr	r2, [pc, #196]	; (800994c <TIM_Base_SetConfig+0xe8>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d007      	beq.n	800989c <TIM_Base_SetConfig+0x38>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a30      	ldr	r2, [pc, #192]	; (8009950 <TIM_Base_SetConfig+0xec>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d003      	beq.n	800989c <TIM_Base_SetConfig+0x38>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a2f      	ldr	r2, [pc, #188]	; (8009954 <TIM_Base_SetConfig+0xf0>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d108      	bne.n	80098ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a25      	ldr	r2, [pc, #148]	; (8009948 <TIM_Base_SetConfig+0xe4>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d01b      	beq.n	80098ee <TIM_Base_SetConfig+0x8a>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098bc:	d017      	beq.n	80098ee <TIM_Base_SetConfig+0x8a>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a22      	ldr	r2, [pc, #136]	; (800994c <TIM_Base_SetConfig+0xe8>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d013      	beq.n	80098ee <TIM_Base_SetConfig+0x8a>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a21      	ldr	r2, [pc, #132]	; (8009950 <TIM_Base_SetConfig+0xec>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d00f      	beq.n	80098ee <TIM_Base_SetConfig+0x8a>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a20      	ldr	r2, [pc, #128]	; (8009954 <TIM_Base_SetConfig+0xf0>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d00b      	beq.n	80098ee <TIM_Base_SetConfig+0x8a>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a1f      	ldr	r2, [pc, #124]	; (8009958 <TIM_Base_SetConfig+0xf4>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d007      	beq.n	80098ee <TIM_Base_SetConfig+0x8a>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a1e      	ldr	r2, [pc, #120]	; (800995c <TIM_Base_SetConfig+0xf8>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d003      	beq.n	80098ee <TIM_Base_SetConfig+0x8a>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a1d      	ldr	r2, [pc, #116]	; (8009960 <TIM_Base_SetConfig+0xfc>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d108      	bne.n	8009900 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	4313      	orrs	r3, r2
 800990c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	689a      	ldr	r2, [r3, #8]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a08      	ldr	r2, [pc, #32]	; (8009948 <TIM_Base_SetConfig+0xe4>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d103      	bne.n	8009934 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	691a      	ldr	r2, [r3, #16]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	615a      	str	r2, [r3, #20]
}
 800993a:	bf00      	nop
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	40010000 	.word	0x40010000
 800994c:	40000400 	.word	0x40000400
 8009950:	40000800 	.word	0x40000800
 8009954:	40000c00 	.word	0x40000c00
 8009958:	40014000 	.word	0x40014000
 800995c:	40014400 	.word	0x40014400
 8009960:	40014800 	.word	0x40014800

08009964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	f023 0201 	bic.w	r2, r3, #1
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0303 	bic.w	r3, r3, #3
 800999a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f023 0302 	bic.w	r3, r3, #2
 80099ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a30      	ldr	r2, [pc, #192]	; (8009a7c <TIM_OC1_SetConfig+0x118>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d119      	bne.n	80099f4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d008      	beq.n	80099da <TIM_OC1_SetConfig+0x76>
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	2b08      	cmp	r3, #8
 80099ce:	d004      	beq.n	80099da <TIM_OC1_SetConfig+0x76>
 80099d0:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 80099d4:	482a      	ldr	r0, [pc, #168]	; (8009a80 <TIM_OC1_SetConfig+0x11c>)
 80099d6:	f7f8 fa84 	bl	8001ee2 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f023 0308 	bic.w	r3, r3, #8
 80099e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f023 0304 	bic.w	r3, r3, #4
 80099f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a21      	ldr	r2, [pc, #132]	; (8009a7c <TIM_OC1_SetConfig+0x118>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d12d      	bne.n	8009a58 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a04:	d008      	beq.n	8009a18 <TIM_OC1_SetConfig+0xb4>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d004      	beq.n	8009a18 <TIM_OC1_SetConfig+0xb4>
 8009a0e:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 8009a12:	481b      	ldr	r0, [pc, #108]	; (8009a80 <TIM_OC1_SetConfig+0x11c>)
 8009a14:	f7f8 fa65 	bl	8001ee2 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a20:	d008      	beq.n	8009a34 <TIM_OC1_SetConfig+0xd0>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d004      	beq.n	8009a34 <TIM_OC1_SetConfig+0xd0>
 8009a2a:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 8009a2e:	4814      	ldr	r0, [pc, #80]	; (8009a80 <TIM_OC1_SetConfig+0x11c>)
 8009a30:	f7f8 fa57 	bl	8001ee2 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	695b      	ldr	r3, [r3, #20]
 8009a48:	693a      	ldr	r2, [r7, #16]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	621a      	str	r2, [r3, #32]
}
 8009a72:	bf00      	nop
 8009a74:	3718      	adds	r7, #24
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	40010000 	.word	0x40010000
 8009a80:	08012714 	.word	0x08012714

08009a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	f023 0210 	bic.w	r2, r3, #16
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	021b      	lsls	r3, r3, #8
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f023 0320 	bic.w	r3, r3, #32
 8009ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	011b      	lsls	r3, r3, #4
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a31      	ldr	r2, [pc, #196]	; (8009ba4 <TIM_OC2_SetConfig+0x120>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d11a      	bne.n	8009b1a <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d008      	beq.n	8009afe <TIM_OC2_SetConfig+0x7a>
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	2b08      	cmp	r3, #8
 8009af2:	d004      	beq.n	8009afe <TIM_OC2_SetConfig+0x7a>
 8009af4:	f641 3112 	movw	r1, #6930	; 0x1b12
 8009af8:	482b      	ldr	r0, [pc, #172]	; (8009ba8 <TIM_OC2_SetConfig+0x124>)
 8009afa:	f7f8 f9f2 	bl	8001ee2 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	011b      	lsls	r3, r3, #4
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b18:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a21      	ldr	r2, [pc, #132]	; (8009ba4 <TIM_OC2_SetConfig+0x120>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d12f      	bne.n	8009b82 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b2a:	d008      	beq.n	8009b3e <TIM_OC2_SetConfig+0xba>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d004      	beq.n	8009b3e <TIM_OC2_SetConfig+0xba>
 8009b34:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8009b38:	481b      	ldr	r0, [pc, #108]	; (8009ba8 <TIM_OC2_SetConfig+0x124>)
 8009b3a:	f7f8 f9d2 	bl	8001ee2 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b46:	d008      	beq.n	8009b5a <TIM_OC2_SetConfig+0xd6>
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d004      	beq.n	8009b5a <TIM_OC2_SetConfig+0xd6>
 8009b50:	f641 3121 	movw	r1, #6945	; 0x1b21
 8009b54:	4814      	ldr	r0, [pc, #80]	; (8009ba8 <TIM_OC2_SetConfig+0x124>)
 8009b56:	f7f8 f9c4 	bl	8001ee2 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	621a      	str	r2, [r3, #32]
}
 8009b9c:	bf00      	nop
 8009b9e:	3718      	adds	r7, #24
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	40010000 	.word	0x40010000
 8009ba8:	08012714 	.word	0x08012714

08009bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a1b      	ldr	r3, [r3, #32]
 8009bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	69db      	ldr	r3, [r3, #28]
 8009bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f023 0303 	bic.w	r3, r3, #3
 8009be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	021b      	lsls	r3, r3, #8
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a31      	ldr	r2, [pc, #196]	; (8009ccc <TIM_OC3_SetConfig+0x120>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d11a      	bne.n	8009c40 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d008      	beq.n	8009c24 <TIM_OC3_SetConfig+0x78>
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	2b08      	cmp	r3, #8
 8009c18:	d004      	beq.n	8009c24 <TIM_OC3_SetConfig+0x78>
 8009c1a:	f641 315d 	movw	r1, #7005	; 0x1b5d
 8009c1e:	482c      	ldr	r0, [pc, #176]	; (8009cd0 <TIM_OC3_SetConfig+0x124>)
 8009c20:	f7f8 f95f 	bl	8001ee2 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	021b      	lsls	r3, r3, #8
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a22      	ldr	r2, [pc, #136]	; (8009ccc <TIM_OC3_SetConfig+0x120>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d12f      	bne.n	8009ca8 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c50:	d008      	beq.n	8009c64 <TIM_OC3_SetConfig+0xb8>
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d004      	beq.n	8009c64 <TIM_OC3_SetConfig+0xb8>
 8009c5a:	f641 316a 	movw	r1, #7018	; 0x1b6a
 8009c5e:	481c      	ldr	r0, [pc, #112]	; (8009cd0 <TIM_OC3_SetConfig+0x124>)
 8009c60:	f7f8 f93f 	bl	8001ee2 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c6c:	d008      	beq.n	8009c80 <TIM_OC3_SetConfig+0xd4>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d004      	beq.n	8009c80 <TIM_OC3_SetConfig+0xd4>
 8009c76:	f641 316b 	movw	r1, #7019	; 0x1b6b
 8009c7a:	4815      	ldr	r0, [pc, #84]	; (8009cd0 <TIM_OC3_SetConfig+0x124>)
 8009c7c:	f7f8 f931 	bl	8001ee2 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	695b      	ldr	r3, [r3, #20]
 8009c94:	011b      	lsls	r3, r3, #4
 8009c96:	693a      	ldr	r2, [r7, #16]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	011b      	lsls	r3, r3, #4
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685a      	ldr	r2, [r3, #4]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	621a      	str	r2, [r3, #32]
}
 8009cc2:	bf00      	nop
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	40010000 	.word	0x40010000
 8009cd0:	08012714 	.word	0x08012714

08009cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	021b      	lsls	r3, r3, #8
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	031b      	lsls	r3, r3, #12
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a16      	ldr	r2, [pc, #88]	; (8009d88 <TIM_OC4_SetConfig+0xb4>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d117      	bne.n	8009d64 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	695b      	ldr	r3, [r3, #20]
 8009d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d3c:	d008      	beq.n	8009d50 <TIM_OC4_SetConfig+0x7c>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d004      	beq.n	8009d50 <TIM_OC4_SetConfig+0x7c>
 8009d46:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 8009d4a:	4810      	ldr	r0, [pc, #64]	; (8009d8c <TIM_OC4_SetConfig+0xb8>)
 8009d4c:	f7f8 f8c9 	bl	8001ee2 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	019b      	lsls	r3, r3, #6
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	621a      	str	r2, [r3, #32]
}
 8009d7e:	bf00      	nop
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	40010000 	.word	0x40010000
 8009d8c:	08012714 	.word	0x08012714

08009d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	f023 0201 	bic.w	r2, r3, #1
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	011b      	lsls	r3, r3, #4
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f023 030a 	bic.w	r3, r3, #10
 8009dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	621a      	str	r2, [r3, #32]
}
 8009de2:	bf00      	nop
 8009de4:	371c      	adds	r7, #28
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b087      	sub	sp, #28
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	60b9      	str	r1, [r7, #8]
 8009df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	f023 0210 	bic.w	r2, r3, #16
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6a1b      	ldr	r3, [r3, #32]
 8009e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	031b      	lsls	r3, r3, #12
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	011b      	lsls	r3, r3, #4
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	621a      	str	r2, [r3, #32]
}
 8009e42:	bf00      	nop
 8009e44:	371c      	adds	r7, #28
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b085      	sub	sp, #20
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	f043 0307 	orr.w	r3, r3, #7
 8009e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	609a      	str	r2, [r3, #8]
}
 8009e78:	bf00      	nop
 8009e7a:	3714      	adds	r7, #20
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b087      	sub	sp, #28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	021a      	lsls	r2, r3, #8
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	697a      	ldr	r2, [r7, #20]
 8009eb6:	609a      	str	r2, [r3, #8]
}
 8009eb8:	bf00      	nop
 8009eba:	371c      	adds	r7, #28
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4a2a      	ldr	r2, [pc, #168]	; (8009f7c <TIM_CCxChannelCmd+0xb8>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d020      	beq.n	8009f1a <TIM_CCxChannelCmd+0x56>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ede:	d01c      	beq.n	8009f1a <TIM_CCxChannelCmd+0x56>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4a27      	ldr	r2, [pc, #156]	; (8009f80 <TIM_CCxChannelCmd+0xbc>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d018      	beq.n	8009f1a <TIM_CCxChannelCmd+0x56>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	4a26      	ldr	r2, [pc, #152]	; (8009f84 <TIM_CCxChannelCmd+0xc0>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d014      	beq.n	8009f1a <TIM_CCxChannelCmd+0x56>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4a25      	ldr	r2, [pc, #148]	; (8009f88 <TIM_CCxChannelCmd+0xc4>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d010      	beq.n	8009f1a <TIM_CCxChannelCmd+0x56>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4a24      	ldr	r2, [pc, #144]	; (8009f8c <TIM_CCxChannelCmd+0xc8>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d00c      	beq.n	8009f1a <TIM_CCxChannelCmd+0x56>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4a23      	ldr	r2, [pc, #140]	; (8009f90 <TIM_CCxChannelCmd+0xcc>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d008      	beq.n	8009f1a <TIM_CCxChannelCmd+0x56>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4a22      	ldr	r2, [pc, #136]	; (8009f94 <TIM_CCxChannelCmd+0xd0>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d004      	beq.n	8009f1a <TIM_CCxChannelCmd+0x56>
 8009f10:	f641 5194 	movw	r1, #7572	; 0x1d94
 8009f14:	4820      	ldr	r0, [pc, #128]	; (8009f98 <TIM_CCxChannelCmd+0xd4>)
 8009f16:	f7f7 ffe4 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d010      	beq.n	8009f42 <TIM_CCxChannelCmd+0x7e>
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	d00d      	beq.n	8009f42 <TIM_CCxChannelCmd+0x7e>
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	2b08      	cmp	r3, #8
 8009f2a:	d00a      	beq.n	8009f42 <TIM_CCxChannelCmd+0x7e>
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2b0c      	cmp	r3, #12
 8009f30:	d007      	beq.n	8009f42 <TIM_CCxChannelCmd+0x7e>
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2b3c      	cmp	r3, #60	; 0x3c
 8009f36:	d004      	beq.n	8009f42 <TIM_CCxChannelCmd+0x7e>
 8009f38:	f641 5195 	movw	r1, #7573	; 0x1d95
 8009f3c:	4816      	ldr	r0, [pc, #88]	; (8009f98 <TIM_CCxChannelCmd+0xd4>)
 8009f3e:	f7f7 ffd0 	bl	8001ee2 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	f003 031f 	and.w	r3, r3, #31
 8009f48:	2201      	movs	r2, #1
 8009f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f4e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6a1a      	ldr	r2, [r3, #32]
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	43db      	mvns	r3, r3
 8009f58:	401a      	ands	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6a1a      	ldr	r2, [r3, #32]
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	f003 031f 	and.w	r3, r3, #31
 8009f68:	6879      	ldr	r1, [r7, #4]
 8009f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	621a      	str	r2, [r3, #32]
}
 8009f74:	bf00      	nop
 8009f76:	3718      	adds	r7, #24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	40010000 	.word	0x40010000
 8009f80:	40000400 	.word	0x40000400
 8009f84:	40000800 	.word	0x40000800
 8009f88:	40000c00 	.word	0x40000c00
 8009f8c:	40014000 	.word	0x40014000
 8009f90:	40014400 	.word	0x40014400
 8009f94:	40014800 	.word	0x40014800
 8009f98:	08012714 	.word	0x08012714

08009f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a55      	ldr	r2, [pc, #340]	; (800a100 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d018      	beq.n	8009fe2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fb8:	d013      	beq.n	8009fe2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a51      	ldr	r2, [pc, #324]	; (800a104 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d00e      	beq.n	8009fe2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a4f      	ldr	r2, [pc, #316]	; (800a108 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d009      	beq.n	8009fe2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a4e      	ldr	r2, [pc, #312]	; (800a10c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d004      	beq.n	8009fe2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009fd8:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8009fdc:	484c      	ldr	r0, [pc, #304]	; (800a110 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009fde:	f7f7 ff80 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d020      	beq.n	800a02c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b10      	cmp	r3, #16
 8009ff0:	d01c      	beq.n	800a02c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b20      	cmp	r3, #32
 8009ff8:	d018      	beq.n	800a02c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b30      	cmp	r3, #48	; 0x30
 800a000:	d014      	beq.n	800a02c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b40      	cmp	r3, #64	; 0x40
 800a008:	d010      	beq.n	800a02c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b50      	cmp	r3, #80	; 0x50
 800a010:	d00c      	beq.n	800a02c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b60      	cmp	r3, #96	; 0x60
 800a018:	d008      	beq.n	800a02c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b70      	cmp	r3, #112	; 0x70
 800a020:	d004      	beq.n	800a02c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a022:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800a026:	483a      	ldr	r0, [pc, #232]	; (800a110 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a028:	f7f7 ff5b 	bl	8001ee2 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	2b80      	cmp	r3, #128	; 0x80
 800a032:	d008      	beq.n	800a046 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d004      	beq.n	800a046 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800a03c:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800a040:	4833      	ldr	r0, [pc, #204]	; (800a110 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a042:	f7f7 ff4e 	bl	8001ee2 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d101      	bne.n	800a054 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a050:	2302      	movs	r3, #2
 800a052:	e050      	b.n	800a0f6 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2202      	movs	r2, #2
 800a060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a07a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	4313      	orrs	r3, r2
 800a084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a1b      	ldr	r2, [pc, #108]	; (800a100 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d018      	beq.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0a0:	d013      	beq.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a17      	ldr	r2, [pc, #92]	; (800a104 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d00e      	beq.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a15      	ldr	r2, [pc, #84]	; (800a108 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d009      	beq.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a14      	ldr	r2, [pc, #80]	; (800a10c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d004      	beq.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a13      	ldr	r2, [pc, #76]	; (800a114 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d10c      	bne.n	800a0e4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	40010000 	.word	0x40010000
 800a104:	40000400 	.word	0x40000400
 800a108:	40000800 	.word	0x40000800
 800a10c:	40000c00 	.word	0x40000c00
 800a110:	0801274c 	.word	0x0801274c
 800a114:	40014000 	.word	0x40014000

0800a118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a140:	b084      	sub	sp, #16
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	f107 001c 	add.w	r0, r7, #28
 800a14e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a154:	2b01      	cmp	r3, #1
 800a156:	d122      	bne.n	800a19e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a16c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a182:	2b01      	cmp	r3, #1
 800a184:	d105      	bne.n	800a192 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f001 fbee 	bl	800b974 <USB_CoreReset>
 800a198:	4603      	mov	r3, r0
 800a19a:	73fb      	strb	r3, [r7, #15]
 800a19c:	e01a      	b.n	800a1d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f001 fbe2 	bl	800b974 <USB_CoreReset>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d106      	bne.n	800a1c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	639a      	str	r2, [r3, #56]	; 0x38
 800a1c6:	e005      	b.n	800a1d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d10b      	bne.n	800a1f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f043 0206 	orr.w	r2, r3, #6
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	f043 0220 	orr.w	r2, r3, #32
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1fe:	b004      	add	sp, #16
 800a200:	4770      	bx	lr
	...

0800a204 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	4613      	mov	r3, r2
 800a210:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a212:	79fb      	ldrb	r3, [r7, #7]
 800a214:	2b02      	cmp	r3, #2
 800a216:	d165      	bne.n	800a2e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	4a41      	ldr	r2, [pc, #260]	; (800a320 <USB_SetTurnaroundTime+0x11c>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d906      	bls.n	800a22e <USB_SetTurnaroundTime+0x2a>
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	4a40      	ldr	r2, [pc, #256]	; (800a324 <USB_SetTurnaroundTime+0x120>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d202      	bcs.n	800a22e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a228:	230f      	movs	r3, #15
 800a22a:	617b      	str	r3, [r7, #20]
 800a22c:	e062      	b.n	800a2f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	4a3c      	ldr	r2, [pc, #240]	; (800a324 <USB_SetTurnaroundTime+0x120>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d306      	bcc.n	800a244 <USB_SetTurnaroundTime+0x40>
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	4a3b      	ldr	r2, [pc, #236]	; (800a328 <USB_SetTurnaroundTime+0x124>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d202      	bcs.n	800a244 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a23e:	230e      	movs	r3, #14
 800a240:	617b      	str	r3, [r7, #20]
 800a242:	e057      	b.n	800a2f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	4a38      	ldr	r2, [pc, #224]	; (800a328 <USB_SetTurnaroundTime+0x124>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d306      	bcc.n	800a25a <USB_SetTurnaroundTime+0x56>
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	4a37      	ldr	r2, [pc, #220]	; (800a32c <USB_SetTurnaroundTime+0x128>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d202      	bcs.n	800a25a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a254:	230d      	movs	r3, #13
 800a256:	617b      	str	r3, [r7, #20]
 800a258:	e04c      	b.n	800a2f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	4a33      	ldr	r2, [pc, #204]	; (800a32c <USB_SetTurnaroundTime+0x128>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d306      	bcc.n	800a270 <USB_SetTurnaroundTime+0x6c>
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	4a32      	ldr	r2, [pc, #200]	; (800a330 <USB_SetTurnaroundTime+0x12c>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d802      	bhi.n	800a270 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a26a:	230c      	movs	r3, #12
 800a26c:	617b      	str	r3, [r7, #20]
 800a26e:	e041      	b.n	800a2f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	4a2f      	ldr	r2, [pc, #188]	; (800a330 <USB_SetTurnaroundTime+0x12c>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d906      	bls.n	800a286 <USB_SetTurnaroundTime+0x82>
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	4a2e      	ldr	r2, [pc, #184]	; (800a334 <USB_SetTurnaroundTime+0x130>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d802      	bhi.n	800a286 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a280:	230b      	movs	r3, #11
 800a282:	617b      	str	r3, [r7, #20]
 800a284:	e036      	b.n	800a2f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	4a2a      	ldr	r2, [pc, #168]	; (800a334 <USB_SetTurnaroundTime+0x130>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d906      	bls.n	800a29c <USB_SetTurnaroundTime+0x98>
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	4a29      	ldr	r2, [pc, #164]	; (800a338 <USB_SetTurnaroundTime+0x134>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d802      	bhi.n	800a29c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a296:	230a      	movs	r3, #10
 800a298:	617b      	str	r3, [r7, #20]
 800a29a:	e02b      	b.n	800a2f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	4a26      	ldr	r2, [pc, #152]	; (800a338 <USB_SetTurnaroundTime+0x134>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d906      	bls.n	800a2b2 <USB_SetTurnaroundTime+0xae>
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	4a25      	ldr	r2, [pc, #148]	; (800a33c <USB_SetTurnaroundTime+0x138>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d202      	bcs.n	800a2b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a2ac:	2309      	movs	r3, #9
 800a2ae:	617b      	str	r3, [r7, #20]
 800a2b0:	e020      	b.n	800a2f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	4a21      	ldr	r2, [pc, #132]	; (800a33c <USB_SetTurnaroundTime+0x138>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d306      	bcc.n	800a2c8 <USB_SetTurnaroundTime+0xc4>
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	4a20      	ldr	r2, [pc, #128]	; (800a340 <USB_SetTurnaroundTime+0x13c>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d802      	bhi.n	800a2c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a2c2:	2308      	movs	r3, #8
 800a2c4:	617b      	str	r3, [r7, #20]
 800a2c6:	e015      	b.n	800a2f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	4a1d      	ldr	r2, [pc, #116]	; (800a340 <USB_SetTurnaroundTime+0x13c>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d906      	bls.n	800a2de <USB_SetTurnaroundTime+0xda>
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	4a1c      	ldr	r2, [pc, #112]	; (800a344 <USB_SetTurnaroundTime+0x140>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d202      	bcs.n	800a2de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a2d8:	2307      	movs	r3, #7
 800a2da:	617b      	str	r3, [r7, #20]
 800a2dc:	e00a      	b.n	800a2f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a2de:	2306      	movs	r3, #6
 800a2e0:	617b      	str	r3, [r7, #20]
 800a2e2:	e007      	b.n	800a2f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a2e4:	79fb      	ldrb	r3, [r7, #7]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d102      	bne.n	800a2f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a2ea:	2309      	movs	r3, #9
 800a2ec:	617b      	str	r3, [r7, #20]
 800a2ee:	e001      	b.n	800a2f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a2f0:	2309      	movs	r3, #9
 800a2f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	68da      	ldr	r2, [r3, #12]
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	029b      	lsls	r3, r3, #10
 800a308:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a30c:	431a      	orrs	r2, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	371c      	adds	r7, #28
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	00d8acbf 	.word	0x00d8acbf
 800a324:	00e4e1c0 	.word	0x00e4e1c0
 800a328:	00f42400 	.word	0x00f42400
 800a32c:	01067380 	.word	0x01067380
 800a330:	011a499f 	.word	0x011a499f
 800a334:	01312cff 	.word	0x01312cff
 800a338:	014ca43f 	.word	0x014ca43f
 800a33c:	016e3600 	.word	0x016e3600
 800a340:	01a6ab1f 	.word	0x01a6ab1f
 800a344:	01e84800 	.word	0x01e84800

0800a348 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	f043 0201 	orr.w	r2, r3, #1
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	f023 0201 	bic.w	r2, r3, #1
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	460b      	mov	r3, r1
 800a396:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a398:	2300      	movs	r3, #0
 800a39a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a3a8:	78fb      	ldrb	r3, [r7, #3]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d115      	bne.n	800a3da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a3ba:	2001      	movs	r0, #1
 800a3bc:	f7f8 fe8c 	bl	80030d8 <HAL_Delay>
      ms++;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f001 fa45 	bl	800b856 <USB_GetMode>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d01e      	beq.n	800a410 <USB_SetCurrentMode+0x84>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2b31      	cmp	r3, #49	; 0x31
 800a3d6:	d9f0      	bls.n	800a3ba <USB_SetCurrentMode+0x2e>
 800a3d8:	e01a      	b.n	800a410 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a3da:	78fb      	ldrb	r3, [r7, #3]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d115      	bne.n	800a40c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	f7f8 fe73 	bl	80030d8 <HAL_Delay>
      ms++;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f001 fa2c 	bl	800b856 <USB_GetMode>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d005      	beq.n	800a410 <USB_SetCurrentMode+0x84>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b31      	cmp	r3, #49	; 0x31
 800a408:	d9f0      	bls.n	800a3ec <USB_SetCurrentMode+0x60>
 800a40a:	e001      	b.n	800a410 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e005      	b.n	800a41c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b32      	cmp	r3, #50	; 0x32
 800a414:	d101      	bne.n	800a41a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e000      	b.n	800a41c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a424:	b084      	sub	sp, #16
 800a426:	b580      	push	{r7, lr}
 800a428:	b086      	sub	sp, #24
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a43e:	2300      	movs	r3, #0
 800a440:	613b      	str	r3, [r7, #16]
 800a442:	e009      	b.n	800a458 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	3340      	adds	r3, #64	; 0x40
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	2200      	movs	r2, #0
 800a450:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	3301      	adds	r3, #1
 800a456:	613b      	str	r3, [r7, #16]
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	2b0e      	cmp	r3, #14
 800a45c:	d9f2      	bls.n	800a444 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a45e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a460:	2b00      	cmp	r3, #0
 800a462:	d11c      	bne.n	800a49e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a472:	f043 0302 	orr.w	r3, r3, #2
 800a476:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a488:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a494:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	639a      	str	r2, [r3, #56]	; 0x38
 800a49c:	e00b      	b.n	800a4b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4bc:	461a      	mov	r2, r3
 800a4be:	2300      	movs	r3, #0
 800a4c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	680b      	ldr	r3, [r1, #0]
 800a4d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d10c      	bne.n	800a4f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d104      	bne.n	800a4ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f965 	bl	800a7b4 <USB_SetDevSpeed>
 800a4ea:	e008      	b.n	800a4fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a4ec:	2101      	movs	r1, #1
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f960 	bl	800a7b4 <USB_SetDevSpeed>
 800a4f4:	e003      	b.n	800a4fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a4f6:	2103      	movs	r1, #3
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f95b 	bl	800a7b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a4fe:	2110      	movs	r1, #16
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f8f3 	bl	800a6ec <USB_FlushTxFifo>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f91f 	bl	800a754 <USB_FlushRxFifo>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d001      	beq.n	800a520 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a526:	461a      	mov	r2, r3
 800a528:	2300      	movs	r3, #0
 800a52a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a532:	461a      	mov	r2, r3
 800a534:	2300      	movs	r3, #0
 800a536:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a53e:	461a      	mov	r2, r3
 800a540:	2300      	movs	r3, #0
 800a542:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a544:	2300      	movs	r3, #0
 800a546:	613b      	str	r3, [r7, #16]
 800a548:	e043      	b.n	800a5d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	4413      	add	r3, r2
 800a552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a55c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a560:	d118      	bne.n	800a594 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10a      	bne.n	800a57e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a574:	461a      	mov	r2, r3
 800a576:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a57a:	6013      	str	r3, [r2, #0]
 800a57c:	e013      	b.n	800a5a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	015a      	lsls	r2, r3, #5
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	4413      	add	r3, r2
 800a586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a58a:	461a      	mov	r2, r3
 800a58c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a590:	6013      	str	r3, [r2, #0]
 800a592:	e008      	b.n	800a5a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	015a      	lsls	r2, r3, #5
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	4413      	add	r3, r2
 800a59c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	015a      	lsls	r2, r3, #5
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a5ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	613b      	str	r3, [r7, #16]
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d3b7      	bcc.n	800a54a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5da:	2300      	movs	r3, #0
 800a5dc:	613b      	str	r3, [r7, #16]
 800a5de:	e043      	b.n	800a668 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5f6:	d118      	bne.n	800a62a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10a      	bne.n	800a614 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	015a      	lsls	r2, r3, #5
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	4413      	add	r3, r2
 800a606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60a:	461a      	mov	r2, r3
 800a60c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	e013      	b.n	800a63c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	015a      	lsls	r2, r3, #5
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4413      	add	r3, r2
 800a61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a620:	461a      	mov	r2, r3
 800a622:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	e008      	b.n	800a63c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	015a      	lsls	r2, r3, #5
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	4413      	add	r3, r2
 800a632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a636:	461a      	mov	r2, r3
 800a638:	2300      	movs	r3, #0
 800a63a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4413      	add	r3, r2
 800a644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a648:	461a      	mov	r2, r3
 800a64a:	2300      	movs	r3, #0
 800a64c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	015a      	lsls	r2, r3, #5
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	4413      	add	r3, r2
 800a656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a65a:	461a      	mov	r2, r3
 800a65c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a660:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	3301      	adds	r3, #1
 800a666:	613b      	str	r3, [r7, #16]
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d3b7      	bcc.n	800a5e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a67e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a682:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a690:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	2b00      	cmp	r3, #0
 800a696:	d105      	bne.n	800a6a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	f043 0210 	orr.w	r2, r3, #16
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	699a      	ldr	r2, [r3, #24]
 800a6a8:	4b0f      	ldr	r3, [pc, #60]	; (800a6e8 <USB_DevInit+0x2c4>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d005      	beq.n	800a6c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	f043 0208 	orr.w	r2, r3, #8
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a6c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d107      	bne.n	800a6d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6d0:	f043 0304 	orr.w	r3, r3, #4
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3718      	adds	r7, #24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6e4:	b004      	add	sp, #16
 800a6e6:	4770      	bx	lr
 800a6e8:	803c3800 	.word	0x803c3800

0800a6ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4a13      	ldr	r2, [pc, #76]	; (800a750 <USB_FlushTxFifo+0x64>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d901      	bls.n	800a70c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	e01b      	b.n	800a744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	2b00      	cmp	r3, #0
 800a712:	daf2      	bge.n	800a6fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a714:	2300      	movs	r3, #0
 800a716:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	019b      	lsls	r3, r3, #6
 800a71c:	f043 0220 	orr.w	r2, r3, #32
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	3301      	adds	r3, #1
 800a728:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	4a08      	ldr	r2, [pc, #32]	; (800a750 <USB_FlushTxFifo+0x64>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d901      	bls.n	800a736 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a732:	2303      	movs	r3, #3
 800a734:	e006      	b.n	800a744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	f003 0320 	and.w	r3, r3, #32
 800a73e:	2b20      	cmp	r3, #32
 800a740:	d0f0      	beq.n	800a724 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	00030d40 	.word	0x00030d40

0800a754 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a75c:	2300      	movs	r3, #0
 800a75e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3301      	adds	r3, #1
 800a764:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	4a11      	ldr	r2, [pc, #68]	; (800a7b0 <USB_FlushRxFifo+0x5c>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d901      	bls.n	800a772 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e018      	b.n	800a7a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	2b00      	cmp	r3, #0
 800a778:	daf2      	bge.n	800a760 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a77a:	2300      	movs	r3, #0
 800a77c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2210      	movs	r2, #16
 800a782:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	3301      	adds	r3, #1
 800a788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	4a08      	ldr	r2, [pc, #32]	; (800a7b0 <USB_FlushRxFifo+0x5c>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d901      	bls.n	800a796 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a792:	2303      	movs	r3, #3
 800a794:	e006      	b.n	800a7a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	f003 0310 	and.w	r3, r3, #16
 800a79e:	2b10      	cmp	r3, #16
 800a7a0:	d0f0      	beq.n	800a784 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	00030d40 	.word	0x00030d40

0800a7b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	78fb      	ldrb	r3, [r7, #3]
 800a7ce:	68f9      	ldr	r1, [r7, #12]
 800a7d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b087      	sub	sp, #28
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	f003 0306 	and.w	r3, r3, #6
 800a7fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d102      	bne.n	800a80c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a806:	2300      	movs	r3, #0
 800a808:	75fb      	strb	r3, [r7, #23]
 800a80a:	e00a      	b.n	800a822 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d002      	beq.n	800a818 <USB_GetDevSpeed+0x32>
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2b06      	cmp	r3, #6
 800a816:	d102      	bne.n	800a81e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a818:	2302      	movs	r3, #2
 800a81a:	75fb      	strb	r3, [r7, #23]
 800a81c:	e001      	b.n	800a822 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a81e:	230f      	movs	r3, #15
 800a820:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a822:	7dfb      	ldrb	r3, [r7, #23]
}
 800a824:	4618      	mov	r0, r3
 800a826:	371c      	adds	r7, #28
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	785b      	ldrb	r3, [r3, #1]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d13a      	bne.n	800a8c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a852:	69da      	ldr	r2, [r3, #28]
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	f003 030f 	and.w	r3, r3, #15
 800a85c:	2101      	movs	r1, #1
 800a85e:	fa01 f303 	lsl.w	r3, r1, r3
 800a862:	b29b      	uxth	r3, r3
 800a864:	68f9      	ldr	r1, [r7, #12]
 800a866:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a86a:	4313      	orrs	r3, r2
 800a86c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	015a      	lsls	r2, r3, #5
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	4413      	add	r3, r2
 800a876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d155      	bne.n	800a930 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	015a      	lsls	r2, r3, #5
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	4413      	add	r3, r2
 800a88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	791b      	ldrb	r3, [r3, #4]
 800a89e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	059b      	lsls	r3, r3, #22
 800a8a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	0151      	lsls	r1, r2, #5
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	440a      	add	r2, r1
 800a8b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	e036      	b.n	800a930 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c8:	69da      	ldr	r2, [r3, #28]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	f003 030f 	and.w	r3, r3, #15
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a8d8:	041b      	lsls	r3, r3, #16
 800a8da:	68f9      	ldr	r1, [r7, #12]
 800a8dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	015a      	lsls	r2, r3, #5
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d11a      	bne.n	800a930 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	015a      	lsls	r2, r3, #5
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	4413      	add	r3, r2
 800a902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	791b      	ldrb	r3, [r3, #4]
 800a914:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a916:	430b      	orrs	r3, r1
 800a918:	4313      	orrs	r3, r2
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	0151      	lsls	r1, r2, #5
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	440a      	add	r2, r1
 800a922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a92a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a92e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
	...

0800a940 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	785b      	ldrb	r3, [r3, #1]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d161      	bne.n	800aa20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4413      	add	r3, r2
 800a964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a96e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a972:	d11f      	bne.n	800a9b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	015a      	lsls	r2, r3, #5
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	4413      	add	r3, r2
 800a97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	0151      	lsls	r1, r2, #5
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	440a      	add	r2, r1
 800a98a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a98e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a992:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	015a      	lsls	r2, r3, #5
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	4413      	add	r3, r2
 800a99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68ba      	ldr	r2, [r7, #8]
 800a9a4:	0151      	lsls	r1, r2, #5
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	440a      	add	r2, r1
 800a9aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	f003 030f 	and.w	r3, r3, #15
 800a9c4:	2101      	movs	r1, #1
 800a9c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	43db      	mvns	r3, r3
 800a9ce:	68f9      	ldr	r1, [r7, #12]
 800a9d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9de:	69da      	ldr	r2, [r3, #28]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	f003 030f 	and.w	r3, r3, #15
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	43db      	mvns	r3, r3
 800a9f2:	68f9      	ldr	r1, [r7, #12]
 800a9f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	015a      	lsls	r2, r3, #5
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4413      	add	r3, r2
 800aa04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	0159      	lsls	r1, r3, #5
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	440b      	add	r3, r1
 800aa12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa16:	4619      	mov	r1, r3
 800aa18:	4b35      	ldr	r3, [pc, #212]	; (800aaf0 <USB_DeactivateEndpoint+0x1b0>)
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	600b      	str	r3, [r1, #0]
 800aa1e:	e060      	b.n	800aae2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	015a      	lsls	r2, r3, #5
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	4413      	add	r3, r2
 800aa28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa36:	d11f      	bne.n	800aa78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	015a      	lsls	r2, r3, #5
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4413      	add	r3, r2
 800aa40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	0151      	lsls	r1, r2, #5
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	440a      	add	r2, r1
 800aa4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aa56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	015a      	lsls	r2, r3, #5
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	4413      	add	r3, r2
 800aa60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	0151      	lsls	r1, r2, #5
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	440a      	add	r2, r1
 800aa6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	f003 030f 	and.w	r3, r3, #15
 800aa88:	2101      	movs	r1, #1
 800aa8a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa8e:	041b      	lsls	r3, r3, #16
 800aa90:	43db      	mvns	r3, r3
 800aa92:	68f9      	ldr	r1, [r7, #12]
 800aa94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa98:	4013      	ands	r3, r2
 800aa9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa2:	69da      	ldr	r2, [r3, #28]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	f003 030f 	and.w	r3, r3, #15
 800aaac:	2101      	movs	r1, #1
 800aaae:	fa01 f303 	lsl.w	r3, r1, r3
 800aab2:	041b      	lsls	r3, r3, #16
 800aab4:	43db      	mvns	r3, r3
 800aab6:	68f9      	ldr	r1, [r7, #12]
 800aab8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aabc:	4013      	ands	r3, r2
 800aabe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	015a      	lsls	r2, r3, #5
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4413      	add	r3, r2
 800aac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	0159      	lsls	r1, r3, #5
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	440b      	add	r3, r1
 800aad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aada:	4619      	mov	r1, r3
 800aadc:	4b05      	ldr	r3, [pc, #20]	; (800aaf4 <USB_DeactivateEndpoint+0x1b4>)
 800aade:	4013      	ands	r3, r2
 800aae0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	ec337800 	.word	0xec337800
 800aaf4:	eff37800 	.word	0xeff37800

0800aaf8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b08a      	sub	sp, #40	; 0x28
 800aafc:	af02      	add	r7, sp, #8
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	4613      	mov	r3, r2
 800ab04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	785b      	ldrb	r3, [r3, #1]
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	f040 815c 	bne.w	800add2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d132      	bne.n	800ab88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	015a      	lsls	r2, r3, #5
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	4413      	add	r3, r2
 800ab2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	69ba      	ldr	r2, [r7, #24]
 800ab32:	0151      	lsls	r1, r2, #5
 800ab34:	69fa      	ldr	r2, [r7, #28]
 800ab36:	440a      	add	r2, r1
 800ab38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	015a      	lsls	r2, r3, #5
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	69ba      	ldr	r2, [r7, #24]
 800ab56:	0151      	lsls	r1, r2, #5
 800ab58:	69fa      	ldr	r2, [r7, #28]
 800ab5a:	440a      	add	r2, r1
 800ab5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	015a      	lsls	r2, r3, #5
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	0151      	lsls	r1, r2, #5
 800ab78:	69fa      	ldr	r2, [r7, #28]
 800ab7a:	440a      	add	r2, r1
 800ab7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab80:	0cdb      	lsrs	r3, r3, #19
 800ab82:	04db      	lsls	r3, r3, #19
 800ab84:	6113      	str	r3, [r2, #16]
 800ab86:	e074      	b.n	800ac72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	015a      	lsls	r2, r3, #5
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	4413      	add	r3, r2
 800ab90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	0151      	lsls	r1, r2, #5
 800ab9a:	69fa      	ldr	r2, [r7, #28]
 800ab9c:	440a      	add	r2, r1
 800ab9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aba2:	0cdb      	lsrs	r3, r3, #19
 800aba4:	04db      	lsls	r3, r3, #19
 800aba6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	015a      	lsls	r2, r3, #5
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	4413      	add	r3, r2
 800abb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	69ba      	ldr	r2, [r7, #24]
 800abb8:	0151      	lsls	r1, r2, #5
 800abba:	69fa      	ldr	r2, [r7, #28]
 800abbc:	440a      	add	r2, r1
 800abbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800abc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800abca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	015a      	lsls	r2, r3, #5
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	6999      	ldr	r1, [r3, #24]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	440b      	add	r3, r1
 800abe4:	1e59      	subs	r1, r3, #1
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	fbb1 f3f3 	udiv	r3, r1, r3
 800abee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800abf0:	4b9d      	ldr	r3, [pc, #628]	; (800ae68 <USB_EPStartXfer+0x370>)
 800abf2:	400b      	ands	r3, r1
 800abf4:	69b9      	ldr	r1, [r7, #24]
 800abf6:	0148      	lsls	r0, r1, #5
 800abf8:	69f9      	ldr	r1, [r7, #28]
 800abfa:	4401      	add	r1, r0
 800abfc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac00:	4313      	orrs	r3, r2
 800ac02:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac10:	691a      	ldr	r2, [r3, #16]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac1a:	69b9      	ldr	r1, [r7, #24]
 800ac1c:	0148      	lsls	r0, r1, #5
 800ac1e:	69f9      	ldr	r1, [r7, #28]
 800ac20:	4401      	add	r1, r0
 800ac22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac26:	4313      	orrs	r3, r2
 800ac28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	791b      	ldrb	r3, [r3, #4]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d11f      	bne.n	800ac72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	015a      	lsls	r2, r3, #5
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	4413      	add	r3, r2
 800ac3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	69ba      	ldr	r2, [r7, #24]
 800ac42:	0151      	lsls	r1, r2, #5
 800ac44:	69fa      	ldr	r2, [r7, #28]
 800ac46:	440a      	add	r2, r1
 800ac48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ac50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	015a      	lsls	r2, r3, #5
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	4413      	add	r3, r2
 800ac5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	69ba      	ldr	r2, [r7, #24]
 800ac62:	0151      	lsls	r1, r2, #5
 800ac64:	69fa      	ldr	r2, [r7, #28]
 800ac66:	440a      	add	r2, r1
 800ac68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ac72:	79fb      	ldrb	r3, [r7, #7]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d14b      	bne.n	800ad10 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	695b      	ldr	r3, [r3, #20]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d009      	beq.n	800ac94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	015a      	lsls	r2, r3, #5
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	4413      	add	r3, r2
 800ac88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	695b      	ldr	r3, [r3, #20]
 800ac92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	791b      	ldrb	r3, [r3, #4]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d128      	bne.n	800acee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d110      	bne.n	800acce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	015a      	lsls	r2, r3, #5
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	4413      	add	r3, r2
 800acb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	69ba      	ldr	r2, [r7, #24]
 800acbc:	0151      	lsls	r1, r2, #5
 800acbe:	69fa      	ldr	r2, [r7, #28]
 800acc0:	440a      	add	r2, r1
 800acc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800acca:	6013      	str	r3, [r2, #0]
 800accc:	e00f      	b.n	800acee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	015a      	lsls	r2, r3, #5
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	4413      	add	r3, r2
 800acd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	69ba      	ldr	r2, [r7, #24]
 800acde:	0151      	lsls	r1, r2, #5
 800ace0:	69fa      	ldr	r2, [r7, #28]
 800ace2:	440a      	add	r2, r1
 800ace4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ace8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	015a      	lsls	r2, r3, #5
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	4413      	add	r3, r2
 800acf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	69ba      	ldr	r2, [r7, #24]
 800acfe:	0151      	lsls	r1, r2, #5
 800ad00:	69fa      	ldr	r2, [r7, #28]
 800ad02:	440a      	add	r2, r1
 800ad04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad0c:	6013      	str	r3, [r2, #0]
 800ad0e:	e133      	b.n	800af78 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	015a      	lsls	r2, r3, #5
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	4413      	add	r3, r2
 800ad18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	69ba      	ldr	r2, [r7, #24]
 800ad20:	0151      	lsls	r1, r2, #5
 800ad22:	69fa      	ldr	r2, [r7, #28]
 800ad24:	440a      	add	r2, r1
 800ad26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad2e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	791b      	ldrb	r3, [r3, #4]
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d015      	beq.n	800ad64 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	699b      	ldr	r3, [r3, #24]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f000 811b 	beq.w	800af78 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	f003 030f 	and.w	r3, r3, #15
 800ad52:	2101      	movs	r1, #1
 800ad54:	fa01 f303 	lsl.w	r3, r1, r3
 800ad58:	69f9      	ldr	r1, [r7, #28]
 800ad5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	634b      	str	r3, [r1, #52]	; 0x34
 800ad62:	e109      	b.n	800af78 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d110      	bne.n	800ad96 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	015a      	lsls	r2, r3, #5
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	0151      	lsls	r1, r2, #5
 800ad86:	69fa      	ldr	r2, [r7, #28]
 800ad88:	440a      	add	r2, r1
 800ad8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad92:	6013      	str	r3, [r2, #0]
 800ad94:	e00f      	b.n	800adb6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	015a      	lsls	r2, r3, #5
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	69ba      	ldr	r2, [r7, #24]
 800ada6:	0151      	lsls	r1, r2, #5
 800ada8:	69fa      	ldr	r2, [r7, #28]
 800adaa:	440a      	add	r2, r1
 800adac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adb4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	6919      	ldr	r1, [r3, #16]
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	781a      	ldrb	r2, [r3, #0]
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	699b      	ldr	r3, [r3, #24]
 800adc2:	b298      	uxth	r0, r3
 800adc4:	79fb      	ldrb	r3, [r7, #7]
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	4603      	mov	r3, r0
 800adca:	68f8      	ldr	r0, [r7, #12]
 800adcc:	f000 fade 	bl	800b38c <USB_WritePacket>
 800add0:	e0d2      	b.n	800af78 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	015a      	lsls	r2, r3, #5
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	4413      	add	r3, r2
 800adda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	0151      	lsls	r1, r2, #5
 800ade4:	69fa      	ldr	r2, [r7, #28]
 800ade6:	440a      	add	r2, r1
 800ade8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adec:	0cdb      	lsrs	r3, r3, #19
 800adee:	04db      	lsls	r3, r3, #19
 800adf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	015a      	lsls	r2, r3, #5
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	4413      	add	r3, r2
 800adfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	69ba      	ldr	r2, [r7, #24]
 800ae02:	0151      	lsls	r1, r2, #5
 800ae04:	69fa      	ldr	r2, [r7, #28]
 800ae06:	440a      	add	r2, r1
 800ae08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae14:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d126      	bne.n	800ae6c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	015a      	lsls	r2, r3, #5
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	4413      	add	r3, r2
 800ae26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae2a:	691a      	ldr	r2, [r3, #16]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae34:	69b9      	ldr	r1, [r7, #24]
 800ae36:	0148      	lsls	r0, r1, #5
 800ae38:	69f9      	ldr	r1, [r7, #28]
 800ae3a:	4401      	add	r1, r0
 800ae3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae40:	4313      	orrs	r3, r2
 800ae42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	015a      	lsls	r2, r3, #5
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	69ba      	ldr	r2, [r7, #24]
 800ae54:	0151      	lsls	r1, r2, #5
 800ae56:	69fa      	ldr	r2, [r7, #28]
 800ae58:	440a      	add	r2, r1
 800ae5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae62:	6113      	str	r3, [r2, #16]
 800ae64:	e03a      	b.n	800aedc <USB_EPStartXfer+0x3e4>
 800ae66:	bf00      	nop
 800ae68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	699a      	ldr	r2, [r3, #24]
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	1e5a      	subs	r2, r3, #1
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae80:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	8afa      	ldrh	r2, [r7, #22]
 800ae88:	fb03 f202 	mul.w	r2, r3, r2
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	015a      	lsls	r2, r3, #5
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	4413      	add	r3, r2
 800ae98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae9c:	691a      	ldr	r2, [r3, #16]
 800ae9e:	8afb      	ldrh	r3, [r7, #22]
 800aea0:	04d9      	lsls	r1, r3, #19
 800aea2:	4b38      	ldr	r3, [pc, #224]	; (800af84 <USB_EPStartXfer+0x48c>)
 800aea4:	400b      	ands	r3, r1
 800aea6:	69b9      	ldr	r1, [r7, #24]
 800aea8:	0148      	lsls	r0, r1, #5
 800aeaa:	69f9      	ldr	r1, [r7, #28]
 800aeac:	4401      	add	r1, r0
 800aeae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	015a      	lsls	r2, r3, #5
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	4413      	add	r3, r2
 800aebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec2:	691a      	ldr	r2, [r3, #16]
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	69db      	ldr	r3, [r3, #28]
 800aec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aecc:	69b9      	ldr	r1, [r7, #24]
 800aece:	0148      	lsls	r0, r1, #5
 800aed0:	69f9      	ldr	r1, [r7, #28]
 800aed2:	4401      	add	r1, r0
 800aed4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aed8:	4313      	orrs	r3, r2
 800aeda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aedc:	79fb      	ldrb	r3, [r7, #7]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d10d      	bne.n	800aefe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d009      	beq.n	800aefe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	6919      	ldr	r1, [r3, #16]
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	015a      	lsls	r2, r3, #5
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	4413      	add	r3, r2
 800aef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aefa:	460a      	mov	r2, r1
 800aefc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	791b      	ldrb	r3, [r3, #4]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d128      	bne.n	800af58 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af12:	2b00      	cmp	r3, #0
 800af14:	d110      	bne.n	800af38 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	69ba      	ldr	r2, [r7, #24]
 800af26:	0151      	lsls	r1, r2, #5
 800af28:	69fa      	ldr	r2, [r7, #28]
 800af2a:	440a      	add	r2, r1
 800af2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af34:	6013      	str	r3, [r2, #0]
 800af36:	e00f      	b.n	800af58 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	015a      	lsls	r2, r3, #5
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	4413      	add	r3, r2
 800af40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	69ba      	ldr	r2, [r7, #24]
 800af48:	0151      	lsls	r1, r2, #5
 800af4a:	69fa      	ldr	r2, [r7, #28]
 800af4c:	440a      	add	r2, r1
 800af4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	015a      	lsls	r2, r3, #5
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	4413      	add	r3, r2
 800af60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	69ba      	ldr	r2, [r7, #24]
 800af68:	0151      	lsls	r1, r2, #5
 800af6a:	69fa      	ldr	r2, [r7, #28]
 800af6c:	440a      	add	r2, r1
 800af6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3720      	adds	r7, #32
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	1ff80000 	.word	0x1ff80000

0800af88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af88:	b480      	push	{r7}
 800af8a:	b087      	sub	sp, #28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	4613      	mov	r3, r2
 800af94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	785b      	ldrb	r3, [r3, #1]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	f040 80ce 	bne.w	800b146 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d132      	bne.n	800b018 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	015a      	lsls	r2, r3, #5
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	4413      	add	r3, r2
 800afba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	0151      	lsls	r1, r2, #5
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	440a      	add	r2, r1
 800afc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	0151      	lsls	r1, r2, #5
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	440a      	add	r2, r1
 800afec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	015a      	lsls	r2, r3, #5
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	4413      	add	r3, r2
 800affe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	693a      	ldr	r2, [r7, #16]
 800b006:	0151      	lsls	r1, r2, #5
 800b008:	697a      	ldr	r2, [r7, #20]
 800b00a:	440a      	add	r2, r1
 800b00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b010:	0cdb      	lsrs	r3, r3, #19
 800b012:	04db      	lsls	r3, r3, #19
 800b014:	6113      	str	r3, [r2, #16]
 800b016:	e04e      	b.n	800b0b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	015a      	lsls	r2, r3, #5
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	4413      	add	r3, r2
 800b020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	0151      	lsls	r1, r2, #5
 800b02a:	697a      	ldr	r2, [r7, #20]
 800b02c:	440a      	add	r2, r1
 800b02e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b032:	0cdb      	lsrs	r3, r3, #19
 800b034:	04db      	lsls	r3, r3, #19
 800b036:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	015a      	lsls	r2, r3, #5
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	4413      	add	r3, r2
 800b040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	0151      	lsls	r1, r2, #5
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	440a      	add	r2, r1
 800b04e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b052:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b056:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b05a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	699a      	ldr	r2, [r3, #24]
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	429a      	cmp	r2, r3
 800b066:	d903      	bls.n	800b070 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	68da      	ldr	r2, [r3, #12]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	015a      	lsls	r2, r3, #5
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	4413      	add	r3, r2
 800b078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	693a      	ldr	r2, [r7, #16]
 800b080:	0151      	lsls	r1, r2, #5
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	440a      	add	r2, r1
 800b086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b08a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b08e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	015a      	lsls	r2, r3, #5
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	4413      	add	r3, r2
 800b098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b09c:	691a      	ldr	r2, [r3, #16]
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	699b      	ldr	r3, [r3, #24]
 800b0a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0a6:	6939      	ldr	r1, [r7, #16]
 800b0a8:	0148      	lsls	r0, r1, #5
 800b0aa:	6979      	ldr	r1, [r7, #20]
 800b0ac:	4401      	add	r1, r0
 800b0ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b0b6:	79fb      	ldrb	r3, [r7, #7]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d11e      	bne.n	800b0fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d009      	beq.n	800b0d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	015a      	lsls	r2, r3, #5
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	015a      	lsls	r2, r3, #5
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	4413      	add	r3, r2
 800b0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	0151      	lsls	r1, r2, #5
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	440a      	add	r2, r1
 800b0ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	e097      	b.n	800b22a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	015a      	lsls	r2, r3, #5
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	4413      	add	r3, r2
 800b102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	0151      	lsls	r1, r2, #5
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	440a      	add	r2, r1
 800b110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b114:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b118:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	699b      	ldr	r3, [r3, #24]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f000 8083 	beq.w	800b22a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b12a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	f003 030f 	and.w	r3, r3, #15
 800b134:	2101      	movs	r1, #1
 800b136:	fa01 f303 	lsl.w	r3, r1, r3
 800b13a:	6979      	ldr	r1, [r7, #20]
 800b13c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b140:	4313      	orrs	r3, r2
 800b142:	634b      	str	r3, [r1, #52]	; 0x34
 800b144:	e071      	b.n	800b22a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	0151      	lsls	r1, r2, #5
 800b158:	697a      	ldr	r2, [r7, #20]
 800b15a:	440a      	add	r2, r1
 800b15c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b160:	0cdb      	lsrs	r3, r3, #19
 800b162:	04db      	lsls	r3, r3, #19
 800b164:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	015a      	lsls	r2, r3, #5
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	4413      	add	r3, r2
 800b16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	0151      	lsls	r1, r2, #5
 800b178:	697a      	ldr	r2, [r7, #20]
 800b17a:	440a      	add	r2, r1
 800b17c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b180:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b184:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b188:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	699b      	ldr	r3, [r3, #24]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d003      	beq.n	800b19a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	68da      	ldr	r2, [r3, #12]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	68da      	ldr	r2, [r3, #12]
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	015a      	lsls	r2, r3, #5
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	0151      	lsls	r1, r2, #5
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	440a      	add	r2, r1
 800b1b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	015a      	lsls	r2, r3, #5
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ce:	691a      	ldr	r2, [r3, #16]
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	69db      	ldr	r3, [r3, #28]
 800b1d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1d8:	6939      	ldr	r1, [r7, #16]
 800b1da:	0148      	lsls	r0, r1, #5
 800b1dc:	6979      	ldr	r1, [r7, #20]
 800b1de:	4401      	add	r1, r0
 800b1e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b1e8:	79fb      	ldrb	r3, [r7, #7]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d10d      	bne.n	800b20a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d009      	beq.n	800b20a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	6919      	ldr	r1, [r3, #16]
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	015a      	lsls	r2, r3, #5
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	4413      	add	r3, r2
 800b202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b206:	460a      	mov	r2, r1
 800b208:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	4413      	add	r3, r2
 800b212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	693a      	ldr	r2, [r7, #16]
 800b21a:	0151      	lsls	r1, r2, #5
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	440a      	add	r2, r1
 800b220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b224:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b228:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	371c      	adds	r7, #28
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b238:	b480      	push	{r7}
 800b23a:	b087      	sub	sp, #28
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b246:	2300      	movs	r3, #0
 800b248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	785b      	ldrb	r3, [r3, #1]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d14a      	bne.n	800b2ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	015a      	lsls	r2, r3, #5
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	4413      	add	r3, r2
 800b260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b26a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b26e:	f040 8086 	bne.w	800b37e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	015a      	lsls	r2, r3, #5
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	4413      	add	r3, r2
 800b27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	683a      	ldr	r2, [r7, #0]
 800b284:	7812      	ldrb	r2, [r2, #0]
 800b286:	0151      	lsls	r1, r2, #5
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	440a      	add	r2, r1
 800b28c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b290:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b294:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	015a      	lsls	r2, r3, #5
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	4413      	add	r3, r2
 800b2a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	7812      	ldrb	r2, [r2, #0]
 800b2aa:	0151      	lsls	r1, r2, #5
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	440a      	add	r2, r1
 800b2b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f242 7210 	movw	r2, #10000	; 0x2710
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d902      	bls.n	800b2d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	75fb      	strb	r3, [r7, #23]
          break;
 800b2ce:	e056      	b.n	800b37e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	015a      	lsls	r2, r3, #5
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	4413      	add	r3, r2
 800b2da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2e8:	d0e7      	beq.n	800b2ba <USB_EPStopXfer+0x82>
 800b2ea:	e048      	b.n	800b37e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	015a      	lsls	r2, r3, #5
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b304:	d13b      	bne.n	800b37e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	015a      	lsls	r2, r3, #5
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	4413      	add	r3, r2
 800b310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	7812      	ldrb	r2, [r2, #0]
 800b31a:	0151      	lsls	r1, r2, #5
 800b31c:	693a      	ldr	r2, [r7, #16]
 800b31e:	440a      	add	r2, r1
 800b320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b324:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b328:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	015a      	lsls	r2, r3, #5
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	4413      	add	r3, r2
 800b334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	7812      	ldrb	r2, [r2, #0]
 800b33e:	0151      	lsls	r1, r2, #5
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	440a      	add	r2, r1
 800b344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b34c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3301      	adds	r3, #1
 800b352:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f242 7210 	movw	r2, #10000	; 0x2710
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d902      	bls.n	800b364 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	75fb      	strb	r3, [r7, #23]
          break;
 800b362:	e00c      	b.n	800b37e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b37c:	d0e7      	beq.n	800b34e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b380:	4618      	mov	r0, r3
 800b382:	371c      	adds	r7, #28
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b089      	sub	sp, #36	; 0x24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	4611      	mov	r1, r2
 800b398:	461a      	mov	r2, r3
 800b39a:	460b      	mov	r3, r1
 800b39c:	71fb      	strb	r3, [r7, #7]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b3aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d123      	bne.n	800b3fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b3b2:	88bb      	ldrh	r3, [r7, #4]
 800b3b4:	3303      	adds	r3, #3
 800b3b6:	089b      	lsrs	r3, r3, #2
 800b3b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	61bb      	str	r3, [r7, #24]
 800b3be:	e018      	b.n	800b3f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b3c0:	79fb      	ldrb	r3, [r7, #7]
 800b3c2:	031a      	lsls	r2, r3, #12
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	61bb      	str	r3, [r7, #24]
 800b3f2:	69ba      	ldr	r2, [r7, #24]
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d3e2      	bcc.n	800b3c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3724      	adds	r7, #36	; 0x24
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b408:	b480      	push	{r7}
 800b40a:	b08b      	sub	sp, #44	; 0x2c
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	4613      	mov	r3, r2
 800b414:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b41e:	88fb      	ldrh	r3, [r7, #6]
 800b420:	089b      	lsrs	r3, r3, #2
 800b422:	b29b      	uxth	r3, r3
 800b424:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b426:	88fb      	ldrh	r3, [r7, #6]
 800b428:	f003 0303 	and.w	r3, r3, #3
 800b42c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b42e:	2300      	movs	r3, #0
 800b430:	623b      	str	r3, [r7, #32]
 800b432:	e014      	b.n	800b45e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	3301      	adds	r3, #1
 800b444:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b448:	3301      	adds	r3, #1
 800b44a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	3301      	adds	r3, #1
 800b450:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b454:	3301      	adds	r3, #1
 800b456:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b458:	6a3b      	ldr	r3, [r7, #32]
 800b45a:	3301      	adds	r3, #1
 800b45c:	623b      	str	r3, [r7, #32]
 800b45e:	6a3a      	ldr	r2, [r7, #32]
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	429a      	cmp	r2, r3
 800b464:	d3e6      	bcc.n	800b434 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b466:	8bfb      	ldrh	r3, [r7, #30]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d01e      	beq.n	800b4aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b46c:	2300      	movs	r3, #0
 800b46e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b476:	461a      	mov	r2, r3
 800b478:	f107 0310 	add.w	r3, r7, #16
 800b47c:	6812      	ldr	r2, [r2, #0]
 800b47e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b480:	693a      	ldr	r2, [r7, #16]
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	b2db      	uxtb	r3, r3
 800b486:	00db      	lsls	r3, r3, #3
 800b488:	fa22 f303 	lsr.w	r3, r2, r3
 800b48c:	b2da      	uxtb	r2, r3
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	701a      	strb	r2, [r3, #0]
      i++;
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	3301      	adds	r3, #1
 800b496:	623b      	str	r3, [r7, #32]
      pDest++;
 800b498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49a:	3301      	adds	r3, #1
 800b49c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b49e:	8bfb      	ldrh	r3, [r7, #30]
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b4a4:	8bfb      	ldrh	r3, [r7, #30]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1ea      	bne.n	800b480 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	372c      	adds	r7, #44	; 0x2c
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	785b      	ldrb	r3, [r3, #1]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d12c      	bne.n	800b52e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	015a      	lsls	r2, r3, #5
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	db12      	blt.n	800b50c <USB_EPSetStall+0x54>
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00f      	beq.n	800b50c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	015a      	lsls	r2, r3, #5
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	0151      	lsls	r1, r2, #5
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	440a      	add	r2, r1
 800b502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b506:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b50a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	015a      	lsls	r2, r3, #5
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	4413      	add	r3, r2
 800b514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	0151      	lsls	r1, r2, #5
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	440a      	add	r2, r1
 800b522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b526:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b52a:	6013      	str	r3, [r2, #0]
 800b52c:	e02b      	b.n	800b586 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	015a      	lsls	r2, r3, #5
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	4413      	add	r3, r2
 800b536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	db12      	blt.n	800b566 <USB_EPSetStall+0xae>
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00f      	beq.n	800b566 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	015a      	lsls	r2, r3, #5
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	4413      	add	r3, r2
 800b54e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	0151      	lsls	r1, r2, #5
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	440a      	add	r2, r1
 800b55c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b560:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b564:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	0151      	lsls	r1, r2, #5
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	440a      	add	r2, r1
 800b57c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b584:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	785b      	ldrb	r3, [r3, #1]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d128      	bne.n	800b602 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	015a      	lsls	r2, r3, #5
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	0151      	lsls	r1, r2, #5
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	440a      	add	r2, r1
 800b5c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b5ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	791b      	ldrb	r3, [r3, #4]
 800b5d4:	2b03      	cmp	r3, #3
 800b5d6:	d003      	beq.n	800b5e0 <USB_EPClearStall+0x4c>
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	791b      	ldrb	r3, [r3, #4]
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d138      	bne.n	800b652 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	015a      	lsls	r2, r3, #5
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	0151      	lsls	r1, r2, #5
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	440a      	add	r2, r1
 800b5f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5fe:	6013      	str	r3, [r2, #0]
 800b600:	e027      	b.n	800b652 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	015a      	lsls	r2, r3, #5
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	4413      	add	r3, r2
 800b60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	0151      	lsls	r1, r2, #5
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	440a      	add	r2, r1
 800b618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b61c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b620:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	791b      	ldrb	r3, [r3, #4]
 800b626:	2b03      	cmp	r3, #3
 800b628:	d003      	beq.n	800b632 <USB_EPClearStall+0x9e>
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	791b      	ldrb	r3, [r3, #4]
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d10f      	bne.n	800b652 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	015a      	lsls	r2, r3, #5
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	4413      	add	r3, r2
 800b63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	0151      	lsls	r1, r2, #5
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	440a      	add	r2, r1
 800b648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b64c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b650:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	460b      	mov	r3, r1
 800b66a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b67e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b682:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	78fb      	ldrb	r3, [r7, #3]
 800b68e:	011b      	lsls	r3, r3, #4
 800b690:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b694:	68f9      	ldr	r1, [r7, #12]
 800b696:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b69a:	4313      	orrs	r3, r2
 800b69c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3714      	adds	r7, #20
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b6c6:	f023 0303 	bic.w	r3, r3, #3
 800b6ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6da:	f023 0302 	bic.w	r3, r3, #2
 800b6de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b085      	sub	sp, #20
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b708:	f023 0303 	bic.w	r3, r3, #3
 800b70c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b71c:	f043 0302 	orr.w	r3, r3, #2
 800b720:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	695b      	ldr	r3, [r3, #20]
 800b73c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	4013      	ands	r3, r2
 800b746:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b748:	68fb      	ldr	r3, [r7, #12]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b756:	b480      	push	{r7}
 800b758:	b085      	sub	sp, #20
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b768:	699b      	ldr	r3, [r3, #24]
 800b76a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b772:	69db      	ldr	r3, [r3, #28]
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	4013      	ands	r3, r2
 800b778:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	0c1b      	lsrs	r3, r3, #16
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3714      	adds	r7, #20
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b78a:	b480      	push	{r7}
 800b78c:	b085      	sub	sp, #20
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7a6:	69db      	ldr	r3, [r3, #28]
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	b29b      	uxth	r3, r3
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b085      	sub	sp, #20
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b7ce:	78fb      	ldrb	r3, [r7, #3]
 800b7d0:	015a      	lsls	r2, r3, #5
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	68ba      	ldr	r2, [r7, #8]
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	460b      	mov	r3, r1
 800b804:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b810:	691b      	ldr	r3, [r3, #16]
 800b812:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b81a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b81c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b81e:	78fb      	ldrb	r3, [r7, #3]
 800b820:	f003 030f 	and.w	r3, r3, #15
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	fa22 f303 	lsr.w	r3, r2, r3
 800b82a:	01db      	lsls	r3, r3, #7
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	4313      	orrs	r3, r2
 800b832:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b834:	78fb      	ldrb	r3, [r7, #3]
 800b836:	015a      	lsls	r2, r3, #5
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	4413      	add	r3, r2
 800b83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	693a      	ldr	r2, [r7, #16]
 800b844:	4013      	ands	r3, r2
 800b846:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b848:	68bb      	ldr	r3, [r7, #8]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	371c      	adds	r7, #28
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b856:	b480      	push	{r7}
 800b858:	b083      	sub	sp, #12
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	f003 0301 	and.w	r3, r3, #1
}
 800b866:	4618      	mov	r0, r3
 800b868:	370c      	adds	r7, #12
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr

0800b872 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b872:	b480      	push	{r7}
 800b874:	b085      	sub	sp, #20
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b88c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b890:	f023 0307 	bic.w	r3, r3, #7
 800b894:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b087      	sub	sp, #28
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	607a      	str	r2, [r7, #4]
 800b8c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	333c      	adds	r3, #60	; 0x3c
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	4a26      	ldr	r2, [pc, #152]	; (800b970 <USB_EP0_OutStart+0xb8>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d90a      	bls.n	800b8f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8ec:	d101      	bne.n	800b8f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	e037      	b.n	800b962 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b904:	691b      	ldr	r3, [r3, #16]
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b90c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b910:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b920:	f043 0318 	orr.w	r3, r3, #24
 800b924:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b934:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b938:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b93a:	7afb      	ldrb	r3, [r7, #11]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d10f      	bne.n	800b960 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b946:	461a      	mov	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	697a      	ldr	r2, [r7, #20]
 800b956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b95a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b95e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	371c      	adds	r7, #28
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	4f54300a 	.word	0x4f54300a

0800b974 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b97c:	2300      	movs	r3, #0
 800b97e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	3301      	adds	r3, #1
 800b984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	4a13      	ldr	r2, [pc, #76]	; (800b9d8 <USB_CoreReset+0x64>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d901      	bls.n	800b992 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b98e:	2303      	movs	r3, #3
 800b990:	e01b      	b.n	800b9ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	daf2      	bge.n	800b980 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b99a:	2300      	movs	r3, #0
 800b99c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	f043 0201 	orr.w	r2, r3, #1
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4a09      	ldr	r2, [pc, #36]	; (800b9d8 <USB_CoreReset+0x64>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d901      	bls.n	800b9bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	e006      	b.n	800b9ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d0f0      	beq.n	800b9aa <USB_CoreReset+0x36>

  return HAL_OK;
 800b9c8:	2300      	movs	r3, #0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	00030d40 	.word	0x00030d40

0800b9dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b9e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b9ec:	f005 ff62 	bl	80118b4 <USBD_static_malloc>
 800b9f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d109      	bne.n	800ba0c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	32b0      	adds	r2, #176	; 0xb0
 800ba02:	2100      	movs	r1, #0
 800ba04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ba08:	2302      	movs	r3, #2
 800ba0a:	e0d4      	b.n	800bbb6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ba0c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ba10:	2100      	movs	r1, #0
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f005 ffda 	bl	80119cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	32b0      	adds	r2, #176	; 0xb0
 800ba22:	68f9      	ldr	r1, [r7, #12]
 800ba24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	32b0      	adds	r2, #176	; 0xb0
 800ba32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	7c1b      	ldrb	r3, [r3, #16]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d138      	bne.n	800bab6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ba44:	4b5e      	ldr	r3, [pc, #376]	; (800bbc0 <USBD_CDC_Init+0x1e4>)
 800ba46:	7819      	ldrb	r1, [r3, #0]
 800ba48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba4c:	2202      	movs	r2, #2
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f005 fe0d 	bl	801166e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ba54:	4b5a      	ldr	r3, [pc, #360]	; (800bbc0 <USBD_CDC_Init+0x1e4>)
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	f003 020f 	and.w	r2, r3, #15
 800ba5c:	6879      	ldr	r1, [r7, #4]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4413      	add	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	440b      	add	r3, r1
 800ba68:	3324      	adds	r3, #36	; 0x24
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ba6e:	4b55      	ldr	r3, [pc, #340]	; (800bbc4 <USBD_CDC_Init+0x1e8>)
 800ba70:	7819      	ldrb	r1, [r3, #0]
 800ba72:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba76:	2202      	movs	r2, #2
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f005 fdf8 	bl	801166e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ba7e:	4b51      	ldr	r3, [pc, #324]	; (800bbc4 <USBD_CDC_Init+0x1e8>)
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	f003 020f 	and.w	r2, r3, #15
 800ba86:	6879      	ldr	r1, [r7, #4]
 800ba88:	4613      	mov	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	440b      	add	r3, r1
 800ba92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba96:	2201      	movs	r2, #1
 800ba98:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ba9a:	4b4b      	ldr	r3, [pc, #300]	; (800bbc8 <USBD_CDC_Init+0x1ec>)
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	f003 020f 	and.w	r2, r3, #15
 800baa2:	6879      	ldr	r1, [r7, #4]
 800baa4:	4613      	mov	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	4413      	add	r3, r2
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	440b      	add	r3, r1
 800baae:	3326      	adds	r3, #38	; 0x26
 800bab0:	2210      	movs	r2, #16
 800bab2:	801a      	strh	r2, [r3, #0]
 800bab4:	e035      	b.n	800bb22 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bab6:	4b42      	ldr	r3, [pc, #264]	; (800bbc0 <USBD_CDC_Init+0x1e4>)
 800bab8:	7819      	ldrb	r1, [r3, #0]
 800baba:	2340      	movs	r3, #64	; 0x40
 800babc:	2202      	movs	r2, #2
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f005 fdd5 	bl	801166e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bac4:	4b3e      	ldr	r3, [pc, #248]	; (800bbc0 <USBD_CDC_Init+0x1e4>)
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	f003 020f 	and.w	r2, r3, #15
 800bacc:	6879      	ldr	r1, [r7, #4]
 800bace:	4613      	mov	r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	4413      	add	r3, r2
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	440b      	add	r3, r1
 800bad8:	3324      	adds	r3, #36	; 0x24
 800bada:	2201      	movs	r2, #1
 800badc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bade:	4b39      	ldr	r3, [pc, #228]	; (800bbc4 <USBD_CDC_Init+0x1e8>)
 800bae0:	7819      	ldrb	r1, [r3, #0]
 800bae2:	2340      	movs	r3, #64	; 0x40
 800bae4:	2202      	movs	r2, #2
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f005 fdc1 	bl	801166e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800baec:	4b35      	ldr	r3, [pc, #212]	; (800bbc4 <USBD_CDC_Init+0x1e8>)
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	f003 020f 	and.w	r2, r3, #15
 800baf4:	6879      	ldr	r1, [r7, #4]
 800baf6:	4613      	mov	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	4413      	add	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	440b      	add	r3, r1
 800bb00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bb04:	2201      	movs	r2, #1
 800bb06:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bb08:	4b2f      	ldr	r3, [pc, #188]	; (800bbc8 <USBD_CDC_Init+0x1ec>)
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	f003 020f 	and.w	r2, r3, #15
 800bb10:	6879      	ldr	r1, [r7, #4]
 800bb12:	4613      	mov	r3, r2
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	440b      	add	r3, r1
 800bb1c:	3326      	adds	r3, #38	; 0x26
 800bb1e:	2210      	movs	r2, #16
 800bb20:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bb22:	4b29      	ldr	r3, [pc, #164]	; (800bbc8 <USBD_CDC_Init+0x1ec>)
 800bb24:	7819      	ldrb	r1, [r3, #0]
 800bb26:	2308      	movs	r3, #8
 800bb28:	2203      	movs	r2, #3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f005 fd9f 	bl	801166e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bb30:	4b25      	ldr	r3, [pc, #148]	; (800bbc8 <USBD_CDC_Init+0x1ec>)
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	f003 020f 	and.w	r2, r3, #15
 800bb38:	6879      	ldr	r1, [r7, #4]
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4413      	add	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	440b      	add	r3, r1
 800bb44:	3324      	adds	r3, #36	; 0x24
 800bb46:	2201      	movs	r2, #1
 800bb48:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	33b0      	adds	r3, #176	; 0xb0
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	4413      	add	r3, r2
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bb80:	2302      	movs	r3, #2
 800bb82:	e018      	b.n	800bbb6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	7c1b      	ldrb	r3, [r3, #16]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10a      	bne.n	800bba2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb8c:	4b0d      	ldr	r3, [pc, #52]	; (800bbc4 <USBD_CDC_Init+0x1e8>)
 800bb8e:	7819      	ldrb	r1, [r3, #0]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb96:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f005 fe56 	bl	801184c <USBD_LL_PrepareReceive>
 800bba0:	e008      	b.n	800bbb4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bba2:	4b08      	ldr	r3, [pc, #32]	; (800bbc4 <USBD_CDC_Init+0x1e8>)
 800bba4:	7819      	ldrb	r1, [r3, #0]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bbac:	2340      	movs	r3, #64	; 0x40
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f005 fe4c 	bl	801184c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	2000011f 	.word	0x2000011f
 800bbc4:	20000120 	.word	0x20000120
 800bbc8:	20000121 	.word	0x20000121

0800bbcc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bbd8:	4b3a      	ldr	r3, [pc, #232]	; (800bcc4 <USBD_CDC_DeInit+0xf8>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	4619      	mov	r1, r3
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f005 fd6b 	bl	80116ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bbe4:	4b37      	ldr	r3, [pc, #220]	; (800bcc4 <USBD_CDC_DeInit+0xf8>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	f003 020f 	and.w	r2, r3, #15
 800bbec:	6879      	ldr	r1, [r7, #4]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	4413      	add	r3, r2
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	440b      	add	r3, r1
 800bbf8:	3324      	adds	r3, #36	; 0x24
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bbfe:	4b32      	ldr	r3, [pc, #200]	; (800bcc8 <USBD_CDC_DeInit+0xfc>)
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f005 fd58 	bl	80116ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bc0a:	4b2f      	ldr	r3, [pc, #188]	; (800bcc8 <USBD_CDC_DeInit+0xfc>)
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	f003 020f 	and.w	r2, r3, #15
 800bc12:	6879      	ldr	r1, [r7, #4]
 800bc14:	4613      	mov	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	440b      	add	r3, r1
 800bc1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bc22:	2200      	movs	r2, #0
 800bc24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bc26:	4b29      	ldr	r3, [pc, #164]	; (800bccc <USBD_CDC_DeInit+0x100>)
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f005 fd44 	bl	80116ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bc32:	4b26      	ldr	r3, [pc, #152]	; (800bccc <USBD_CDC_DeInit+0x100>)
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	f003 020f 	and.w	r2, r3, #15
 800bc3a:	6879      	ldr	r1, [r7, #4]
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	440b      	add	r3, r1
 800bc46:	3324      	adds	r3, #36	; 0x24
 800bc48:	2200      	movs	r2, #0
 800bc4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bc4c:	4b1f      	ldr	r3, [pc, #124]	; (800bccc <USBD_CDC_DeInit+0x100>)
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	f003 020f 	and.w	r2, r3, #15
 800bc54:	6879      	ldr	r1, [r7, #4]
 800bc56:	4613      	mov	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	4413      	add	r3, r2
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	440b      	add	r3, r1
 800bc60:	3326      	adds	r3, #38	; 0x26
 800bc62:	2200      	movs	r2, #0
 800bc64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	32b0      	adds	r2, #176	; 0xb0
 800bc70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d01f      	beq.n	800bcb8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	33b0      	adds	r3, #176	; 0xb0
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4413      	add	r3, r2
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	32b0      	adds	r2, #176	; 0xb0
 800bc96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f005 fe18 	bl	80118d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	32b0      	adds	r2, #176	; 0xb0
 800bcaa:	2100      	movs	r1, #0
 800bcac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3708      	adds	r7, #8
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	2000011f 	.word	0x2000011f
 800bcc8:	20000120 	.word	0x20000120
 800bccc:	20000121 	.word	0x20000121

0800bcd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	32b0      	adds	r2, #176	; 0xb0
 800bce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bcea:	2300      	movs	r3, #0
 800bcec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d101      	bne.n	800bd00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	e0bf      	b.n	800be80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d050      	beq.n	800bdae <USBD_CDC_Setup+0xde>
 800bd0c:	2b20      	cmp	r3, #32
 800bd0e:	f040 80af 	bne.w	800be70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	88db      	ldrh	r3, [r3, #6]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d03a      	beq.n	800bd90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	b25b      	sxtb	r3, r3
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	da1b      	bge.n	800bd5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	33b0      	adds	r3, #176	; 0xb0
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	4413      	add	r3, r2
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bd3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd3c:	683a      	ldr	r2, [r7, #0]
 800bd3e:	88d2      	ldrh	r2, [r2, #6]
 800bd40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	88db      	ldrh	r3, [r3, #6]
 800bd46:	2b07      	cmp	r3, #7
 800bd48:	bf28      	it	cs
 800bd4a:	2307      	movcs	r3, #7
 800bd4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	89fa      	ldrh	r2, [r7, #14]
 800bd52:	4619      	mov	r1, r3
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f001 fd89 	bl	800d86c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bd5a:	e090      	b.n	800be7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	785a      	ldrb	r2, [r3, #1]
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	88db      	ldrh	r3, [r3, #6]
 800bd6a:	2b3f      	cmp	r3, #63	; 0x3f
 800bd6c:	d803      	bhi.n	800bd76 <USBD_CDC_Setup+0xa6>
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	88db      	ldrh	r3, [r3, #6]
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	e000      	b.n	800bd78 <USBD_CDC_Setup+0xa8>
 800bd76:	2240      	movs	r2, #64	; 0x40
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bd7e:	6939      	ldr	r1, [r7, #16]
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bd86:	461a      	mov	r2, r3
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f001 fd9b 	bl	800d8c4 <USBD_CtlPrepareRx>
      break;
 800bd8e:	e076      	b.n	800be7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	33b0      	adds	r3, #176	; 0xb0
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4413      	add	r3, r2
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	7850      	ldrb	r0, [r2, #1]
 800bda6:	2200      	movs	r2, #0
 800bda8:	6839      	ldr	r1, [r7, #0]
 800bdaa:	4798      	blx	r3
      break;
 800bdac:	e067      	b.n	800be7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	785b      	ldrb	r3, [r3, #1]
 800bdb2:	2b0b      	cmp	r3, #11
 800bdb4:	d851      	bhi.n	800be5a <USBD_CDC_Setup+0x18a>
 800bdb6:	a201      	add	r2, pc, #4	; (adr r2, 800bdbc <USBD_CDC_Setup+0xec>)
 800bdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbc:	0800bded 	.word	0x0800bded
 800bdc0:	0800be69 	.word	0x0800be69
 800bdc4:	0800be5b 	.word	0x0800be5b
 800bdc8:	0800be5b 	.word	0x0800be5b
 800bdcc:	0800be5b 	.word	0x0800be5b
 800bdd0:	0800be5b 	.word	0x0800be5b
 800bdd4:	0800be5b 	.word	0x0800be5b
 800bdd8:	0800be5b 	.word	0x0800be5b
 800bddc:	0800be5b 	.word	0x0800be5b
 800bde0:	0800be5b 	.word	0x0800be5b
 800bde4:	0800be17 	.word	0x0800be17
 800bde8:	0800be41 	.word	0x0800be41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b03      	cmp	r3, #3
 800bdf6:	d107      	bne.n	800be08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bdf8:	f107 030a 	add.w	r3, r7, #10
 800bdfc:	2202      	movs	r2, #2
 800bdfe:	4619      	mov	r1, r3
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f001 fd33 	bl	800d86c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be06:	e032      	b.n	800be6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f001 fcbd 	bl	800d78a <USBD_CtlError>
            ret = USBD_FAIL;
 800be10:	2303      	movs	r3, #3
 800be12:	75fb      	strb	r3, [r7, #23]
          break;
 800be14:	e02b      	b.n	800be6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	2b03      	cmp	r3, #3
 800be20:	d107      	bne.n	800be32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800be22:	f107 030d 	add.w	r3, r7, #13
 800be26:	2201      	movs	r2, #1
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f001 fd1e 	bl	800d86c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be30:	e01d      	b.n	800be6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f001 fca8 	bl	800d78a <USBD_CtlError>
            ret = USBD_FAIL;
 800be3a:	2303      	movs	r3, #3
 800be3c:	75fb      	strb	r3, [r7, #23]
          break;
 800be3e:	e016      	b.n	800be6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b03      	cmp	r3, #3
 800be4a:	d00f      	beq.n	800be6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f001 fc9b 	bl	800d78a <USBD_CtlError>
            ret = USBD_FAIL;
 800be54:	2303      	movs	r3, #3
 800be56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800be58:	e008      	b.n	800be6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800be5a:	6839      	ldr	r1, [r7, #0]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f001 fc94 	bl	800d78a <USBD_CtlError>
          ret = USBD_FAIL;
 800be62:	2303      	movs	r3, #3
 800be64:	75fb      	strb	r3, [r7, #23]
          break;
 800be66:	e002      	b.n	800be6e <USBD_CDC_Setup+0x19e>
          break;
 800be68:	bf00      	nop
 800be6a:	e008      	b.n	800be7e <USBD_CDC_Setup+0x1ae>
          break;
 800be6c:	bf00      	nop
      }
      break;
 800be6e:	e006      	b.n	800be7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f001 fc89 	bl	800d78a <USBD_CtlError>
      ret = USBD_FAIL;
 800be78:	2303      	movs	r3, #3
 800be7a:	75fb      	strb	r3, [r7, #23]
      break;
 800be7c:	bf00      	nop
  }

  return (uint8_t)ret;
 800be7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be80:	4618      	mov	r0, r3
 800be82:	3718      	adds	r7, #24
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	32b0      	adds	r2, #176	; 0xb0
 800bea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800beae:	2303      	movs	r3, #3
 800beb0:	e065      	b.n	800bf7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	32b0      	adds	r2, #176	; 0xb0
 800bebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bec0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bec2:	78fb      	ldrb	r3, [r7, #3]
 800bec4:	f003 020f 	and.w	r2, r3, #15
 800bec8:	6879      	ldr	r1, [r7, #4]
 800beca:	4613      	mov	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4413      	add	r3, r2
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	440b      	add	r3, r1
 800bed4:	3318      	adds	r3, #24
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d02f      	beq.n	800bf3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bedc:	78fb      	ldrb	r3, [r7, #3]
 800bede:	f003 020f 	and.w	r2, r3, #15
 800bee2:	6879      	ldr	r1, [r7, #4]
 800bee4:	4613      	mov	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4413      	add	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	440b      	add	r3, r1
 800beee:	3318      	adds	r3, #24
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	78fb      	ldrb	r3, [r7, #3]
 800bef4:	f003 010f 	and.w	r1, r3, #15
 800bef8:	68f8      	ldr	r0, [r7, #12]
 800befa:	460b      	mov	r3, r1
 800befc:	00db      	lsls	r3, r3, #3
 800befe:	440b      	add	r3, r1
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	4403      	add	r3, r0
 800bf04:	3348      	adds	r3, #72	; 0x48
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	fbb2 f1f3 	udiv	r1, r2, r3
 800bf0c:	fb01 f303 	mul.w	r3, r1, r3
 800bf10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d112      	bne.n	800bf3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bf16:	78fb      	ldrb	r3, [r7, #3]
 800bf18:	f003 020f 	and.w	r2, r3, #15
 800bf1c:	6879      	ldr	r1, [r7, #4]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	440b      	add	r3, r1
 800bf28:	3318      	adds	r3, #24
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bf2e:	78f9      	ldrb	r1, [r7, #3]
 800bf30:	2300      	movs	r3, #0
 800bf32:	2200      	movs	r2, #0
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f005 fc68 	bl	801180a <USBD_LL_Transmit>
 800bf3a:	e01f      	b.n	800bf7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	33b0      	adds	r3, #176	; 0xb0
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	4413      	add	r3, r2
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d010      	beq.n	800bf7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	33b0      	adds	r3, #176	; 0xb0
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4413      	add	r3, r2
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	68ba      	ldr	r2, [r7, #8]
 800bf6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bf78:	78fa      	ldrb	r2, [r7, #3]
 800bf7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b084      	sub	sp, #16
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	460b      	mov	r3, r1
 800bf90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	32b0      	adds	r2, #176	; 0xb0
 800bf9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	32b0      	adds	r2, #176	; 0xb0
 800bfac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d101      	bne.n	800bfb8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e01a      	b.n	800bfee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bfb8:	78fb      	ldrb	r3, [r7, #3]
 800bfba:	4619      	mov	r1, r3
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f005 fc66 	bl	801188e <USBD_LL_GetRxDataSize>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	33b0      	adds	r3, #176	; 0xb0
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4413      	add	r3, r2
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bfe8:	4611      	mov	r1, r2
 800bfea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b084      	sub	sp, #16
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	32b0      	adds	r2, #176	; 0xb0
 800c008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d101      	bne.n	800c018 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c014:	2303      	movs	r3, #3
 800c016:	e025      	b.n	800c064 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	33b0      	adds	r3, #176	; 0xb0
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	4413      	add	r3, r2
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d01a      	beq.n	800c062 <USBD_CDC_EP0_RxReady+0x6c>
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c032:	2bff      	cmp	r3, #255	; 0xff
 800c034:	d015      	beq.n	800c062 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	33b0      	adds	r3, #176	; 0xb0
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4413      	add	r3, r2
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c04e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c050:	68fa      	ldr	r2, [r7, #12]
 800c052:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c056:	b292      	uxth	r2, r2
 800c058:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	22ff      	movs	r2, #255	; 0xff
 800c05e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c074:	2182      	movs	r1, #130	; 0x82
 800c076:	4818      	ldr	r0, [pc, #96]	; (800c0d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c078:	f000 fd4f 	bl	800cb1a <USBD_GetEpDesc>
 800c07c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c07e:	2101      	movs	r1, #1
 800c080:	4815      	ldr	r0, [pc, #84]	; (800c0d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c082:	f000 fd4a 	bl	800cb1a <USBD_GetEpDesc>
 800c086:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c088:	2181      	movs	r1, #129	; 0x81
 800c08a:	4813      	ldr	r0, [pc, #76]	; (800c0d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c08c:	f000 fd45 	bl	800cb1a <USBD_GetEpDesc>
 800c090:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	2210      	movs	r2, #16
 800c09c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d006      	beq.n	800c0b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0ac:	711a      	strb	r2, [r3, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d006      	beq.n	800c0c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0c0:	711a      	strb	r2, [r3, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2243      	movs	r2, #67	; 0x43
 800c0ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c0cc:	4b02      	ldr	r3, [pc, #8]	; (800c0d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3718      	adds	r7, #24
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	200000dc 	.word	0x200000dc

0800c0dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c0e4:	2182      	movs	r1, #130	; 0x82
 800c0e6:	4818      	ldr	r0, [pc, #96]	; (800c148 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c0e8:	f000 fd17 	bl	800cb1a <USBD_GetEpDesc>
 800c0ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c0ee:	2101      	movs	r1, #1
 800c0f0:	4815      	ldr	r0, [pc, #84]	; (800c148 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c0f2:	f000 fd12 	bl	800cb1a <USBD_GetEpDesc>
 800c0f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c0f8:	2181      	movs	r1, #129	; 0x81
 800c0fa:	4813      	ldr	r0, [pc, #76]	; (800c148 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c0fc:	f000 fd0d 	bl	800cb1a <USBD_GetEpDesc>
 800c100:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d002      	beq.n	800c10e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	2210      	movs	r2, #16
 800c10c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d006      	beq.n	800c122 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	2200      	movs	r2, #0
 800c118:	711a      	strb	r2, [r3, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f042 0202 	orr.w	r2, r2, #2
 800c120:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d006      	beq.n	800c136 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2200      	movs	r2, #0
 800c12c:	711a      	strb	r2, [r3, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	f042 0202 	orr.w	r2, r2, #2
 800c134:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2243      	movs	r2, #67	; 0x43
 800c13a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c13c:	4b02      	ldr	r3, [pc, #8]	; (800c148 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3718      	adds	r7, #24
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	200000dc 	.word	0x200000dc

0800c14c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c154:	2182      	movs	r1, #130	; 0x82
 800c156:	4818      	ldr	r0, [pc, #96]	; (800c1b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c158:	f000 fcdf 	bl	800cb1a <USBD_GetEpDesc>
 800c15c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c15e:	2101      	movs	r1, #1
 800c160:	4815      	ldr	r0, [pc, #84]	; (800c1b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c162:	f000 fcda 	bl	800cb1a <USBD_GetEpDesc>
 800c166:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c168:	2181      	movs	r1, #129	; 0x81
 800c16a:	4813      	ldr	r0, [pc, #76]	; (800c1b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c16c:	f000 fcd5 	bl	800cb1a <USBD_GetEpDesc>
 800c170:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d002      	beq.n	800c17e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	2210      	movs	r2, #16
 800c17c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d006      	beq.n	800c192 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	2200      	movs	r2, #0
 800c188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c18c:	711a      	strb	r2, [r3, #4]
 800c18e:	2200      	movs	r2, #0
 800c190:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d006      	beq.n	800c1a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1a0:	711a      	strb	r2, [r3, #4]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2243      	movs	r2, #67	; 0x43
 800c1aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c1ac:	4b02      	ldr	r3, [pc, #8]	; (800c1b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	200000dc 	.word	0x200000dc

0800c1bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	220a      	movs	r2, #10
 800c1c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c1ca:	4b03      	ldr	r3, [pc, #12]	; (800c1d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr
 800c1d8:	20000098 	.word	0x20000098

0800c1dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	e009      	b.n	800c204 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	33b0      	adds	r3, #176	; 0xb0
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c202:	2300      	movs	r3, #0
}
 800c204:	4618      	mov	r0, r3
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c210:	b480      	push	{r7}
 800c212:	b087      	sub	sp, #28
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	32b0      	adds	r2, #176	; 0xb0
 800c226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c22a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c232:	2303      	movs	r3, #3
 800c234:	e008      	b.n	800c248 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	68ba      	ldr	r2, [r7, #8]
 800c23a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	371c      	adds	r7, #28
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	32b0      	adds	r2, #176	; 0xb0
 800c268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c26c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c274:	2303      	movs	r3, #3
 800c276:	e004      	b.n	800c282 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr
	...

0800c290 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	32b0      	adds	r2, #176	; 0xb0
 800c2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	32b0      	adds	r2, #176	; 0xb0
 800c2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d101      	bne.n	800c2c2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c2be:	2303      	movs	r3, #3
 800c2c0:	e025      	b.n	800c30e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d11f      	bne.n	800c30c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c2d4:	4b10      	ldr	r3, [pc, #64]	; (800c318 <USBD_CDC_TransmitPacket+0x88>)
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	f003 020f 	and.w	r2, r3, #15
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4413      	add	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	4403      	add	r3, r0
 800c2ee:	3318      	adds	r3, #24
 800c2f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c2f2:	4b09      	ldr	r3, [pc, #36]	; (800c318 <USBD_CDC_TransmitPacket+0x88>)
 800c2f4:	7819      	ldrb	r1, [r3, #0]
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f005 fa81 	bl	801180a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	2000011f 	.word	0x2000011f

0800c31c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	32b0      	adds	r2, #176	; 0xb0
 800c32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c332:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	32b0      	adds	r2, #176	; 0xb0
 800c33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d101      	bne.n	800c34a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c346:	2303      	movs	r3, #3
 800c348:	e018      	b.n	800c37c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	7c1b      	ldrb	r3, [r3, #16]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10a      	bne.n	800c368 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c352:	4b0c      	ldr	r3, [pc, #48]	; (800c384 <USBD_CDC_ReceivePacket+0x68>)
 800c354:	7819      	ldrb	r1, [r3, #0]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c35c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f005 fa73 	bl	801184c <USBD_LL_PrepareReceive>
 800c366:	e008      	b.n	800c37a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c368:	4b06      	ldr	r3, [pc, #24]	; (800c384 <USBD_CDC_ReceivePacket+0x68>)
 800c36a:	7819      	ldrb	r1, [r3, #0]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c372:	2340      	movs	r3, #64	; 0x40
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f005 fa69 	bl	801184c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	20000120 	.word	0x20000120

0800c388 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	4613      	mov	r3, r2
 800c394:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d101      	bne.n	800c3a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c39c:	2303      	movs	r3, #3
 800c39e:	e01f      	b.n	800c3e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d003      	beq.n	800c3c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	79fa      	ldrb	r2, [r7, #7]
 800c3d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f005 f8e3 	bl	80115a0 <USBD_LL_Init>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c3de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3718      	adds	r7, #24
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d101      	bne.n	800c400 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c3fc:	2303      	movs	r3, #3
 800c3fe:	e025      	b.n	800c44c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	683a      	ldr	r2, [r7, #0]
 800c404:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	32ae      	adds	r2, #174	; 0xae
 800c412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00f      	beq.n	800c43c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	32ae      	adds	r2, #174	; 0xae
 800c426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42c:	f107 020e 	add.w	r2, r7, #14
 800c430:	4610      	mov	r0, r2
 800c432:	4798      	blx	r3
 800c434:	4602      	mov	r2, r0
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f005 f8eb 	bl	8011638 <USBD_LL_Start>
 800c462:	4603      	mov	r3, r0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c474:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c476:	4618      	mov	r0, r3
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b084      	sub	sp, #16
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	460b      	mov	r3, r1
 800c48c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c48e:	2300      	movs	r3, #0
 800c490:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d009      	beq.n	800c4b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	78fa      	ldrb	r2, [r7, #3]
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	4798      	blx	r3
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	78fa      	ldrb	r2, [r7, #3]
 800c4d4:	4611      	mov	r1, r2
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	4798      	blx	r3
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d001      	beq.n	800c4e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c4e0:	2303      	movs	r3, #3
 800c4e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b084      	sub	sp, #16
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
 800c4f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4fe:	6839      	ldr	r1, [r7, #0]
 800c500:	4618      	mov	r0, r3
 800c502:	f001 f908 	bl	800d716 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2201      	movs	r2, #1
 800c50a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c514:	461a      	mov	r2, r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c522:	f003 031f 	and.w	r3, r3, #31
 800c526:	2b02      	cmp	r3, #2
 800c528:	d01a      	beq.n	800c560 <USBD_LL_SetupStage+0x72>
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d822      	bhi.n	800c574 <USBD_LL_SetupStage+0x86>
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d002      	beq.n	800c538 <USBD_LL_SetupStage+0x4a>
 800c532:	2b01      	cmp	r3, #1
 800c534:	d00a      	beq.n	800c54c <USBD_LL_SetupStage+0x5e>
 800c536:	e01d      	b.n	800c574 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 fb5f 	bl	800cc04 <USBD_StdDevReq>
 800c546:	4603      	mov	r3, r0
 800c548:	73fb      	strb	r3, [r7, #15]
      break;
 800c54a:	e020      	b.n	800c58e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c552:	4619      	mov	r1, r3
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fbc7 	bl	800cce8 <USBD_StdItfReq>
 800c55a:	4603      	mov	r3, r0
 800c55c:	73fb      	strb	r3, [r7, #15]
      break;
 800c55e:	e016      	b.n	800c58e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c566:	4619      	mov	r1, r3
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fc29 	bl	800cdc0 <USBD_StdEPReq>
 800c56e:	4603      	mov	r3, r0
 800c570:	73fb      	strb	r3, [r7, #15]
      break;
 800c572:	e00c      	b.n	800c58e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c57a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	4619      	mov	r1, r3
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f005 f8b8 	bl	80116f8 <USBD_LL_StallEP>
 800c588:	4603      	mov	r3, r0
 800c58a:	73fb      	strb	r3, [r7, #15]
      break;
 800c58c:	bf00      	nop
  }

  return ret;
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b086      	sub	sp, #24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	607a      	str	r2, [r7, #4]
 800c5a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c5aa:	7afb      	ldrb	r3, [r7, #11]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d16e      	bne.n	800c68e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c5b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c5be:	2b03      	cmp	r3, #3
 800c5c0:	f040 8098 	bne.w	800c6f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	689a      	ldr	r2, [r3, #8]
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d913      	bls.n	800c5f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	689a      	ldr	r2, [r3, #8]
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	1ad2      	subs	r2, r2, r3
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	68da      	ldr	r2, [r3, #12]
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	bf28      	it	cs
 800c5ea:	4613      	movcs	r3, r2
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	6879      	ldr	r1, [r7, #4]
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f001 f984 	bl	800d8fe <USBD_CtlContinueRx>
 800c5f6:	e07d      	b.n	800c6f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c5fe:	f003 031f 	and.w	r3, r3, #31
 800c602:	2b02      	cmp	r3, #2
 800c604:	d014      	beq.n	800c630 <USBD_LL_DataOutStage+0x98>
 800c606:	2b02      	cmp	r3, #2
 800c608:	d81d      	bhi.n	800c646 <USBD_LL_DataOutStage+0xae>
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d002      	beq.n	800c614 <USBD_LL_DataOutStage+0x7c>
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d003      	beq.n	800c61a <USBD_LL_DataOutStage+0x82>
 800c612:	e018      	b.n	800c646 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c614:	2300      	movs	r3, #0
 800c616:	75bb      	strb	r3, [r7, #22]
            break;
 800c618:	e018      	b.n	800c64c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c620:	b2db      	uxtb	r3, r3
 800c622:	4619      	mov	r1, r3
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f000 fa5e 	bl	800cae6 <USBD_CoreFindIF>
 800c62a:	4603      	mov	r3, r0
 800c62c:	75bb      	strb	r3, [r7, #22]
            break;
 800c62e:	e00d      	b.n	800c64c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c636:	b2db      	uxtb	r3, r3
 800c638:	4619      	mov	r1, r3
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f000 fa60 	bl	800cb00 <USBD_CoreFindEP>
 800c640:	4603      	mov	r3, r0
 800c642:	75bb      	strb	r3, [r7, #22]
            break;
 800c644:	e002      	b.n	800c64c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c646:	2300      	movs	r3, #0
 800c648:	75bb      	strb	r3, [r7, #22]
            break;
 800c64a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c64c:	7dbb      	ldrb	r3, [r7, #22]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d119      	bne.n	800c686 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	2b03      	cmp	r3, #3
 800c65c:	d113      	bne.n	800c686 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c65e:	7dba      	ldrb	r2, [r7, #22]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	32ae      	adds	r2, #174	; 0xae
 800c664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c668:	691b      	ldr	r3, [r3, #16]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00b      	beq.n	800c686 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c66e:	7dba      	ldrb	r2, [r7, #22]
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c676:	7dba      	ldrb	r2, [r7, #22]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	32ae      	adds	r2, #174	; 0xae
 800c67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f001 f94a 	bl	800d920 <USBD_CtlSendStatus>
 800c68c:	e032      	b.n	800c6f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c68e:	7afb      	ldrb	r3, [r7, #11]
 800c690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c694:	b2db      	uxtb	r3, r3
 800c696:	4619      	mov	r1, r3
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f000 fa31 	bl	800cb00 <USBD_CoreFindEP>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c6a2:	7dbb      	ldrb	r3, [r7, #22]
 800c6a4:	2bff      	cmp	r3, #255	; 0xff
 800c6a6:	d025      	beq.n	800c6f4 <USBD_LL_DataOutStage+0x15c>
 800c6a8:	7dbb      	ldrb	r3, [r7, #22]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d122      	bne.n	800c6f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	2b03      	cmp	r3, #3
 800c6b8:	d117      	bne.n	800c6ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c6ba:	7dba      	ldrb	r2, [r7, #22]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	32ae      	adds	r2, #174	; 0xae
 800c6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c4:	699b      	ldr	r3, [r3, #24]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00f      	beq.n	800c6ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c6ca:	7dba      	ldrb	r2, [r7, #22]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c6d2:	7dba      	ldrb	r2, [r7, #22]
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	32ae      	adds	r2, #174	; 0xae
 800c6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6dc:	699b      	ldr	r3, [r3, #24]
 800c6de:	7afa      	ldrb	r2, [r7, #11]
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	4798      	blx	r3
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c6ea:	7dfb      	ldrb	r3, [r7, #23]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c6f0:	7dfb      	ldrb	r3, [r7, #23]
 800c6f2:	e000      	b.n	800c6f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3718      	adds	r7, #24
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b086      	sub	sp, #24
 800c702:	af00      	add	r7, sp, #0
 800c704:	60f8      	str	r0, [r7, #12]
 800c706:	460b      	mov	r3, r1
 800c708:	607a      	str	r2, [r7, #4]
 800c70a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c70c:	7afb      	ldrb	r3, [r7, #11]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d16f      	bne.n	800c7f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	3314      	adds	r3, #20
 800c716:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c71e:	2b02      	cmp	r3, #2
 800c720:	d15a      	bne.n	800c7d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	689a      	ldr	r2, [r3, #8]
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d914      	bls.n	800c758 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	689a      	ldr	r2, [r3, #8]
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	1ad2      	subs	r2, r2, r3
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	461a      	mov	r2, r3
 800c742:	6879      	ldr	r1, [r7, #4]
 800c744:	68f8      	ldr	r0, [r7, #12]
 800c746:	f001 f8ac 	bl	800d8a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c74a:	2300      	movs	r3, #0
 800c74c:	2200      	movs	r2, #0
 800c74e:	2100      	movs	r1, #0
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f005 f87b 	bl	801184c <USBD_LL_PrepareReceive>
 800c756:	e03f      	b.n	800c7d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	68da      	ldr	r2, [r3, #12]
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	429a      	cmp	r2, r3
 800c762:	d11c      	bne.n	800c79e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d316      	bcc.n	800c79e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d20f      	bcs.n	800c79e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c77e:	2200      	movs	r2, #0
 800c780:	2100      	movs	r1, #0
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	f001 f88d 	bl	800d8a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2200      	movs	r2, #0
 800c78c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c790:	2300      	movs	r3, #0
 800c792:	2200      	movs	r2, #0
 800c794:	2100      	movs	r1, #0
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	f005 f858 	bl	801184c <USBD_LL_PrepareReceive>
 800c79c:	e01c      	b.n	800c7d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b03      	cmp	r3, #3
 800c7a8:	d10f      	bne.n	800c7ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7b0:	68db      	ldr	r3, [r3, #12]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d009      	beq.n	800c7ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	68f8      	ldr	r0, [r7, #12]
 800c7c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7ca:	2180      	movs	r1, #128	; 0x80
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f004 ff93 	bl	80116f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c7d2:	68f8      	ldr	r0, [r7, #12]
 800c7d4:	f001 f8b7 	bl	800d946 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d03a      	beq.n	800c858 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f7ff fe42 	bl	800c46c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c7f0:	e032      	b.n	800c858 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c7f2:	7afb      	ldrb	r3, [r7, #11]
 800c7f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f000 f97f 	bl	800cb00 <USBD_CoreFindEP>
 800c802:	4603      	mov	r3, r0
 800c804:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c806:	7dfb      	ldrb	r3, [r7, #23]
 800c808:	2bff      	cmp	r3, #255	; 0xff
 800c80a:	d025      	beq.n	800c858 <USBD_LL_DataInStage+0x15a>
 800c80c:	7dfb      	ldrb	r3, [r7, #23]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d122      	bne.n	800c858 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	2b03      	cmp	r3, #3
 800c81c:	d11c      	bne.n	800c858 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c81e:	7dfa      	ldrb	r2, [r7, #23]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	32ae      	adds	r2, #174	; 0xae
 800c824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c828:	695b      	ldr	r3, [r3, #20]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d014      	beq.n	800c858 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c82e:	7dfa      	ldrb	r2, [r7, #23]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c836:	7dfa      	ldrb	r2, [r7, #23]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	32ae      	adds	r2, #174	; 0xae
 800c83c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c840:	695b      	ldr	r3, [r3, #20]
 800c842:	7afa      	ldrb	r2, [r7, #11]
 800c844:	4611      	mov	r1, r2
 800c846:	68f8      	ldr	r0, [r7, #12]
 800c848:	4798      	blx	r3
 800c84a:	4603      	mov	r3, r0
 800c84c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c84e:	7dbb      	ldrb	r3, [r7, #22]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c854:	7dbb      	ldrb	r3, [r7, #22]
 800c856:	e000      	b.n	800c85a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3718      	adds	r7, #24
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b084      	sub	sp, #16
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d014      	beq.n	800c8c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00e      	beq.n	800c8c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	6852      	ldr	r2, [r2, #4]
 800c8b6:	b2d2      	uxtb	r2, r2
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	4798      	blx	r3
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c8c4:	2303      	movs	r3, #3
 800c8c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8c8:	2340      	movs	r3, #64	; 0x40
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f004 fecd 	bl	801166e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2240      	movs	r2, #64	; 0x40
 800c8e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8e4:	2340      	movs	r3, #64	; 0x40
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	2180      	movs	r1, #128	; 0x80
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f004 febf 	bl	801166e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2240      	movs	r2, #64	; 0x40
 800c8fa:	621a      	str	r2, [r3, #32]

  return ret;
 800c8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c906:	b480      	push	{r7}
 800c908:	b083      	sub	sp, #12
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	460b      	mov	r3, r1
 800c910:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	78fa      	ldrb	r2, [r7, #3]
 800c916:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	370c      	adds	r7, #12
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr

0800c926 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c926:	b480      	push	{r7}
 800c928:	b083      	sub	sp, #12
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c934:	b2da      	uxtb	r2, r3
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2204      	movs	r2, #4
 800c940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	370c      	adds	r7, #12
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c952:	b480      	push	{r7}
 800c954:	b083      	sub	sp, #12
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c960:	b2db      	uxtb	r3, r3
 800c962:	2b04      	cmp	r3, #4
 800c964:	d106      	bne.n	800c974 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c96c:	b2da      	uxtb	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c982:	b580      	push	{r7, lr}
 800c984:	b082      	sub	sp, #8
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c990:	b2db      	uxtb	r3, r3
 800c992:	2b03      	cmp	r3, #3
 800c994:	d110      	bne.n	800c9b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00b      	beq.n	800c9b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9a6:	69db      	ldr	r3, [r3, #28]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d005      	beq.n	800c9b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9b2:	69db      	ldr	r3, [r3, #28]
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	32ae      	adds	r2, #174	; 0xae
 800c9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d101      	bne.n	800c9e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c9e0:	2303      	movs	r3, #3
 800c9e2:	e01c      	b.n	800ca1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	2b03      	cmp	r3, #3
 800c9ee:	d115      	bne.n	800ca1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	32ae      	adds	r2, #174	; 0xae
 800c9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9fe:	6a1b      	ldr	r3, [r3, #32]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00b      	beq.n	800ca1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	32ae      	adds	r2, #174	; 0xae
 800ca0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca12:	6a1b      	ldr	r3, [r3, #32]
 800ca14:	78fa      	ldrb	r2, [r7, #3]
 800ca16:	4611      	mov	r1, r2
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b082      	sub	sp, #8
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
 800ca2e:	460b      	mov	r3, r1
 800ca30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	32ae      	adds	r2, #174	; 0xae
 800ca3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d101      	bne.n	800ca48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ca44:	2303      	movs	r3, #3
 800ca46:	e01c      	b.n	800ca82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	2b03      	cmp	r3, #3
 800ca52:	d115      	bne.n	800ca80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	32ae      	adds	r2, #174	; 0xae
 800ca5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00b      	beq.n	800ca80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	32ae      	adds	r2, #174	; 0xae
 800ca72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca78:	78fa      	ldrb	r2, [r7, #3]
 800ca7a:	4611      	mov	r1, r2
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3708      	adds	r7, #8
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ca8a:	b480      	push	{r7}
 800ca8c:	b083      	sub	sp, #12
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	370c      	adds	r7, #12
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800caa8:	2300      	movs	r3, #0
 800caaa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00e      	beq.n	800cadc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	6852      	ldr	r2, [r2, #4]
 800caca:	b2d2      	uxtb	r2, r2
 800cacc:	4611      	mov	r1, r2
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	4798      	blx	r3
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d001      	beq.n	800cadc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cad8:	2303      	movs	r3, #3
 800cada:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cae6:	b480      	push	{r7}
 800cae8:	b083      	sub	sp, #12
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	460b      	mov	r3, r1
 800caf0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800caf2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	460b      	mov	r3, r1
 800cb0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cb0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	370c      	adds	r7, #12
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b086      	sub	sp, #24
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	460b      	mov	r3, r1
 800cb24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	885b      	ldrh	r3, [r3, #2]
 800cb36:	b29a      	uxth	r2, r3
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d920      	bls.n	800cb84 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cb4a:	e013      	b.n	800cb74 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cb4c:	f107 030a 	add.w	r3, r7, #10
 800cb50:	4619      	mov	r1, r3
 800cb52:	6978      	ldr	r0, [r7, #20]
 800cb54:	f000 f81b 	bl	800cb8e <USBD_GetNextDesc>
 800cb58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	785b      	ldrb	r3, [r3, #1]
 800cb5e:	2b05      	cmp	r3, #5
 800cb60:	d108      	bne.n	800cb74 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	789b      	ldrb	r3, [r3, #2]
 800cb6a:	78fa      	ldrb	r2, [r7, #3]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d008      	beq.n	800cb82 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cb70:	2300      	movs	r3, #0
 800cb72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	885b      	ldrh	r3, [r3, #2]
 800cb78:	b29a      	uxth	r2, r3
 800cb7a:	897b      	ldrh	r3, [r7, #10]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d8e5      	bhi.n	800cb4c <USBD_GetEpDesc+0x32>
 800cb80:	e000      	b.n	800cb84 <USBD_GetEpDesc+0x6a>
          break;
 800cb82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cb84:	693b      	ldr	r3, [r7, #16]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3718      	adds	r7, #24
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cb8e:	b480      	push	{r7}
 800cb90:	b085      	sub	sp, #20
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
 800cb96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	881a      	ldrh	r2, [r3, #0]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	4413      	add	r3, r2
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cbba:	68fb      	ldr	r3, [r7, #12]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3714      	adds	r7, #20
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b087      	sub	sp, #28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	3301      	adds	r3, #1
 800cbde:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cbe6:	8a3b      	ldrh	r3, [r7, #16]
 800cbe8:	021b      	lsls	r3, r3, #8
 800cbea:	b21a      	sxth	r2, r3
 800cbec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	b21b      	sxth	r3, r3
 800cbf4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cbf6:	89fb      	ldrh	r3, [r7, #14]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	371c      	adds	r7, #28
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc1a:	2b40      	cmp	r3, #64	; 0x40
 800cc1c:	d005      	beq.n	800cc2a <USBD_StdDevReq+0x26>
 800cc1e:	2b40      	cmp	r3, #64	; 0x40
 800cc20:	d857      	bhi.n	800ccd2 <USBD_StdDevReq+0xce>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00f      	beq.n	800cc46 <USBD_StdDevReq+0x42>
 800cc26:	2b20      	cmp	r3, #32
 800cc28:	d153      	bne.n	800ccd2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	32ae      	adds	r2, #174	; 0xae
 800cc34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	4798      	blx	r3
 800cc40:	4603      	mov	r3, r0
 800cc42:	73fb      	strb	r3, [r7, #15]
      break;
 800cc44:	e04a      	b.n	800ccdc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	785b      	ldrb	r3, [r3, #1]
 800cc4a:	2b09      	cmp	r3, #9
 800cc4c:	d83b      	bhi.n	800ccc6 <USBD_StdDevReq+0xc2>
 800cc4e:	a201      	add	r2, pc, #4	; (adr r2, 800cc54 <USBD_StdDevReq+0x50>)
 800cc50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc54:	0800cca9 	.word	0x0800cca9
 800cc58:	0800ccbd 	.word	0x0800ccbd
 800cc5c:	0800ccc7 	.word	0x0800ccc7
 800cc60:	0800ccb3 	.word	0x0800ccb3
 800cc64:	0800ccc7 	.word	0x0800ccc7
 800cc68:	0800cc87 	.word	0x0800cc87
 800cc6c:	0800cc7d 	.word	0x0800cc7d
 800cc70:	0800ccc7 	.word	0x0800ccc7
 800cc74:	0800cc9f 	.word	0x0800cc9f
 800cc78:	0800cc91 	.word	0x0800cc91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fa3c 	bl	800d0fc <USBD_GetDescriptor>
          break;
 800cc84:	e024      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cc86:	6839      	ldr	r1, [r7, #0]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fba1 	bl	800d3d0 <USBD_SetAddress>
          break;
 800cc8e:	e01f      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cc90:	6839      	ldr	r1, [r7, #0]
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 fbe0 	bl	800d458 <USBD_SetConfig>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	73fb      	strb	r3, [r7, #15]
          break;
 800cc9c:	e018      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cc9e:	6839      	ldr	r1, [r7, #0]
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 fc83 	bl	800d5ac <USBD_GetConfig>
          break;
 800cca6:	e013      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cca8:	6839      	ldr	r1, [r7, #0]
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 fcb4 	bl	800d618 <USBD_GetStatus>
          break;
 800ccb0:	e00e      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ccb2:	6839      	ldr	r1, [r7, #0]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 fce3 	bl	800d680 <USBD_SetFeature>
          break;
 800ccba:	e009      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ccbc:	6839      	ldr	r1, [r7, #0]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fd07 	bl	800d6d2 <USBD_ClrFeature>
          break;
 800ccc4:	e004      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 fd5e 	bl	800d78a <USBD_CtlError>
          break;
 800ccce:	bf00      	nop
      }
      break;
 800ccd0:	e004      	b.n	800ccdc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ccd2:	6839      	ldr	r1, [r7, #0]
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 fd58 	bl	800d78a <USBD_CtlError>
      break;
 800ccda:	bf00      	nop
  }

  return ret;
 800ccdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop

0800cce8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ccfe:	2b40      	cmp	r3, #64	; 0x40
 800cd00:	d005      	beq.n	800cd0e <USBD_StdItfReq+0x26>
 800cd02:	2b40      	cmp	r3, #64	; 0x40
 800cd04:	d852      	bhi.n	800cdac <USBD_StdItfReq+0xc4>
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d001      	beq.n	800cd0e <USBD_StdItfReq+0x26>
 800cd0a:	2b20      	cmp	r3, #32
 800cd0c:	d14e      	bne.n	800cdac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	3b01      	subs	r3, #1
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	d840      	bhi.n	800cd9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	889b      	ldrh	r3, [r3, #4]
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d836      	bhi.n	800cd94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	889b      	ldrh	r3, [r3, #4]
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7ff fed9 	bl	800cae6 <USBD_CoreFindIF>
 800cd34:	4603      	mov	r3, r0
 800cd36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd38:	7bbb      	ldrb	r3, [r7, #14]
 800cd3a:	2bff      	cmp	r3, #255	; 0xff
 800cd3c:	d01d      	beq.n	800cd7a <USBD_StdItfReq+0x92>
 800cd3e:	7bbb      	ldrb	r3, [r7, #14]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d11a      	bne.n	800cd7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cd44:	7bba      	ldrb	r2, [r7, #14]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	32ae      	adds	r2, #174	; 0xae
 800cd4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00f      	beq.n	800cd74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cd54:	7bba      	ldrb	r2, [r7, #14]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cd5c:	7bba      	ldrb	r2, [r7, #14]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	32ae      	adds	r2, #174	; 0xae
 800cd62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	6839      	ldr	r1, [r7, #0]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	4798      	blx	r3
 800cd6e:	4603      	mov	r3, r0
 800cd70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd72:	e004      	b.n	800cd7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cd74:	2303      	movs	r3, #3
 800cd76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd78:	e001      	b.n	800cd7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cd7a:	2303      	movs	r3, #3
 800cd7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	88db      	ldrh	r3, [r3, #6]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d110      	bne.n	800cda8 <USBD_StdItfReq+0xc0>
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d10d      	bne.n	800cda8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 fdc7 	bl	800d920 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cd92:	e009      	b.n	800cda8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cd94:	6839      	ldr	r1, [r7, #0]
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 fcf7 	bl	800d78a <USBD_CtlError>
          break;
 800cd9c:	e004      	b.n	800cda8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fcf2 	bl	800d78a <USBD_CtlError>
          break;
 800cda6:	e000      	b.n	800cdaa <USBD_StdItfReq+0xc2>
          break;
 800cda8:	bf00      	nop
      }
      break;
 800cdaa:	e004      	b.n	800cdb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cdac:	6839      	ldr	r1, [r7, #0]
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 fceb 	bl	800d78a <USBD_CtlError>
      break;
 800cdb4:	bf00      	nop
  }

  return ret;
 800cdb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	889b      	ldrh	r3, [r3, #4]
 800cdd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cddc:	2b40      	cmp	r3, #64	; 0x40
 800cdde:	d007      	beq.n	800cdf0 <USBD_StdEPReq+0x30>
 800cde0:	2b40      	cmp	r3, #64	; 0x40
 800cde2:	f200 817f 	bhi.w	800d0e4 <USBD_StdEPReq+0x324>
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d02a      	beq.n	800ce40 <USBD_StdEPReq+0x80>
 800cdea:	2b20      	cmp	r3, #32
 800cdec:	f040 817a 	bne.w	800d0e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cdf0:	7bbb      	ldrb	r3, [r7, #14]
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f7ff fe83 	bl	800cb00 <USBD_CoreFindEP>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdfe:	7b7b      	ldrb	r3, [r7, #13]
 800ce00:	2bff      	cmp	r3, #255	; 0xff
 800ce02:	f000 8174 	beq.w	800d0ee <USBD_StdEPReq+0x32e>
 800ce06:	7b7b      	ldrb	r3, [r7, #13]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f040 8170 	bne.w	800d0ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ce0e:	7b7a      	ldrb	r2, [r7, #13]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ce16:	7b7a      	ldrb	r2, [r7, #13]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	32ae      	adds	r2, #174	; 0xae
 800ce1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f000 8163 	beq.w	800d0ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ce28:	7b7a      	ldrb	r2, [r7, #13]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	32ae      	adds	r2, #174	; 0xae
 800ce2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	6839      	ldr	r1, [r7, #0]
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	4798      	blx	r3
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ce3e:	e156      	b.n	800d0ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	785b      	ldrb	r3, [r3, #1]
 800ce44:	2b03      	cmp	r3, #3
 800ce46:	d008      	beq.n	800ce5a <USBD_StdEPReq+0x9a>
 800ce48:	2b03      	cmp	r3, #3
 800ce4a:	f300 8145 	bgt.w	800d0d8 <USBD_StdEPReq+0x318>
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 809b 	beq.w	800cf8a <USBD_StdEPReq+0x1ca>
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d03c      	beq.n	800ced2 <USBD_StdEPReq+0x112>
 800ce58:	e13e      	b.n	800d0d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d002      	beq.n	800ce6c <USBD_StdEPReq+0xac>
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	d016      	beq.n	800ce98 <USBD_StdEPReq+0xd8>
 800ce6a:	e02c      	b.n	800cec6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce6c:	7bbb      	ldrb	r3, [r7, #14]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00d      	beq.n	800ce8e <USBD_StdEPReq+0xce>
 800ce72:	7bbb      	ldrb	r3, [r7, #14]
 800ce74:	2b80      	cmp	r3, #128	; 0x80
 800ce76:	d00a      	beq.n	800ce8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce78:	7bbb      	ldrb	r3, [r7, #14]
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f004 fc3b 	bl	80116f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce82:	2180      	movs	r1, #128	; 0x80
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f004 fc37 	bl	80116f8 <USBD_LL_StallEP>
 800ce8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce8c:	e020      	b.n	800ced0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ce8e:	6839      	ldr	r1, [r7, #0]
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 fc7a 	bl	800d78a <USBD_CtlError>
              break;
 800ce96:	e01b      	b.n	800ced0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	885b      	ldrh	r3, [r3, #2]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d10e      	bne.n	800cebe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cea0:	7bbb      	ldrb	r3, [r7, #14]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00b      	beq.n	800cebe <USBD_StdEPReq+0xfe>
 800cea6:	7bbb      	ldrb	r3, [r7, #14]
 800cea8:	2b80      	cmp	r3, #128	; 0x80
 800ceaa:	d008      	beq.n	800cebe <USBD_StdEPReq+0xfe>
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	88db      	ldrh	r3, [r3, #6]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d104      	bne.n	800cebe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ceb4:	7bbb      	ldrb	r3, [r7, #14]
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f004 fc1d 	bl	80116f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 fd2e 	bl	800d920 <USBD_CtlSendStatus>

              break;
 800cec4:	e004      	b.n	800ced0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cec6:	6839      	ldr	r1, [r7, #0]
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 fc5e 	bl	800d78a <USBD_CtlError>
              break;
 800cece:	bf00      	nop
          }
          break;
 800ced0:	e107      	b.n	800d0e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	d002      	beq.n	800cee4 <USBD_StdEPReq+0x124>
 800cede:	2b03      	cmp	r3, #3
 800cee0:	d016      	beq.n	800cf10 <USBD_StdEPReq+0x150>
 800cee2:	e04b      	b.n	800cf7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cee4:	7bbb      	ldrb	r3, [r7, #14]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00d      	beq.n	800cf06 <USBD_StdEPReq+0x146>
 800ceea:	7bbb      	ldrb	r3, [r7, #14]
 800ceec:	2b80      	cmp	r3, #128	; 0x80
 800ceee:	d00a      	beq.n	800cf06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cef0:	7bbb      	ldrb	r3, [r7, #14]
 800cef2:	4619      	mov	r1, r3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f004 fbff 	bl	80116f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cefa:	2180      	movs	r1, #128	; 0x80
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f004 fbfb 	bl	80116f8 <USBD_LL_StallEP>
 800cf02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cf04:	e040      	b.n	800cf88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cf06:	6839      	ldr	r1, [r7, #0]
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 fc3e 	bl	800d78a <USBD_CtlError>
              break;
 800cf0e:	e03b      	b.n	800cf88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	885b      	ldrh	r3, [r3, #2]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d136      	bne.n	800cf86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d004      	beq.n	800cf2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cf22:	7bbb      	ldrb	r3, [r7, #14]
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f004 fc05 	bl	8011736 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 fcf7 	bl	800d920 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
 800cf34:	4619      	mov	r1, r3
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7ff fde2 	bl	800cb00 <USBD_CoreFindEP>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf40:	7b7b      	ldrb	r3, [r7, #13]
 800cf42:	2bff      	cmp	r3, #255	; 0xff
 800cf44:	d01f      	beq.n	800cf86 <USBD_StdEPReq+0x1c6>
 800cf46:	7b7b      	ldrb	r3, [r7, #13]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d11c      	bne.n	800cf86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cf4c:	7b7a      	ldrb	r2, [r7, #13]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cf54:	7b7a      	ldrb	r2, [r7, #13]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	32ae      	adds	r2, #174	; 0xae
 800cf5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d010      	beq.n	800cf86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cf64:	7b7a      	ldrb	r2, [r7, #13]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	32ae      	adds	r2, #174	; 0xae
 800cf6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	6839      	ldr	r1, [r7, #0]
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	4798      	blx	r3
 800cf76:	4603      	mov	r3, r0
 800cf78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cf7a:	e004      	b.n	800cf86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cf7c:	6839      	ldr	r1, [r7, #0]
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 fc03 	bl	800d78a <USBD_CtlError>
              break;
 800cf84:	e000      	b.n	800cf88 <USBD_StdEPReq+0x1c8>
              break;
 800cf86:	bf00      	nop
          }
          break;
 800cf88:	e0ab      	b.n	800d0e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	d002      	beq.n	800cf9c <USBD_StdEPReq+0x1dc>
 800cf96:	2b03      	cmp	r3, #3
 800cf98:	d032      	beq.n	800d000 <USBD_StdEPReq+0x240>
 800cf9a:	e097      	b.n	800d0cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf9c:	7bbb      	ldrb	r3, [r7, #14]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d007      	beq.n	800cfb2 <USBD_StdEPReq+0x1f2>
 800cfa2:	7bbb      	ldrb	r3, [r7, #14]
 800cfa4:	2b80      	cmp	r3, #128	; 0x80
 800cfa6:	d004      	beq.n	800cfb2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cfa8:	6839      	ldr	r1, [r7, #0]
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fbed 	bl	800d78a <USBD_CtlError>
                break;
 800cfb0:	e091      	b.n	800d0d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	da0b      	bge.n	800cfd2 <USBD_StdEPReq+0x212>
 800cfba:	7bbb      	ldrb	r3, [r7, #14]
 800cfbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	3310      	adds	r3, #16
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	4413      	add	r3, r2
 800cfce:	3304      	adds	r3, #4
 800cfd0:	e00b      	b.n	800cfea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cfd2:	7bbb      	ldrb	r3, [r7, #14]
 800cfd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfd8:	4613      	mov	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	4413      	add	r3, r2
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	3304      	adds	r3, #4
 800cfea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	2200      	movs	r2, #0
 800cff0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	2202      	movs	r2, #2
 800cff6:	4619      	mov	r1, r3
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 fc37 	bl	800d86c <USBD_CtlSendData>
              break;
 800cffe:	e06a      	b.n	800d0d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d004:	2b00      	cmp	r3, #0
 800d006:	da11      	bge.n	800d02c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d008:	7bbb      	ldrb	r3, [r7, #14]
 800d00a:	f003 020f 	and.w	r2, r3, #15
 800d00e:	6879      	ldr	r1, [r7, #4]
 800d010:	4613      	mov	r3, r2
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	440b      	add	r3, r1
 800d01a:	3324      	adds	r3, #36	; 0x24
 800d01c:	881b      	ldrh	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d117      	bne.n	800d052 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d022:	6839      	ldr	r1, [r7, #0]
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 fbb0 	bl	800d78a <USBD_CtlError>
                  break;
 800d02a:	e054      	b.n	800d0d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d02c:	7bbb      	ldrb	r3, [r7, #14]
 800d02e:	f003 020f 	and.w	r2, r3, #15
 800d032:	6879      	ldr	r1, [r7, #4]
 800d034:	4613      	mov	r3, r2
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	4413      	add	r3, r2
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	440b      	add	r3, r1
 800d03e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d042:	881b      	ldrh	r3, [r3, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d104      	bne.n	800d052 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d048:	6839      	ldr	r1, [r7, #0]
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 fb9d 	bl	800d78a <USBD_CtlError>
                  break;
 800d050:	e041      	b.n	800d0d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d052:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d056:	2b00      	cmp	r3, #0
 800d058:	da0b      	bge.n	800d072 <USBD_StdEPReq+0x2b2>
 800d05a:	7bbb      	ldrb	r3, [r7, #14]
 800d05c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d060:	4613      	mov	r3, r2
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	4413      	add	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	3310      	adds	r3, #16
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	4413      	add	r3, r2
 800d06e:	3304      	adds	r3, #4
 800d070:	e00b      	b.n	800d08a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d072:	7bbb      	ldrb	r3, [r7, #14]
 800d074:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d078:	4613      	mov	r3, r2
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	4413      	add	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	4413      	add	r3, r2
 800d088:	3304      	adds	r3, #4
 800d08a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d08c:	7bbb      	ldrb	r3, [r7, #14]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d002      	beq.n	800d098 <USBD_StdEPReq+0x2d8>
 800d092:	7bbb      	ldrb	r3, [r7, #14]
 800d094:	2b80      	cmp	r3, #128	; 0x80
 800d096:	d103      	bne.n	800d0a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	2200      	movs	r2, #0
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	e00e      	b.n	800d0be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d0a0:	7bbb      	ldrb	r3, [r7, #14]
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f004 fb65 	bl	8011774 <USBD_LL_IsStallEP>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d003      	beq.n	800d0b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	601a      	str	r2, [r3, #0]
 800d0b6:	e002      	b.n	800d0be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	2202      	movs	r2, #2
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 fbd1 	bl	800d86c <USBD_CtlSendData>
              break;
 800d0ca:	e004      	b.n	800d0d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 fb5b 	bl	800d78a <USBD_CtlError>
              break;
 800d0d4:	bf00      	nop
          }
          break;
 800d0d6:	e004      	b.n	800d0e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d0d8:	6839      	ldr	r1, [r7, #0]
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 fb55 	bl	800d78a <USBD_CtlError>
          break;
 800d0e0:	bf00      	nop
      }
      break;
 800d0e2:	e005      	b.n	800d0f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d0e4:	6839      	ldr	r1, [r7, #0]
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fb4f 	bl	800d78a <USBD_CtlError>
      break;
 800d0ec:	e000      	b.n	800d0f0 <USBD_StdEPReq+0x330>
      break;
 800d0ee:	bf00      	nop
  }

  return ret;
 800d0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
	...

0800d0fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d106:	2300      	movs	r3, #0
 800d108:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d10a:	2300      	movs	r3, #0
 800d10c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d10e:	2300      	movs	r3, #0
 800d110:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	885b      	ldrh	r3, [r3, #2]
 800d116:	0a1b      	lsrs	r3, r3, #8
 800d118:	b29b      	uxth	r3, r3
 800d11a:	3b01      	subs	r3, #1
 800d11c:	2b06      	cmp	r3, #6
 800d11e:	f200 8128 	bhi.w	800d372 <USBD_GetDescriptor+0x276>
 800d122:	a201      	add	r2, pc, #4	; (adr r2, 800d128 <USBD_GetDescriptor+0x2c>)
 800d124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d128:	0800d145 	.word	0x0800d145
 800d12c:	0800d15d 	.word	0x0800d15d
 800d130:	0800d19d 	.word	0x0800d19d
 800d134:	0800d373 	.word	0x0800d373
 800d138:	0800d373 	.word	0x0800d373
 800d13c:	0800d313 	.word	0x0800d313
 800d140:	0800d33f 	.word	0x0800d33f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	7c12      	ldrb	r2, [r2, #16]
 800d150:	f107 0108 	add.w	r1, r7, #8
 800d154:	4610      	mov	r0, r2
 800d156:	4798      	blx	r3
 800d158:	60f8      	str	r0, [r7, #12]
      break;
 800d15a:	e112      	b.n	800d382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	7c1b      	ldrb	r3, [r3, #16]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10d      	bne.n	800d180 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16c:	f107 0208 	add.w	r2, r7, #8
 800d170:	4610      	mov	r0, r2
 800d172:	4798      	blx	r3
 800d174:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	3301      	adds	r3, #1
 800d17a:	2202      	movs	r2, #2
 800d17c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d17e:	e100      	b.n	800d382 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d188:	f107 0208 	add.w	r2, r7, #8
 800d18c:	4610      	mov	r0, r2
 800d18e:	4798      	blx	r3
 800d190:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	3301      	adds	r3, #1
 800d196:	2202      	movs	r2, #2
 800d198:	701a      	strb	r2, [r3, #0]
      break;
 800d19a:	e0f2      	b.n	800d382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	885b      	ldrh	r3, [r3, #2]
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	2b05      	cmp	r3, #5
 800d1a4:	f200 80ac 	bhi.w	800d300 <USBD_GetDescriptor+0x204>
 800d1a8:	a201      	add	r2, pc, #4	; (adr r2, 800d1b0 <USBD_GetDescriptor+0xb4>)
 800d1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ae:	bf00      	nop
 800d1b0:	0800d1c9 	.word	0x0800d1c9
 800d1b4:	0800d1fd 	.word	0x0800d1fd
 800d1b8:	0800d231 	.word	0x0800d231
 800d1bc:	0800d265 	.word	0x0800d265
 800d1c0:	0800d299 	.word	0x0800d299
 800d1c4:	0800d2cd 	.word	0x0800d2cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d00b      	beq.n	800d1ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	7c12      	ldrb	r2, [r2, #16]
 800d1e0:	f107 0108 	add.w	r1, r7, #8
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	4798      	blx	r3
 800d1e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1ea:	e091      	b.n	800d310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1ec:	6839      	ldr	r1, [r7, #0]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 facb 	bl	800d78a <USBD_CtlError>
            err++;
 800d1f4:	7afb      	ldrb	r3, [r7, #11]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	72fb      	strb	r3, [r7, #11]
          break;
 800d1fa:	e089      	b.n	800d310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00b      	beq.n	800d220 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	7c12      	ldrb	r2, [r2, #16]
 800d214:	f107 0108 	add.w	r1, r7, #8
 800d218:	4610      	mov	r0, r2
 800d21a:	4798      	blx	r3
 800d21c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d21e:	e077      	b.n	800d310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d220:	6839      	ldr	r1, [r7, #0]
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 fab1 	bl	800d78a <USBD_CtlError>
            err++;
 800d228:	7afb      	ldrb	r3, [r7, #11]
 800d22a:	3301      	adds	r3, #1
 800d22c:	72fb      	strb	r3, [r7, #11]
          break;
 800d22e:	e06f      	b.n	800d310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d00b      	beq.n	800d254 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	7c12      	ldrb	r2, [r2, #16]
 800d248:	f107 0108 	add.w	r1, r7, #8
 800d24c:	4610      	mov	r0, r2
 800d24e:	4798      	blx	r3
 800d250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d252:	e05d      	b.n	800d310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d254:	6839      	ldr	r1, [r7, #0]
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 fa97 	bl	800d78a <USBD_CtlError>
            err++;
 800d25c:	7afb      	ldrb	r3, [r7, #11]
 800d25e:	3301      	adds	r3, #1
 800d260:	72fb      	strb	r3, [r7, #11]
          break;
 800d262:	e055      	b.n	800d310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d26a:	691b      	ldr	r3, [r3, #16]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00b      	beq.n	800d288 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	7c12      	ldrb	r2, [r2, #16]
 800d27c:	f107 0108 	add.w	r1, r7, #8
 800d280:	4610      	mov	r0, r2
 800d282:	4798      	blx	r3
 800d284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d286:	e043      	b.n	800d310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 fa7d 	bl	800d78a <USBD_CtlError>
            err++;
 800d290:	7afb      	ldrb	r3, [r7, #11]
 800d292:	3301      	adds	r3, #1
 800d294:	72fb      	strb	r3, [r7, #11]
          break;
 800d296:	e03b      	b.n	800d310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d29e:	695b      	ldr	r3, [r3, #20]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d00b      	beq.n	800d2bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2aa:	695b      	ldr	r3, [r3, #20]
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	7c12      	ldrb	r2, [r2, #16]
 800d2b0:	f107 0108 	add.w	r1, r7, #8
 800d2b4:	4610      	mov	r0, r2
 800d2b6:	4798      	blx	r3
 800d2b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2ba:	e029      	b.n	800d310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d2bc:	6839      	ldr	r1, [r7, #0]
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 fa63 	bl	800d78a <USBD_CtlError>
            err++;
 800d2c4:	7afb      	ldrb	r3, [r7, #11]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	72fb      	strb	r3, [r7, #11]
          break;
 800d2ca:	e021      	b.n	800d310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2d2:	699b      	ldr	r3, [r3, #24]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d00b      	beq.n	800d2f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2de:	699b      	ldr	r3, [r3, #24]
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	7c12      	ldrb	r2, [r2, #16]
 800d2e4:	f107 0108 	add.w	r1, r7, #8
 800d2e8:	4610      	mov	r0, r2
 800d2ea:	4798      	blx	r3
 800d2ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2ee:	e00f      	b.n	800d310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d2f0:	6839      	ldr	r1, [r7, #0]
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 fa49 	bl	800d78a <USBD_CtlError>
            err++;
 800d2f8:	7afb      	ldrb	r3, [r7, #11]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	72fb      	strb	r3, [r7, #11]
          break;
 800d2fe:	e007      	b.n	800d310 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d300:	6839      	ldr	r1, [r7, #0]
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 fa41 	bl	800d78a <USBD_CtlError>
          err++;
 800d308:	7afb      	ldrb	r3, [r7, #11]
 800d30a:	3301      	adds	r3, #1
 800d30c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d30e:	bf00      	nop
      }
      break;
 800d310:	e037      	b.n	800d382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	7c1b      	ldrb	r3, [r3, #16]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d109      	bne.n	800d32e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d322:	f107 0208 	add.w	r2, r7, #8
 800d326:	4610      	mov	r0, r2
 800d328:	4798      	blx	r3
 800d32a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d32c:	e029      	b.n	800d382 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d32e:	6839      	ldr	r1, [r7, #0]
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 fa2a 	bl	800d78a <USBD_CtlError>
        err++;
 800d336:	7afb      	ldrb	r3, [r7, #11]
 800d338:	3301      	adds	r3, #1
 800d33a:	72fb      	strb	r3, [r7, #11]
      break;
 800d33c:	e021      	b.n	800d382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	7c1b      	ldrb	r3, [r3, #16]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d10d      	bne.n	800d362 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d34e:	f107 0208 	add.w	r2, r7, #8
 800d352:	4610      	mov	r0, r2
 800d354:	4798      	blx	r3
 800d356:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	3301      	adds	r3, #1
 800d35c:	2207      	movs	r2, #7
 800d35e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d360:	e00f      	b.n	800d382 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d362:	6839      	ldr	r1, [r7, #0]
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 fa10 	bl	800d78a <USBD_CtlError>
        err++;
 800d36a:	7afb      	ldrb	r3, [r7, #11]
 800d36c:	3301      	adds	r3, #1
 800d36e:	72fb      	strb	r3, [r7, #11]
      break;
 800d370:	e007      	b.n	800d382 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d372:	6839      	ldr	r1, [r7, #0]
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 fa08 	bl	800d78a <USBD_CtlError>
      err++;
 800d37a:	7afb      	ldrb	r3, [r7, #11]
 800d37c:	3301      	adds	r3, #1
 800d37e:	72fb      	strb	r3, [r7, #11]
      break;
 800d380:	bf00      	nop
  }

  if (err != 0U)
 800d382:	7afb      	ldrb	r3, [r7, #11]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d11e      	bne.n	800d3c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	88db      	ldrh	r3, [r3, #6]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d016      	beq.n	800d3be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d390:	893b      	ldrh	r3, [r7, #8]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00e      	beq.n	800d3b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	88da      	ldrh	r2, [r3, #6]
 800d39a:	893b      	ldrh	r3, [r7, #8]
 800d39c:	4293      	cmp	r3, r2
 800d39e:	bf28      	it	cs
 800d3a0:	4613      	movcs	r3, r2
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d3a6:	893b      	ldrh	r3, [r7, #8]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	68f9      	ldr	r1, [r7, #12]
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 fa5d 	bl	800d86c <USBD_CtlSendData>
 800d3b2:	e009      	b.n	800d3c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d3b4:	6839      	ldr	r1, [r7, #0]
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 f9e7 	bl	800d78a <USBD_CtlError>
 800d3bc:	e004      	b.n	800d3c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 faae 	bl	800d920 <USBD_CtlSendStatus>
 800d3c4:	e000      	b.n	800d3c8 <USBD_GetDescriptor+0x2cc>
    return;
 800d3c6:	bf00      	nop
  }
}
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop

0800d3d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	889b      	ldrh	r3, [r3, #4]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d131      	bne.n	800d446 <USBD_SetAddress+0x76>
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	88db      	ldrh	r3, [r3, #6]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d12d      	bne.n	800d446 <USBD_SetAddress+0x76>
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	885b      	ldrh	r3, [r3, #2]
 800d3ee:	2b7f      	cmp	r3, #127	; 0x7f
 800d3f0:	d829      	bhi.n	800d446 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	885b      	ldrh	r3, [r3, #2]
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d404:	b2db      	uxtb	r3, r3
 800d406:	2b03      	cmp	r3, #3
 800d408:	d104      	bne.n	800d414 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 f9bc 	bl	800d78a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d412:	e01d      	b.n	800d450 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	7bfa      	ldrb	r2, [r7, #15]
 800d418:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d41c:	7bfb      	ldrb	r3, [r7, #15]
 800d41e:	4619      	mov	r1, r3
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f004 f9d3 	bl	80117cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 fa7a 	bl	800d920 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d42c:	7bfb      	ldrb	r3, [r7, #15]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d004      	beq.n	800d43c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2202      	movs	r2, #2
 800d436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d43a:	e009      	b.n	800d450 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2201      	movs	r2, #1
 800d440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d444:	e004      	b.n	800d450 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d446:	6839      	ldr	r1, [r7, #0]
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 f99e 	bl	800d78a <USBD_CtlError>
  }
}
 800d44e:	bf00      	nop
 800d450:	bf00      	nop
 800d452:	3710      	adds	r7, #16
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d462:	2300      	movs	r3, #0
 800d464:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	885b      	ldrh	r3, [r3, #2]
 800d46a:	b2da      	uxtb	r2, r3
 800d46c:	4b4e      	ldr	r3, [pc, #312]	; (800d5a8 <USBD_SetConfig+0x150>)
 800d46e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d470:	4b4d      	ldr	r3, [pc, #308]	; (800d5a8 <USBD_SetConfig+0x150>)
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d905      	bls.n	800d484 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d478:	6839      	ldr	r1, [r7, #0]
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 f985 	bl	800d78a <USBD_CtlError>
    return USBD_FAIL;
 800d480:	2303      	movs	r3, #3
 800d482:	e08c      	b.n	800d59e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	d002      	beq.n	800d496 <USBD_SetConfig+0x3e>
 800d490:	2b03      	cmp	r3, #3
 800d492:	d029      	beq.n	800d4e8 <USBD_SetConfig+0x90>
 800d494:	e075      	b.n	800d582 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d496:	4b44      	ldr	r3, [pc, #272]	; (800d5a8 <USBD_SetConfig+0x150>)
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d020      	beq.n	800d4e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d49e:	4b42      	ldr	r3, [pc, #264]	; (800d5a8 <USBD_SetConfig+0x150>)
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d4a8:	4b3f      	ldr	r3, [pc, #252]	; (800d5a8 <USBD_SetConfig+0x150>)
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f7fe ffe7 	bl	800c482 <USBD_SetClassConfig>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d4b8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d008      	beq.n	800d4d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d4be:	6839      	ldr	r1, [r7, #0]
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 f962 	bl	800d78a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2202      	movs	r2, #2
 800d4ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d4ce:	e065      	b.n	800d59c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fa25 	bl	800d920 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2203      	movs	r2, #3
 800d4da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d4de:	e05d      	b.n	800d59c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 fa1d 	bl	800d920 <USBD_CtlSendStatus>
      break;
 800d4e6:	e059      	b.n	800d59c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d4e8:	4b2f      	ldr	r3, [pc, #188]	; (800d5a8 <USBD_SetConfig+0x150>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d112      	bne.n	800d516 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2202      	movs	r2, #2
 800d4f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d4f8:	4b2b      	ldr	r3, [pc, #172]	; (800d5a8 <USBD_SetConfig+0x150>)
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d502:	4b29      	ldr	r3, [pc, #164]	; (800d5a8 <USBD_SetConfig+0x150>)
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	4619      	mov	r1, r3
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f7fe ffd6 	bl	800c4ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 fa06 	bl	800d920 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d514:	e042      	b.n	800d59c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d516:	4b24      	ldr	r3, [pc, #144]	; (800d5a8 <USBD_SetConfig+0x150>)
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	461a      	mov	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	429a      	cmp	r2, r3
 800d522:	d02a      	beq.n	800d57a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	4619      	mov	r1, r3
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f7fe ffc4 	bl	800c4ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d532:	4b1d      	ldr	r3, [pc, #116]	; (800d5a8 <USBD_SetConfig+0x150>)
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	461a      	mov	r2, r3
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d53c:	4b1a      	ldr	r3, [pc, #104]	; (800d5a8 <USBD_SetConfig+0x150>)
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	4619      	mov	r1, r3
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7fe ff9d 	bl	800c482 <USBD_SetClassConfig>
 800d548:	4603      	mov	r3, r0
 800d54a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d54c:	7bfb      	ldrb	r3, [r7, #15]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00f      	beq.n	800d572 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d552:	6839      	ldr	r1, [r7, #0]
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 f918 	bl	800d78a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	4619      	mov	r1, r3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f7fe ffa9 	bl	800c4ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2202      	movs	r2, #2
 800d56c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d570:	e014      	b.n	800d59c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 f9d4 	bl	800d920 <USBD_CtlSendStatus>
      break;
 800d578:	e010      	b.n	800d59c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 f9d0 	bl	800d920 <USBD_CtlSendStatus>
      break;
 800d580:	e00c      	b.n	800d59c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d582:	6839      	ldr	r1, [r7, #0]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 f900 	bl	800d78a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d58a:	4b07      	ldr	r3, [pc, #28]	; (800d5a8 <USBD_SetConfig+0x150>)
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	4619      	mov	r1, r3
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f7fe ff92 	bl	800c4ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d596:	2303      	movs	r3, #3
 800d598:	73fb      	strb	r3, [r7, #15]
      break;
 800d59a:	bf00      	nop
  }

  return ret;
 800d59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	20002608 	.word	0x20002608

0800d5ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	88db      	ldrh	r3, [r3, #6]
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d004      	beq.n	800d5c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d5be:	6839      	ldr	r1, [r7, #0]
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 f8e2 	bl	800d78a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d5c6:	e023      	b.n	800d610 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	dc02      	bgt.n	800d5da <USBD_GetConfig+0x2e>
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	dc03      	bgt.n	800d5e0 <USBD_GetConfig+0x34>
 800d5d8:	e015      	b.n	800d606 <USBD_GetConfig+0x5a>
 800d5da:	2b03      	cmp	r3, #3
 800d5dc:	d00b      	beq.n	800d5f6 <USBD_GetConfig+0x4a>
 800d5de:	e012      	b.n	800d606 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	3308      	adds	r3, #8
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f93c 	bl	800d86c <USBD_CtlSendData>
        break;
 800d5f4:	e00c      	b.n	800d610 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 f934 	bl	800d86c <USBD_CtlSendData>
        break;
 800d604:	e004      	b.n	800d610 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d606:	6839      	ldr	r1, [r7, #0]
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f8be 	bl	800d78a <USBD_CtlError>
        break;
 800d60e:	bf00      	nop
}
 800d610:	bf00      	nop
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	3b01      	subs	r3, #1
 800d62c:	2b02      	cmp	r3, #2
 800d62e:	d81e      	bhi.n	800d66e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	88db      	ldrh	r3, [r3, #6]
 800d634:	2b02      	cmp	r3, #2
 800d636:	d004      	beq.n	800d642 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d638:	6839      	ldr	r1, [r7, #0]
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 f8a5 	bl	800d78a <USBD_CtlError>
        break;
 800d640:	e01a      	b.n	800d678 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2201      	movs	r2, #1
 800d646:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d005      	beq.n	800d65e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	f043 0202 	orr.w	r2, r3, #2
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	330c      	adds	r3, #12
 800d662:	2202      	movs	r2, #2
 800d664:	4619      	mov	r1, r3
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f900 	bl	800d86c <USBD_CtlSendData>
      break;
 800d66c:	e004      	b.n	800d678 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d66e:	6839      	ldr	r1, [r7, #0]
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 f88a 	bl	800d78a <USBD_CtlError>
      break;
 800d676:	bf00      	nop
  }
}
 800d678:	bf00      	nop
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	885b      	ldrh	r3, [r3, #2]
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d107      	bne.n	800d6a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2201      	movs	r2, #1
 800d696:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 f940 	bl	800d920 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d6a0:	e013      	b.n	800d6ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	885b      	ldrh	r3, [r3, #2]
 800d6a6:	2b02      	cmp	r3, #2
 800d6a8:	d10b      	bne.n	800d6c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	889b      	ldrh	r3, [r3, #4]
 800d6ae:	0a1b      	lsrs	r3, r3, #8
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	b2da      	uxtb	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 f930 	bl	800d920 <USBD_CtlSendStatus>
}
 800d6c0:	e003      	b.n	800d6ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d6c2:	6839      	ldr	r1, [r7, #0]
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 f860 	bl	800d78a <USBD_CtlError>
}
 800d6ca:	bf00      	nop
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6d2:	b580      	push	{r7, lr}
 800d6d4:	b082      	sub	sp, #8
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
 800d6da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d80b      	bhi.n	800d702 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	885b      	ldrh	r3, [r3, #2]
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d10c      	bne.n	800d70c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f910 	bl	800d920 <USBD_CtlSendStatus>
      }
      break;
 800d700:	e004      	b.n	800d70c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d702:	6839      	ldr	r1, [r7, #0]
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 f840 	bl	800d78a <USBD_CtlError>
      break;
 800d70a:	e000      	b.n	800d70e <USBD_ClrFeature+0x3c>
      break;
 800d70c:	bf00      	nop
  }
}
 800d70e:	bf00      	nop
 800d710:	3708      	adds	r7, #8
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}

0800d716 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d716:	b580      	push	{r7, lr}
 800d718:	b084      	sub	sp, #16
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
 800d71e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	781a      	ldrb	r2, [r3, #0]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	3301      	adds	r3, #1
 800d730:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	781a      	ldrb	r2, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	3301      	adds	r3, #1
 800d73e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f7ff fa41 	bl	800cbc8 <SWAPBYTE>
 800d746:	4603      	mov	r3, r0
 800d748:	461a      	mov	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	3301      	adds	r3, #1
 800d752:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	3301      	adds	r3, #1
 800d758:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f7ff fa34 	bl	800cbc8 <SWAPBYTE>
 800d760:	4603      	mov	r3, r0
 800d762:	461a      	mov	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	3301      	adds	r3, #1
 800d76c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	3301      	adds	r3, #1
 800d772:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	f7ff fa27 	bl	800cbc8 <SWAPBYTE>
 800d77a:	4603      	mov	r3, r0
 800d77c:	461a      	mov	r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	80da      	strh	r2, [r3, #6]
}
 800d782:	bf00      	nop
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b082      	sub	sp, #8
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
 800d792:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d794:	2180      	movs	r1, #128	; 0x80
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f003 ffae 	bl	80116f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d79c:	2100      	movs	r1, #0
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f003 ffaa 	bl	80116f8 <USBD_LL_StallEP>
}
 800d7a4:	bf00      	nop
 800d7a6:	3708      	adds	r7, #8
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b086      	sub	sp, #24
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d036      	beq.n	800d830 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d7c6:	6938      	ldr	r0, [r7, #16]
 800d7c8:	f000 f836 	bl	800d838 <USBD_GetLen>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d7da:	7dfb      	ldrb	r3, [r7, #23]
 800d7dc:	68ba      	ldr	r2, [r7, #8]
 800d7de:	4413      	add	r3, r2
 800d7e0:	687a      	ldr	r2, [r7, #4]
 800d7e2:	7812      	ldrb	r2, [r2, #0]
 800d7e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800d7e6:	7dfb      	ldrb	r3, [r7, #23]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d7ec:	7dfb      	ldrb	r3, [r7, #23]
 800d7ee:	68ba      	ldr	r2, [r7, #8]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	2203      	movs	r2, #3
 800d7f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800d7f6:	7dfb      	ldrb	r3, [r7, #23]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d7fc:	e013      	b.n	800d826 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d7fe:	7dfb      	ldrb	r3, [r7, #23]
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	4413      	add	r3, r2
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	7812      	ldrb	r2, [r2, #0]
 800d808:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	3301      	adds	r3, #1
 800d80e:	613b      	str	r3, [r7, #16]
    idx++;
 800d810:	7dfb      	ldrb	r3, [r7, #23]
 800d812:	3301      	adds	r3, #1
 800d814:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d816:	7dfb      	ldrb	r3, [r7, #23]
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	4413      	add	r3, r2
 800d81c:	2200      	movs	r2, #0
 800d81e:	701a      	strb	r2, [r3, #0]
    idx++;
 800d820:	7dfb      	ldrb	r3, [r7, #23]
 800d822:	3301      	adds	r3, #1
 800d824:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1e7      	bne.n	800d7fe <USBD_GetString+0x52>
 800d82e:	e000      	b.n	800d832 <USBD_GetString+0x86>
    return;
 800d830:	bf00      	nop
  }
}
 800d832:	3718      	adds	r7, #24
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d840:	2300      	movs	r3, #0
 800d842:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d848:	e005      	b.n	800d856 <USBD_GetLen+0x1e>
  {
    len++;
 800d84a:	7bfb      	ldrb	r3, [r7, #15]
 800d84c:	3301      	adds	r3, #1
 800d84e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	3301      	adds	r3, #1
 800d854:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1f5      	bne.n	800d84a <USBD_GetLen+0x12>
  }

  return len;
 800d85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3714      	adds	r7, #20
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr

0800d86c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2202      	movs	r2, #2
 800d87c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	2100      	movs	r1, #0
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	f003 ffb9 	bl	801180a <USBD_LL_Transmit>

  return USBD_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b084      	sub	sp, #16
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	60f8      	str	r0, [r7, #12]
 800d8aa:	60b9      	str	r1, [r7, #8]
 800d8ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f003 ffa8 	bl	801180a <USBD_LL_Transmit>

  return USBD_OK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3710      	adds	r7, #16
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	60b9      	str	r1, [r7, #8]
 800d8ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2203      	movs	r2, #3
 800d8d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68ba      	ldr	r2, [r7, #8]
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f003 ffac 	bl	801184c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b084      	sub	sp, #16
 800d902:	af00      	add	r7, sp, #0
 800d904:	60f8      	str	r0, [r7, #12]
 800d906:	60b9      	str	r1, [r7, #8]
 800d908:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	68ba      	ldr	r2, [r7, #8]
 800d90e:	2100      	movs	r1, #0
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f003 ff9b 	bl	801184c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2204      	movs	r2, #4
 800d92c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d930:	2300      	movs	r3, #0
 800d932:	2200      	movs	r2, #0
 800d934:	2100      	movs	r1, #0
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f003 ff67 	bl	801180a <USBD_LL_Transmit>

  return USBD_OK;
 800d93c:	2300      	movs	r3, #0
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b082      	sub	sp, #8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2205      	movs	r2, #5
 800d952:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d956:	2300      	movs	r3, #0
 800d958:	2200      	movs	r2, #0
 800d95a:	2100      	movs	r1, #0
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f003 ff75 	bl	801184c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <__NVIC_SetPriority>:
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	4603      	mov	r3, r0
 800d974:	6039      	str	r1, [r7, #0]
 800d976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	db0a      	blt.n	800d996 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	b2da      	uxtb	r2, r3
 800d984:	490c      	ldr	r1, [pc, #48]	; (800d9b8 <__NVIC_SetPriority+0x4c>)
 800d986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d98a:	0112      	lsls	r2, r2, #4
 800d98c:	b2d2      	uxtb	r2, r2
 800d98e:	440b      	add	r3, r1
 800d990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d994:	e00a      	b.n	800d9ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	4908      	ldr	r1, [pc, #32]	; (800d9bc <__NVIC_SetPriority+0x50>)
 800d99c:	79fb      	ldrb	r3, [r7, #7]
 800d99e:	f003 030f 	and.w	r3, r3, #15
 800d9a2:	3b04      	subs	r3, #4
 800d9a4:	0112      	lsls	r2, r2, #4
 800d9a6:	b2d2      	uxtb	r2, r2
 800d9a8:	440b      	add	r3, r1
 800d9aa:	761a      	strb	r2, [r3, #24]
}
 800d9ac:	bf00      	nop
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr
 800d9b8:	e000e100 	.word	0xe000e100
 800d9bc:	e000ed00 	.word	0xe000ed00

0800d9c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d9c4:	4b05      	ldr	r3, [pc, #20]	; (800d9dc <SysTick_Handler+0x1c>)
 800d9c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d9c8:	f002 f900 	bl	800fbcc <xTaskGetSchedulerState>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d001      	beq.n	800d9d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d9d2:	f003 f829 	bl	8010a28 <xPortSysTickHandler>
  }
}
 800d9d6:	bf00      	nop
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	e000e010 	.word	0xe000e010

0800d9e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	f06f 0004 	mvn.w	r0, #4
 800d9ea:	f7ff ffbf 	bl	800d96c <__NVIC_SetPriority>
#endif
}
 800d9ee:	bf00      	nop
 800d9f0:	bd80      	pop	{r7, pc}
	...

0800d9f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9fa:	f3ef 8305 	mrs	r3, IPSR
 800d9fe:	603b      	str	r3, [r7, #0]
  return(result);
 800da00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da02:	2b00      	cmp	r3, #0
 800da04:	d003      	beq.n	800da0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800da06:	f06f 0305 	mvn.w	r3, #5
 800da0a:	607b      	str	r3, [r7, #4]
 800da0c:	e00c      	b.n	800da28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800da0e:	4b0a      	ldr	r3, [pc, #40]	; (800da38 <osKernelInitialize+0x44>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d105      	bne.n	800da22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800da16:	4b08      	ldr	r3, [pc, #32]	; (800da38 <osKernelInitialize+0x44>)
 800da18:	2201      	movs	r2, #1
 800da1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da1c:	2300      	movs	r3, #0
 800da1e:	607b      	str	r3, [r7, #4]
 800da20:	e002      	b.n	800da28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800da22:	f04f 33ff 	mov.w	r3, #4294967295
 800da26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da28:	687b      	ldr	r3, [r7, #4]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	2000260c 	.word	0x2000260c

0800da3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da42:	f3ef 8305 	mrs	r3, IPSR
 800da46:	603b      	str	r3, [r7, #0]
  return(result);
 800da48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d003      	beq.n	800da56 <osKernelStart+0x1a>
    stat = osErrorISR;
 800da4e:	f06f 0305 	mvn.w	r3, #5
 800da52:	607b      	str	r3, [r7, #4]
 800da54:	e010      	b.n	800da78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800da56:	4b0b      	ldr	r3, [pc, #44]	; (800da84 <osKernelStart+0x48>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d109      	bne.n	800da72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800da5e:	f7ff ffbf 	bl	800d9e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800da62:	4b08      	ldr	r3, [pc, #32]	; (800da84 <osKernelStart+0x48>)
 800da64:	2202      	movs	r2, #2
 800da66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800da68:	f001 fad0 	bl	800f00c <vTaskStartScheduler>
      stat = osOK;
 800da6c:	2300      	movs	r3, #0
 800da6e:	607b      	str	r3, [r7, #4]
 800da70:	e002      	b.n	800da78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800da72:	f04f 33ff 	mov.w	r3, #4294967295
 800da76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da78:	687b      	ldr	r3, [r7, #4]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3708      	adds	r7, #8
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	2000260c 	.word	0x2000260c

0800da88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800da88:	b580      	push	{r7, lr}
 800da8a:	b08e      	sub	sp, #56	; 0x38
 800da8c:	af04      	add	r7, sp, #16
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800da94:	2300      	movs	r3, #0
 800da96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da98:	f3ef 8305 	mrs	r3, IPSR
 800da9c:	617b      	str	r3, [r7, #20]
  return(result);
 800da9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d17e      	bne.n	800dba2 <osThreadNew+0x11a>
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d07b      	beq.n	800dba2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800daaa:	2380      	movs	r3, #128	; 0x80
 800daac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800daae:	2318      	movs	r3, #24
 800dab0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dab2:	2300      	movs	r3, #0
 800dab4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dab6:	f04f 33ff 	mov.w	r3, #4294967295
 800daba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d045      	beq.n	800db4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d002      	beq.n	800dad0 <osThreadNew+0x48>
        name = attr->name;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	699b      	ldr	r3, [r3, #24]
 800dadc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d008      	beq.n	800daf6 <osThreadNew+0x6e>
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	2b38      	cmp	r3, #56	; 0x38
 800dae8:	d805      	bhi.n	800daf6 <osThreadNew+0x6e>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	f003 0301 	and.w	r3, r3, #1
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d001      	beq.n	800dafa <osThreadNew+0x72>
        return (NULL);
 800daf6:	2300      	movs	r3, #0
 800daf8:	e054      	b.n	800dba4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	695b      	ldr	r3, [r3, #20]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d003      	beq.n	800db0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	089b      	lsrs	r3, r3, #2
 800db08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00e      	beq.n	800db30 <osThreadNew+0xa8>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	2bbf      	cmp	r3, #191	; 0xbf
 800db18:	d90a      	bls.n	800db30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d006      	beq.n	800db30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d002      	beq.n	800db30 <osThreadNew+0xa8>
        mem = 1;
 800db2a:	2301      	movs	r3, #1
 800db2c:	61bb      	str	r3, [r7, #24]
 800db2e:	e010      	b.n	800db52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d10c      	bne.n	800db52 <osThreadNew+0xca>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d108      	bne.n	800db52 <osThreadNew+0xca>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	691b      	ldr	r3, [r3, #16]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d104      	bne.n	800db52 <osThreadNew+0xca>
          mem = 0;
 800db48:	2300      	movs	r3, #0
 800db4a:	61bb      	str	r3, [r7, #24]
 800db4c:	e001      	b.n	800db52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800db4e:	2300      	movs	r3, #0
 800db50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	2b01      	cmp	r3, #1
 800db56:	d110      	bne.n	800db7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db60:	9202      	str	r2, [sp, #8]
 800db62:	9301      	str	r3, [sp, #4]
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	6a3a      	ldr	r2, [r7, #32]
 800db6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f000 fff6 	bl	800eb60 <xTaskCreateStatic>
 800db74:	4603      	mov	r3, r0
 800db76:	613b      	str	r3, [r7, #16]
 800db78:	e013      	b.n	800dba2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d110      	bne.n	800dba2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800db80:	6a3b      	ldr	r3, [r7, #32]
 800db82:	b29a      	uxth	r2, r3
 800db84:	f107 0310 	add.w	r3, r7, #16
 800db88:	9301      	str	r3, [sp, #4]
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db92:	68f8      	ldr	r0, [r7, #12]
 800db94:	f001 f841 	bl	800ec1a <xTaskCreate>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d001      	beq.n	800dba2 <osThreadNew+0x11a>
            hTask = NULL;
 800db9e:	2300      	movs	r3, #0
 800dba0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dba2:	693b      	ldr	r3, [r7, #16]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3728      	adds	r7, #40	; 0x28
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbb4:	f3ef 8305 	mrs	r3, IPSR
 800dbb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d003      	beq.n	800dbc8 <osDelay+0x1c>
    stat = osErrorISR;
 800dbc0:	f06f 0305 	mvn.w	r3, #5
 800dbc4:	60fb      	str	r3, [r7, #12]
 800dbc6:	e007      	b.n	800dbd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d002      	beq.n	800dbd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f001 f980 	bl	800eed8 <vTaskDelay>
    }
  }

  return (stat);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b08a      	sub	sp, #40	; 0x28
 800dbe6:	af02      	add	r7, sp, #8
 800dbe8:	60f8      	str	r0, [r7, #12]
 800dbea:	60b9      	str	r1, [r7, #8]
 800dbec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbf2:	f3ef 8305 	mrs	r3, IPSR
 800dbf6:	613b      	str	r3, [r7, #16]
  return(result);
 800dbf8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d15f      	bne.n	800dcbe <osMessageQueueNew+0xdc>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d05c      	beq.n	800dcbe <osMessageQueueNew+0xdc>
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d059      	beq.n	800dcbe <osMessageQueueNew+0xdc>
    mem = -1;
 800dc0a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d029      	beq.n	800dc6a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d012      	beq.n	800dc44 <osMessageQueueNew+0x62>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	2b4f      	cmp	r3, #79	; 0x4f
 800dc24:	d90e      	bls.n	800dc44 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00a      	beq.n	800dc44 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	695a      	ldr	r2, [r3, #20]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	68b9      	ldr	r1, [r7, #8]
 800dc36:	fb01 f303 	mul.w	r3, r1, r3
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d302      	bcc.n	800dc44 <osMessageQueueNew+0x62>
        mem = 1;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	61bb      	str	r3, [r7, #24]
 800dc42:	e014      	b.n	800dc6e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d110      	bne.n	800dc6e <osMessageQueueNew+0x8c>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10c      	bne.n	800dc6e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d108      	bne.n	800dc6e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	695b      	ldr	r3, [r3, #20]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d104      	bne.n	800dc6e <osMessageQueueNew+0x8c>
          mem = 0;
 800dc64:	2300      	movs	r3, #0
 800dc66:	61bb      	str	r3, [r7, #24]
 800dc68:	e001      	b.n	800dc6e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d10b      	bne.n	800dc8c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	691a      	ldr	r2, [r3, #16]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	689b      	ldr	r3, [r3, #8]
 800dc7c:	2100      	movs	r1, #0
 800dc7e:	9100      	str	r1, [sp, #0]
 800dc80:	68b9      	ldr	r1, [r7, #8]
 800dc82:	68f8      	ldr	r0, [r7, #12]
 800dc84:	f000 fa2e 	bl	800e0e4 <xQueueGenericCreateStatic>
 800dc88:	61f8      	str	r0, [r7, #28]
 800dc8a:	e008      	b.n	800dc9e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800dc8c:	69bb      	ldr	r3, [r7, #24]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d105      	bne.n	800dc9e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dc92:	2200      	movs	r2, #0
 800dc94:	68b9      	ldr	r1, [r7, #8]
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f000 fa9c 	bl	800e1d4 <xQueueGenericCreate>
 800dc9c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00c      	beq.n	800dcbe <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d003      	beq.n	800dcb2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	617b      	str	r3, [r7, #20]
 800dcb0:	e001      	b.n	800dcb6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dcb6:	6979      	ldr	r1, [r7, #20]
 800dcb8:	69f8      	ldr	r0, [r7, #28]
 800dcba:	f000 fef3 	bl	800eaa4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dcbe:	69fb      	ldr	r3, [r7, #28]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3720      	adds	r7, #32
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b088      	sub	sp, #32
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	603b      	str	r3, [r7, #0]
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dce0:	f3ef 8305 	mrs	r3, IPSR
 800dce4:	617b      	str	r3, [r7, #20]
  return(result);
 800dce6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d028      	beq.n	800dd3e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d005      	beq.n	800dcfe <osMessageQueuePut+0x36>
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d002      	beq.n	800dcfe <osMessageQueuePut+0x36>
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d003      	beq.n	800dd06 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dcfe:	f06f 0303 	mvn.w	r3, #3
 800dd02:	61fb      	str	r3, [r7, #28]
 800dd04:	e038      	b.n	800dd78 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800dd06:	2300      	movs	r3, #0
 800dd08:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dd0a:	f107 0210 	add.w	r2, r7, #16
 800dd0e:	2300      	movs	r3, #0
 800dd10:	68b9      	ldr	r1, [r7, #8]
 800dd12:	69b8      	ldr	r0, [r7, #24]
 800dd14:	f000 fbba 	bl	800e48c <xQueueGenericSendFromISR>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d003      	beq.n	800dd26 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800dd1e:	f06f 0302 	mvn.w	r3, #2
 800dd22:	61fb      	str	r3, [r7, #28]
 800dd24:	e028      	b.n	800dd78 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d025      	beq.n	800dd78 <osMessageQueuePut+0xb0>
 800dd2c:	4b15      	ldr	r3, [pc, #84]	; (800dd84 <osMessageQueuePut+0xbc>)
 800dd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd32:	601a      	str	r2, [r3, #0]
 800dd34:	f3bf 8f4f 	dsb	sy
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	e01c      	b.n	800dd78 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d002      	beq.n	800dd4a <osMessageQueuePut+0x82>
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d103      	bne.n	800dd52 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800dd4a:	f06f 0303 	mvn.w	r3, #3
 800dd4e:	61fb      	str	r3, [r7, #28]
 800dd50:	e012      	b.n	800dd78 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dd52:	2300      	movs	r3, #0
 800dd54:	683a      	ldr	r2, [r7, #0]
 800dd56:	68b9      	ldr	r1, [r7, #8]
 800dd58:	69b8      	ldr	r0, [r7, #24]
 800dd5a:	f000 fa99 	bl	800e290 <xQueueGenericSend>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d009      	beq.n	800dd78 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d003      	beq.n	800dd72 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800dd6a:	f06f 0301 	mvn.w	r3, #1
 800dd6e:	61fb      	str	r3, [r7, #28]
 800dd70:	e002      	b.n	800dd78 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800dd72:	f06f 0302 	mvn.w	r3, #2
 800dd76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dd78:	69fb      	ldr	r3, [r7, #28]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3720      	adds	r7, #32
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	e000ed04 	.word	0xe000ed04

0800dd88 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b088      	sub	sp, #32
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	607a      	str	r2, [r7, #4]
 800dd94:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd9e:	f3ef 8305 	mrs	r3, IPSR
 800dda2:	617b      	str	r3, [r7, #20]
  return(result);
 800dda4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d028      	beq.n	800ddfc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d005      	beq.n	800ddbc <osMessageQueueGet+0x34>
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d002      	beq.n	800ddbc <osMessageQueueGet+0x34>
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d003      	beq.n	800ddc4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ddbc:	f06f 0303 	mvn.w	r3, #3
 800ddc0:	61fb      	str	r3, [r7, #28]
 800ddc2:	e037      	b.n	800de34 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ddc8:	f107 0310 	add.w	r3, r7, #16
 800ddcc:	461a      	mov	r2, r3
 800ddce:	68b9      	ldr	r1, [r7, #8]
 800ddd0:	69b8      	ldr	r0, [r7, #24]
 800ddd2:	f000 fcd7 	bl	800e784 <xQueueReceiveFromISR>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d003      	beq.n	800dde4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800dddc:	f06f 0302 	mvn.w	r3, #2
 800dde0:	61fb      	str	r3, [r7, #28]
 800dde2:	e027      	b.n	800de34 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d024      	beq.n	800de34 <osMessageQueueGet+0xac>
 800ddea:	4b15      	ldr	r3, [pc, #84]	; (800de40 <osMessageQueueGet+0xb8>)
 800ddec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddf0:	601a      	str	r2, [r3, #0]
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	e01b      	b.n	800de34 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d002      	beq.n	800de08 <osMessageQueueGet+0x80>
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d103      	bne.n	800de10 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800de08:	f06f 0303 	mvn.w	r3, #3
 800de0c:	61fb      	str	r3, [r7, #28]
 800de0e:	e011      	b.n	800de34 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800de10:	683a      	ldr	r2, [r7, #0]
 800de12:	68b9      	ldr	r1, [r7, #8]
 800de14:	69b8      	ldr	r0, [r7, #24]
 800de16:	f000 fbd5 	bl	800e5c4 <xQueueReceive>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d009      	beq.n	800de34 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d003      	beq.n	800de2e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800de26:	f06f 0301 	mvn.w	r3, #1
 800de2a:	61fb      	str	r3, [r7, #28]
 800de2c:	e002      	b.n	800de34 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800de2e:	f06f 0302 	mvn.w	r3, #2
 800de32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800de34:	69fb      	ldr	r3, [r7, #28]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3720      	adds	r7, #32
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	e000ed04 	.word	0xe000ed04

0800de44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	4a07      	ldr	r2, [pc, #28]	; (800de70 <vApplicationGetIdleTaskMemory+0x2c>)
 800de54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	4a06      	ldr	r2, [pc, #24]	; (800de74 <vApplicationGetIdleTaskMemory+0x30>)
 800de5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2280      	movs	r2, #128	; 0x80
 800de60:	601a      	str	r2, [r3, #0]
}
 800de62:	bf00      	nop
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	20002610 	.word	0x20002610
 800de74:	200026d0 	.word	0x200026d0

0800de78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	4a07      	ldr	r2, [pc, #28]	; (800dea4 <vApplicationGetTimerTaskMemory+0x2c>)
 800de88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	4a06      	ldr	r2, [pc, #24]	; (800dea8 <vApplicationGetTimerTaskMemory+0x30>)
 800de8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de96:	601a      	str	r2, [r3, #0]
}
 800de98:	bf00      	nop
 800de9a:	3714      	adds	r7, #20
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr
 800dea4:	200028d0 	.word	0x200028d0
 800dea8:	20002990 	.word	0x20002990

0800deac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f103 0208 	add.w	r2, r3, #8
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f04f 32ff 	mov.w	r2, #4294967295
 800dec4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f103 0208 	add.w	r2, r3, #8
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f103 0208 	add.w	r2, r3, #8
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2200      	movs	r2, #0
 800dede:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dee0:	bf00      	nop
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800defa:	bf00      	nop
 800defc:	370c      	adds	r7, #12
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr

0800df06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df06:	b480      	push	{r7}
 800df08:	b085      	sub	sp, #20
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
 800df0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	689a      	ldr	r2, [r3, #8]
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	683a      	ldr	r2, [r7, #0]
 800df2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	683a      	ldr	r2, [r7, #0]
 800df30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	1c5a      	adds	r2, r3, #1
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	601a      	str	r2, [r3, #0]
}
 800df42:	bf00      	nop
 800df44:	3714      	adds	r7, #20
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr

0800df4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df4e:	b480      	push	{r7}
 800df50:	b085      	sub	sp, #20
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
 800df56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df64:	d103      	bne.n	800df6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	691b      	ldr	r3, [r3, #16]
 800df6a:	60fb      	str	r3, [r7, #12]
 800df6c:	e00c      	b.n	800df88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	3308      	adds	r3, #8
 800df72:	60fb      	str	r3, [r7, #12]
 800df74:	e002      	b.n	800df7c <vListInsert+0x2e>
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	60fb      	str	r3, [r7, #12]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	429a      	cmp	r2, r3
 800df86:	d2f6      	bcs.n	800df76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	683a      	ldr	r2, [r7, #0]
 800df96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	68fa      	ldr	r2, [r7, #12]
 800df9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	683a      	ldr	r2, [r7, #0]
 800dfa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	1c5a      	adds	r2, r3, #1
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	601a      	str	r2, [r3, #0]
}
 800dfb4:	bf00      	nop
 800dfb6:	3714      	adds	r7, #20
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b085      	sub	sp, #20
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	6892      	ldr	r2, [r2, #8]
 800dfd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	6852      	ldr	r2, [r2, #4]
 800dfe0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d103      	bne.n	800dff4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	689a      	ldr	r2, [r3, #8]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2200      	movs	r2, #0
 800dff8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	1e5a      	subs	r2, r3, #1
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3714      	adds	r7, #20
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d10a      	bne.n	800e03e <xQueueGenericReset+0x2a>
	__asm volatile
 800e028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02c:	f383 8811 	msr	BASEPRI, r3
 800e030:	f3bf 8f6f 	isb	sy
 800e034:	f3bf 8f4f 	dsb	sy
 800e038:	60bb      	str	r3, [r7, #8]
}
 800e03a:	bf00      	nop
 800e03c:	e7fe      	b.n	800e03c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e03e:	f002 fc61 	bl	8010904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e04a:	68f9      	ldr	r1, [r7, #12]
 800e04c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e04e:	fb01 f303 	mul.w	r3, r1, r3
 800e052:	441a      	add	r2, r3
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2200      	movs	r2, #0
 800e05c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e06e:	3b01      	subs	r3, #1
 800e070:	68f9      	ldr	r1, [r7, #12]
 800e072:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e074:	fb01 f303 	mul.w	r3, r1, r3
 800e078:	441a      	add	r2, r3
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	22ff      	movs	r2, #255	; 0xff
 800e082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	22ff      	movs	r2, #255	; 0xff
 800e08a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d114      	bne.n	800e0be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	691b      	ldr	r3, [r3, #16]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d01a      	beq.n	800e0d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	3310      	adds	r3, #16
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f001 fafb 	bl	800f69c <xTaskRemoveFromEventList>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d012      	beq.n	800e0d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e0ac:	4b0c      	ldr	r3, [pc, #48]	; (800e0e0 <xQueueGenericReset+0xcc>)
 800e0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0b2:	601a      	str	r2, [r3, #0]
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	e009      	b.n	800e0d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	3310      	adds	r3, #16
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7ff fef2 	bl	800deac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	3324      	adds	r3, #36	; 0x24
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7ff feed 	bl	800deac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e0d2:	f002 fc47 	bl	8010964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e0d6:	2301      	movs	r3, #1
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	e000ed04 	.word	0xe000ed04

0800e0e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b08e      	sub	sp, #56	; 0x38
 800e0e8:	af02      	add	r7, sp, #8
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
 800e0f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10a      	bne.n	800e10e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e10a:	bf00      	nop
 800e10c:	e7fe      	b.n	800e10c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10a      	bne.n	800e12a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e118:	f383 8811 	msr	BASEPRI, r3
 800e11c:	f3bf 8f6f 	isb	sy
 800e120:	f3bf 8f4f 	dsb	sy
 800e124:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e126:	bf00      	nop
 800e128:	e7fe      	b.n	800e128 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d002      	beq.n	800e136 <xQueueGenericCreateStatic+0x52>
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d001      	beq.n	800e13a <xQueueGenericCreateStatic+0x56>
 800e136:	2301      	movs	r3, #1
 800e138:	e000      	b.n	800e13c <xQueueGenericCreateStatic+0x58>
 800e13a:	2300      	movs	r3, #0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d10a      	bne.n	800e156 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	623b      	str	r3, [r7, #32]
}
 800e152:	bf00      	nop
 800e154:	e7fe      	b.n	800e154 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d102      	bne.n	800e162 <xQueueGenericCreateStatic+0x7e>
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d101      	bne.n	800e166 <xQueueGenericCreateStatic+0x82>
 800e162:	2301      	movs	r3, #1
 800e164:	e000      	b.n	800e168 <xQueueGenericCreateStatic+0x84>
 800e166:	2300      	movs	r3, #0
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d10a      	bne.n	800e182 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e170:	f383 8811 	msr	BASEPRI, r3
 800e174:	f3bf 8f6f 	isb	sy
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	61fb      	str	r3, [r7, #28]
}
 800e17e:	bf00      	nop
 800e180:	e7fe      	b.n	800e180 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e182:	2350      	movs	r3, #80	; 0x50
 800e184:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	2b50      	cmp	r3, #80	; 0x50
 800e18a:	d00a      	beq.n	800e1a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e190:	f383 8811 	msr	BASEPRI, r3
 800e194:	f3bf 8f6f 	isb	sy
 800e198:	f3bf 8f4f 	dsb	sy
 800e19c:	61bb      	str	r3, [r7, #24]
}
 800e19e:	bf00      	nop
 800e1a0:	e7fe      	b.n	800e1a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e1a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d00d      	beq.n	800e1ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e1b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	68b9      	ldr	r1, [r7, #8]
 800e1c4:	68f8      	ldr	r0, [r7, #12]
 800e1c6:	f000 f83f 	bl	800e248 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3730      	adds	r7, #48	; 0x30
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b08a      	sub	sp, #40	; 0x28
 800e1d8:	af02      	add	r7, sp, #8
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	4613      	mov	r3, r2
 800e1e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10a      	bne.n	800e1fe <xQueueGenericCreate+0x2a>
	__asm volatile
 800e1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ec:	f383 8811 	msr	BASEPRI, r3
 800e1f0:	f3bf 8f6f 	isb	sy
 800e1f4:	f3bf 8f4f 	dsb	sy
 800e1f8:	613b      	str	r3, [r7, #16]
}
 800e1fa:	bf00      	nop
 800e1fc:	e7fe      	b.n	800e1fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	fb02 f303 	mul.w	r3, r2, r3
 800e206:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	3350      	adds	r3, #80	; 0x50
 800e20c:	4618      	mov	r0, r3
 800e20e:	f002 fc9b 	bl	8010b48 <pvPortMalloc>
 800e212:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e214:	69bb      	ldr	r3, [r7, #24]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d011      	beq.n	800e23e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	3350      	adds	r3, #80	; 0x50
 800e222:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	2200      	movs	r2, #0
 800e228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e22c:	79fa      	ldrb	r2, [r7, #7]
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	9300      	str	r3, [sp, #0]
 800e232:	4613      	mov	r3, r2
 800e234:	697a      	ldr	r2, [r7, #20]
 800e236:	68b9      	ldr	r1, [r7, #8]
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f000 f805 	bl	800e248 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e23e:	69bb      	ldr	r3, [r7, #24]
	}
 800e240:	4618      	mov	r0, r3
 800e242:	3720      	adds	r7, #32
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	607a      	str	r2, [r7, #4]
 800e254:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d103      	bne.n	800e264 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e25c:	69bb      	ldr	r3, [r7, #24]
 800e25e:	69ba      	ldr	r2, [r7, #24]
 800e260:	601a      	str	r2, [r3, #0]
 800e262:	e002      	b.n	800e26a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e264:	69bb      	ldr	r3, [r7, #24]
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	68fa      	ldr	r2, [r7, #12]
 800e26e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e276:	2101      	movs	r1, #1
 800e278:	69b8      	ldr	r0, [r7, #24]
 800e27a:	f7ff fecb 	bl	800e014 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	78fa      	ldrb	r2, [r7, #3]
 800e282:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e286:	bf00      	nop
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
	...

0800e290 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b08e      	sub	sp, #56	; 0x38
 800e294:	af00      	add	r7, sp, #0
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	60b9      	str	r1, [r7, #8]
 800e29a:	607a      	str	r2, [r7, #4]
 800e29c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d10a      	bne.n	800e2c2 <xQueueGenericSend+0x32>
	__asm volatile
 800e2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b0:	f383 8811 	msr	BASEPRI, r3
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e2be:	bf00      	nop
 800e2c0:	e7fe      	b.n	800e2c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d103      	bne.n	800e2d0 <xQueueGenericSend+0x40>
 800e2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d101      	bne.n	800e2d4 <xQueueGenericSend+0x44>
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	e000      	b.n	800e2d6 <xQueueGenericSend+0x46>
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d10a      	bne.n	800e2f0 <xQueueGenericSend+0x60>
	__asm volatile
 800e2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2de:	f383 8811 	msr	BASEPRI, r3
 800e2e2:	f3bf 8f6f 	isb	sy
 800e2e6:	f3bf 8f4f 	dsb	sy
 800e2ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e2ec:	bf00      	nop
 800e2ee:	e7fe      	b.n	800e2ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	2b02      	cmp	r3, #2
 800e2f4:	d103      	bne.n	800e2fe <xQueueGenericSend+0x6e>
 800e2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d101      	bne.n	800e302 <xQueueGenericSend+0x72>
 800e2fe:	2301      	movs	r3, #1
 800e300:	e000      	b.n	800e304 <xQueueGenericSend+0x74>
 800e302:	2300      	movs	r3, #0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d10a      	bne.n	800e31e <xQueueGenericSend+0x8e>
	__asm volatile
 800e308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30c:	f383 8811 	msr	BASEPRI, r3
 800e310:	f3bf 8f6f 	isb	sy
 800e314:	f3bf 8f4f 	dsb	sy
 800e318:	623b      	str	r3, [r7, #32]
}
 800e31a:	bf00      	nop
 800e31c:	e7fe      	b.n	800e31c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e31e:	f001 fc55 	bl	800fbcc <xTaskGetSchedulerState>
 800e322:	4603      	mov	r3, r0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d102      	bne.n	800e32e <xQueueGenericSend+0x9e>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d101      	bne.n	800e332 <xQueueGenericSend+0xa2>
 800e32e:	2301      	movs	r3, #1
 800e330:	e000      	b.n	800e334 <xQueueGenericSend+0xa4>
 800e332:	2300      	movs	r3, #0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d10a      	bne.n	800e34e <xQueueGenericSend+0xbe>
	__asm volatile
 800e338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33c:	f383 8811 	msr	BASEPRI, r3
 800e340:	f3bf 8f6f 	isb	sy
 800e344:	f3bf 8f4f 	dsb	sy
 800e348:	61fb      	str	r3, [r7, #28]
}
 800e34a:	bf00      	nop
 800e34c:	e7fe      	b.n	800e34c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e34e:	f002 fad9 	bl	8010904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d302      	bcc.n	800e364 <xQueueGenericSend+0xd4>
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	2b02      	cmp	r3, #2
 800e362:	d129      	bne.n	800e3b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e364:	683a      	ldr	r2, [r7, #0]
 800e366:	68b9      	ldr	r1, [r7, #8]
 800e368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e36a:	f000 fa8b 	bl	800e884 <prvCopyDataToQueue>
 800e36e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e374:	2b00      	cmp	r3, #0
 800e376:	d010      	beq.n	800e39a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37a:	3324      	adds	r3, #36	; 0x24
 800e37c:	4618      	mov	r0, r3
 800e37e:	f001 f98d 	bl	800f69c <xTaskRemoveFromEventList>
 800e382:	4603      	mov	r3, r0
 800e384:	2b00      	cmp	r3, #0
 800e386:	d013      	beq.n	800e3b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e388:	4b3f      	ldr	r3, [pc, #252]	; (800e488 <xQueueGenericSend+0x1f8>)
 800e38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e38e:	601a      	str	r2, [r3, #0]
 800e390:	f3bf 8f4f 	dsb	sy
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	e00a      	b.n	800e3b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d007      	beq.n	800e3b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e3a0:	4b39      	ldr	r3, [pc, #228]	; (800e488 <xQueueGenericSend+0x1f8>)
 800e3a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3a6:	601a      	str	r2, [r3, #0]
 800e3a8:	f3bf 8f4f 	dsb	sy
 800e3ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e3b0:	f002 fad8 	bl	8010964 <vPortExitCritical>
				return pdPASS;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e063      	b.n	800e480 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d103      	bne.n	800e3c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e3be:	f002 fad1 	bl	8010964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	e05c      	b.n	800e480 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d106      	bne.n	800e3da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e3cc:	f107 0314 	add.w	r3, r7, #20
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f001 f9c7 	bl	800f764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3da:	f002 fac3 	bl	8010964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3de:	f000 fe87 	bl	800f0f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3e2:	f002 fa8f 	bl	8010904 <vPortEnterCritical>
 800e3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3ec:	b25b      	sxtb	r3, r3
 800e3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3f2:	d103      	bne.n	800e3fc <xQueueGenericSend+0x16c>
 800e3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e402:	b25b      	sxtb	r3, r3
 800e404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e408:	d103      	bne.n	800e412 <xQueueGenericSend+0x182>
 800e40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40c:	2200      	movs	r2, #0
 800e40e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e412:	f002 faa7 	bl	8010964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e416:	1d3a      	adds	r2, r7, #4
 800e418:	f107 0314 	add.w	r3, r7, #20
 800e41c:	4611      	mov	r1, r2
 800e41e:	4618      	mov	r0, r3
 800e420:	f001 f9b6 	bl	800f790 <xTaskCheckForTimeOut>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d124      	bne.n	800e474 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e42a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e42c:	f000 fb22 	bl	800ea74 <prvIsQueueFull>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d018      	beq.n	800e468 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e438:	3310      	adds	r3, #16
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	4611      	mov	r1, r2
 800e43e:	4618      	mov	r0, r3
 800e440:	f001 f8dc 	bl	800f5fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e446:	f000 faad 	bl	800e9a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e44a:	f000 fe5f 	bl	800f10c <xTaskResumeAll>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	f47f af7c 	bne.w	800e34e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e456:	4b0c      	ldr	r3, [pc, #48]	; (800e488 <xQueueGenericSend+0x1f8>)
 800e458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e45c:	601a      	str	r2, [r3, #0]
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	f3bf 8f6f 	isb	sy
 800e466:	e772      	b.n	800e34e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e46a:	f000 fa9b 	bl	800e9a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e46e:	f000 fe4d 	bl	800f10c <xTaskResumeAll>
 800e472:	e76c      	b.n	800e34e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e476:	f000 fa95 	bl	800e9a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e47a:	f000 fe47 	bl	800f10c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e47e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e480:	4618      	mov	r0, r3
 800e482:	3738      	adds	r7, #56	; 0x38
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	e000ed04 	.word	0xe000ed04

0800e48c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b090      	sub	sp, #64	; 0x40
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	607a      	str	r2, [r7, #4]
 800e498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d10a      	bne.n	800e4ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a8:	f383 8811 	msr	BASEPRI, r3
 800e4ac:	f3bf 8f6f 	isb	sy
 800e4b0:	f3bf 8f4f 	dsb	sy
 800e4b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e4b6:	bf00      	nop
 800e4b8:	e7fe      	b.n	800e4b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d103      	bne.n	800e4c8 <xQueueGenericSendFromISR+0x3c>
 800e4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d101      	bne.n	800e4cc <xQueueGenericSendFromISR+0x40>
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e000      	b.n	800e4ce <xQueueGenericSendFromISR+0x42>
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d10a      	bne.n	800e4e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d6:	f383 8811 	msr	BASEPRI, r3
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	f3bf 8f4f 	dsb	sy
 800e4e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e4e4:	bf00      	nop
 800e4e6:	e7fe      	b.n	800e4e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	2b02      	cmp	r3, #2
 800e4ec:	d103      	bne.n	800e4f6 <xQueueGenericSendFromISR+0x6a>
 800e4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d101      	bne.n	800e4fa <xQueueGenericSendFromISR+0x6e>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	e000      	b.n	800e4fc <xQueueGenericSendFromISR+0x70>
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d10a      	bne.n	800e516 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e504:	f383 8811 	msr	BASEPRI, r3
 800e508:	f3bf 8f6f 	isb	sy
 800e50c:	f3bf 8f4f 	dsb	sy
 800e510:	623b      	str	r3, [r7, #32]
}
 800e512:	bf00      	nop
 800e514:	e7fe      	b.n	800e514 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e516:	f002 fad7 	bl	8010ac8 <vPortValidateInterruptPriority>
	__asm volatile
 800e51a:	f3ef 8211 	mrs	r2, BASEPRI
 800e51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	61fa      	str	r2, [r7, #28]
 800e530:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e532:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e534:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e53e:	429a      	cmp	r2, r3
 800e540:	d302      	bcc.n	800e548 <xQueueGenericSendFromISR+0xbc>
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	2b02      	cmp	r3, #2
 800e546:	d12f      	bne.n	800e5a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e556:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e558:	683a      	ldr	r2, [r7, #0]
 800e55a:	68b9      	ldr	r1, [r7, #8]
 800e55c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e55e:	f000 f991 	bl	800e884 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e562:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e56a:	d112      	bne.n	800e592 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e570:	2b00      	cmp	r3, #0
 800e572:	d016      	beq.n	800e5a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e576:	3324      	adds	r3, #36	; 0x24
 800e578:	4618      	mov	r0, r3
 800e57a:	f001 f88f 	bl	800f69c <xTaskRemoveFromEventList>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00e      	beq.n	800e5a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00b      	beq.n	800e5a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2201      	movs	r2, #1
 800e58e:	601a      	str	r2, [r3, #0]
 800e590:	e007      	b.n	800e5a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e592:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e596:	3301      	adds	r3, #1
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	b25a      	sxtb	r2, r3
 800e59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e5a6:	e001      	b.n	800e5ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ae:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	f383 8811 	msr	BASEPRI, r3
}
 800e5b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3740      	adds	r7, #64	; 0x40
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
	...

0800e5c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b08c      	sub	sp, #48	; 0x30
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	60f8      	str	r0, [r7, #12]
 800e5cc:	60b9      	str	r1, [r7, #8]
 800e5ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d10a      	bne.n	800e5f4 <xQueueReceive+0x30>
	__asm volatile
 800e5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	623b      	str	r3, [r7, #32]
}
 800e5f0:	bf00      	nop
 800e5f2:	e7fe      	b.n	800e5f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d103      	bne.n	800e602 <xQueueReceive+0x3e>
 800e5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d101      	bne.n	800e606 <xQueueReceive+0x42>
 800e602:	2301      	movs	r3, #1
 800e604:	e000      	b.n	800e608 <xQueueReceive+0x44>
 800e606:	2300      	movs	r3, #0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d10a      	bne.n	800e622 <xQueueReceive+0x5e>
	__asm volatile
 800e60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e610:	f383 8811 	msr	BASEPRI, r3
 800e614:	f3bf 8f6f 	isb	sy
 800e618:	f3bf 8f4f 	dsb	sy
 800e61c:	61fb      	str	r3, [r7, #28]
}
 800e61e:	bf00      	nop
 800e620:	e7fe      	b.n	800e620 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e622:	f001 fad3 	bl	800fbcc <xTaskGetSchedulerState>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d102      	bne.n	800e632 <xQueueReceive+0x6e>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d101      	bne.n	800e636 <xQueueReceive+0x72>
 800e632:	2301      	movs	r3, #1
 800e634:	e000      	b.n	800e638 <xQueueReceive+0x74>
 800e636:	2300      	movs	r3, #0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10a      	bne.n	800e652 <xQueueReceive+0x8e>
	__asm volatile
 800e63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e640:	f383 8811 	msr	BASEPRI, r3
 800e644:	f3bf 8f6f 	isb	sy
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	61bb      	str	r3, [r7, #24]
}
 800e64e:	bf00      	nop
 800e650:	e7fe      	b.n	800e650 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e652:	f002 f957 	bl	8010904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e65a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d01f      	beq.n	800e6a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e662:	68b9      	ldr	r1, [r7, #8]
 800e664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e666:	f000 f977 	bl	800e958 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66c:	1e5a      	subs	r2, r3, #1
 800e66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e670:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e674:	691b      	ldr	r3, [r3, #16]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d00f      	beq.n	800e69a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67c:	3310      	adds	r3, #16
 800e67e:	4618      	mov	r0, r3
 800e680:	f001 f80c 	bl	800f69c <xTaskRemoveFromEventList>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d007      	beq.n	800e69a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e68a:	4b3d      	ldr	r3, [pc, #244]	; (800e780 <xQueueReceive+0x1bc>)
 800e68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e690:	601a      	str	r2, [r3, #0]
 800e692:	f3bf 8f4f 	dsb	sy
 800e696:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e69a:	f002 f963 	bl	8010964 <vPortExitCritical>
				return pdPASS;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e069      	b.n	800e776 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d103      	bne.n	800e6b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e6a8:	f002 f95c 	bl	8010964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	e062      	b.n	800e776 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d106      	bne.n	800e6c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6b6:	f107 0310 	add.w	r3, r7, #16
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f001 f852 	bl	800f764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e6c4:	f002 f94e 	bl	8010964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e6c8:	f000 fd12 	bl	800f0f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6cc:	f002 f91a 	bl	8010904 <vPortEnterCritical>
 800e6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6d6:	b25b      	sxtb	r3, r3
 800e6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6dc:	d103      	bne.n	800e6e6 <xQueueReceive+0x122>
 800e6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6ec:	b25b      	sxtb	r3, r3
 800e6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6f2:	d103      	bne.n	800e6fc <xQueueReceive+0x138>
 800e6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6fc:	f002 f932 	bl	8010964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e700:	1d3a      	adds	r2, r7, #4
 800e702:	f107 0310 	add.w	r3, r7, #16
 800e706:	4611      	mov	r1, r2
 800e708:	4618      	mov	r0, r3
 800e70a:	f001 f841 	bl	800f790 <xTaskCheckForTimeOut>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	d123      	bne.n	800e75c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e716:	f000 f997 	bl	800ea48 <prvIsQueueEmpty>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d017      	beq.n	800e750 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e722:	3324      	adds	r3, #36	; 0x24
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	4611      	mov	r1, r2
 800e728:	4618      	mov	r0, r3
 800e72a:	f000 ff67 	bl	800f5fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e72e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e730:	f000 f938 	bl	800e9a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e734:	f000 fcea 	bl	800f10c <xTaskResumeAll>
 800e738:	4603      	mov	r3, r0
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d189      	bne.n	800e652 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e73e:	4b10      	ldr	r3, [pc, #64]	; (800e780 <xQueueReceive+0x1bc>)
 800e740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e744:	601a      	str	r2, [r3, #0]
 800e746:	f3bf 8f4f 	dsb	sy
 800e74a:	f3bf 8f6f 	isb	sy
 800e74e:	e780      	b.n	800e652 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e752:	f000 f927 	bl	800e9a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e756:	f000 fcd9 	bl	800f10c <xTaskResumeAll>
 800e75a:	e77a      	b.n	800e652 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e75e:	f000 f921 	bl	800e9a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e762:	f000 fcd3 	bl	800f10c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e768:	f000 f96e 	bl	800ea48 <prvIsQueueEmpty>
 800e76c:	4603      	mov	r3, r0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f43f af6f 	beq.w	800e652 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e774:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e776:	4618      	mov	r0, r3
 800e778:	3730      	adds	r7, #48	; 0x30
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	e000ed04 	.word	0xe000ed04

0800e784 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b08e      	sub	sp, #56	; 0x38
 800e788:	af00      	add	r7, sp, #0
 800e78a:	60f8      	str	r0, [r7, #12]
 800e78c:	60b9      	str	r1, [r7, #8]
 800e78e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10a      	bne.n	800e7b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79e:	f383 8811 	msr	BASEPRI, r3
 800e7a2:	f3bf 8f6f 	isb	sy
 800e7a6:	f3bf 8f4f 	dsb	sy
 800e7aa:	623b      	str	r3, [r7, #32]
}
 800e7ac:	bf00      	nop
 800e7ae:	e7fe      	b.n	800e7ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d103      	bne.n	800e7be <xQueueReceiveFromISR+0x3a>
 800e7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d101      	bne.n	800e7c2 <xQueueReceiveFromISR+0x3e>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e000      	b.n	800e7c4 <xQueueReceiveFromISR+0x40>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d10a      	bne.n	800e7de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7cc:	f383 8811 	msr	BASEPRI, r3
 800e7d0:	f3bf 8f6f 	isb	sy
 800e7d4:	f3bf 8f4f 	dsb	sy
 800e7d8:	61fb      	str	r3, [r7, #28]
}
 800e7da:	bf00      	nop
 800e7dc:	e7fe      	b.n	800e7dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7de:	f002 f973 	bl	8010ac8 <vPortValidateInterruptPriority>
	__asm volatile
 800e7e2:	f3ef 8211 	mrs	r2, BASEPRI
 800e7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ea:	f383 8811 	msr	BASEPRI, r3
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	61ba      	str	r2, [r7, #24]
 800e7f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e7fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e802:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e806:	2b00      	cmp	r3, #0
 800e808:	d02f      	beq.n	800e86a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e814:	68b9      	ldr	r1, [r7, #8]
 800e816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e818:	f000 f89e 	bl	800e958 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81e:	1e5a      	subs	r2, r3, #1
 800e820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e822:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82c:	d112      	bne.n	800e854 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	691b      	ldr	r3, [r3, #16]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d016      	beq.n	800e864 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e838:	3310      	adds	r3, #16
 800e83a:	4618      	mov	r0, r3
 800e83c:	f000 ff2e 	bl	800f69c <xTaskRemoveFromEventList>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d00e      	beq.n	800e864 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d00b      	beq.n	800e864 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2201      	movs	r2, #1
 800e850:	601a      	str	r2, [r3, #0]
 800e852:	e007      	b.n	800e864 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e858:	3301      	adds	r3, #1
 800e85a:	b2db      	uxtb	r3, r3
 800e85c:	b25a      	sxtb	r2, r3
 800e85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e864:	2301      	movs	r3, #1
 800e866:	637b      	str	r3, [r7, #52]	; 0x34
 800e868:	e001      	b.n	800e86e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e86a:	2300      	movs	r3, #0
 800e86c:	637b      	str	r3, [r7, #52]	; 0x34
 800e86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e870:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	f383 8811 	msr	BASEPRI, r3
}
 800e878:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3738      	adds	r7, #56	; 0x38
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b086      	sub	sp, #24
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e890:	2300      	movs	r3, #0
 800e892:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e898:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10d      	bne.n	800e8be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d14d      	bne.n	800e946 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	689b      	ldr	r3, [r3, #8]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f001 f9aa 	bl	800fc08 <xTaskPriorityDisinherit>
 800e8b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	609a      	str	r2, [r3, #8]
 800e8bc:	e043      	b.n	800e946 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d119      	bne.n	800e8f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6858      	ldr	r0, [r3, #4]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	68b9      	ldr	r1, [r7, #8]
 800e8d0:	f003 f86e 	bl	80119b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	685a      	ldr	r2, [r3, #4]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8dc:	441a      	add	r2, r3
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	685a      	ldr	r2, [r3, #4]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d32b      	bcc.n	800e946 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	605a      	str	r2, [r3, #4]
 800e8f6:	e026      	b.n	800e946 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	68d8      	ldr	r0, [r3, #12]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e900:	461a      	mov	r2, r3
 800e902:	68b9      	ldr	r1, [r7, #8]
 800e904:	f003 f854 	bl	80119b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	68da      	ldr	r2, [r3, #12]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e910:	425b      	negs	r3, r3
 800e912:	441a      	add	r2, r3
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	68da      	ldr	r2, [r3, #12]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	429a      	cmp	r2, r3
 800e922:	d207      	bcs.n	800e934 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	689a      	ldr	r2, [r3, #8]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e92c:	425b      	negs	r3, r3
 800e92e:	441a      	add	r2, r3
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b02      	cmp	r3, #2
 800e938:	d105      	bne.n	800e946 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d002      	beq.n	800e946 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	3b01      	subs	r3, #1
 800e944:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	1c5a      	adds	r2, r3, #1
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e94e:	697b      	ldr	r3, [r7, #20]
}
 800e950:	4618      	mov	r0, r3
 800e952:	3718      	adds	r7, #24
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e966:	2b00      	cmp	r3, #0
 800e968:	d018      	beq.n	800e99c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	68da      	ldr	r2, [r3, #12]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e972:	441a      	add	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	68da      	ldr	r2, [r3, #12]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	429a      	cmp	r2, r3
 800e982:	d303      	bcc.n	800e98c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	68d9      	ldr	r1, [r3, #12]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e994:	461a      	mov	r2, r3
 800e996:	6838      	ldr	r0, [r7, #0]
 800e998:	f003 f80a 	bl	80119b0 <memcpy>
	}
}
 800e99c:	bf00      	nop
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e9ac:	f001 ffaa 	bl	8010904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9b8:	e011      	b.n	800e9de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d012      	beq.n	800e9e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	3324      	adds	r3, #36	; 0x24
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f000 fe68 	bl	800f69c <xTaskRemoveFromEventList>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d001      	beq.n	800e9d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e9d2:	f000 ff3f 	bl	800f854 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e9d6:	7bfb      	ldrb	r3, [r7, #15]
 800e9d8:	3b01      	subs	r3, #1
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	dce9      	bgt.n	800e9ba <prvUnlockQueue+0x16>
 800e9e6:	e000      	b.n	800e9ea <prvUnlockQueue+0x46>
					break;
 800e9e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	22ff      	movs	r2, #255	; 0xff
 800e9ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e9f2:	f001 ffb7 	bl	8010964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e9f6:	f001 ff85 	bl	8010904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea02:	e011      	b.n	800ea28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	691b      	ldr	r3, [r3, #16]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d012      	beq.n	800ea32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3310      	adds	r3, #16
 800ea10:	4618      	mov	r0, r3
 800ea12:	f000 fe43 	bl	800f69c <xTaskRemoveFromEventList>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d001      	beq.n	800ea20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ea1c:	f000 ff1a 	bl	800f854 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ea20:	7bbb      	ldrb	r3, [r7, #14]
 800ea22:	3b01      	subs	r3, #1
 800ea24:	b2db      	uxtb	r3, r3
 800ea26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	dce9      	bgt.n	800ea04 <prvUnlockQueue+0x60>
 800ea30:	e000      	b.n	800ea34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ea32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	22ff      	movs	r2, #255	; 0xff
 800ea38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ea3c:	f001 ff92 	bl	8010964 <vPortExitCritical>
}
 800ea40:	bf00      	nop
 800ea42:	3710      	adds	r7, #16
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea50:	f001 ff58 	bl	8010904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d102      	bne.n	800ea62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	60fb      	str	r3, [r7, #12]
 800ea60:	e001      	b.n	800ea66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ea62:	2300      	movs	r3, #0
 800ea64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea66:	f001 ff7d 	bl	8010964 <vPortExitCritical>

	return xReturn;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3710      	adds	r7, #16
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea7c:	f001 ff42 	bl	8010904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d102      	bne.n	800ea92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	60fb      	str	r3, [r7, #12]
 800ea90:	e001      	b.n	800ea96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ea92:	2300      	movs	r3, #0
 800ea94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea96:	f001 ff65 	bl	8010964 <vPortExitCritical>

	return xReturn;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b085      	sub	sp, #20
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eaae:	2300      	movs	r3, #0
 800eab0:	60fb      	str	r3, [r7, #12]
 800eab2:	e014      	b.n	800eade <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eab4:	4a0f      	ldr	r2, [pc, #60]	; (800eaf4 <vQueueAddToRegistry+0x50>)
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d10b      	bne.n	800ead8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eac0:	490c      	ldr	r1, [pc, #48]	; (800eaf4 <vQueueAddToRegistry+0x50>)
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	683a      	ldr	r2, [r7, #0]
 800eac6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eaca:	4a0a      	ldr	r2, [pc, #40]	; (800eaf4 <vQueueAddToRegistry+0x50>)
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	00db      	lsls	r3, r3, #3
 800ead0:	4413      	add	r3, r2
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ead6:	e006      	b.n	800eae6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	3301      	adds	r3, #1
 800eadc:	60fb      	str	r3, [r7, #12]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2b07      	cmp	r3, #7
 800eae2:	d9e7      	bls.n	800eab4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eae4:	bf00      	nop
 800eae6:	bf00      	nop
 800eae8:	3714      	adds	r7, #20
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop
 800eaf4:	20002d90 	.word	0x20002d90

0800eaf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eb08:	f001 fefc 	bl	8010904 <vPortEnterCritical>
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb12:	b25b      	sxtb	r3, r3
 800eb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb18:	d103      	bne.n	800eb22 <vQueueWaitForMessageRestricted+0x2a>
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb28:	b25b      	sxtb	r3, r3
 800eb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb2e:	d103      	bne.n	800eb38 <vQueueWaitForMessageRestricted+0x40>
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	2200      	movs	r2, #0
 800eb34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb38:	f001 ff14 	bl	8010964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d106      	bne.n	800eb52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	3324      	adds	r3, #36	; 0x24
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	68b9      	ldr	r1, [r7, #8]
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f000 fd79 	bl	800f644 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eb52:	6978      	ldr	r0, [r7, #20]
 800eb54:	f7ff ff26 	bl	800e9a4 <prvUnlockQueue>
	}
 800eb58:	bf00      	nop
 800eb5a:	3718      	adds	r7, #24
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b08e      	sub	sp, #56	; 0x38
 800eb64:	af04      	add	r7, sp, #16
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]
 800eb6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d10a      	bne.n	800eb8a <xTaskCreateStatic+0x2a>
	__asm volatile
 800eb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	623b      	str	r3, [r7, #32]
}
 800eb86:	bf00      	nop
 800eb88:	e7fe      	b.n	800eb88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800eb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d10a      	bne.n	800eba6 <xTaskCreateStatic+0x46>
	__asm volatile
 800eb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb94:	f383 8811 	msr	BASEPRI, r3
 800eb98:	f3bf 8f6f 	isb	sy
 800eb9c:	f3bf 8f4f 	dsb	sy
 800eba0:	61fb      	str	r3, [r7, #28]
}
 800eba2:	bf00      	nop
 800eba4:	e7fe      	b.n	800eba4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eba6:	23c0      	movs	r3, #192	; 0xc0
 800eba8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	2bc0      	cmp	r3, #192	; 0xc0
 800ebae:	d00a      	beq.n	800ebc6 <xTaskCreateStatic+0x66>
	__asm volatile
 800ebb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb4:	f383 8811 	msr	BASEPRI, r3
 800ebb8:	f3bf 8f6f 	isb	sy
 800ebbc:	f3bf 8f4f 	dsb	sy
 800ebc0:	61bb      	str	r3, [r7, #24]
}
 800ebc2:	bf00      	nop
 800ebc4:	e7fe      	b.n	800ebc4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ebc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ebc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d01e      	beq.n	800ec0c <xTaskCreateStatic+0xac>
 800ebce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d01b      	beq.n	800ec0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ebd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ebde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe0:	2202      	movs	r2, #2
 800ebe2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	9303      	str	r3, [sp, #12]
 800ebea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebec:	9302      	str	r3, [sp, #8]
 800ebee:	f107 0314 	add.w	r3, r7, #20
 800ebf2:	9301      	str	r3, [sp, #4]
 800ebf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	68b9      	ldr	r1, [r7, #8]
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	f000 f850 	bl	800eca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec06:	f000 f8f7 	bl	800edf8 <prvAddNewTaskToReadyList>
 800ec0a:	e001      	b.n	800ec10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ec10:	697b      	ldr	r3, [r7, #20]
	}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3728      	adds	r7, #40	; 0x28
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b08c      	sub	sp, #48	; 0x30
 800ec1e:	af04      	add	r7, sp, #16
 800ec20:	60f8      	str	r0, [r7, #12]
 800ec22:	60b9      	str	r1, [r7, #8]
 800ec24:	603b      	str	r3, [r7, #0]
 800ec26:	4613      	mov	r3, r2
 800ec28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec2a:	88fb      	ldrh	r3, [r7, #6]
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f001 ff8a 	bl	8010b48 <pvPortMalloc>
 800ec34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d00e      	beq.n	800ec5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ec3c:	20c0      	movs	r0, #192	; 0xc0
 800ec3e:	f001 ff83 	bl	8010b48 <pvPortMalloc>
 800ec42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d003      	beq.n	800ec52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	697a      	ldr	r2, [r7, #20]
 800ec4e:	631a      	str	r2, [r3, #48]	; 0x30
 800ec50:	e005      	b.n	800ec5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ec52:	6978      	ldr	r0, [r7, #20]
 800ec54:	f002 f844 	bl	8010ce0 <vPortFree>
 800ec58:	e001      	b.n	800ec5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d017      	beq.n	800ec94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	2200      	movs	r2, #0
 800ec68:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ec6c:	88fa      	ldrh	r2, [r7, #6]
 800ec6e:	2300      	movs	r3, #0
 800ec70:	9303      	str	r3, [sp, #12]
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	9302      	str	r3, [sp, #8]
 800ec76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec78:	9301      	str	r3, [sp, #4]
 800ec7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7c:	9300      	str	r3, [sp, #0]
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	68b9      	ldr	r1, [r7, #8]
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	f000 f80e 	bl	800eca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec88:	69f8      	ldr	r0, [r7, #28]
 800ec8a:	f000 f8b5 	bl	800edf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	61bb      	str	r3, [r7, #24]
 800ec92:	e002      	b.n	800ec9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ec94:	f04f 33ff 	mov.w	r3, #4294967295
 800ec98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ec9a:	69bb      	ldr	r3, [r7, #24]
	}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3720      	adds	r7, #32
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b088      	sub	sp, #32
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]
 800ecb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	009b      	lsls	r3, r3, #2
 800ecba:	461a      	mov	r2, r3
 800ecbc:	21a5      	movs	r1, #165	; 0xa5
 800ecbe:	f002 fe85 	bl	80119cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ecc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eccc:	3b01      	subs	r3, #1
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	4413      	add	r3, r2
 800ecd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	f023 0307 	bic.w	r3, r3, #7
 800ecda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	f003 0307 	and.w	r3, r3, #7
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d00a      	beq.n	800ecfc <prvInitialiseNewTask+0x58>
	__asm volatile
 800ece6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecea:	f383 8811 	msr	BASEPRI, r3
 800ecee:	f3bf 8f6f 	isb	sy
 800ecf2:	f3bf 8f4f 	dsb	sy
 800ecf6:	617b      	str	r3, [r7, #20]
}
 800ecf8:	bf00      	nop
 800ecfa:	e7fe      	b.n	800ecfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d01f      	beq.n	800ed42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed02:	2300      	movs	r3, #0
 800ed04:	61fb      	str	r3, [r7, #28]
 800ed06:	e012      	b.n	800ed2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ed08:	68ba      	ldr	r2, [r7, #8]
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	7819      	ldrb	r1, [r3, #0]
 800ed10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	4413      	add	r3, r2
 800ed16:	3334      	adds	r3, #52	; 0x34
 800ed18:	460a      	mov	r2, r1
 800ed1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	69fb      	ldr	r3, [r7, #28]
 800ed20:	4413      	add	r3, r2
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d006      	beq.n	800ed36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	61fb      	str	r3, [r7, #28]
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	2b0f      	cmp	r3, #15
 800ed32:	d9e9      	bls.n	800ed08 <prvInitialiseNewTask+0x64>
 800ed34:	e000      	b.n	800ed38 <prvInitialiseNewTask+0x94>
			{
				break;
 800ed36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed40:	e003      	b.n	800ed4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ed42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed44:	2200      	movs	r2, #0
 800ed46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4c:	2b37      	cmp	r3, #55	; 0x37
 800ed4e:	d901      	bls.n	800ed54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed50:	2337      	movs	r3, #55	; 0x37
 800ed52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ed54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ed5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ed60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed62:	2200      	movs	r2, #0
 800ed64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ed66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed68:	3304      	adds	r3, #4
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7ff f8be 	bl	800deec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ed70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed72:	3318      	adds	r3, #24
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7ff f8b9 	bl	800deec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ed8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ed90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed92:	2200      	movs	r2, #0
 800ed94:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ed96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed98:	2200      	movs	r2, #0
 800ed9a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ed9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda0:	2200      	movs	r2, #0
 800eda2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda8:	3358      	adds	r3, #88	; 0x58
 800edaa:	2260      	movs	r2, #96	; 0x60
 800edac:	2100      	movs	r1, #0
 800edae:	4618      	mov	r0, r3
 800edb0:	f002 fe0c 	bl	80119cc <memset>
 800edb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb6:	4a0d      	ldr	r2, [pc, #52]	; (800edec <prvInitialiseNewTask+0x148>)
 800edb8:	65da      	str	r2, [r3, #92]	; 0x5c
 800edba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbc:	4a0c      	ldr	r2, [pc, #48]	; (800edf0 <prvInitialiseNewTask+0x14c>)
 800edbe:	661a      	str	r2, [r3, #96]	; 0x60
 800edc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc2:	4a0c      	ldr	r2, [pc, #48]	; (800edf4 <prvInitialiseNewTask+0x150>)
 800edc4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800edc6:	683a      	ldr	r2, [r7, #0]
 800edc8:	68f9      	ldr	r1, [r7, #12]
 800edca:	69b8      	ldr	r0, [r7, #24]
 800edcc:	f001 fc6c 	bl	80106a8 <pxPortInitialiseStack>
 800edd0:	4602      	mov	r2, r0
 800edd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800edd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d002      	beq.n	800ede2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ede0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ede2:	bf00      	nop
 800ede4:	3720      	adds	r7, #32
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	08014a0c 	.word	0x08014a0c
 800edf0:	08014a2c 	.word	0x08014a2c
 800edf4:	080149ec 	.word	0x080149ec

0800edf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ee00:	f001 fd80 	bl	8010904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ee04:	4b2d      	ldr	r3, [pc, #180]	; (800eebc <prvAddNewTaskToReadyList+0xc4>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	4a2c      	ldr	r2, [pc, #176]	; (800eebc <prvAddNewTaskToReadyList+0xc4>)
 800ee0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ee0e:	4b2c      	ldr	r3, [pc, #176]	; (800eec0 <prvAddNewTaskToReadyList+0xc8>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d109      	bne.n	800ee2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ee16:	4a2a      	ldr	r2, [pc, #168]	; (800eec0 <prvAddNewTaskToReadyList+0xc8>)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ee1c:	4b27      	ldr	r3, [pc, #156]	; (800eebc <prvAddNewTaskToReadyList+0xc4>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d110      	bne.n	800ee46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ee24:	f000 fd3c 	bl	800f8a0 <prvInitialiseTaskLists>
 800ee28:	e00d      	b.n	800ee46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ee2a:	4b26      	ldr	r3, [pc, #152]	; (800eec4 <prvAddNewTaskToReadyList+0xcc>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d109      	bne.n	800ee46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ee32:	4b23      	ldr	r3, [pc, #140]	; (800eec0 <prvAddNewTaskToReadyList+0xc8>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d802      	bhi.n	800ee46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ee40:	4a1f      	ldr	r2, [pc, #124]	; (800eec0 <prvAddNewTaskToReadyList+0xc8>)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ee46:	4b20      	ldr	r3, [pc, #128]	; (800eec8 <prvAddNewTaskToReadyList+0xd0>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	4a1e      	ldr	r2, [pc, #120]	; (800eec8 <prvAddNewTaskToReadyList+0xd0>)
 800ee4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ee50:	4b1d      	ldr	r3, [pc, #116]	; (800eec8 <prvAddNewTaskToReadyList+0xd0>)
 800ee52:	681a      	ldr	r2, [r3, #0]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee5c:	4b1b      	ldr	r3, [pc, #108]	; (800eecc <prvAddNewTaskToReadyList+0xd4>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d903      	bls.n	800ee6c <prvAddNewTaskToReadyList+0x74>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee68:	4a18      	ldr	r2, [pc, #96]	; (800eecc <prvAddNewTaskToReadyList+0xd4>)
 800ee6a:	6013      	str	r3, [r2, #0]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee70:	4613      	mov	r3, r2
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	4413      	add	r3, r2
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	4a15      	ldr	r2, [pc, #84]	; (800eed0 <prvAddNewTaskToReadyList+0xd8>)
 800ee7a:	441a      	add	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	3304      	adds	r3, #4
 800ee80:	4619      	mov	r1, r3
 800ee82:	4610      	mov	r0, r2
 800ee84:	f7ff f83f 	bl	800df06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ee88:	f001 fd6c 	bl	8010964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ee8c:	4b0d      	ldr	r3, [pc, #52]	; (800eec4 <prvAddNewTaskToReadyList+0xcc>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00e      	beq.n	800eeb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ee94:	4b0a      	ldr	r3, [pc, #40]	; (800eec0 <prvAddNewTaskToReadyList+0xc8>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d207      	bcs.n	800eeb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eea2:	4b0c      	ldr	r3, [pc, #48]	; (800eed4 <prvAddNewTaskToReadyList+0xdc>)
 800eea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eea8:	601a      	str	r2, [r3, #0]
 800eeaa:	f3bf 8f4f 	dsb	sy
 800eeae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eeb2:	bf00      	nop
 800eeb4:	3708      	adds	r7, #8
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	200032a4 	.word	0x200032a4
 800eec0:	20002dd0 	.word	0x20002dd0
 800eec4:	200032b0 	.word	0x200032b0
 800eec8:	200032c0 	.word	0x200032c0
 800eecc:	200032ac 	.word	0x200032ac
 800eed0:	20002dd4 	.word	0x20002dd4
 800eed4:	e000ed04 	.word	0xe000ed04

0800eed8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eee0:	2300      	movs	r3, #0
 800eee2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d017      	beq.n	800ef1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eeea:	4b13      	ldr	r3, [pc, #76]	; (800ef38 <vTaskDelay+0x60>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d00a      	beq.n	800ef08 <vTaskDelay+0x30>
	__asm volatile
 800eef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef6:	f383 8811 	msr	BASEPRI, r3
 800eefa:	f3bf 8f6f 	isb	sy
 800eefe:	f3bf 8f4f 	dsb	sy
 800ef02:	60bb      	str	r3, [r7, #8]
}
 800ef04:	bf00      	nop
 800ef06:	e7fe      	b.n	800ef06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ef08:	f000 f8f2 	bl	800f0f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ef0c:	2100      	movs	r1, #0
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f001 f828 	bl	800ff64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ef14:	f000 f8fa 	bl	800f10c <xTaskResumeAll>
 800ef18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d107      	bne.n	800ef30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ef20:	4b06      	ldr	r3, [pc, #24]	; (800ef3c <vTaskDelay+0x64>)
 800ef22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef26:	601a      	str	r2, [r3, #0]
 800ef28:	f3bf 8f4f 	dsb	sy
 800ef2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef30:	bf00      	nop
 800ef32:	3710      	adds	r7, #16
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	200032cc 	.word	0x200032cc
 800ef3c:	e000ed04 	.word	0xe000ed04

0800ef40 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b088      	sub	sp, #32
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d10a      	bne.n	800ef68 <eTaskGetState+0x28>
	__asm volatile
 800ef52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef56:	f383 8811 	msr	BASEPRI, r3
 800ef5a:	f3bf 8f6f 	isb	sy
 800ef5e:	f3bf 8f4f 	dsb	sy
 800ef62:	60bb      	str	r3, [r7, #8]
}
 800ef64:	bf00      	nop
 800ef66:	e7fe      	b.n	800ef66 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800ef68:	4b23      	ldr	r3, [pc, #140]	; (800eff8 <eTaskGetState+0xb8>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	69ba      	ldr	r2, [r7, #24]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d102      	bne.n	800ef78 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800ef72:	2300      	movs	r3, #0
 800ef74:	77fb      	strb	r3, [r7, #31]
 800ef76:	e03a      	b.n	800efee <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800ef78:	f001 fcc4 	bl	8010904 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	695b      	ldr	r3, [r3, #20]
 800ef80:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800ef82:	4b1e      	ldr	r3, [pc, #120]	; (800effc <eTaskGetState+0xbc>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800ef88:	4b1d      	ldr	r3, [pc, #116]	; (800f000 <eTaskGetState+0xc0>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800ef8e:	f001 fce9 	bl	8010964 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800ef92:	697a      	ldr	r2, [r7, #20]
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d003      	beq.n	800efa2 <eTaskGetState+0x62>
 800ef9a:	697a      	ldr	r2, [r7, #20]
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d102      	bne.n	800efa8 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800efa2:	2302      	movs	r3, #2
 800efa4:	77fb      	strb	r3, [r7, #31]
 800efa6:	e022      	b.n	800efee <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	4a16      	ldr	r2, [pc, #88]	; (800f004 <eTaskGetState+0xc4>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d112      	bne.n	800efd6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d10b      	bne.n	800efd0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800efb8:	69bb      	ldr	r3, [r7, #24]
 800efba:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d102      	bne.n	800efca <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800efc4:	2302      	movs	r3, #2
 800efc6:	77fb      	strb	r3, [r7, #31]
 800efc8:	e011      	b.n	800efee <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800efca:	2303      	movs	r3, #3
 800efcc:	77fb      	strb	r3, [r7, #31]
 800efce:	e00e      	b.n	800efee <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800efd0:	2302      	movs	r3, #2
 800efd2:	77fb      	strb	r3, [r7, #31]
 800efd4:	e00b      	b.n	800efee <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	4a0b      	ldr	r2, [pc, #44]	; (800f008 <eTaskGetState+0xc8>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d002      	beq.n	800efe4 <eTaskGetState+0xa4>
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d102      	bne.n	800efea <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800efe4:	2304      	movs	r3, #4
 800efe6:	77fb      	strb	r3, [r7, #31]
 800efe8:	e001      	b.n	800efee <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800efea:	2301      	movs	r3, #1
 800efec:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800efee:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800eff0:	4618      	mov	r0, r3
 800eff2:	3720      	adds	r7, #32
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	20002dd0 	.word	0x20002dd0
 800effc:	2000325c 	.word	0x2000325c
 800f000:	20003260 	.word	0x20003260
 800f004:	20003290 	.word	0x20003290
 800f008:	20003278 	.word	0x20003278

0800f00c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b08a      	sub	sp, #40	; 0x28
 800f010:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f012:	2300      	movs	r3, #0
 800f014:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f016:	2300      	movs	r3, #0
 800f018:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f01a:	463a      	mov	r2, r7
 800f01c:	1d39      	adds	r1, r7, #4
 800f01e:	f107 0308 	add.w	r3, r7, #8
 800f022:	4618      	mov	r0, r3
 800f024:	f7fe ff0e 	bl	800de44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f028:	6839      	ldr	r1, [r7, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	68ba      	ldr	r2, [r7, #8]
 800f02e:	9202      	str	r2, [sp, #8]
 800f030:	9301      	str	r3, [sp, #4]
 800f032:	2300      	movs	r3, #0
 800f034:	9300      	str	r3, [sp, #0]
 800f036:	2300      	movs	r3, #0
 800f038:	460a      	mov	r2, r1
 800f03a:	4925      	ldr	r1, [pc, #148]	; (800f0d0 <vTaskStartScheduler+0xc4>)
 800f03c:	4825      	ldr	r0, [pc, #148]	; (800f0d4 <vTaskStartScheduler+0xc8>)
 800f03e:	f7ff fd8f 	bl	800eb60 <xTaskCreateStatic>
 800f042:	4603      	mov	r3, r0
 800f044:	4a24      	ldr	r2, [pc, #144]	; (800f0d8 <vTaskStartScheduler+0xcc>)
 800f046:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f048:	4b23      	ldr	r3, [pc, #140]	; (800f0d8 <vTaskStartScheduler+0xcc>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d002      	beq.n	800f056 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f050:	2301      	movs	r3, #1
 800f052:	617b      	str	r3, [r7, #20]
 800f054:	e001      	b.n	800f05a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f056:	2300      	movs	r3, #0
 800f058:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d102      	bne.n	800f066 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f060:	f000 ffd4 	bl	801000c <xTimerCreateTimerTask>
 800f064:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d11d      	bne.n	800f0a8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800f06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f070:	f383 8811 	msr	BASEPRI, r3
 800f074:	f3bf 8f6f 	isb	sy
 800f078:	f3bf 8f4f 	dsb	sy
 800f07c:	613b      	str	r3, [r7, #16]
}
 800f07e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f080:	4b16      	ldr	r3, [pc, #88]	; (800f0dc <vTaskStartScheduler+0xd0>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	3358      	adds	r3, #88	; 0x58
 800f086:	4a16      	ldr	r2, [pc, #88]	; (800f0e0 <vTaskStartScheduler+0xd4>)
 800f088:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f08a:	4b16      	ldr	r3, [pc, #88]	; (800f0e4 <vTaskStartScheduler+0xd8>)
 800f08c:	f04f 32ff 	mov.w	r2, #4294967295
 800f090:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f092:	4b15      	ldr	r3, [pc, #84]	; (800f0e8 <vTaskStartScheduler+0xdc>)
 800f094:	2201      	movs	r2, #1
 800f096:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f098:	4b14      	ldr	r3, [pc, #80]	; (800f0ec <vTaskStartScheduler+0xe0>)
 800f09a:	2200      	movs	r2, #0
 800f09c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f09e:	f7f2 fbdf 	bl	8001860 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f0a2:	f001 fb8d 	bl	80107c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f0a6:	e00e      	b.n	800f0c6 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ae:	d10a      	bne.n	800f0c6 <vTaskStartScheduler+0xba>
	__asm volatile
 800f0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b4:	f383 8811 	msr	BASEPRI, r3
 800f0b8:	f3bf 8f6f 	isb	sy
 800f0bc:	f3bf 8f4f 	dsb	sy
 800f0c0:	60fb      	str	r3, [r7, #12]
}
 800f0c2:	bf00      	nop
 800f0c4:	e7fe      	b.n	800f0c4 <vTaskStartScheduler+0xb8>
}
 800f0c6:	bf00      	nop
 800f0c8:	3718      	adds	r7, #24
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	08012788 	.word	0x08012788
 800f0d4:	0800f86d 	.word	0x0800f86d
 800f0d8:	200032c8 	.word	0x200032c8
 800f0dc:	20002dd0 	.word	0x20002dd0
 800f0e0:	2000018c 	.word	0x2000018c
 800f0e4:	200032c4 	.word	0x200032c4
 800f0e8:	200032b0 	.word	0x200032b0
 800f0ec:	200032a8 	.word	0x200032a8

0800f0f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f0f4:	4b04      	ldr	r3, [pc, #16]	; (800f108 <vTaskSuspendAll+0x18>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	4a03      	ldr	r2, [pc, #12]	; (800f108 <vTaskSuspendAll+0x18>)
 800f0fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f0fe:	bf00      	nop
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr
 800f108:	200032cc 	.word	0x200032cc

0800f10c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f112:	2300      	movs	r3, #0
 800f114:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f116:	2300      	movs	r3, #0
 800f118:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f11a:	4b42      	ldr	r3, [pc, #264]	; (800f224 <xTaskResumeAll+0x118>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d10a      	bne.n	800f138 <xTaskResumeAll+0x2c>
	__asm volatile
 800f122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f126:	f383 8811 	msr	BASEPRI, r3
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	f3bf 8f4f 	dsb	sy
 800f132:	603b      	str	r3, [r7, #0]
}
 800f134:	bf00      	nop
 800f136:	e7fe      	b.n	800f136 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f138:	f001 fbe4 	bl	8010904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f13c:	4b39      	ldr	r3, [pc, #228]	; (800f224 <xTaskResumeAll+0x118>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	3b01      	subs	r3, #1
 800f142:	4a38      	ldr	r2, [pc, #224]	; (800f224 <xTaskResumeAll+0x118>)
 800f144:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f146:	4b37      	ldr	r3, [pc, #220]	; (800f224 <xTaskResumeAll+0x118>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d162      	bne.n	800f214 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f14e:	4b36      	ldr	r3, [pc, #216]	; (800f228 <xTaskResumeAll+0x11c>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d05e      	beq.n	800f214 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f156:	e02f      	b.n	800f1b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f158:	4b34      	ldr	r3, [pc, #208]	; (800f22c <xTaskResumeAll+0x120>)
 800f15a:	68db      	ldr	r3, [r3, #12]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	3318      	adds	r3, #24
 800f164:	4618      	mov	r0, r3
 800f166:	f7fe ff2b 	bl	800dfc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	3304      	adds	r3, #4
 800f16e:	4618      	mov	r0, r3
 800f170:	f7fe ff26 	bl	800dfc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f178:	4b2d      	ldr	r3, [pc, #180]	; (800f230 <xTaskResumeAll+0x124>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d903      	bls.n	800f188 <xTaskResumeAll+0x7c>
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f184:	4a2a      	ldr	r2, [pc, #168]	; (800f230 <xTaskResumeAll+0x124>)
 800f186:	6013      	str	r3, [r2, #0]
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f18c:	4613      	mov	r3, r2
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	4413      	add	r3, r2
 800f192:	009b      	lsls	r3, r3, #2
 800f194:	4a27      	ldr	r2, [pc, #156]	; (800f234 <xTaskResumeAll+0x128>)
 800f196:	441a      	add	r2, r3
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	3304      	adds	r3, #4
 800f19c:	4619      	mov	r1, r3
 800f19e:	4610      	mov	r0, r2
 800f1a0:	f7fe feb1 	bl	800df06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1a8:	4b23      	ldr	r3, [pc, #140]	; (800f238 <xTaskResumeAll+0x12c>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d302      	bcc.n	800f1b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f1b2:	4b22      	ldr	r3, [pc, #136]	; (800f23c <xTaskResumeAll+0x130>)
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1b8:	4b1c      	ldr	r3, [pc, #112]	; (800f22c <xTaskResumeAll+0x120>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d1cb      	bne.n	800f158 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d001      	beq.n	800f1ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f1c6:	f000 fce1 	bl	800fb8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f1ca:	4b1d      	ldr	r3, [pc, #116]	; (800f240 <xTaskResumeAll+0x134>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d010      	beq.n	800f1f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f1d6:	f000 f8d7 	bl	800f388 <xTaskIncrementTick>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d002      	beq.n	800f1e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f1e0:	4b16      	ldr	r3, [pc, #88]	; (800f23c <xTaskResumeAll+0x130>)
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	3b01      	subs	r3, #1
 800f1ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1f1      	bne.n	800f1d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f1f2:	4b13      	ldr	r3, [pc, #76]	; (800f240 <xTaskResumeAll+0x134>)
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f1f8:	4b10      	ldr	r3, [pc, #64]	; (800f23c <xTaskResumeAll+0x130>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d009      	beq.n	800f214 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f200:	2301      	movs	r3, #1
 800f202:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f204:	4b0f      	ldr	r3, [pc, #60]	; (800f244 <xTaskResumeAll+0x138>)
 800f206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f20a:	601a      	str	r2, [r3, #0]
 800f20c:	f3bf 8f4f 	dsb	sy
 800f210:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f214:	f001 fba6 	bl	8010964 <vPortExitCritical>

	return xAlreadyYielded;
 800f218:	68bb      	ldr	r3, [r7, #8]
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	200032cc 	.word	0x200032cc
 800f228:	200032a4 	.word	0x200032a4
 800f22c:	20003264 	.word	0x20003264
 800f230:	200032ac 	.word	0x200032ac
 800f234:	20002dd4 	.word	0x20002dd4
 800f238:	20002dd0 	.word	0x20002dd0
 800f23c:	200032b8 	.word	0x200032b8
 800f240:	200032b4 	.word	0x200032b4
 800f244:	e000ed04 	.word	0xe000ed04

0800f248 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f24e:	4b05      	ldr	r3, [pc, #20]	; (800f264 <xTaskGetTickCount+0x1c>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f254:	687b      	ldr	r3, [r7, #4]
}
 800f256:	4618      	mov	r0, r3
 800f258:	370c      	adds	r7, #12
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr
 800f262:	bf00      	nop
 800f264:	200032a8 	.word	0x200032a8

0800f268 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f274:	2300      	movs	r3, #0
 800f276:	617b      	str	r3, [r7, #20]
 800f278:	2338      	movs	r3, #56	; 0x38
 800f27a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800f27c:	f7ff ff38 	bl	800f0f0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f280:	4b3b      	ldr	r3, [pc, #236]	; (800f370 <uxTaskGetSystemState+0x108>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	429a      	cmp	r2, r3
 800f288:	d36a      	bcc.n	800f360 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	3b01      	subs	r3, #1
 800f28e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f290:	697a      	ldr	r2, [r7, #20]
 800f292:	4613      	mov	r3, r2
 800f294:	00db      	lsls	r3, r3, #3
 800f296:	4413      	add	r3, r2
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	461a      	mov	r2, r3
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	1898      	adds	r0, r3, r2
 800f2a0:	693a      	ldr	r2, [r7, #16]
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	4413      	add	r3, r2
 800f2a8:	009b      	lsls	r3, r3, #2
 800f2aa:	4a32      	ldr	r2, [pc, #200]	; (800f374 <uxTaskGetSystemState+0x10c>)
 800f2ac:	4413      	add	r3, r2
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	f000 fbc9 	bl	800fa48 <prvListTasksWithinSingleList>
 800f2b6:	4602      	mov	r2, r0
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d1e2      	bne.n	800f28a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f2c4:	697a      	ldr	r2, [r7, #20]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	00db      	lsls	r3, r3, #3
 800f2ca:	4413      	add	r3, r2
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	4413      	add	r3, r2
 800f2d4:	4a28      	ldr	r2, [pc, #160]	; (800f378 <uxTaskGetSystemState+0x110>)
 800f2d6:	6811      	ldr	r1, [r2, #0]
 800f2d8:	2202      	movs	r2, #2
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f000 fbb4 	bl	800fa48 <prvListTasksWithinSingleList>
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f2e8:	697a      	ldr	r2, [r7, #20]
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	00db      	lsls	r3, r3, #3
 800f2ee:	4413      	add	r3, r2
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	4413      	add	r3, r2
 800f2f8:	4a20      	ldr	r2, [pc, #128]	; (800f37c <uxTaskGetSystemState+0x114>)
 800f2fa:	6811      	ldr	r1, [r2, #0]
 800f2fc:	2202      	movs	r2, #2
 800f2fe:	4618      	mov	r0, r3
 800f300:	f000 fba2 	bl	800fa48 <prvListTasksWithinSingleList>
 800f304:	4602      	mov	r2, r0
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	4413      	add	r3, r2
 800f30a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f30c:	697a      	ldr	r2, [r7, #20]
 800f30e:	4613      	mov	r3, r2
 800f310:	00db      	lsls	r3, r3, #3
 800f312:	4413      	add	r3, r2
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	461a      	mov	r2, r3
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	4413      	add	r3, r2
 800f31c:	2204      	movs	r2, #4
 800f31e:	4918      	ldr	r1, [pc, #96]	; (800f380 <uxTaskGetSystemState+0x118>)
 800f320:	4618      	mov	r0, r3
 800f322:	f000 fb91 	bl	800fa48 <prvListTasksWithinSingleList>
 800f326:	4602      	mov	r2, r0
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	4413      	add	r3, r2
 800f32c:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f32e:	697a      	ldr	r2, [r7, #20]
 800f330:	4613      	mov	r3, r2
 800f332:	00db      	lsls	r3, r3, #3
 800f334:	4413      	add	r3, r2
 800f336:	009b      	lsls	r3, r3, #2
 800f338:	461a      	mov	r2, r3
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	4413      	add	r3, r2
 800f33e:	2203      	movs	r2, #3
 800f340:	4910      	ldr	r1, [pc, #64]	; (800f384 <uxTaskGetSystemState+0x11c>)
 800f342:	4618      	mov	r0, r3
 800f344:	f000 fb80 	bl	800fa48 <prvListTasksWithinSingleList>
 800f348:	4602      	mov	r2, r0
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	4413      	add	r3, r2
 800f34e:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d004      	beq.n	800f360 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f356:	f7f2 fa8a 	bl	800186e <getRunTimeCounterValue>
 800f35a:	4602      	mov	r2, r0
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800f360:	f7ff fed4 	bl	800f10c <xTaskResumeAll>

		return uxTask;
 800f364:	697b      	ldr	r3, [r7, #20]
	}
 800f366:	4618      	mov	r0, r3
 800f368:	3718      	adds	r7, #24
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	200032a4 	.word	0x200032a4
 800f374:	20002dd4 	.word	0x20002dd4
 800f378:	2000325c 	.word	0x2000325c
 800f37c:	20003260 	.word	0x20003260
 800f380:	20003278 	.word	0x20003278
 800f384:	20003290 	.word	0x20003290

0800f388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b086      	sub	sp, #24
 800f38c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f38e:	2300      	movs	r3, #0
 800f390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f392:	4b4f      	ldr	r3, [pc, #316]	; (800f4d0 <xTaskIncrementTick+0x148>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	f040 808f 	bne.w	800f4ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f39c:	4b4d      	ldr	r3, [pc, #308]	; (800f4d4 <xTaskIncrementTick+0x14c>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f3a4:	4a4b      	ldr	r2, [pc, #300]	; (800f4d4 <xTaskIncrementTick+0x14c>)
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d120      	bne.n	800f3f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f3b0:	4b49      	ldr	r3, [pc, #292]	; (800f4d8 <xTaskIncrementTick+0x150>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d00a      	beq.n	800f3d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800f3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3be:	f383 8811 	msr	BASEPRI, r3
 800f3c2:	f3bf 8f6f 	isb	sy
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	603b      	str	r3, [r7, #0]
}
 800f3cc:	bf00      	nop
 800f3ce:	e7fe      	b.n	800f3ce <xTaskIncrementTick+0x46>
 800f3d0:	4b41      	ldr	r3, [pc, #260]	; (800f4d8 <xTaskIncrementTick+0x150>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	60fb      	str	r3, [r7, #12]
 800f3d6:	4b41      	ldr	r3, [pc, #260]	; (800f4dc <xTaskIncrementTick+0x154>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	4a3f      	ldr	r2, [pc, #252]	; (800f4d8 <xTaskIncrementTick+0x150>)
 800f3dc:	6013      	str	r3, [r2, #0]
 800f3de:	4a3f      	ldr	r2, [pc, #252]	; (800f4dc <xTaskIncrementTick+0x154>)
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	6013      	str	r3, [r2, #0]
 800f3e4:	4b3e      	ldr	r3, [pc, #248]	; (800f4e0 <xTaskIncrementTick+0x158>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	4a3d      	ldr	r2, [pc, #244]	; (800f4e0 <xTaskIncrementTick+0x158>)
 800f3ec:	6013      	str	r3, [r2, #0]
 800f3ee:	f000 fbcd 	bl	800fb8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f3f2:	4b3c      	ldr	r3, [pc, #240]	; (800f4e4 <xTaskIncrementTick+0x15c>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	693a      	ldr	r2, [r7, #16]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d349      	bcc.n	800f490 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3fc:	4b36      	ldr	r3, [pc, #216]	; (800f4d8 <xTaskIncrementTick+0x150>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d104      	bne.n	800f410 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f406:	4b37      	ldr	r3, [pc, #220]	; (800f4e4 <xTaskIncrementTick+0x15c>)
 800f408:	f04f 32ff 	mov.w	r2, #4294967295
 800f40c:	601a      	str	r2, [r3, #0]
					break;
 800f40e:	e03f      	b.n	800f490 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f410:	4b31      	ldr	r3, [pc, #196]	; (800f4d8 <xTaskIncrementTick+0x150>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f420:	693a      	ldr	r2, [r7, #16]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	429a      	cmp	r2, r3
 800f426:	d203      	bcs.n	800f430 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f428:	4a2e      	ldr	r2, [pc, #184]	; (800f4e4 <xTaskIncrementTick+0x15c>)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f42e:	e02f      	b.n	800f490 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	3304      	adds	r3, #4
 800f434:	4618      	mov	r0, r3
 800f436:	f7fe fdc3 	bl	800dfc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d004      	beq.n	800f44c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	3318      	adds	r3, #24
 800f446:	4618      	mov	r0, r3
 800f448:	f7fe fdba 	bl	800dfc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f450:	4b25      	ldr	r3, [pc, #148]	; (800f4e8 <xTaskIncrementTick+0x160>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	429a      	cmp	r2, r3
 800f456:	d903      	bls.n	800f460 <xTaskIncrementTick+0xd8>
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f45c:	4a22      	ldr	r2, [pc, #136]	; (800f4e8 <xTaskIncrementTick+0x160>)
 800f45e:	6013      	str	r3, [r2, #0]
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f464:	4613      	mov	r3, r2
 800f466:	009b      	lsls	r3, r3, #2
 800f468:	4413      	add	r3, r2
 800f46a:	009b      	lsls	r3, r3, #2
 800f46c:	4a1f      	ldr	r2, [pc, #124]	; (800f4ec <xTaskIncrementTick+0x164>)
 800f46e:	441a      	add	r2, r3
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	3304      	adds	r3, #4
 800f474:	4619      	mov	r1, r3
 800f476:	4610      	mov	r0, r2
 800f478:	f7fe fd45 	bl	800df06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f480:	4b1b      	ldr	r3, [pc, #108]	; (800f4f0 <xTaskIncrementTick+0x168>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f486:	429a      	cmp	r2, r3
 800f488:	d3b8      	bcc.n	800f3fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f48a:	2301      	movs	r3, #1
 800f48c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f48e:	e7b5      	b.n	800f3fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f490:	4b17      	ldr	r3, [pc, #92]	; (800f4f0 <xTaskIncrementTick+0x168>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f496:	4915      	ldr	r1, [pc, #84]	; (800f4ec <xTaskIncrementTick+0x164>)
 800f498:	4613      	mov	r3, r2
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	4413      	add	r3, r2
 800f49e:	009b      	lsls	r3, r3, #2
 800f4a0:	440b      	add	r3, r1
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	2b01      	cmp	r3, #1
 800f4a6:	d901      	bls.n	800f4ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f4ac:	4b11      	ldr	r3, [pc, #68]	; (800f4f4 <xTaskIncrementTick+0x16c>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d007      	beq.n	800f4c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	617b      	str	r3, [r7, #20]
 800f4b8:	e004      	b.n	800f4c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f4ba:	4b0f      	ldr	r3, [pc, #60]	; (800f4f8 <xTaskIncrementTick+0x170>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	4a0d      	ldr	r2, [pc, #52]	; (800f4f8 <xTaskIncrementTick+0x170>)
 800f4c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f4c4:	697b      	ldr	r3, [r7, #20]
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3718      	adds	r7, #24
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	200032cc 	.word	0x200032cc
 800f4d4:	200032a8 	.word	0x200032a8
 800f4d8:	2000325c 	.word	0x2000325c
 800f4dc:	20003260 	.word	0x20003260
 800f4e0:	200032bc 	.word	0x200032bc
 800f4e4:	200032c4 	.word	0x200032c4
 800f4e8:	200032ac 	.word	0x200032ac
 800f4ec:	20002dd4 	.word	0x20002dd4
 800f4f0:	20002dd0 	.word	0x20002dd0
 800f4f4:	200032b8 	.word	0x200032b8
 800f4f8:	200032b4 	.word	0x200032b4

0800f4fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f502:	4b36      	ldr	r3, [pc, #216]	; (800f5dc <vTaskSwitchContext+0xe0>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d003      	beq.n	800f512 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f50a:	4b35      	ldr	r3, [pc, #212]	; (800f5e0 <vTaskSwitchContext+0xe4>)
 800f50c:	2201      	movs	r2, #1
 800f50e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f510:	e05f      	b.n	800f5d2 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800f512:	4b33      	ldr	r3, [pc, #204]	; (800f5e0 <vTaskSwitchContext+0xe4>)
 800f514:	2200      	movs	r2, #0
 800f516:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f518:	f7f2 f9a9 	bl	800186e <getRunTimeCounterValue>
 800f51c:	4603      	mov	r3, r0
 800f51e:	4a31      	ldr	r2, [pc, #196]	; (800f5e4 <vTaskSwitchContext+0xe8>)
 800f520:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f522:	4b30      	ldr	r3, [pc, #192]	; (800f5e4 <vTaskSwitchContext+0xe8>)
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	4b30      	ldr	r3, [pc, #192]	; (800f5e8 <vTaskSwitchContext+0xec>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d909      	bls.n	800f542 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f52e:	4b2f      	ldr	r3, [pc, #188]	; (800f5ec <vTaskSwitchContext+0xf0>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f534:	4a2b      	ldr	r2, [pc, #172]	; (800f5e4 <vTaskSwitchContext+0xe8>)
 800f536:	6810      	ldr	r0, [r2, #0]
 800f538:	4a2b      	ldr	r2, [pc, #172]	; (800f5e8 <vTaskSwitchContext+0xec>)
 800f53a:	6812      	ldr	r2, [r2, #0]
 800f53c:	1a82      	subs	r2, r0, r2
 800f53e:	440a      	add	r2, r1
 800f540:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800f542:	4b28      	ldr	r3, [pc, #160]	; (800f5e4 <vTaskSwitchContext+0xe8>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a28      	ldr	r2, [pc, #160]	; (800f5e8 <vTaskSwitchContext+0xec>)
 800f548:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f54a:	4b29      	ldr	r3, [pc, #164]	; (800f5f0 <vTaskSwitchContext+0xf4>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	60fb      	str	r3, [r7, #12]
 800f550:	e010      	b.n	800f574 <vTaskSwitchContext+0x78>
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d10a      	bne.n	800f56e <vTaskSwitchContext+0x72>
	__asm volatile
 800f558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f55c:	f383 8811 	msr	BASEPRI, r3
 800f560:	f3bf 8f6f 	isb	sy
 800f564:	f3bf 8f4f 	dsb	sy
 800f568:	607b      	str	r3, [r7, #4]
}
 800f56a:	bf00      	nop
 800f56c:	e7fe      	b.n	800f56c <vTaskSwitchContext+0x70>
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	3b01      	subs	r3, #1
 800f572:	60fb      	str	r3, [r7, #12]
 800f574:	491f      	ldr	r1, [pc, #124]	; (800f5f4 <vTaskSwitchContext+0xf8>)
 800f576:	68fa      	ldr	r2, [r7, #12]
 800f578:	4613      	mov	r3, r2
 800f57a:	009b      	lsls	r3, r3, #2
 800f57c:	4413      	add	r3, r2
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	440b      	add	r3, r1
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d0e4      	beq.n	800f552 <vTaskSwitchContext+0x56>
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	4613      	mov	r3, r2
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	4413      	add	r3, r2
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	4a18      	ldr	r2, [pc, #96]	; (800f5f4 <vTaskSwitchContext+0xf8>)
 800f594:	4413      	add	r3, r2
 800f596:	60bb      	str	r3, [r7, #8]
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	685a      	ldr	r2, [r3, #4]
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	605a      	str	r2, [r3, #4]
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	685a      	ldr	r2, [r3, #4]
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	3308      	adds	r3, #8
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d104      	bne.n	800f5b8 <vTaskSwitchContext+0xbc>
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	685a      	ldr	r2, [r3, #4]
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	605a      	str	r2, [r3, #4]
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	4a0b      	ldr	r2, [pc, #44]	; (800f5ec <vTaskSwitchContext+0xf0>)
 800f5c0:	6013      	str	r3, [r2, #0]
 800f5c2:	4a0b      	ldr	r2, [pc, #44]	; (800f5f0 <vTaskSwitchContext+0xf4>)
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f5c8:	4b08      	ldr	r3, [pc, #32]	; (800f5ec <vTaskSwitchContext+0xf0>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3358      	adds	r3, #88	; 0x58
 800f5ce:	4a0a      	ldr	r2, [pc, #40]	; (800f5f8 <vTaskSwitchContext+0xfc>)
 800f5d0:	6013      	str	r3, [r2, #0]
}
 800f5d2:	bf00      	nop
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	200032cc 	.word	0x200032cc
 800f5e0:	200032b8 	.word	0x200032b8
 800f5e4:	200032d4 	.word	0x200032d4
 800f5e8:	200032d0 	.word	0x200032d0
 800f5ec:	20002dd0 	.word	0x20002dd0
 800f5f0:	200032ac 	.word	0x200032ac
 800f5f4:	20002dd4 	.word	0x20002dd4
 800f5f8:	2000018c 	.word	0x2000018c

0800f5fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d10a      	bne.n	800f622 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f610:	f383 8811 	msr	BASEPRI, r3
 800f614:	f3bf 8f6f 	isb	sy
 800f618:	f3bf 8f4f 	dsb	sy
 800f61c:	60fb      	str	r3, [r7, #12]
}
 800f61e:	bf00      	nop
 800f620:	e7fe      	b.n	800f620 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f622:	4b07      	ldr	r3, [pc, #28]	; (800f640 <vTaskPlaceOnEventList+0x44>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	3318      	adds	r3, #24
 800f628:	4619      	mov	r1, r3
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f7fe fc8f 	bl	800df4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f630:	2101      	movs	r1, #1
 800f632:	6838      	ldr	r0, [r7, #0]
 800f634:	f000 fc96 	bl	800ff64 <prvAddCurrentTaskToDelayedList>
}
 800f638:	bf00      	nop
 800f63a:	3710      	adds	r7, #16
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}
 800f640:	20002dd0 	.word	0x20002dd0

0800f644 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f644:	b580      	push	{r7, lr}
 800f646:	b086      	sub	sp, #24
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d10a      	bne.n	800f66c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f65a:	f383 8811 	msr	BASEPRI, r3
 800f65e:	f3bf 8f6f 	isb	sy
 800f662:	f3bf 8f4f 	dsb	sy
 800f666:	617b      	str	r3, [r7, #20]
}
 800f668:	bf00      	nop
 800f66a:	e7fe      	b.n	800f66a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f66c:	4b0a      	ldr	r3, [pc, #40]	; (800f698 <vTaskPlaceOnEventListRestricted+0x54>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	3318      	adds	r3, #24
 800f672:	4619      	mov	r1, r3
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f7fe fc46 	bl	800df06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d002      	beq.n	800f686 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f680:	f04f 33ff 	mov.w	r3, #4294967295
 800f684:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f686:	6879      	ldr	r1, [r7, #4]
 800f688:	68b8      	ldr	r0, [r7, #8]
 800f68a:	f000 fc6b 	bl	800ff64 <prvAddCurrentTaskToDelayedList>
	}
 800f68e:	bf00      	nop
 800f690:	3718      	adds	r7, #24
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	20002dd0 	.word	0x20002dd0

0800f69c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b086      	sub	sp, #24
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	68db      	ldr	r3, [r3, #12]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d10a      	bne.n	800f6c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b6:	f383 8811 	msr	BASEPRI, r3
 800f6ba:	f3bf 8f6f 	isb	sy
 800f6be:	f3bf 8f4f 	dsb	sy
 800f6c2:	60fb      	str	r3, [r7, #12]
}
 800f6c4:	bf00      	nop
 800f6c6:	e7fe      	b.n	800f6c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	3318      	adds	r3, #24
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fe fc77 	bl	800dfc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6d2:	4b1e      	ldr	r3, [pc, #120]	; (800f74c <xTaskRemoveFromEventList+0xb0>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d11d      	bne.n	800f716 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	3304      	adds	r3, #4
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fe fc6e 	bl	800dfc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6e8:	4b19      	ldr	r3, [pc, #100]	; (800f750 <xTaskRemoveFromEventList+0xb4>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d903      	bls.n	800f6f8 <xTaskRemoveFromEventList+0x5c>
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6f4:	4a16      	ldr	r2, [pc, #88]	; (800f750 <xTaskRemoveFromEventList+0xb4>)
 800f6f6:	6013      	str	r3, [r2, #0]
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6fc:	4613      	mov	r3, r2
 800f6fe:	009b      	lsls	r3, r3, #2
 800f700:	4413      	add	r3, r2
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	4a13      	ldr	r2, [pc, #76]	; (800f754 <xTaskRemoveFromEventList+0xb8>)
 800f706:	441a      	add	r2, r3
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	3304      	adds	r3, #4
 800f70c:	4619      	mov	r1, r3
 800f70e:	4610      	mov	r0, r2
 800f710:	f7fe fbf9 	bl	800df06 <vListInsertEnd>
 800f714:	e005      	b.n	800f722 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	3318      	adds	r3, #24
 800f71a:	4619      	mov	r1, r3
 800f71c:	480e      	ldr	r0, [pc, #56]	; (800f758 <xTaskRemoveFromEventList+0xbc>)
 800f71e:	f7fe fbf2 	bl	800df06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f726:	4b0d      	ldr	r3, [pc, #52]	; (800f75c <xTaskRemoveFromEventList+0xc0>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d905      	bls.n	800f73c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f730:	2301      	movs	r3, #1
 800f732:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f734:	4b0a      	ldr	r3, [pc, #40]	; (800f760 <xTaskRemoveFromEventList+0xc4>)
 800f736:	2201      	movs	r2, #1
 800f738:	601a      	str	r2, [r3, #0]
 800f73a:	e001      	b.n	800f740 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f73c:	2300      	movs	r3, #0
 800f73e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f740:	697b      	ldr	r3, [r7, #20]
}
 800f742:	4618      	mov	r0, r3
 800f744:	3718      	adds	r7, #24
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	200032cc 	.word	0x200032cc
 800f750:	200032ac 	.word	0x200032ac
 800f754:	20002dd4 	.word	0x20002dd4
 800f758:	20003264 	.word	0x20003264
 800f75c:	20002dd0 	.word	0x20002dd0
 800f760:	200032b8 	.word	0x200032b8

0800f764 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f764:	b480      	push	{r7}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f76c:	4b06      	ldr	r3, [pc, #24]	; (800f788 <vTaskInternalSetTimeOutState+0x24>)
 800f76e:	681a      	ldr	r2, [r3, #0]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f774:	4b05      	ldr	r3, [pc, #20]	; (800f78c <vTaskInternalSetTimeOutState+0x28>)
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	605a      	str	r2, [r3, #4]
}
 800f77c:	bf00      	nop
 800f77e:	370c      	adds	r7, #12
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr
 800f788:	200032bc 	.word	0x200032bc
 800f78c:	200032a8 	.word	0x200032a8

0800f790 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b088      	sub	sp, #32
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d10a      	bne.n	800f7b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	613b      	str	r3, [r7, #16]
}
 800f7b2:	bf00      	nop
 800f7b4:	e7fe      	b.n	800f7b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d10a      	bne.n	800f7d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c0:	f383 8811 	msr	BASEPRI, r3
 800f7c4:	f3bf 8f6f 	isb	sy
 800f7c8:	f3bf 8f4f 	dsb	sy
 800f7cc:	60fb      	str	r3, [r7, #12]
}
 800f7ce:	bf00      	nop
 800f7d0:	e7fe      	b.n	800f7d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f7d2:	f001 f897 	bl	8010904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f7d6:	4b1d      	ldr	r3, [pc, #116]	; (800f84c <xTaskCheckForTimeOut+0xbc>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	69ba      	ldr	r2, [r7, #24]
 800f7e2:	1ad3      	subs	r3, r2, r3
 800f7e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ee:	d102      	bne.n	800f7f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	61fb      	str	r3, [r7, #28]
 800f7f4:	e023      	b.n	800f83e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	4b15      	ldr	r3, [pc, #84]	; (800f850 <xTaskCheckForTimeOut+0xc0>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d007      	beq.n	800f812 <xTaskCheckForTimeOut+0x82>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	69ba      	ldr	r2, [r7, #24]
 800f808:	429a      	cmp	r2, r3
 800f80a:	d302      	bcc.n	800f812 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f80c:	2301      	movs	r3, #1
 800f80e:	61fb      	str	r3, [r7, #28]
 800f810:	e015      	b.n	800f83e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	697a      	ldr	r2, [r7, #20]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d20b      	bcs.n	800f834 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	681a      	ldr	r2, [r3, #0]
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	1ad2      	subs	r2, r2, r3
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f7ff ff9b 	bl	800f764 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f82e:	2300      	movs	r3, #0
 800f830:	61fb      	str	r3, [r7, #28]
 800f832:	e004      	b.n	800f83e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	2200      	movs	r2, #0
 800f838:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f83a:	2301      	movs	r3, #1
 800f83c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f83e:	f001 f891 	bl	8010964 <vPortExitCritical>

	return xReturn;
 800f842:	69fb      	ldr	r3, [r7, #28]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3720      	adds	r7, #32
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	200032a8 	.word	0x200032a8
 800f850:	200032bc 	.word	0x200032bc

0800f854 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f854:	b480      	push	{r7}
 800f856:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f858:	4b03      	ldr	r3, [pc, #12]	; (800f868 <vTaskMissedYield+0x14>)
 800f85a:	2201      	movs	r2, #1
 800f85c:	601a      	str	r2, [r3, #0]
}
 800f85e:	bf00      	nop
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr
 800f868:	200032b8 	.word	0x200032b8

0800f86c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f874:	f000 f854 	bl	800f920 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f878:	4b07      	ldr	r3, [pc, #28]	; (800f898 <prvIdleTask+0x2c>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d907      	bls.n	800f890 <prvIdleTask+0x24>
			{
				taskYIELD();
 800f880:	4b06      	ldr	r3, [pc, #24]	; (800f89c <prvIdleTask+0x30>)
 800f882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f886:	601a      	str	r2, [r3, #0]
 800f888:	f3bf 8f4f 	dsb	sy
 800f88c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800f890:	f7f1 fff6 	bl	8001880 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800f894:	e7ee      	b.n	800f874 <prvIdleTask+0x8>
 800f896:	bf00      	nop
 800f898:	20002dd4 	.word	0x20002dd4
 800f89c:	e000ed04 	.word	0xe000ed04

0800f8a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	607b      	str	r3, [r7, #4]
 800f8aa:	e00c      	b.n	800f8c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	009b      	lsls	r3, r3, #2
 800f8b2:	4413      	add	r3, r2
 800f8b4:	009b      	lsls	r3, r3, #2
 800f8b6:	4a12      	ldr	r2, [pc, #72]	; (800f900 <prvInitialiseTaskLists+0x60>)
 800f8b8:	4413      	add	r3, r2
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fe faf6 	bl	800deac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	607b      	str	r3, [r7, #4]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2b37      	cmp	r3, #55	; 0x37
 800f8ca:	d9ef      	bls.n	800f8ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f8cc:	480d      	ldr	r0, [pc, #52]	; (800f904 <prvInitialiseTaskLists+0x64>)
 800f8ce:	f7fe faed 	bl	800deac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f8d2:	480d      	ldr	r0, [pc, #52]	; (800f908 <prvInitialiseTaskLists+0x68>)
 800f8d4:	f7fe faea 	bl	800deac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f8d8:	480c      	ldr	r0, [pc, #48]	; (800f90c <prvInitialiseTaskLists+0x6c>)
 800f8da:	f7fe fae7 	bl	800deac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f8de:	480c      	ldr	r0, [pc, #48]	; (800f910 <prvInitialiseTaskLists+0x70>)
 800f8e0:	f7fe fae4 	bl	800deac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f8e4:	480b      	ldr	r0, [pc, #44]	; (800f914 <prvInitialiseTaskLists+0x74>)
 800f8e6:	f7fe fae1 	bl	800deac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f8ea:	4b0b      	ldr	r3, [pc, #44]	; (800f918 <prvInitialiseTaskLists+0x78>)
 800f8ec:	4a05      	ldr	r2, [pc, #20]	; (800f904 <prvInitialiseTaskLists+0x64>)
 800f8ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f8f0:	4b0a      	ldr	r3, [pc, #40]	; (800f91c <prvInitialiseTaskLists+0x7c>)
 800f8f2:	4a05      	ldr	r2, [pc, #20]	; (800f908 <prvInitialiseTaskLists+0x68>)
 800f8f4:	601a      	str	r2, [r3, #0]
}
 800f8f6:	bf00      	nop
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	20002dd4 	.word	0x20002dd4
 800f904:	20003234 	.word	0x20003234
 800f908:	20003248 	.word	0x20003248
 800f90c:	20003264 	.word	0x20003264
 800f910:	20003278 	.word	0x20003278
 800f914:	20003290 	.word	0x20003290
 800f918:	2000325c 	.word	0x2000325c
 800f91c:	20003260 	.word	0x20003260

0800f920 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f926:	e019      	b.n	800f95c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f928:	f000 ffec 	bl	8010904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f92c:	4b10      	ldr	r3, [pc, #64]	; (800f970 <prvCheckTasksWaitingTermination+0x50>)
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	3304      	adds	r3, #4
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fe fb41 	bl	800dfc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f93e:	4b0d      	ldr	r3, [pc, #52]	; (800f974 <prvCheckTasksWaitingTermination+0x54>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	3b01      	subs	r3, #1
 800f944:	4a0b      	ldr	r2, [pc, #44]	; (800f974 <prvCheckTasksWaitingTermination+0x54>)
 800f946:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f948:	4b0b      	ldr	r3, [pc, #44]	; (800f978 <prvCheckTasksWaitingTermination+0x58>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	3b01      	subs	r3, #1
 800f94e:	4a0a      	ldr	r2, [pc, #40]	; (800f978 <prvCheckTasksWaitingTermination+0x58>)
 800f950:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f952:	f001 f807 	bl	8010964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 f8e4 	bl	800fb24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f95c:	4b06      	ldr	r3, [pc, #24]	; (800f978 <prvCheckTasksWaitingTermination+0x58>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d1e1      	bne.n	800f928 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f964:	bf00      	nop
 800f966:	bf00      	nop
 800f968:	3708      	adds	r7, #8
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	20003278 	.word	0x20003278
 800f974:	200032a4 	.word	0x200032a4
 800f978:	2000328c 	.word	0x2000328c

0800f97c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b086      	sub	sp, #24
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
 800f988:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d102      	bne.n	800f996 <vTaskGetInfo+0x1a>
 800f990:	4b2c      	ldr	r3, [pc, #176]	; (800fa44 <vTaskGetInfo+0xc8>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	e000      	b.n	800f998 <vTaskGetInfo+0x1c>
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	697a      	ldr	r2, [r7, #20]
 800f99e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800f9d2:	78fb      	ldrb	r3, [r7, #3]
 800f9d4:	2b05      	cmp	r3, #5
 800f9d6:	d01a      	beq.n	800fa0e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800f9d8:	4b1a      	ldr	r3, [pc, #104]	; (800fa44 <vTaskGetInfo+0xc8>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	697a      	ldr	r2, [r7, #20]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d103      	bne.n	800f9ea <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	731a      	strb	r2, [r3, #12]
 800f9e8:	e018      	b.n	800fa1c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	78fa      	ldrb	r2, [r7, #3]
 800f9ee:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800f9f0:	78fb      	ldrb	r3, [r7, #3]
 800f9f2:	2b03      	cmp	r3, #3
 800f9f4:	d112      	bne.n	800fa1c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800f9f6:	f7ff fb7b 	bl	800f0f0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d002      	beq.n	800fa08 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	2202      	movs	r2, #2
 800fa06:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800fa08:	f7ff fb80 	bl	800f10c <xTaskResumeAll>
 800fa0c:	e006      	b.n	800fa1c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800fa0e:	6978      	ldr	r0, [r7, #20]
 800fa10:	f7ff fa96 	bl	800ef40 <eTaskGetState>
 800fa14:	4603      	mov	r3, r0
 800fa16:	461a      	mov	r2, r3
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d009      	beq.n	800fa36 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa26:	4618      	mov	r0, r3
 800fa28:	f000 f860 	bl	800faec <prvTaskCheckFreeStackSpace>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	461a      	mov	r2, r3
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800fa34:	e002      	b.n	800fa3c <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	841a      	strh	r2, [r3, #32]
	}
 800fa3c:	bf00      	nop
 800fa3e:	3718      	adds	r7, #24
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}
 800fa44:	20002dd0 	.word	0x20002dd0

0800fa48 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b08a      	sub	sp, #40	; 0x28
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	4613      	mov	r3, r2
 800fa54:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800fa56:	2300      	movs	r3, #0
 800fa58:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d03f      	beq.n	800fae2 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	623b      	str	r3, [r7, #32]
 800fa66:	6a3b      	ldr	r3, [r7, #32]
 800fa68:	685b      	ldr	r3, [r3, #4]
 800fa6a:	685a      	ldr	r2, [r3, #4]
 800fa6c:	6a3b      	ldr	r3, [r7, #32]
 800fa6e:	605a      	str	r2, [r3, #4]
 800fa70:	6a3b      	ldr	r3, [r7, #32]
 800fa72:	685a      	ldr	r2, [r3, #4]
 800fa74:	6a3b      	ldr	r3, [r7, #32]
 800fa76:	3308      	adds	r3, #8
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d104      	bne.n	800fa86 <prvListTasksWithinSingleList+0x3e>
 800fa7c:	6a3b      	ldr	r3, [r7, #32]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	685a      	ldr	r2, [r3, #4]
 800fa82:	6a3b      	ldr	r3, [r7, #32]
 800fa84:	605a      	str	r2, [r3, #4]
 800fa86:	6a3b      	ldr	r3, [r7, #32]
 800fa88:	685b      	ldr	r3, [r3, #4]
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	61bb      	str	r3, [r7, #24]
 800fa92:	69bb      	ldr	r3, [r7, #24]
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	685a      	ldr	r2, [r3, #4]
 800fa98:	69bb      	ldr	r3, [r7, #24]
 800fa9a:	605a      	str	r2, [r3, #4]
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	685a      	ldr	r2, [r3, #4]
 800faa0:	69bb      	ldr	r3, [r7, #24]
 800faa2:	3308      	adds	r3, #8
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d104      	bne.n	800fab2 <prvListTasksWithinSingleList+0x6a>
 800faa8:	69bb      	ldr	r3, [r7, #24]
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	685a      	ldr	r2, [r3, #4]
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	605a      	str	r2, [r3, #4]
 800fab2:	69bb      	ldr	r3, [r7, #24]
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800faba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fabc:	4613      	mov	r3, r2
 800fabe:	00db      	lsls	r3, r3, #3
 800fac0:	4413      	add	r3, r2
 800fac2:	009b      	lsls	r3, r3, #2
 800fac4:	461a      	mov	r2, r3
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	1899      	adds	r1, r3, r2
 800faca:	79fb      	ldrb	r3, [r7, #7]
 800facc:	2201      	movs	r2, #1
 800face:	6978      	ldr	r0, [r7, #20]
 800fad0:	f7ff ff54 	bl	800f97c <vTaskGetInfo>
				uxTask++;
 800fad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad6:	3301      	adds	r3, #1
 800fad8:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800fada:	697a      	ldr	r2, [r7, #20]
 800fadc:	69fb      	ldr	r3, [r7, #28]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d1d5      	bne.n	800fa8e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800fae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3728      	adds	r7, #40	; 0x28
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800faec:	b480      	push	{r7}
 800faee:	b085      	sub	sp, #20
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800faf4:	2300      	movs	r3, #0
 800faf6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800faf8:	e005      	b.n	800fb06 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	3301      	adds	r3, #1
 800fafe:	607b      	str	r3, [r7, #4]
			ulCount++;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	3301      	adds	r3, #1
 800fb04:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	2ba5      	cmp	r3, #165	; 0xa5
 800fb0c:	d0f5      	beq.n	800fafa <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	089b      	lsrs	r3, r3, #2
 800fb12:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	b29b      	uxth	r3, r3
	}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3714      	adds	r7, #20
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b084      	sub	sp, #16
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	3358      	adds	r3, #88	; 0x58
 800fb30:	4618      	mov	r0, r3
 800fb32:	f002 f841 	bl	8011bb8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d108      	bne.n	800fb52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb44:	4618      	mov	r0, r3
 800fb46:	f001 f8cb 	bl	8010ce0 <vPortFree>
				vPortFree( pxTCB );
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f001 f8c8 	bl	8010ce0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fb50:	e018      	b.n	800fb84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d103      	bne.n	800fb64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f001 f8bf 	bl	8010ce0 <vPortFree>
	}
 800fb62:	e00f      	b.n	800fb84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fb6a:	2b02      	cmp	r3, #2
 800fb6c:	d00a      	beq.n	800fb84 <prvDeleteTCB+0x60>
	__asm volatile
 800fb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb72:	f383 8811 	msr	BASEPRI, r3
 800fb76:	f3bf 8f6f 	isb	sy
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	60fb      	str	r3, [r7, #12]
}
 800fb80:	bf00      	nop
 800fb82:	e7fe      	b.n	800fb82 <prvDeleteTCB+0x5e>
	}
 800fb84:	bf00      	nop
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b083      	sub	sp, #12
 800fb90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb92:	4b0c      	ldr	r3, [pc, #48]	; (800fbc4 <prvResetNextTaskUnblockTime+0x38>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d104      	bne.n	800fba6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fb9c:	4b0a      	ldr	r3, [pc, #40]	; (800fbc8 <prvResetNextTaskUnblockTime+0x3c>)
 800fb9e:	f04f 32ff 	mov.w	r2, #4294967295
 800fba2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fba4:	e008      	b.n	800fbb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fba6:	4b07      	ldr	r3, [pc, #28]	; (800fbc4 <prvResetNextTaskUnblockTime+0x38>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	68db      	ldr	r3, [r3, #12]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	4a04      	ldr	r2, [pc, #16]	; (800fbc8 <prvResetNextTaskUnblockTime+0x3c>)
 800fbb6:	6013      	str	r3, [r2, #0]
}
 800fbb8:	bf00      	nop
 800fbba:	370c      	adds	r7, #12
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr
 800fbc4:	2000325c 	.word	0x2000325c
 800fbc8:	200032c4 	.word	0x200032c4

0800fbcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fbcc:	b480      	push	{r7}
 800fbce:	b083      	sub	sp, #12
 800fbd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fbd2:	4b0b      	ldr	r3, [pc, #44]	; (800fc00 <xTaskGetSchedulerState+0x34>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d102      	bne.n	800fbe0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fbda:	2301      	movs	r3, #1
 800fbdc:	607b      	str	r3, [r7, #4]
 800fbde:	e008      	b.n	800fbf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbe0:	4b08      	ldr	r3, [pc, #32]	; (800fc04 <xTaskGetSchedulerState+0x38>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d102      	bne.n	800fbee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fbe8:	2302      	movs	r3, #2
 800fbea:	607b      	str	r3, [r7, #4]
 800fbec:	e001      	b.n	800fbf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fbf2:	687b      	ldr	r3, [r7, #4]
	}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	370c      	adds	r7, #12
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr
 800fc00:	200032b0 	.word	0x200032b0
 800fc04:	200032cc 	.word	0x200032cc

0800fc08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b086      	sub	sp, #24
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fc14:	2300      	movs	r3, #0
 800fc16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d056      	beq.n	800fccc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fc1e:	4b2e      	ldr	r3, [pc, #184]	; (800fcd8 <xTaskPriorityDisinherit+0xd0>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	693a      	ldr	r2, [r7, #16]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d00a      	beq.n	800fc3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2c:	f383 8811 	msr	BASEPRI, r3
 800fc30:	f3bf 8f6f 	isb	sy
 800fc34:	f3bf 8f4f 	dsb	sy
 800fc38:	60fb      	str	r3, [r7, #12]
}
 800fc3a:	bf00      	nop
 800fc3c:	e7fe      	b.n	800fc3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d10a      	bne.n	800fc5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4a:	f383 8811 	msr	BASEPRI, r3
 800fc4e:	f3bf 8f6f 	isb	sy
 800fc52:	f3bf 8f4f 	dsb	sy
 800fc56:	60bb      	str	r3, [r7, #8]
}
 800fc58:	bf00      	nop
 800fc5a:	e7fe      	b.n	800fc5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc60:	1e5a      	subs	r2, r3, #1
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d02c      	beq.n	800fccc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d128      	bne.n	800fccc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	3304      	adds	r3, #4
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fe f99e 	bl	800dfc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc9c:	4b0f      	ldr	r3, [pc, #60]	; (800fcdc <xTaskPriorityDisinherit+0xd4>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d903      	bls.n	800fcac <xTaskPriorityDisinherit+0xa4>
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fca8:	4a0c      	ldr	r2, [pc, #48]	; (800fcdc <xTaskPriorityDisinherit+0xd4>)
 800fcaa:	6013      	str	r3, [r2, #0]
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcb0:	4613      	mov	r3, r2
 800fcb2:	009b      	lsls	r3, r3, #2
 800fcb4:	4413      	add	r3, r2
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	4a09      	ldr	r2, [pc, #36]	; (800fce0 <xTaskPriorityDisinherit+0xd8>)
 800fcba:	441a      	add	r2, r3
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	3304      	adds	r3, #4
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	4610      	mov	r0, r2
 800fcc4:	f7fe f91f 	bl	800df06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fcc8:	2301      	movs	r3, #1
 800fcca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fccc:	697b      	ldr	r3, [r7, #20]
	}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3718      	adds	r7, #24
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	20002dd0 	.word	0x20002dd0
 800fcdc:	200032ac 	.word	0x200032ac
 800fce0:	20002dd4 	.word	0x20002dd4

0800fce4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b084      	sub	sp, #16
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
 800fcec:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800fcee:	6839      	ldr	r1, [r7, #0]
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f001 ffed 	bl	8011cd0 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f7f0 fa72 	bl	80001e0 <strlen>
 800fcfc:	60f8      	str	r0, [r7, #12]
 800fcfe:	e007      	b.n	800fd10 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	4413      	add	r3, r2
 800fd06:	2220      	movs	r2, #32
 800fd08:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	60fb      	str	r3, [r7, #12]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2b0e      	cmp	r3, #14
 800fd14:	d9f4      	bls.n	800fd00 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	4413      	add	r3, r2
	}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3710      	adds	r7, #16
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
	...

0800fd30 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800fd30:	b590      	push	{r4, r7, lr}
 800fd32:	b089      	sub	sp, #36	; 0x24
 800fd34:	af02      	add	r7, sp, #8
 800fd36:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fd3e:	4b45      	ldr	r3, [pc, #276]	; (800fe54 <vTaskList+0x124>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800fd44:	4b43      	ldr	r3, [pc, #268]	; (800fe54 <vTaskList+0x124>)
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	4613      	mov	r3, r2
 800fd4a:	00db      	lsls	r3, r3, #3
 800fd4c:	4413      	add	r3, r2
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	4618      	mov	r0, r3
 800fd52:	f000 fef9 	bl	8010b48 <pvPortMalloc>
 800fd56:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d076      	beq.n	800fe4c <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800fd5e:	2200      	movs	r2, #0
 800fd60:	68f9      	ldr	r1, [r7, #12]
 800fd62:	68b8      	ldr	r0, [r7, #8]
 800fd64:	f7ff fa80 	bl	800f268 <uxTaskGetSystemState>
 800fd68:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	617b      	str	r3, [r7, #20]
 800fd6e:	e066      	b.n	800fe3e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fd70:	697a      	ldr	r2, [r7, #20]
 800fd72:	4613      	mov	r3, r2
 800fd74:	00db      	lsls	r3, r3, #3
 800fd76:	4413      	add	r3, r2
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	4413      	add	r3, r2
 800fd80:	7b1b      	ldrb	r3, [r3, #12]
 800fd82:	2b04      	cmp	r3, #4
 800fd84:	d81b      	bhi.n	800fdbe <vTaskList+0x8e>
 800fd86:	a201      	add	r2, pc, #4	; (adr r2, 800fd8c <vTaskList+0x5c>)
 800fd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd8c:	0800fda1 	.word	0x0800fda1
 800fd90:	0800fda7 	.word	0x0800fda7
 800fd94:	0800fdad 	.word	0x0800fdad
 800fd98:	0800fdb3 	.word	0x0800fdb3
 800fd9c:	0800fdb9 	.word	0x0800fdb9
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800fda0:	2358      	movs	r3, #88	; 0x58
 800fda2:	74fb      	strb	r3, [r7, #19]
										break;
 800fda4:	e00e      	b.n	800fdc4 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800fda6:	2352      	movs	r3, #82	; 0x52
 800fda8:	74fb      	strb	r3, [r7, #19]
										break;
 800fdaa:	e00b      	b.n	800fdc4 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800fdac:	2342      	movs	r3, #66	; 0x42
 800fdae:	74fb      	strb	r3, [r7, #19]
										break;
 800fdb0:	e008      	b.n	800fdc4 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800fdb2:	2353      	movs	r3, #83	; 0x53
 800fdb4:	74fb      	strb	r3, [r7, #19]
										break;
 800fdb6:	e005      	b.n	800fdc4 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800fdb8:	2344      	movs	r3, #68	; 0x44
 800fdba:	74fb      	strb	r3, [r7, #19]
										break;
 800fdbc:	e002      	b.n	800fdc4 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	74fb      	strb	r3, [r7, #19]
										break;
 800fdc2:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fdc4:	697a      	ldr	r2, [r7, #20]
 800fdc6:	4613      	mov	r3, r2
 800fdc8:	00db      	lsls	r3, r3, #3
 800fdca:	4413      	add	r3, r2
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	461a      	mov	r2, r3
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	4413      	add	r3, r2
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f7ff ff83 	bl	800fce4 <prvWriteNameToBuffer>
 800fdde:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800fde0:	7cf9      	ldrb	r1, [r7, #19]
 800fde2:	697a      	ldr	r2, [r7, #20]
 800fde4:	4613      	mov	r3, r2
 800fde6:	00db      	lsls	r3, r3, #3
 800fde8:	4413      	add	r3, r2
 800fdea:	009b      	lsls	r3, r3, #2
 800fdec:	461a      	mov	r2, r3
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	6918      	ldr	r0, [r3, #16]
 800fdf4:	697a      	ldr	r2, [r7, #20]
 800fdf6:	4613      	mov	r3, r2
 800fdf8:	00db      	lsls	r3, r3, #3
 800fdfa:	4413      	add	r3, r2
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	461a      	mov	r2, r3
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	4413      	add	r3, r2
 800fe04:	8c1b      	ldrh	r3, [r3, #32]
 800fe06:	461c      	mov	r4, r3
 800fe08:	697a      	ldr	r2, [r7, #20]
 800fe0a:	4613      	mov	r3, r2
 800fe0c:	00db      	lsls	r3, r3, #3
 800fe0e:	4413      	add	r3, r2
 800fe10:	009b      	lsls	r3, r3, #2
 800fe12:	461a      	mov	r2, r3
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	4413      	add	r3, r2
 800fe18:	689b      	ldr	r3, [r3, #8]
 800fe1a:	9301      	str	r3, [sp, #4]
 800fe1c:	9400      	str	r4, [sp, #0]
 800fe1e:	4603      	mov	r3, r0
 800fe20:	460a      	mov	r2, r1
 800fe22:	490d      	ldr	r1, [pc, #52]	; (800fe58 <vTaskList+0x128>)
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f001 ff33 	bl	8011c90 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f7f0 f9d8 	bl	80001e0 <strlen>
 800fe30:	4602      	mov	r2, r0
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4413      	add	r3, r2
 800fe36:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	617b      	str	r3, [r7, #20]
 800fe3e:	697a      	ldr	r2, [r7, #20]
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d394      	bcc.n	800fd70 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800fe46:	68b8      	ldr	r0, [r7, #8]
 800fe48:	f000 ff4a 	bl	8010ce0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fe4c:	bf00      	nop
 800fe4e:	371c      	adds	r7, #28
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd90      	pop	{r4, r7, pc}
 800fe54:	200032a4 	.word	0x200032a4
 800fe58:	08012790 	.word	0x08012790

0800fe5c <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b088      	sub	sp, #32
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2200      	movs	r2, #0
 800fe68:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fe6a:	4b3a      	ldr	r3, [pc, #232]	; (800ff54 <vTaskGetRunTimeStats+0xf8>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800fe70:	4b38      	ldr	r3, [pc, #224]	; (800ff54 <vTaskGetRunTimeStats+0xf8>)
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	4613      	mov	r3, r2
 800fe76:	00db      	lsls	r3, r3, #3
 800fe78:	4413      	add	r3, r2
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f000 fe63 	bl	8010b48 <pvPortMalloc>
 800fe82:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d05f      	beq.n	800ff4a <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800fe8a:	f107 030c 	add.w	r3, r7, #12
 800fe8e:	461a      	mov	r2, r3
 800fe90:	69b9      	ldr	r1, [r7, #24]
 800fe92:	6978      	ldr	r0, [r7, #20]
 800fe94:	f7ff f9e8 	bl	800f268 <uxTaskGetSystemState>
 800fe98:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	4a2e      	ldr	r2, [pc, #184]	; (800ff58 <vTaskGetRunTimeStats+0xfc>)
 800fe9e:	fba2 2303 	umull	r2, r3, r2, r3
 800fea2:	095b      	lsrs	r3, r3, #5
 800fea4:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d04b      	beq.n	800ff44 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800feac:	2300      	movs	r3, #0
 800feae:	61fb      	str	r3, [r7, #28]
 800feb0:	e044      	b.n	800ff3c <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800feb2:	69fa      	ldr	r2, [r7, #28]
 800feb4:	4613      	mov	r3, r2
 800feb6:	00db      	lsls	r3, r3, #3
 800feb8:	4413      	add	r3, r2
 800feba:	009b      	lsls	r3, r3, #2
 800febc:	461a      	mov	r2, r3
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	4413      	add	r3, r2
 800fec2:	699a      	ldr	r2, [r3, #24]
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800feca:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fecc:	69fa      	ldr	r2, [r7, #28]
 800fece:	4613      	mov	r3, r2
 800fed0:	00db      	lsls	r3, r3, #3
 800fed2:	4413      	add	r3, r2
 800fed4:	009b      	lsls	r3, r3, #2
 800fed6:	461a      	mov	r2, r3
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	4413      	add	r3, r2
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	4619      	mov	r1, r3
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f7ff feff 	bl	800fce4 <prvWriteNameToBuffer>
 800fee6:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00e      	beq.n	800ff0c <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800feee:	69fa      	ldr	r2, [r7, #28]
 800fef0:	4613      	mov	r3, r2
 800fef2:	00db      	lsls	r3, r3, #3
 800fef4:	4413      	add	r3, r2
 800fef6:	009b      	lsls	r3, r3, #2
 800fef8:	461a      	mov	r2, r3
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	4413      	add	r3, r2
 800fefe:	699a      	ldr	r2, [r3, #24]
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	4916      	ldr	r1, [pc, #88]	; (800ff5c <vTaskGetRunTimeStats+0x100>)
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f001 fec3 	bl	8011c90 <siprintf>
 800ff0a:	e00d      	b.n	800ff28 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ff0c:	69fa      	ldr	r2, [r7, #28]
 800ff0e:	4613      	mov	r3, r2
 800ff10:	00db      	lsls	r3, r3, #3
 800ff12:	4413      	add	r3, r2
 800ff14:	009b      	lsls	r3, r3, #2
 800ff16:	461a      	mov	r2, r3
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	4413      	add	r3, r2
 800ff1c:	699b      	ldr	r3, [r3, #24]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	490f      	ldr	r1, [pc, #60]	; (800ff60 <vTaskGetRunTimeStats+0x104>)
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f001 feb4 	bl	8011c90 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f7f0 f959 	bl	80001e0 <strlen>
 800ff2e:	4602      	mov	r2, r0
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	4413      	add	r3, r2
 800ff34:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800ff36:	69fb      	ldr	r3, [r7, #28]
 800ff38:	3301      	adds	r3, #1
 800ff3a:	61fb      	str	r3, [r7, #28]
 800ff3c:	69fa      	ldr	r2, [r7, #28]
 800ff3e:	69bb      	ldr	r3, [r7, #24]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d3b6      	bcc.n	800feb2 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800ff44:	6978      	ldr	r0, [r7, #20]
 800ff46:	f000 fecb 	bl	8010ce0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff4a:	bf00      	nop
 800ff4c:	3720      	adds	r7, #32
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	200032a4 	.word	0x200032a4
 800ff58:	51eb851f 	.word	0x51eb851f
 800ff5c:	080127a0 	.word	0x080127a0
 800ff60:	080127ac 	.word	0x080127ac

0800ff64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ff6e:	4b21      	ldr	r3, [pc, #132]	; (800fff4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff74:	4b20      	ldr	r3, [pc, #128]	; (800fff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	3304      	adds	r3, #4
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7fe f820 	bl	800dfc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff86:	d10a      	bne.n	800ff9e <prvAddCurrentTaskToDelayedList+0x3a>
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d007      	beq.n	800ff9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ff8e:	4b1a      	ldr	r3, [pc, #104]	; (800fff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	3304      	adds	r3, #4
 800ff94:	4619      	mov	r1, r3
 800ff96:	4819      	ldr	r0, [pc, #100]	; (800fffc <prvAddCurrentTaskToDelayedList+0x98>)
 800ff98:	f7fd ffb5 	bl	800df06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ff9c:	e026      	b.n	800ffec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ff9e:	68fa      	ldr	r2, [r7, #12]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ffa6:	4b14      	ldr	r3, [pc, #80]	; (800fff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	68ba      	ldr	r2, [r7, #8]
 800ffac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ffae:	68ba      	ldr	r2, [r7, #8]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d209      	bcs.n	800ffca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffb6:	4b12      	ldr	r3, [pc, #72]	; (8010000 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	4b0f      	ldr	r3, [pc, #60]	; (800fff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	3304      	adds	r3, #4
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	4610      	mov	r0, r2
 800ffc4:	f7fd ffc3 	bl	800df4e <vListInsert>
}
 800ffc8:	e010      	b.n	800ffec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffca:	4b0e      	ldr	r3, [pc, #56]	; (8010004 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ffcc:	681a      	ldr	r2, [r3, #0]
 800ffce:	4b0a      	ldr	r3, [pc, #40]	; (800fff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	3304      	adds	r3, #4
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	4610      	mov	r0, r2
 800ffd8:	f7fd ffb9 	bl	800df4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ffdc:	4b0a      	ldr	r3, [pc, #40]	; (8010008 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	68ba      	ldr	r2, [r7, #8]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d202      	bcs.n	800ffec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ffe6:	4a08      	ldr	r2, [pc, #32]	; (8010008 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	6013      	str	r3, [r2, #0]
}
 800ffec:	bf00      	nop
 800ffee:	3710      	adds	r7, #16
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	200032a8 	.word	0x200032a8
 800fff8:	20002dd0 	.word	0x20002dd0
 800fffc:	20003290 	.word	0x20003290
 8010000:	20003260 	.word	0x20003260
 8010004:	2000325c 	.word	0x2000325c
 8010008:	200032c4 	.word	0x200032c4

0801000c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b08a      	sub	sp, #40	; 0x28
 8010010:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010012:	2300      	movs	r3, #0
 8010014:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010016:	f000 fb07 	bl	8010628 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801001a:	4b1c      	ldr	r3, [pc, #112]	; (801008c <xTimerCreateTimerTask+0x80>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d021      	beq.n	8010066 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010022:	2300      	movs	r3, #0
 8010024:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010026:	2300      	movs	r3, #0
 8010028:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801002a:	1d3a      	adds	r2, r7, #4
 801002c:	f107 0108 	add.w	r1, r7, #8
 8010030:	f107 030c 	add.w	r3, r7, #12
 8010034:	4618      	mov	r0, r3
 8010036:	f7fd ff1f 	bl	800de78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801003a:	6879      	ldr	r1, [r7, #4]
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	68fa      	ldr	r2, [r7, #12]
 8010040:	9202      	str	r2, [sp, #8]
 8010042:	9301      	str	r3, [sp, #4]
 8010044:	2302      	movs	r3, #2
 8010046:	9300      	str	r3, [sp, #0]
 8010048:	2300      	movs	r3, #0
 801004a:	460a      	mov	r2, r1
 801004c:	4910      	ldr	r1, [pc, #64]	; (8010090 <xTimerCreateTimerTask+0x84>)
 801004e:	4811      	ldr	r0, [pc, #68]	; (8010094 <xTimerCreateTimerTask+0x88>)
 8010050:	f7fe fd86 	bl	800eb60 <xTaskCreateStatic>
 8010054:	4603      	mov	r3, r0
 8010056:	4a10      	ldr	r2, [pc, #64]	; (8010098 <xTimerCreateTimerTask+0x8c>)
 8010058:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801005a:	4b0f      	ldr	r3, [pc, #60]	; (8010098 <xTimerCreateTimerTask+0x8c>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d001      	beq.n	8010066 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010062:	2301      	movs	r3, #1
 8010064:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d10a      	bne.n	8010082 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801006c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010070:	f383 8811 	msr	BASEPRI, r3
 8010074:	f3bf 8f6f 	isb	sy
 8010078:	f3bf 8f4f 	dsb	sy
 801007c:	613b      	str	r3, [r7, #16]
}
 801007e:	bf00      	nop
 8010080:	e7fe      	b.n	8010080 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010082:	697b      	ldr	r3, [r7, #20]
}
 8010084:	4618      	mov	r0, r3
 8010086:	3718      	adds	r7, #24
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	20003308 	.word	0x20003308
 8010090:	080127b8 	.word	0x080127b8
 8010094:	080101d1 	.word	0x080101d1
 8010098:	2000330c 	.word	0x2000330c

0801009c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b08a      	sub	sp, #40	; 0x28
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	607a      	str	r2, [r7, #4]
 80100a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80100aa:	2300      	movs	r3, #0
 80100ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d10a      	bne.n	80100ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80100b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b8:	f383 8811 	msr	BASEPRI, r3
 80100bc:	f3bf 8f6f 	isb	sy
 80100c0:	f3bf 8f4f 	dsb	sy
 80100c4:	623b      	str	r3, [r7, #32]
}
 80100c6:	bf00      	nop
 80100c8:	e7fe      	b.n	80100c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80100ca:	4b1a      	ldr	r3, [pc, #104]	; (8010134 <xTimerGenericCommand+0x98>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d02a      	beq.n	8010128 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	2b05      	cmp	r3, #5
 80100e2:	dc18      	bgt.n	8010116 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80100e4:	f7ff fd72 	bl	800fbcc <xTaskGetSchedulerState>
 80100e8:	4603      	mov	r3, r0
 80100ea:	2b02      	cmp	r3, #2
 80100ec:	d109      	bne.n	8010102 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80100ee:	4b11      	ldr	r3, [pc, #68]	; (8010134 <xTimerGenericCommand+0x98>)
 80100f0:	6818      	ldr	r0, [r3, #0]
 80100f2:	f107 0110 	add.w	r1, r7, #16
 80100f6:	2300      	movs	r3, #0
 80100f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100fa:	f7fe f8c9 	bl	800e290 <xQueueGenericSend>
 80100fe:	6278      	str	r0, [r7, #36]	; 0x24
 8010100:	e012      	b.n	8010128 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010102:	4b0c      	ldr	r3, [pc, #48]	; (8010134 <xTimerGenericCommand+0x98>)
 8010104:	6818      	ldr	r0, [r3, #0]
 8010106:	f107 0110 	add.w	r1, r7, #16
 801010a:	2300      	movs	r3, #0
 801010c:	2200      	movs	r2, #0
 801010e:	f7fe f8bf 	bl	800e290 <xQueueGenericSend>
 8010112:	6278      	str	r0, [r7, #36]	; 0x24
 8010114:	e008      	b.n	8010128 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010116:	4b07      	ldr	r3, [pc, #28]	; (8010134 <xTimerGenericCommand+0x98>)
 8010118:	6818      	ldr	r0, [r3, #0]
 801011a:	f107 0110 	add.w	r1, r7, #16
 801011e:	2300      	movs	r3, #0
 8010120:	683a      	ldr	r2, [r7, #0]
 8010122:	f7fe f9b3 	bl	800e48c <xQueueGenericSendFromISR>
 8010126:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801012a:	4618      	mov	r0, r3
 801012c:	3728      	adds	r7, #40	; 0x28
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	20003308 	.word	0x20003308

08010138 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b088      	sub	sp, #32
 801013c:	af02      	add	r7, sp, #8
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010142:	4b22      	ldr	r3, [pc, #136]	; (80101cc <prvProcessExpiredTimer+0x94>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	3304      	adds	r3, #4
 8010150:	4618      	mov	r0, r3
 8010152:	f7fd ff35 	bl	800dfc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801015c:	f003 0304 	and.w	r3, r3, #4
 8010160:	2b00      	cmp	r3, #0
 8010162:	d022      	beq.n	80101aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	699a      	ldr	r2, [r3, #24]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	18d1      	adds	r1, r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	683a      	ldr	r2, [r7, #0]
 8010170:	6978      	ldr	r0, [r7, #20]
 8010172:	f000 f8d1 	bl	8010318 <prvInsertTimerInActiveList>
 8010176:	4603      	mov	r3, r0
 8010178:	2b00      	cmp	r3, #0
 801017a:	d01f      	beq.n	80101bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801017c:	2300      	movs	r3, #0
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	2300      	movs	r3, #0
 8010182:	687a      	ldr	r2, [r7, #4]
 8010184:	2100      	movs	r1, #0
 8010186:	6978      	ldr	r0, [r7, #20]
 8010188:	f7ff ff88 	bl	801009c <xTimerGenericCommand>
 801018c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d113      	bne.n	80101bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010198:	f383 8811 	msr	BASEPRI, r3
 801019c:	f3bf 8f6f 	isb	sy
 80101a0:	f3bf 8f4f 	dsb	sy
 80101a4:	60fb      	str	r3, [r7, #12]
}
 80101a6:	bf00      	nop
 80101a8:	e7fe      	b.n	80101a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80101b0:	f023 0301 	bic.w	r3, r3, #1
 80101b4:	b2da      	uxtb	r2, r3
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	6a1b      	ldr	r3, [r3, #32]
 80101c0:	6978      	ldr	r0, [r7, #20]
 80101c2:	4798      	blx	r3
}
 80101c4:	bf00      	nop
 80101c6:	3718      	adds	r7, #24
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	20003300 	.word	0x20003300

080101d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80101d8:	f107 0308 	add.w	r3, r7, #8
 80101dc:	4618      	mov	r0, r3
 80101de:	f000 f857 	bl	8010290 <prvGetNextExpireTime>
 80101e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	4619      	mov	r1, r3
 80101e8:	68f8      	ldr	r0, [r7, #12]
 80101ea:	f000 f803 	bl	80101f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80101ee:	f000 f8d5 	bl	801039c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80101f2:	e7f1      	b.n	80101d8 <prvTimerTask+0x8>

080101f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
 80101fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80101fe:	f7fe ff77 	bl	800f0f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010202:	f107 0308 	add.w	r3, r7, #8
 8010206:	4618      	mov	r0, r3
 8010208:	f000 f866 	bl	80102d8 <prvSampleTimeNow>
 801020c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d130      	bne.n	8010276 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d10a      	bne.n	8010230 <prvProcessTimerOrBlockTask+0x3c>
 801021a:	687a      	ldr	r2, [r7, #4]
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	429a      	cmp	r2, r3
 8010220:	d806      	bhi.n	8010230 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010222:	f7fe ff73 	bl	800f10c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010226:	68f9      	ldr	r1, [r7, #12]
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f7ff ff85 	bl	8010138 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801022e:	e024      	b.n	801027a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d008      	beq.n	8010248 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010236:	4b13      	ldr	r3, [pc, #76]	; (8010284 <prvProcessTimerOrBlockTask+0x90>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d101      	bne.n	8010244 <prvProcessTimerOrBlockTask+0x50>
 8010240:	2301      	movs	r3, #1
 8010242:	e000      	b.n	8010246 <prvProcessTimerOrBlockTask+0x52>
 8010244:	2300      	movs	r3, #0
 8010246:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010248:	4b0f      	ldr	r3, [pc, #60]	; (8010288 <prvProcessTimerOrBlockTask+0x94>)
 801024a:	6818      	ldr	r0, [r3, #0]
 801024c:	687a      	ldr	r2, [r7, #4]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	1ad3      	subs	r3, r2, r3
 8010252:	683a      	ldr	r2, [r7, #0]
 8010254:	4619      	mov	r1, r3
 8010256:	f7fe fc4f 	bl	800eaf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801025a:	f7fe ff57 	bl	800f10c <xTaskResumeAll>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d10a      	bne.n	801027a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010264:	4b09      	ldr	r3, [pc, #36]	; (801028c <prvProcessTimerOrBlockTask+0x98>)
 8010266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801026a:	601a      	str	r2, [r3, #0]
 801026c:	f3bf 8f4f 	dsb	sy
 8010270:	f3bf 8f6f 	isb	sy
}
 8010274:	e001      	b.n	801027a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010276:	f7fe ff49 	bl	800f10c <xTaskResumeAll>
}
 801027a:	bf00      	nop
 801027c:	3710      	adds	r7, #16
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	20003304 	.word	0x20003304
 8010288:	20003308 	.word	0x20003308
 801028c:	e000ed04 	.word	0xe000ed04

08010290 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010290:	b480      	push	{r7}
 8010292:	b085      	sub	sp, #20
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010298:	4b0e      	ldr	r3, [pc, #56]	; (80102d4 <prvGetNextExpireTime+0x44>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d101      	bne.n	80102a6 <prvGetNextExpireTime+0x16>
 80102a2:	2201      	movs	r2, #1
 80102a4:	e000      	b.n	80102a8 <prvGetNextExpireTime+0x18>
 80102a6:	2200      	movs	r2, #0
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d105      	bne.n	80102c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80102b4:	4b07      	ldr	r3, [pc, #28]	; (80102d4 <prvGetNextExpireTime+0x44>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	60fb      	str	r3, [r7, #12]
 80102be:	e001      	b.n	80102c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80102c0:	2300      	movs	r3, #0
 80102c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80102c4:	68fb      	ldr	r3, [r7, #12]
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3714      	adds	r7, #20
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop
 80102d4:	20003300 	.word	0x20003300

080102d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80102e0:	f7fe ffb2 	bl	800f248 <xTaskGetTickCount>
 80102e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80102e6:	4b0b      	ldr	r3, [pc, #44]	; (8010314 <prvSampleTimeNow+0x3c>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	68fa      	ldr	r2, [r7, #12]
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d205      	bcs.n	80102fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80102f0:	f000 f936 	bl	8010560 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2201      	movs	r2, #1
 80102f8:	601a      	str	r2, [r3, #0]
 80102fa:	e002      	b.n	8010302 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2200      	movs	r2, #0
 8010300:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010302:	4a04      	ldr	r2, [pc, #16]	; (8010314 <prvSampleTimeNow+0x3c>)
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010308:	68fb      	ldr	r3, [r7, #12]
}
 801030a:	4618      	mov	r0, r3
 801030c:	3710      	adds	r7, #16
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}
 8010312:	bf00      	nop
 8010314:	20003310 	.word	0x20003310

08010318 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b086      	sub	sp, #24
 801031c:	af00      	add	r7, sp, #0
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	60b9      	str	r1, [r7, #8]
 8010322:	607a      	str	r2, [r7, #4]
 8010324:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010326:	2300      	movs	r3, #0
 8010328:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	68ba      	ldr	r2, [r7, #8]
 801032e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	68fa      	ldr	r2, [r7, #12]
 8010334:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010336:	68ba      	ldr	r2, [r7, #8]
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	429a      	cmp	r2, r3
 801033c:	d812      	bhi.n	8010364 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	1ad2      	subs	r2, r2, r3
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	699b      	ldr	r3, [r3, #24]
 8010348:	429a      	cmp	r2, r3
 801034a:	d302      	bcc.n	8010352 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801034c:	2301      	movs	r3, #1
 801034e:	617b      	str	r3, [r7, #20]
 8010350:	e01b      	b.n	801038a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010352:	4b10      	ldr	r3, [pc, #64]	; (8010394 <prvInsertTimerInActiveList+0x7c>)
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	3304      	adds	r3, #4
 801035a:	4619      	mov	r1, r3
 801035c:	4610      	mov	r0, r2
 801035e:	f7fd fdf6 	bl	800df4e <vListInsert>
 8010362:	e012      	b.n	801038a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	429a      	cmp	r2, r3
 801036a:	d206      	bcs.n	801037a <prvInsertTimerInActiveList+0x62>
 801036c:	68ba      	ldr	r2, [r7, #8]
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	429a      	cmp	r2, r3
 8010372:	d302      	bcc.n	801037a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010374:	2301      	movs	r3, #1
 8010376:	617b      	str	r3, [r7, #20]
 8010378:	e007      	b.n	801038a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801037a:	4b07      	ldr	r3, [pc, #28]	; (8010398 <prvInsertTimerInActiveList+0x80>)
 801037c:	681a      	ldr	r2, [r3, #0]
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	3304      	adds	r3, #4
 8010382:	4619      	mov	r1, r3
 8010384:	4610      	mov	r0, r2
 8010386:	f7fd fde2 	bl	800df4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801038a:	697b      	ldr	r3, [r7, #20]
}
 801038c:	4618      	mov	r0, r3
 801038e:	3718      	adds	r7, #24
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}
 8010394:	20003304 	.word	0x20003304
 8010398:	20003300 	.word	0x20003300

0801039c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b08e      	sub	sp, #56	; 0x38
 80103a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80103a2:	e0ca      	b.n	801053a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	da18      	bge.n	80103dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80103aa:	1d3b      	adds	r3, r7, #4
 80103ac:	3304      	adds	r3, #4
 80103ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80103b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d10a      	bne.n	80103cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80103b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ba:	f383 8811 	msr	BASEPRI, r3
 80103be:	f3bf 8f6f 	isb	sy
 80103c2:	f3bf 8f4f 	dsb	sy
 80103c6:	61fb      	str	r3, [r7, #28]
}
 80103c8:	bf00      	nop
 80103ca:	e7fe      	b.n	80103ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80103cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103d2:	6850      	ldr	r0, [r2, #4]
 80103d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103d6:	6892      	ldr	r2, [r2, #8]
 80103d8:	4611      	mov	r1, r2
 80103da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	f2c0 80aa 	blt.w	8010538 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80103e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ea:	695b      	ldr	r3, [r3, #20]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d004      	beq.n	80103fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f2:	3304      	adds	r3, #4
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fd fde3 	bl	800dfc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80103fa:	463b      	mov	r3, r7
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7ff ff6b 	bl	80102d8 <prvSampleTimeNow>
 8010402:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2b09      	cmp	r3, #9
 8010408:	f200 8097 	bhi.w	801053a <prvProcessReceivedCommands+0x19e>
 801040c:	a201      	add	r2, pc, #4	; (adr r2, 8010414 <prvProcessReceivedCommands+0x78>)
 801040e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010412:	bf00      	nop
 8010414:	0801043d 	.word	0x0801043d
 8010418:	0801043d 	.word	0x0801043d
 801041c:	0801043d 	.word	0x0801043d
 8010420:	080104b1 	.word	0x080104b1
 8010424:	080104c5 	.word	0x080104c5
 8010428:	0801050f 	.word	0x0801050f
 801042c:	0801043d 	.word	0x0801043d
 8010430:	0801043d 	.word	0x0801043d
 8010434:	080104b1 	.word	0x080104b1
 8010438:	080104c5 	.word	0x080104c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801043c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801043e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010442:	f043 0301 	orr.w	r3, r3, #1
 8010446:	b2da      	uxtb	r2, r3
 8010448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801044e:	68ba      	ldr	r2, [r7, #8]
 8010450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010452:	699b      	ldr	r3, [r3, #24]
 8010454:	18d1      	adds	r1, r2, r3
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801045a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801045c:	f7ff ff5c 	bl	8010318 <prvInsertTimerInActiveList>
 8010460:	4603      	mov	r3, r0
 8010462:	2b00      	cmp	r3, #0
 8010464:	d069      	beq.n	801053a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010468:	6a1b      	ldr	r3, [r3, #32]
 801046a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801046c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801046e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010474:	f003 0304 	and.w	r3, r3, #4
 8010478:	2b00      	cmp	r3, #0
 801047a:	d05e      	beq.n	801053a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801047c:	68ba      	ldr	r2, [r7, #8]
 801047e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010480:	699b      	ldr	r3, [r3, #24]
 8010482:	441a      	add	r2, r3
 8010484:	2300      	movs	r3, #0
 8010486:	9300      	str	r3, [sp, #0]
 8010488:	2300      	movs	r3, #0
 801048a:	2100      	movs	r1, #0
 801048c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801048e:	f7ff fe05 	bl	801009c <xTimerGenericCommand>
 8010492:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010494:	6a3b      	ldr	r3, [r7, #32]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d14f      	bne.n	801053a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801049a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801049e:	f383 8811 	msr	BASEPRI, r3
 80104a2:	f3bf 8f6f 	isb	sy
 80104a6:	f3bf 8f4f 	dsb	sy
 80104aa:	61bb      	str	r3, [r7, #24]
}
 80104ac:	bf00      	nop
 80104ae:	e7fe      	b.n	80104ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80104b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104b6:	f023 0301 	bic.w	r3, r3, #1
 80104ba:	b2da      	uxtb	r2, r3
 80104bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80104c2:	e03a      	b.n	801053a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80104c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104ca:	f043 0301 	orr.w	r3, r3, #1
 80104ce:	b2da      	uxtb	r2, r3
 80104d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80104d6:	68ba      	ldr	r2, [r7, #8]
 80104d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80104dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104de:	699b      	ldr	r3, [r3, #24]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d10a      	bne.n	80104fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80104e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e8:	f383 8811 	msr	BASEPRI, r3
 80104ec:	f3bf 8f6f 	isb	sy
 80104f0:	f3bf 8f4f 	dsb	sy
 80104f4:	617b      	str	r3, [r7, #20]
}
 80104f6:	bf00      	nop
 80104f8:	e7fe      	b.n	80104f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80104fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fc:	699a      	ldr	r2, [r3, #24]
 80104fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010500:	18d1      	adds	r1, r2, r3
 8010502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010508:	f7ff ff06 	bl	8010318 <prvInsertTimerInActiveList>
					break;
 801050c:	e015      	b.n	801053a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801050e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010514:	f003 0302 	and.w	r3, r3, #2
 8010518:	2b00      	cmp	r3, #0
 801051a:	d103      	bne.n	8010524 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801051c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801051e:	f000 fbdf 	bl	8010ce0 <vPortFree>
 8010522:	e00a      	b.n	801053a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801052a:	f023 0301 	bic.w	r3, r3, #1
 801052e:	b2da      	uxtb	r2, r3
 8010530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010536:	e000      	b.n	801053a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010538:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801053a:	4b08      	ldr	r3, [pc, #32]	; (801055c <prvProcessReceivedCommands+0x1c0>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	1d39      	adds	r1, r7, #4
 8010540:	2200      	movs	r2, #0
 8010542:	4618      	mov	r0, r3
 8010544:	f7fe f83e 	bl	800e5c4 <xQueueReceive>
 8010548:	4603      	mov	r3, r0
 801054a:	2b00      	cmp	r3, #0
 801054c:	f47f af2a 	bne.w	80103a4 <prvProcessReceivedCommands+0x8>
	}
}
 8010550:	bf00      	nop
 8010552:	bf00      	nop
 8010554:	3730      	adds	r7, #48	; 0x30
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	20003308 	.word	0x20003308

08010560 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b088      	sub	sp, #32
 8010564:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010566:	e048      	b.n	80105fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010568:	4b2d      	ldr	r3, [pc, #180]	; (8010620 <prvSwitchTimerLists+0xc0>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010572:	4b2b      	ldr	r3, [pc, #172]	; (8010620 <prvSwitchTimerLists+0xc0>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	68db      	ldr	r3, [r3, #12]
 8010578:	68db      	ldr	r3, [r3, #12]
 801057a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	3304      	adds	r3, #4
 8010580:	4618      	mov	r0, r3
 8010582:	f7fd fd1d 	bl	800dfc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	6a1b      	ldr	r3, [r3, #32]
 801058a:	68f8      	ldr	r0, [r7, #12]
 801058c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010594:	f003 0304 	and.w	r3, r3, #4
 8010598:	2b00      	cmp	r3, #0
 801059a:	d02e      	beq.n	80105fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	699b      	ldr	r3, [r3, #24]
 80105a0:	693a      	ldr	r2, [r7, #16]
 80105a2:	4413      	add	r3, r2
 80105a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80105a6:	68ba      	ldr	r2, [r7, #8]
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d90e      	bls.n	80105cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	68ba      	ldr	r2, [r7, #8]
 80105b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	68fa      	ldr	r2, [r7, #12]
 80105b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80105ba:	4b19      	ldr	r3, [pc, #100]	; (8010620 <prvSwitchTimerLists+0xc0>)
 80105bc:	681a      	ldr	r2, [r3, #0]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	3304      	adds	r3, #4
 80105c2:	4619      	mov	r1, r3
 80105c4:	4610      	mov	r0, r2
 80105c6:	f7fd fcc2 	bl	800df4e <vListInsert>
 80105ca:	e016      	b.n	80105fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105cc:	2300      	movs	r3, #0
 80105ce:	9300      	str	r3, [sp, #0]
 80105d0:	2300      	movs	r3, #0
 80105d2:	693a      	ldr	r2, [r7, #16]
 80105d4:	2100      	movs	r1, #0
 80105d6:	68f8      	ldr	r0, [r7, #12]
 80105d8:	f7ff fd60 	bl	801009c <xTimerGenericCommand>
 80105dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d10a      	bne.n	80105fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80105e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e8:	f383 8811 	msr	BASEPRI, r3
 80105ec:	f3bf 8f6f 	isb	sy
 80105f0:	f3bf 8f4f 	dsb	sy
 80105f4:	603b      	str	r3, [r7, #0]
}
 80105f6:	bf00      	nop
 80105f8:	e7fe      	b.n	80105f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80105fa:	4b09      	ldr	r3, [pc, #36]	; (8010620 <prvSwitchTimerLists+0xc0>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d1b1      	bne.n	8010568 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010604:	4b06      	ldr	r3, [pc, #24]	; (8010620 <prvSwitchTimerLists+0xc0>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801060a:	4b06      	ldr	r3, [pc, #24]	; (8010624 <prvSwitchTimerLists+0xc4>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	4a04      	ldr	r2, [pc, #16]	; (8010620 <prvSwitchTimerLists+0xc0>)
 8010610:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010612:	4a04      	ldr	r2, [pc, #16]	; (8010624 <prvSwitchTimerLists+0xc4>)
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	6013      	str	r3, [r2, #0]
}
 8010618:	bf00      	nop
 801061a:	3718      	adds	r7, #24
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}
 8010620:	20003300 	.word	0x20003300
 8010624:	20003304 	.word	0x20003304

08010628 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801062e:	f000 f969 	bl	8010904 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010632:	4b15      	ldr	r3, [pc, #84]	; (8010688 <prvCheckForValidListAndQueue+0x60>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d120      	bne.n	801067c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801063a:	4814      	ldr	r0, [pc, #80]	; (801068c <prvCheckForValidListAndQueue+0x64>)
 801063c:	f7fd fc36 	bl	800deac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010640:	4813      	ldr	r0, [pc, #76]	; (8010690 <prvCheckForValidListAndQueue+0x68>)
 8010642:	f7fd fc33 	bl	800deac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010646:	4b13      	ldr	r3, [pc, #76]	; (8010694 <prvCheckForValidListAndQueue+0x6c>)
 8010648:	4a10      	ldr	r2, [pc, #64]	; (801068c <prvCheckForValidListAndQueue+0x64>)
 801064a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801064c:	4b12      	ldr	r3, [pc, #72]	; (8010698 <prvCheckForValidListAndQueue+0x70>)
 801064e:	4a10      	ldr	r2, [pc, #64]	; (8010690 <prvCheckForValidListAndQueue+0x68>)
 8010650:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010652:	2300      	movs	r3, #0
 8010654:	9300      	str	r3, [sp, #0]
 8010656:	4b11      	ldr	r3, [pc, #68]	; (801069c <prvCheckForValidListAndQueue+0x74>)
 8010658:	4a11      	ldr	r2, [pc, #68]	; (80106a0 <prvCheckForValidListAndQueue+0x78>)
 801065a:	2110      	movs	r1, #16
 801065c:	200a      	movs	r0, #10
 801065e:	f7fd fd41 	bl	800e0e4 <xQueueGenericCreateStatic>
 8010662:	4603      	mov	r3, r0
 8010664:	4a08      	ldr	r2, [pc, #32]	; (8010688 <prvCheckForValidListAndQueue+0x60>)
 8010666:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010668:	4b07      	ldr	r3, [pc, #28]	; (8010688 <prvCheckForValidListAndQueue+0x60>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d005      	beq.n	801067c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010670:	4b05      	ldr	r3, [pc, #20]	; (8010688 <prvCheckForValidListAndQueue+0x60>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	490b      	ldr	r1, [pc, #44]	; (80106a4 <prvCheckForValidListAndQueue+0x7c>)
 8010676:	4618      	mov	r0, r3
 8010678:	f7fe fa14 	bl	800eaa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801067c:	f000 f972 	bl	8010964 <vPortExitCritical>
}
 8010680:	bf00      	nop
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	20003308 	.word	0x20003308
 801068c:	200032d8 	.word	0x200032d8
 8010690:	200032ec 	.word	0x200032ec
 8010694:	20003300 	.word	0x20003300
 8010698:	20003304 	.word	0x20003304
 801069c:	200033b4 	.word	0x200033b4
 80106a0:	20003314 	.word	0x20003314
 80106a4:	080127c0 	.word	0x080127c0

080106a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80106a8:	b480      	push	{r7}
 80106aa:	b085      	sub	sp, #20
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	3b04      	subs	r3, #4
 80106b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80106c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	3b04      	subs	r3, #4
 80106c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	f023 0201 	bic.w	r2, r3, #1
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	3b04      	subs	r3, #4
 80106d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80106d8:	4a0c      	ldr	r2, [pc, #48]	; (801070c <pxPortInitialiseStack+0x64>)
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	3b14      	subs	r3, #20
 80106e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	3b04      	subs	r3, #4
 80106ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f06f 0202 	mvn.w	r2, #2
 80106f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	3b20      	subs	r3, #32
 80106fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80106fe:	68fb      	ldr	r3, [r7, #12]
}
 8010700:	4618      	mov	r0, r3
 8010702:	3714      	adds	r7, #20
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr
 801070c:	08010711 	.word	0x08010711

08010710 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010710:	b480      	push	{r7}
 8010712:	b085      	sub	sp, #20
 8010714:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010716:	2300      	movs	r3, #0
 8010718:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801071a:	4b12      	ldr	r3, [pc, #72]	; (8010764 <prvTaskExitError+0x54>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010722:	d00a      	beq.n	801073a <prvTaskExitError+0x2a>
	__asm volatile
 8010724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010728:	f383 8811 	msr	BASEPRI, r3
 801072c:	f3bf 8f6f 	isb	sy
 8010730:	f3bf 8f4f 	dsb	sy
 8010734:	60fb      	str	r3, [r7, #12]
}
 8010736:	bf00      	nop
 8010738:	e7fe      	b.n	8010738 <prvTaskExitError+0x28>
	__asm volatile
 801073a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073e:	f383 8811 	msr	BASEPRI, r3
 8010742:	f3bf 8f6f 	isb	sy
 8010746:	f3bf 8f4f 	dsb	sy
 801074a:	60bb      	str	r3, [r7, #8]
}
 801074c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801074e:	bf00      	nop
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d0fc      	beq.n	8010750 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010756:	bf00      	nop
 8010758:	bf00      	nop
 801075a:	3714      	adds	r7, #20
 801075c:	46bd      	mov	sp, r7
 801075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010762:	4770      	bx	lr
 8010764:	20000124 	.word	0x20000124
	...

08010770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010770:	4b07      	ldr	r3, [pc, #28]	; (8010790 <pxCurrentTCBConst2>)
 8010772:	6819      	ldr	r1, [r3, #0]
 8010774:	6808      	ldr	r0, [r1, #0]
 8010776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801077a:	f380 8809 	msr	PSP, r0
 801077e:	f3bf 8f6f 	isb	sy
 8010782:	f04f 0000 	mov.w	r0, #0
 8010786:	f380 8811 	msr	BASEPRI, r0
 801078a:	4770      	bx	lr
 801078c:	f3af 8000 	nop.w

08010790 <pxCurrentTCBConst2>:
 8010790:	20002dd0 	.word	0x20002dd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010794:	bf00      	nop
 8010796:	bf00      	nop

08010798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010798:	4808      	ldr	r0, [pc, #32]	; (80107bc <prvPortStartFirstTask+0x24>)
 801079a:	6800      	ldr	r0, [r0, #0]
 801079c:	6800      	ldr	r0, [r0, #0]
 801079e:	f380 8808 	msr	MSP, r0
 80107a2:	f04f 0000 	mov.w	r0, #0
 80107a6:	f380 8814 	msr	CONTROL, r0
 80107aa:	b662      	cpsie	i
 80107ac:	b661      	cpsie	f
 80107ae:	f3bf 8f4f 	dsb	sy
 80107b2:	f3bf 8f6f 	isb	sy
 80107b6:	df00      	svc	0
 80107b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80107ba:	bf00      	nop
 80107bc:	e000ed08 	.word	0xe000ed08

080107c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b086      	sub	sp, #24
 80107c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80107c6:	4b46      	ldr	r3, [pc, #280]	; (80108e0 <xPortStartScheduler+0x120>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	4a46      	ldr	r2, [pc, #280]	; (80108e4 <xPortStartScheduler+0x124>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d10a      	bne.n	80107e6 <xPortStartScheduler+0x26>
	__asm volatile
 80107d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d4:	f383 8811 	msr	BASEPRI, r3
 80107d8:	f3bf 8f6f 	isb	sy
 80107dc:	f3bf 8f4f 	dsb	sy
 80107e0:	613b      	str	r3, [r7, #16]
}
 80107e2:	bf00      	nop
 80107e4:	e7fe      	b.n	80107e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80107e6:	4b3e      	ldr	r3, [pc, #248]	; (80108e0 <xPortStartScheduler+0x120>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4a3f      	ldr	r2, [pc, #252]	; (80108e8 <xPortStartScheduler+0x128>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d10a      	bne.n	8010806 <xPortStartScheduler+0x46>
	__asm volatile
 80107f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f4:	f383 8811 	msr	BASEPRI, r3
 80107f8:	f3bf 8f6f 	isb	sy
 80107fc:	f3bf 8f4f 	dsb	sy
 8010800:	60fb      	str	r3, [r7, #12]
}
 8010802:	bf00      	nop
 8010804:	e7fe      	b.n	8010804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010806:	4b39      	ldr	r3, [pc, #228]	; (80108ec <xPortStartScheduler+0x12c>)
 8010808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	b2db      	uxtb	r3, r3
 8010810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	22ff      	movs	r2, #255	; 0xff
 8010816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	b2db      	uxtb	r3, r3
 801081e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010820:	78fb      	ldrb	r3, [r7, #3]
 8010822:	b2db      	uxtb	r3, r3
 8010824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010828:	b2da      	uxtb	r2, r3
 801082a:	4b31      	ldr	r3, [pc, #196]	; (80108f0 <xPortStartScheduler+0x130>)
 801082c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801082e:	4b31      	ldr	r3, [pc, #196]	; (80108f4 <xPortStartScheduler+0x134>)
 8010830:	2207      	movs	r2, #7
 8010832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010834:	e009      	b.n	801084a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010836:	4b2f      	ldr	r3, [pc, #188]	; (80108f4 <xPortStartScheduler+0x134>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	3b01      	subs	r3, #1
 801083c:	4a2d      	ldr	r2, [pc, #180]	; (80108f4 <xPortStartScheduler+0x134>)
 801083e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010840:	78fb      	ldrb	r3, [r7, #3]
 8010842:	b2db      	uxtb	r3, r3
 8010844:	005b      	lsls	r3, r3, #1
 8010846:	b2db      	uxtb	r3, r3
 8010848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801084a:	78fb      	ldrb	r3, [r7, #3]
 801084c:	b2db      	uxtb	r3, r3
 801084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010852:	2b80      	cmp	r3, #128	; 0x80
 8010854:	d0ef      	beq.n	8010836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010856:	4b27      	ldr	r3, [pc, #156]	; (80108f4 <xPortStartScheduler+0x134>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f1c3 0307 	rsb	r3, r3, #7
 801085e:	2b04      	cmp	r3, #4
 8010860:	d00a      	beq.n	8010878 <xPortStartScheduler+0xb8>
	__asm volatile
 8010862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010866:	f383 8811 	msr	BASEPRI, r3
 801086a:	f3bf 8f6f 	isb	sy
 801086e:	f3bf 8f4f 	dsb	sy
 8010872:	60bb      	str	r3, [r7, #8]
}
 8010874:	bf00      	nop
 8010876:	e7fe      	b.n	8010876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010878:	4b1e      	ldr	r3, [pc, #120]	; (80108f4 <xPortStartScheduler+0x134>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	021b      	lsls	r3, r3, #8
 801087e:	4a1d      	ldr	r2, [pc, #116]	; (80108f4 <xPortStartScheduler+0x134>)
 8010880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010882:	4b1c      	ldr	r3, [pc, #112]	; (80108f4 <xPortStartScheduler+0x134>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801088a:	4a1a      	ldr	r2, [pc, #104]	; (80108f4 <xPortStartScheduler+0x134>)
 801088c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	b2da      	uxtb	r2, r3
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010896:	4b18      	ldr	r3, [pc, #96]	; (80108f8 <xPortStartScheduler+0x138>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	4a17      	ldr	r2, [pc, #92]	; (80108f8 <xPortStartScheduler+0x138>)
 801089c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80108a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80108a2:	4b15      	ldr	r3, [pc, #84]	; (80108f8 <xPortStartScheduler+0x138>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	4a14      	ldr	r2, [pc, #80]	; (80108f8 <xPortStartScheduler+0x138>)
 80108a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80108ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80108ae:	f000 f8dd 	bl	8010a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80108b2:	4b12      	ldr	r3, [pc, #72]	; (80108fc <xPortStartScheduler+0x13c>)
 80108b4:	2200      	movs	r2, #0
 80108b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80108b8:	f000 f8fc 	bl	8010ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80108bc:	4b10      	ldr	r3, [pc, #64]	; (8010900 <xPortStartScheduler+0x140>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	4a0f      	ldr	r2, [pc, #60]	; (8010900 <xPortStartScheduler+0x140>)
 80108c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80108c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80108c8:	f7ff ff66 	bl	8010798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80108cc:	f7fe fe16 	bl	800f4fc <vTaskSwitchContext>
	prvTaskExitError();
 80108d0:	f7ff ff1e 	bl	8010710 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3718      	adds	r7, #24
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	e000ed00 	.word	0xe000ed00
 80108e4:	410fc271 	.word	0x410fc271
 80108e8:	410fc270 	.word	0x410fc270
 80108ec:	e000e400 	.word	0xe000e400
 80108f0:	20003404 	.word	0x20003404
 80108f4:	20003408 	.word	0x20003408
 80108f8:	e000ed20 	.word	0xe000ed20
 80108fc:	20000124 	.word	0x20000124
 8010900:	e000ef34 	.word	0xe000ef34

08010904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010904:	b480      	push	{r7}
 8010906:	b083      	sub	sp, #12
 8010908:	af00      	add	r7, sp, #0
	__asm volatile
 801090a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090e:	f383 8811 	msr	BASEPRI, r3
 8010912:	f3bf 8f6f 	isb	sy
 8010916:	f3bf 8f4f 	dsb	sy
 801091a:	607b      	str	r3, [r7, #4]
}
 801091c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801091e:	4b0f      	ldr	r3, [pc, #60]	; (801095c <vPortEnterCritical+0x58>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	3301      	adds	r3, #1
 8010924:	4a0d      	ldr	r2, [pc, #52]	; (801095c <vPortEnterCritical+0x58>)
 8010926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010928:	4b0c      	ldr	r3, [pc, #48]	; (801095c <vPortEnterCritical+0x58>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2b01      	cmp	r3, #1
 801092e:	d10f      	bne.n	8010950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010930:	4b0b      	ldr	r3, [pc, #44]	; (8010960 <vPortEnterCritical+0x5c>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	b2db      	uxtb	r3, r3
 8010936:	2b00      	cmp	r3, #0
 8010938:	d00a      	beq.n	8010950 <vPortEnterCritical+0x4c>
	__asm volatile
 801093a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801093e:	f383 8811 	msr	BASEPRI, r3
 8010942:	f3bf 8f6f 	isb	sy
 8010946:	f3bf 8f4f 	dsb	sy
 801094a:	603b      	str	r3, [r7, #0]
}
 801094c:	bf00      	nop
 801094e:	e7fe      	b.n	801094e <vPortEnterCritical+0x4a>
	}
}
 8010950:	bf00      	nop
 8010952:	370c      	adds	r7, #12
 8010954:	46bd      	mov	sp, r7
 8010956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095a:	4770      	bx	lr
 801095c:	20000124 	.word	0x20000124
 8010960:	e000ed04 	.word	0xe000ed04

08010964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010964:	b480      	push	{r7}
 8010966:	b083      	sub	sp, #12
 8010968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801096a:	4b12      	ldr	r3, [pc, #72]	; (80109b4 <vPortExitCritical+0x50>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d10a      	bne.n	8010988 <vPortExitCritical+0x24>
	__asm volatile
 8010972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010976:	f383 8811 	msr	BASEPRI, r3
 801097a:	f3bf 8f6f 	isb	sy
 801097e:	f3bf 8f4f 	dsb	sy
 8010982:	607b      	str	r3, [r7, #4]
}
 8010984:	bf00      	nop
 8010986:	e7fe      	b.n	8010986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010988:	4b0a      	ldr	r3, [pc, #40]	; (80109b4 <vPortExitCritical+0x50>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	3b01      	subs	r3, #1
 801098e:	4a09      	ldr	r2, [pc, #36]	; (80109b4 <vPortExitCritical+0x50>)
 8010990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010992:	4b08      	ldr	r3, [pc, #32]	; (80109b4 <vPortExitCritical+0x50>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d105      	bne.n	80109a6 <vPortExitCritical+0x42>
 801099a:	2300      	movs	r3, #0
 801099c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	f383 8811 	msr	BASEPRI, r3
}
 80109a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80109a6:	bf00      	nop
 80109a8:	370c      	adds	r7, #12
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	20000124 	.word	0x20000124
	...

080109c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80109c0:	f3ef 8009 	mrs	r0, PSP
 80109c4:	f3bf 8f6f 	isb	sy
 80109c8:	4b15      	ldr	r3, [pc, #84]	; (8010a20 <pxCurrentTCBConst>)
 80109ca:	681a      	ldr	r2, [r3, #0]
 80109cc:	f01e 0f10 	tst.w	lr, #16
 80109d0:	bf08      	it	eq
 80109d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80109d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109da:	6010      	str	r0, [r2, #0]
 80109dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80109e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80109e4:	f380 8811 	msr	BASEPRI, r0
 80109e8:	f3bf 8f4f 	dsb	sy
 80109ec:	f3bf 8f6f 	isb	sy
 80109f0:	f7fe fd84 	bl	800f4fc <vTaskSwitchContext>
 80109f4:	f04f 0000 	mov.w	r0, #0
 80109f8:	f380 8811 	msr	BASEPRI, r0
 80109fc:	bc09      	pop	{r0, r3}
 80109fe:	6819      	ldr	r1, [r3, #0]
 8010a00:	6808      	ldr	r0, [r1, #0]
 8010a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a06:	f01e 0f10 	tst.w	lr, #16
 8010a0a:	bf08      	it	eq
 8010a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010a10:	f380 8809 	msr	PSP, r0
 8010a14:	f3bf 8f6f 	isb	sy
 8010a18:	4770      	bx	lr
 8010a1a:	bf00      	nop
 8010a1c:	f3af 8000 	nop.w

08010a20 <pxCurrentTCBConst>:
 8010a20:	20002dd0 	.word	0x20002dd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010a24:	bf00      	nop
 8010a26:	bf00      	nop

08010a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8010a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a32:	f383 8811 	msr	BASEPRI, r3
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	607b      	str	r3, [r7, #4]
}
 8010a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010a42:	f7fe fca1 	bl	800f388 <xTaskIncrementTick>
 8010a46:	4603      	mov	r3, r0
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d003      	beq.n	8010a54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010a4c:	4b06      	ldr	r3, [pc, #24]	; (8010a68 <xPortSysTickHandler+0x40>)
 8010a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a52:	601a      	str	r2, [r3, #0]
 8010a54:	2300      	movs	r3, #0
 8010a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	f383 8811 	msr	BASEPRI, r3
}
 8010a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010a60:	bf00      	nop
 8010a62:	3708      	adds	r7, #8
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	e000ed04 	.word	0xe000ed04

08010a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010a70:	4b0b      	ldr	r3, [pc, #44]	; (8010aa0 <vPortSetupTimerInterrupt+0x34>)
 8010a72:	2200      	movs	r2, #0
 8010a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010a76:	4b0b      	ldr	r3, [pc, #44]	; (8010aa4 <vPortSetupTimerInterrupt+0x38>)
 8010a78:	2200      	movs	r2, #0
 8010a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010a7c:	4b0a      	ldr	r3, [pc, #40]	; (8010aa8 <vPortSetupTimerInterrupt+0x3c>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	4a0a      	ldr	r2, [pc, #40]	; (8010aac <vPortSetupTimerInterrupt+0x40>)
 8010a82:	fba2 2303 	umull	r2, r3, r2, r3
 8010a86:	099b      	lsrs	r3, r3, #6
 8010a88:	4a09      	ldr	r2, [pc, #36]	; (8010ab0 <vPortSetupTimerInterrupt+0x44>)
 8010a8a:	3b01      	subs	r3, #1
 8010a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010a8e:	4b04      	ldr	r3, [pc, #16]	; (8010aa0 <vPortSetupTimerInterrupt+0x34>)
 8010a90:	2207      	movs	r2, #7
 8010a92:	601a      	str	r2, [r3, #0]
}
 8010a94:	bf00      	nop
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr
 8010a9e:	bf00      	nop
 8010aa0:	e000e010 	.word	0xe000e010
 8010aa4:	e000e018 	.word	0xe000e018
 8010aa8:	2000008c 	.word	0x2000008c
 8010aac:	10624dd3 	.word	0x10624dd3
 8010ab0:	e000e014 	.word	0xe000e014

08010ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010ac4 <vPortEnableVFP+0x10>
 8010ab8:	6801      	ldr	r1, [r0, #0]
 8010aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010abe:	6001      	str	r1, [r0, #0]
 8010ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010ac2:	bf00      	nop
 8010ac4:	e000ed88 	.word	0xe000ed88

08010ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010ac8:	b480      	push	{r7}
 8010aca:	b085      	sub	sp, #20
 8010acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010ace:	f3ef 8305 	mrs	r3, IPSR
 8010ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	2b0f      	cmp	r3, #15
 8010ad8:	d914      	bls.n	8010b04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010ada:	4a17      	ldr	r2, [pc, #92]	; (8010b38 <vPortValidateInterruptPriority+0x70>)
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	4413      	add	r3, r2
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ae4:	4b15      	ldr	r3, [pc, #84]	; (8010b3c <vPortValidateInterruptPriority+0x74>)
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	7afa      	ldrb	r2, [r7, #11]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d20a      	bcs.n	8010b04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af2:	f383 8811 	msr	BASEPRI, r3
 8010af6:	f3bf 8f6f 	isb	sy
 8010afa:	f3bf 8f4f 	dsb	sy
 8010afe:	607b      	str	r3, [r7, #4]
}
 8010b00:	bf00      	nop
 8010b02:	e7fe      	b.n	8010b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010b04:	4b0e      	ldr	r3, [pc, #56]	; (8010b40 <vPortValidateInterruptPriority+0x78>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010b0c:	4b0d      	ldr	r3, [pc, #52]	; (8010b44 <vPortValidateInterruptPriority+0x7c>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d90a      	bls.n	8010b2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b18:	f383 8811 	msr	BASEPRI, r3
 8010b1c:	f3bf 8f6f 	isb	sy
 8010b20:	f3bf 8f4f 	dsb	sy
 8010b24:	603b      	str	r3, [r7, #0]
}
 8010b26:	bf00      	nop
 8010b28:	e7fe      	b.n	8010b28 <vPortValidateInterruptPriority+0x60>
	}
 8010b2a:	bf00      	nop
 8010b2c:	3714      	adds	r7, #20
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b34:	4770      	bx	lr
 8010b36:	bf00      	nop
 8010b38:	e000e3f0 	.word	0xe000e3f0
 8010b3c:	20003404 	.word	0x20003404
 8010b40:	e000ed0c 	.word	0xe000ed0c
 8010b44:	20003408 	.word	0x20003408

08010b48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b08a      	sub	sp, #40	; 0x28
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010b50:	2300      	movs	r3, #0
 8010b52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010b54:	f7fe facc 	bl	800f0f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010b58:	4b5b      	ldr	r3, [pc, #364]	; (8010cc8 <pvPortMalloc+0x180>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d101      	bne.n	8010b64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010b60:	f000 f920 	bl	8010da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010b64:	4b59      	ldr	r3, [pc, #356]	; (8010ccc <pvPortMalloc+0x184>)
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	4013      	ands	r3, r2
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	f040 8093 	bne.w	8010c98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d01d      	beq.n	8010bb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010b78:	2208      	movs	r2, #8
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f003 0307 	and.w	r3, r3, #7
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d014      	beq.n	8010bb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f023 0307 	bic.w	r3, r3, #7
 8010b90:	3308      	adds	r3, #8
 8010b92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f003 0307 	and.w	r3, r3, #7
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d00a      	beq.n	8010bb4 <pvPortMalloc+0x6c>
	__asm volatile
 8010b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba2:	f383 8811 	msr	BASEPRI, r3
 8010ba6:	f3bf 8f6f 	isb	sy
 8010baa:	f3bf 8f4f 	dsb	sy
 8010bae:	617b      	str	r3, [r7, #20]
}
 8010bb0:	bf00      	nop
 8010bb2:	e7fe      	b.n	8010bb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d06e      	beq.n	8010c98 <pvPortMalloc+0x150>
 8010bba:	4b45      	ldr	r3, [pc, #276]	; (8010cd0 <pvPortMalloc+0x188>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	687a      	ldr	r2, [r7, #4]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d869      	bhi.n	8010c98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010bc4:	4b43      	ldr	r3, [pc, #268]	; (8010cd4 <pvPortMalloc+0x18c>)
 8010bc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010bc8:	4b42      	ldr	r3, [pc, #264]	; (8010cd4 <pvPortMalloc+0x18c>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010bce:	e004      	b.n	8010bda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d903      	bls.n	8010bec <pvPortMalloc+0xa4>
 8010be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d1f1      	bne.n	8010bd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010bec:	4b36      	ldr	r3, [pc, #216]	; (8010cc8 <pvPortMalloc+0x180>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d050      	beq.n	8010c98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010bf6:	6a3b      	ldr	r3, [r7, #32]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	2208      	movs	r2, #8
 8010bfc:	4413      	add	r3, r2
 8010bfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c02:	681a      	ldr	r2, [r3, #0]
 8010c04:	6a3b      	ldr	r3, [r7, #32]
 8010c06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0a:	685a      	ldr	r2, [r3, #4]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	1ad2      	subs	r2, r2, r3
 8010c10:	2308      	movs	r3, #8
 8010c12:	005b      	lsls	r3, r3, #1
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d91f      	bls.n	8010c58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4413      	add	r3, r2
 8010c1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	f003 0307 	and.w	r3, r3, #7
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d00a      	beq.n	8010c40 <pvPortMalloc+0xf8>
	__asm volatile
 8010c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2e:	f383 8811 	msr	BASEPRI, r3
 8010c32:	f3bf 8f6f 	isb	sy
 8010c36:	f3bf 8f4f 	dsb	sy
 8010c3a:	613b      	str	r3, [r7, #16]
}
 8010c3c:	bf00      	nop
 8010c3e:	e7fe      	b.n	8010c3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c42:	685a      	ldr	r2, [r3, #4]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	1ad2      	subs	r2, r2, r3
 8010c48:	69bb      	ldr	r3, [r7, #24]
 8010c4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010c52:	69b8      	ldr	r0, [r7, #24]
 8010c54:	f000 f908 	bl	8010e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010c58:	4b1d      	ldr	r3, [pc, #116]	; (8010cd0 <pvPortMalloc+0x188>)
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	1ad3      	subs	r3, r2, r3
 8010c62:	4a1b      	ldr	r2, [pc, #108]	; (8010cd0 <pvPortMalloc+0x188>)
 8010c64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010c66:	4b1a      	ldr	r3, [pc, #104]	; (8010cd0 <pvPortMalloc+0x188>)
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	4b1b      	ldr	r3, [pc, #108]	; (8010cd8 <pvPortMalloc+0x190>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d203      	bcs.n	8010c7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010c72:	4b17      	ldr	r3, [pc, #92]	; (8010cd0 <pvPortMalloc+0x188>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	4a18      	ldr	r2, [pc, #96]	; (8010cd8 <pvPortMalloc+0x190>)
 8010c78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7c:	685a      	ldr	r2, [r3, #4]
 8010c7e:	4b13      	ldr	r3, [pc, #76]	; (8010ccc <pvPortMalloc+0x184>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	431a      	orrs	r2, r3
 8010c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010c8e:	4b13      	ldr	r3, [pc, #76]	; (8010cdc <pvPortMalloc+0x194>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	3301      	adds	r3, #1
 8010c94:	4a11      	ldr	r2, [pc, #68]	; (8010cdc <pvPortMalloc+0x194>)
 8010c96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010c98:	f7fe fa38 	bl	800f10c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c9c:	69fb      	ldr	r3, [r7, #28]
 8010c9e:	f003 0307 	and.w	r3, r3, #7
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d00a      	beq.n	8010cbc <pvPortMalloc+0x174>
	__asm volatile
 8010ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010caa:	f383 8811 	msr	BASEPRI, r3
 8010cae:	f3bf 8f6f 	isb	sy
 8010cb2:	f3bf 8f4f 	dsb	sy
 8010cb6:	60fb      	str	r3, [r7, #12]
}
 8010cb8:	bf00      	nop
 8010cba:	e7fe      	b.n	8010cba <pvPortMalloc+0x172>
	return pvReturn;
 8010cbc:	69fb      	ldr	r3, [r7, #28]
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3728      	adds	r7, #40	; 0x28
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	2001c414 	.word	0x2001c414
 8010ccc:	2001c428 	.word	0x2001c428
 8010cd0:	2001c418 	.word	0x2001c418
 8010cd4:	2001c40c 	.word	0x2001c40c
 8010cd8:	2001c41c 	.word	0x2001c41c
 8010cdc:	2001c420 	.word	0x2001c420

08010ce0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b086      	sub	sp, #24
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d04d      	beq.n	8010d8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010cf2:	2308      	movs	r3, #8
 8010cf4:	425b      	negs	r3, r3
 8010cf6:	697a      	ldr	r2, [r7, #20]
 8010cf8:	4413      	add	r3, r2
 8010cfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	685a      	ldr	r2, [r3, #4]
 8010d04:	4b24      	ldr	r3, [pc, #144]	; (8010d98 <vPortFree+0xb8>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	4013      	ands	r3, r2
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d10a      	bne.n	8010d24 <vPortFree+0x44>
	__asm volatile
 8010d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d12:	f383 8811 	msr	BASEPRI, r3
 8010d16:	f3bf 8f6f 	isb	sy
 8010d1a:	f3bf 8f4f 	dsb	sy
 8010d1e:	60fb      	str	r3, [r7, #12]
}
 8010d20:	bf00      	nop
 8010d22:	e7fe      	b.n	8010d22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010d24:	693b      	ldr	r3, [r7, #16]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d00a      	beq.n	8010d42 <vPortFree+0x62>
	__asm volatile
 8010d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d30:	f383 8811 	msr	BASEPRI, r3
 8010d34:	f3bf 8f6f 	isb	sy
 8010d38:	f3bf 8f4f 	dsb	sy
 8010d3c:	60bb      	str	r3, [r7, #8]
}
 8010d3e:	bf00      	nop
 8010d40:	e7fe      	b.n	8010d40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	685a      	ldr	r2, [r3, #4]
 8010d46:	4b14      	ldr	r3, [pc, #80]	; (8010d98 <vPortFree+0xb8>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4013      	ands	r3, r2
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d01e      	beq.n	8010d8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010d50:	693b      	ldr	r3, [r7, #16]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d11a      	bne.n	8010d8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	685a      	ldr	r2, [r3, #4]
 8010d5c:	4b0e      	ldr	r3, [pc, #56]	; (8010d98 <vPortFree+0xb8>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	43db      	mvns	r3, r3
 8010d62:	401a      	ands	r2, r3
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010d68:	f7fe f9c2 	bl	800f0f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	685a      	ldr	r2, [r3, #4]
 8010d70:	4b0a      	ldr	r3, [pc, #40]	; (8010d9c <vPortFree+0xbc>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	4413      	add	r3, r2
 8010d76:	4a09      	ldr	r2, [pc, #36]	; (8010d9c <vPortFree+0xbc>)
 8010d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010d7a:	6938      	ldr	r0, [r7, #16]
 8010d7c:	f000 f874 	bl	8010e68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010d80:	4b07      	ldr	r3, [pc, #28]	; (8010da0 <vPortFree+0xc0>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	3301      	adds	r3, #1
 8010d86:	4a06      	ldr	r2, [pc, #24]	; (8010da0 <vPortFree+0xc0>)
 8010d88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010d8a:	f7fe f9bf 	bl	800f10c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010d8e:	bf00      	nop
 8010d90:	3718      	adds	r7, #24
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}
 8010d96:	bf00      	nop
 8010d98:	2001c428 	.word	0x2001c428
 8010d9c:	2001c418 	.word	0x2001c418
 8010da0:	2001c424 	.word	0x2001c424

08010da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010da4:	b480      	push	{r7}
 8010da6:	b085      	sub	sp, #20
 8010da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010daa:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8010dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010db0:	4b27      	ldr	r3, [pc, #156]	; (8010e50 <prvHeapInit+0xac>)
 8010db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	f003 0307 	and.w	r3, r3, #7
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d00c      	beq.n	8010dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	3307      	adds	r3, #7
 8010dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	f023 0307 	bic.w	r3, r3, #7
 8010dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010dcc:	68ba      	ldr	r2, [r7, #8]
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	1ad3      	subs	r3, r2, r3
 8010dd2:	4a1f      	ldr	r2, [pc, #124]	; (8010e50 <prvHeapInit+0xac>)
 8010dd4:	4413      	add	r3, r2
 8010dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010ddc:	4a1d      	ldr	r2, [pc, #116]	; (8010e54 <prvHeapInit+0xb0>)
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010de2:	4b1c      	ldr	r3, [pc, #112]	; (8010e54 <prvHeapInit+0xb0>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	68ba      	ldr	r2, [r7, #8]
 8010dec:	4413      	add	r3, r2
 8010dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010df0:	2208      	movs	r2, #8
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	1a9b      	subs	r3, r3, r2
 8010df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	f023 0307 	bic.w	r3, r3, #7
 8010dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	4a15      	ldr	r2, [pc, #84]	; (8010e58 <prvHeapInit+0xb4>)
 8010e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010e06:	4b14      	ldr	r3, [pc, #80]	; (8010e58 <prvHeapInit+0xb4>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010e0e:	4b12      	ldr	r3, [pc, #72]	; (8010e58 <prvHeapInit+0xb4>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	2200      	movs	r2, #0
 8010e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	68fa      	ldr	r2, [r7, #12]
 8010e1e:	1ad2      	subs	r2, r2, r3
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010e24:	4b0c      	ldr	r3, [pc, #48]	; (8010e58 <prvHeapInit+0xb4>)
 8010e26:	681a      	ldr	r2, [r3, #0]
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	4a0a      	ldr	r2, [pc, #40]	; (8010e5c <prvHeapInit+0xb8>)
 8010e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	4a09      	ldr	r2, [pc, #36]	; (8010e60 <prvHeapInit+0xbc>)
 8010e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010e3c:	4b09      	ldr	r3, [pc, #36]	; (8010e64 <prvHeapInit+0xc0>)
 8010e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010e42:	601a      	str	r2, [r3, #0]
}
 8010e44:	bf00      	nop
 8010e46:	3714      	adds	r7, #20
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4e:	4770      	bx	lr
 8010e50:	2000340c 	.word	0x2000340c
 8010e54:	2001c40c 	.word	0x2001c40c
 8010e58:	2001c414 	.word	0x2001c414
 8010e5c:	2001c41c 	.word	0x2001c41c
 8010e60:	2001c418 	.word	0x2001c418
 8010e64:	2001c428 	.word	0x2001c428

08010e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b085      	sub	sp, #20
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010e70:	4b28      	ldr	r3, [pc, #160]	; (8010f14 <prvInsertBlockIntoFreeList+0xac>)
 8010e72:	60fb      	str	r3, [r7, #12]
 8010e74:	e002      	b.n	8010e7c <prvInsertBlockIntoFreeList+0x14>
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	60fb      	str	r3, [r7, #12]
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	687a      	ldr	r2, [r7, #4]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d8f7      	bhi.n	8010e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	68ba      	ldr	r2, [r7, #8]
 8010e90:	4413      	add	r3, r2
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d108      	bne.n	8010eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	685a      	ldr	r2, [r3, #4]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	685b      	ldr	r3, [r3, #4]
 8010ea0:	441a      	add	r2, r3
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	68ba      	ldr	r2, [r7, #8]
 8010eb4:	441a      	add	r2, r3
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d118      	bne.n	8010ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	681a      	ldr	r2, [r3, #0]
 8010ec2:	4b15      	ldr	r3, [pc, #84]	; (8010f18 <prvInsertBlockIntoFreeList+0xb0>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d00d      	beq.n	8010ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	685a      	ldr	r2, [r3, #4]
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	685b      	ldr	r3, [r3, #4]
 8010ed4:	441a      	add	r2, r3
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	681a      	ldr	r2, [r3, #0]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	601a      	str	r2, [r3, #0]
 8010ee4:	e008      	b.n	8010ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010ee6:	4b0c      	ldr	r3, [pc, #48]	; (8010f18 <prvInsertBlockIntoFreeList+0xb0>)
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	601a      	str	r2, [r3, #0]
 8010eee:	e003      	b.n	8010ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	681a      	ldr	r2, [r3, #0]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010ef8:	68fa      	ldr	r2, [r7, #12]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d002      	beq.n	8010f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	687a      	ldr	r2, [r7, #4]
 8010f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f06:	bf00      	nop
 8010f08:	3714      	adds	r7, #20
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f10:	4770      	bx	lr
 8010f12:	bf00      	nop
 8010f14:	2001c40c 	.word	0x2001c40c
 8010f18:	2001c414 	.word	0x2001c414

08010f1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010f20:	2200      	movs	r2, #0
 8010f22:	4912      	ldr	r1, [pc, #72]	; (8010f6c <MX_USB_DEVICE_Init+0x50>)
 8010f24:	4812      	ldr	r0, [pc, #72]	; (8010f70 <MX_USB_DEVICE_Init+0x54>)
 8010f26:	f7fb fa2f 	bl	800c388 <USBD_Init>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d001      	beq.n	8010f34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010f30:	f7f0 ffd2 	bl	8001ed8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010f34:	490f      	ldr	r1, [pc, #60]	; (8010f74 <MX_USB_DEVICE_Init+0x58>)
 8010f36:	480e      	ldr	r0, [pc, #56]	; (8010f70 <MX_USB_DEVICE_Init+0x54>)
 8010f38:	f7fb fa56 	bl	800c3e8 <USBD_RegisterClass>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d001      	beq.n	8010f46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010f42:	f7f0 ffc9 	bl	8001ed8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010f46:	490c      	ldr	r1, [pc, #48]	; (8010f78 <MX_USB_DEVICE_Init+0x5c>)
 8010f48:	4809      	ldr	r0, [pc, #36]	; (8010f70 <MX_USB_DEVICE_Init+0x54>)
 8010f4a:	f7fb f947 	bl	800c1dc <USBD_CDC_RegisterInterface>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d001      	beq.n	8010f58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010f54:	f7f0 ffc0 	bl	8001ed8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010f58:	4805      	ldr	r0, [pc, #20]	; (8010f70 <MX_USB_DEVICE_Init+0x54>)
 8010f5a:	f7fb fa7b 	bl	800c454 <USBD_Start>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d001      	beq.n	8010f68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010f64:	f7f0 ffb8 	bl	8001ed8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010f68:	bf00      	nop
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	2000013c 	.word	0x2000013c
 8010f70:	2001c42c 	.word	0x2001c42c
 8010f74:	200000a4 	.word	0x200000a4
 8010f78:	20000128 	.word	0x20000128

08010f7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010f80:	2200      	movs	r2, #0
 8010f82:	4905      	ldr	r1, [pc, #20]	; (8010f98 <CDC_Init_FS+0x1c>)
 8010f84:	4805      	ldr	r0, [pc, #20]	; (8010f9c <CDC_Init_FS+0x20>)
 8010f86:	f7fb f943 	bl	800c210 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010f8a:	4905      	ldr	r1, [pc, #20]	; (8010fa0 <CDC_Init_FS+0x24>)
 8010f8c:	4803      	ldr	r0, [pc, #12]	; (8010f9c <CDC_Init_FS+0x20>)
 8010f8e:	f7fb f961 	bl	800c254 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010f92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	bd80      	pop	{r7, pc}
 8010f98:	2001cf08 	.word	0x2001cf08
 8010f9c:	2001c42c 	.word	0x2001c42c
 8010fa0:	2001c708 	.word	0x2001c708

08010fa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010fa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b083      	sub	sp, #12
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	4603      	mov	r3, r0
 8010fbc:	6039      	str	r1, [r7, #0]
 8010fbe:	71fb      	strb	r3, [r7, #7]
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010fc4:	79fb      	ldrb	r3, [r7, #7]
 8010fc6:	2b23      	cmp	r3, #35	; 0x23
 8010fc8:	d84a      	bhi.n	8011060 <CDC_Control_FS+0xac>
 8010fca:	a201      	add	r2, pc, #4	; (adr r2, 8010fd0 <CDC_Control_FS+0x1c>)
 8010fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd0:	08011061 	.word	0x08011061
 8010fd4:	08011061 	.word	0x08011061
 8010fd8:	08011061 	.word	0x08011061
 8010fdc:	08011061 	.word	0x08011061
 8010fe0:	08011061 	.word	0x08011061
 8010fe4:	08011061 	.word	0x08011061
 8010fe8:	08011061 	.word	0x08011061
 8010fec:	08011061 	.word	0x08011061
 8010ff0:	08011061 	.word	0x08011061
 8010ff4:	08011061 	.word	0x08011061
 8010ff8:	08011061 	.word	0x08011061
 8010ffc:	08011061 	.word	0x08011061
 8011000:	08011061 	.word	0x08011061
 8011004:	08011061 	.word	0x08011061
 8011008:	08011061 	.word	0x08011061
 801100c:	08011061 	.word	0x08011061
 8011010:	08011061 	.word	0x08011061
 8011014:	08011061 	.word	0x08011061
 8011018:	08011061 	.word	0x08011061
 801101c:	08011061 	.word	0x08011061
 8011020:	08011061 	.word	0x08011061
 8011024:	08011061 	.word	0x08011061
 8011028:	08011061 	.word	0x08011061
 801102c:	08011061 	.word	0x08011061
 8011030:	08011061 	.word	0x08011061
 8011034:	08011061 	.word	0x08011061
 8011038:	08011061 	.word	0x08011061
 801103c:	08011061 	.word	0x08011061
 8011040:	08011061 	.word	0x08011061
 8011044:	08011061 	.word	0x08011061
 8011048:	08011061 	.word	0x08011061
 801104c:	08011061 	.word	0x08011061
 8011050:	08011061 	.word	0x08011061
 8011054:	08011061 	.word	0x08011061
 8011058:	08011061 	.word	0x08011061
 801105c:	08011061 	.word	0x08011061
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011060:	bf00      	nop
  }

  return (USBD_OK);
 8011062:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011064:	4618      	mov	r0, r3
 8011066:	370c      	adds	r7, #12
 8011068:	46bd      	mov	sp, r7
 801106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106e:	4770      	bx	lr

08011070 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801107a:	6879      	ldr	r1, [r7, #4]
 801107c:	4805      	ldr	r0, [pc, #20]	; (8011094 <CDC_Receive_FS+0x24>)
 801107e:	f7fb f8e9 	bl	800c254 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011082:	4804      	ldr	r0, [pc, #16]	; (8011094 <CDC_Receive_FS+0x24>)
 8011084:	f7fb f94a 	bl	800c31c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011088:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801108a:	4618      	mov	r0, r3
 801108c:	3708      	adds	r7, #8
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
 8011092:	bf00      	nop
 8011094:	2001c42c 	.word	0x2001c42c

08011098 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b084      	sub	sp, #16
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	460b      	mov	r3, r1
 80110a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80110a4:	2300      	movs	r3, #0
 80110a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80110a8:	4b0d      	ldr	r3, [pc, #52]	; (80110e0 <CDC_Transmit_FS+0x48>)
 80110aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d001      	beq.n	80110be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80110ba:	2301      	movs	r3, #1
 80110bc:	e00b      	b.n	80110d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80110be:	887b      	ldrh	r3, [r7, #2]
 80110c0:	461a      	mov	r2, r3
 80110c2:	6879      	ldr	r1, [r7, #4]
 80110c4:	4806      	ldr	r0, [pc, #24]	; (80110e0 <CDC_Transmit_FS+0x48>)
 80110c6:	f7fb f8a3 	bl	800c210 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80110ca:	4805      	ldr	r0, [pc, #20]	; (80110e0 <CDC_Transmit_FS+0x48>)
 80110cc:	f7fb f8e0 	bl	800c290 <USBD_CDC_TransmitPacket>
 80110d0:	4603      	mov	r3, r0
 80110d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80110d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3710      	adds	r7, #16
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	2001c42c 	.word	0x2001c42c

080110e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b087      	sub	sp, #28
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	60f8      	str	r0, [r7, #12]
 80110ec:	60b9      	str	r1, [r7, #8]
 80110ee:	4613      	mov	r3, r2
 80110f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80110f2:	2300      	movs	r3, #0
 80110f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80110f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	371c      	adds	r7, #28
 80110fe:	46bd      	mov	sp, r7
 8011100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011104:	4770      	bx	lr
	...

08011108 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011108:	b480      	push	{r7}
 801110a:	b083      	sub	sp, #12
 801110c:	af00      	add	r7, sp, #0
 801110e:	4603      	mov	r3, r0
 8011110:	6039      	str	r1, [r7, #0]
 8011112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	2212      	movs	r2, #18
 8011118:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801111a:	4b03      	ldr	r3, [pc, #12]	; (8011128 <USBD_FS_DeviceDescriptor+0x20>)
}
 801111c:	4618      	mov	r0, r3
 801111e:	370c      	adds	r7, #12
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr
 8011128:	20000158 	.word	0x20000158

0801112c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801112c:	b480      	push	{r7}
 801112e:	b083      	sub	sp, #12
 8011130:	af00      	add	r7, sp, #0
 8011132:	4603      	mov	r3, r0
 8011134:	6039      	str	r1, [r7, #0]
 8011136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	2204      	movs	r2, #4
 801113c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801113e:	4b03      	ldr	r3, [pc, #12]	; (801114c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011140:	4618      	mov	r0, r3
 8011142:	370c      	adds	r7, #12
 8011144:	46bd      	mov	sp, r7
 8011146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114a:	4770      	bx	lr
 801114c:	2000016c 	.word	0x2000016c

08011150 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b082      	sub	sp, #8
 8011154:	af00      	add	r7, sp, #0
 8011156:	4603      	mov	r3, r0
 8011158:	6039      	str	r1, [r7, #0]
 801115a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801115c:	79fb      	ldrb	r3, [r7, #7]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d105      	bne.n	801116e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011162:	683a      	ldr	r2, [r7, #0]
 8011164:	4907      	ldr	r1, [pc, #28]	; (8011184 <USBD_FS_ProductStrDescriptor+0x34>)
 8011166:	4808      	ldr	r0, [pc, #32]	; (8011188 <USBD_FS_ProductStrDescriptor+0x38>)
 8011168:	f7fc fb20 	bl	800d7ac <USBD_GetString>
 801116c:	e004      	b.n	8011178 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801116e:	683a      	ldr	r2, [r7, #0]
 8011170:	4904      	ldr	r1, [pc, #16]	; (8011184 <USBD_FS_ProductStrDescriptor+0x34>)
 8011172:	4805      	ldr	r0, [pc, #20]	; (8011188 <USBD_FS_ProductStrDescriptor+0x38>)
 8011174:	f7fc fb1a 	bl	800d7ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8011178:	4b02      	ldr	r3, [pc, #8]	; (8011184 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801117a:	4618      	mov	r0, r3
 801117c:	3708      	adds	r7, #8
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}
 8011182:	bf00      	nop
 8011184:	2001d708 	.word	0x2001d708
 8011188:	080127c8 	.word	0x080127c8

0801118c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	4603      	mov	r3, r0
 8011194:	6039      	str	r1, [r7, #0]
 8011196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011198:	683a      	ldr	r2, [r7, #0]
 801119a:	4904      	ldr	r1, [pc, #16]	; (80111ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801119c:	4804      	ldr	r0, [pc, #16]	; (80111b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801119e:	f7fc fb05 	bl	800d7ac <USBD_GetString>
  return USBD_StrDesc;
 80111a2:	4b02      	ldr	r3, [pc, #8]	; (80111ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3708      	adds	r7, #8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	2001d708 	.word	0x2001d708
 80111b0:	080127e0 	.word	0x080127e0

080111b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	4603      	mov	r3, r0
 80111bc:	6039      	str	r1, [r7, #0]
 80111be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	221a      	movs	r2, #26
 80111c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80111c6:	f000 f843 	bl	8011250 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80111ca:	4b02      	ldr	r3, [pc, #8]	; (80111d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3708      	adds	r7, #8
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}
 80111d4:	20000170 	.word	0x20000170

080111d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b082      	sub	sp, #8
 80111dc:	af00      	add	r7, sp, #0
 80111de:	4603      	mov	r3, r0
 80111e0:	6039      	str	r1, [r7, #0]
 80111e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80111e4:	79fb      	ldrb	r3, [r7, #7]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d105      	bne.n	80111f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80111ea:	683a      	ldr	r2, [r7, #0]
 80111ec:	4907      	ldr	r1, [pc, #28]	; (801120c <USBD_FS_ConfigStrDescriptor+0x34>)
 80111ee:	4808      	ldr	r0, [pc, #32]	; (8011210 <USBD_FS_ConfigStrDescriptor+0x38>)
 80111f0:	f7fc fadc 	bl	800d7ac <USBD_GetString>
 80111f4:	e004      	b.n	8011200 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80111f6:	683a      	ldr	r2, [r7, #0]
 80111f8:	4904      	ldr	r1, [pc, #16]	; (801120c <USBD_FS_ConfigStrDescriptor+0x34>)
 80111fa:	4805      	ldr	r0, [pc, #20]	; (8011210 <USBD_FS_ConfigStrDescriptor+0x38>)
 80111fc:	f7fc fad6 	bl	800d7ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8011200:	4b02      	ldr	r3, [pc, #8]	; (801120c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011202:	4618      	mov	r0, r3
 8011204:	3708      	adds	r7, #8
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}
 801120a:	bf00      	nop
 801120c:	2001d708 	.word	0x2001d708
 8011210:	080127f4 	.word	0x080127f4

08011214 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b082      	sub	sp, #8
 8011218:	af00      	add	r7, sp, #0
 801121a:	4603      	mov	r3, r0
 801121c:	6039      	str	r1, [r7, #0]
 801121e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011220:	79fb      	ldrb	r3, [r7, #7]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d105      	bne.n	8011232 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011226:	683a      	ldr	r2, [r7, #0]
 8011228:	4907      	ldr	r1, [pc, #28]	; (8011248 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801122a:	4808      	ldr	r0, [pc, #32]	; (801124c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801122c:	f7fc fabe 	bl	800d7ac <USBD_GetString>
 8011230:	e004      	b.n	801123c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011232:	683a      	ldr	r2, [r7, #0]
 8011234:	4904      	ldr	r1, [pc, #16]	; (8011248 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011236:	4805      	ldr	r0, [pc, #20]	; (801124c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011238:	f7fc fab8 	bl	800d7ac <USBD_GetString>
  }
  return USBD_StrDesc;
 801123c:	4b02      	ldr	r3, [pc, #8]	; (8011248 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801123e:	4618      	mov	r0, r3
 8011240:	3708      	adds	r7, #8
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
 8011246:	bf00      	nop
 8011248:	2001d708 	.word	0x2001d708
 801124c:	08012800 	.word	0x08012800

08011250 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b084      	sub	sp, #16
 8011254:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011256:	4b0f      	ldr	r3, [pc, #60]	; (8011294 <Get_SerialNum+0x44>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801125c:	4b0e      	ldr	r3, [pc, #56]	; (8011298 <Get_SerialNum+0x48>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011262:	4b0e      	ldr	r3, [pc, #56]	; (801129c <Get_SerialNum+0x4c>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011268:	68fa      	ldr	r2, [r7, #12]
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	4413      	add	r3, r2
 801126e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d009      	beq.n	801128a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011276:	2208      	movs	r2, #8
 8011278:	4909      	ldr	r1, [pc, #36]	; (80112a0 <Get_SerialNum+0x50>)
 801127a:	68f8      	ldr	r0, [r7, #12]
 801127c:	f000 f814 	bl	80112a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011280:	2204      	movs	r2, #4
 8011282:	4908      	ldr	r1, [pc, #32]	; (80112a4 <Get_SerialNum+0x54>)
 8011284:	68b8      	ldr	r0, [r7, #8]
 8011286:	f000 f80f 	bl	80112a8 <IntToUnicode>
  }
}
 801128a:	bf00      	nop
 801128c:	3710      	adds	r7, #16
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}
 8011292:	bf00      	nop
 8011294:	1fff7a10 	.word	0x1fff7a10
 8011298:	1fff7a14 	.word	0x1fff7a14
 801129c:	1fff7a18 	.word	0x1fff7a18
 80112a0:	20000172 	.word	0x20000172
 80112a4:	20000182 	.word	0x20000182

080112a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b087      	sub	sp, #28
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	60f8      	str	r0, [r7, #12]
 80112b0:	60b9      	str	r1, [r7, #8]
 80112b2:	4613      	mov	r3, r2
 80112b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80112b6:	2300      	movs	r3, #0
 80112b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80112ba:	2300      	movs	r3, #0
 80112bc:	75fb      	strb	r3, [r7, #23]
 80112be:	e027      	b.n	8011310 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	0f1b      	lsrs	r3, r3, #28
 80112c4:	2b09      	cmp	r3, #9
 80112c6:	d80b      	bhi.n	80112e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	0f1b      	lsrs	r3, r3, #28
 80112cc:	b2da      	uxtb	r2, r3
 80112ce:	7dfb      	ldrb	r3, [r7, #23]
 80112d0:	005b      	lsls	r3, r3, #1
 80112d2:	4619      	mov	r1, r3
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	440b      	add	r3, r1
 80112d8:	3230      	adds	r2, #48	; 0x30
 80112da:	b2d2      	uxtb	r2, r2
 80112dc:	701a      	strb	r2, [r3, #0]
 80112de:	e00a      	b.n	80112f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	0f1b      	lsrs	r3, r3, #28
 80112e4:	b2da      	uxtb	r2, r3
 80112e6:	7dfb      	ldrb	r3, [r7, #23]
 80112e8:	005b      	lsls	r3, r3, #1
 80112ea:	4619      	mov	r1, r3
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	440b      	add	r3, r1
 80112f0:	3237      	adds	r2, #55	; 0x37
 80112f2:	b2d2      	uxtb	r2, r2
 80112f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	011b      	lsls	r3, r3, #4
 80112fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80112fc:	7dfb      	ldrb	r3, [r7, #23]
 80112fe:	005b      	lsls	r3, r3, #1
 8011300:	3301      	adds	r3, #1
 8011302:	68ba      	ldr	r2, [r7, #8]
 8011304:	4413      	add	r3, r2
 8011306:	2200      	movs	r2, #0
 8011308:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801130a:	7dfb      	ldrb	r3, [r7, #23]
 801130c:	3301      	adds	r3, #1
 801130e:	75fb      	strb	r3, [r7, #23]
 8011310:	7dfa      	ldrb	r2, [r7, #23]
 8011312:	79fb      	ldrb	r3, [r7, #7]
 8011314:	429a      	cmp	r2, r3
 8011316:	d3d3      	bcc.n	80112c0 <IntToUnicode+0x18>
  }
}
 8011318:	bf00      	nop
 801131a:	bf00      	nop
 801131c:	371c      	adds	r7, #28
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr
	...

08011328 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b08a      	sub	sp, #40	; 0x28
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011330:	f107 0314 	add.w	r3, r7, #20
 8011334:	2200      	movs	r2, #0
 8011336:	601a      	str	r2, [r3, #0]
 8011338:	605a      	str	r2, [r3, #4]
 801133a:	609a      	str	r2, [r3, #8]
 801133c:	60da      	str	r2, [r3, #12]
 801133e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011348:	d13a      	bne.n	80113c0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801134a:	2300      	movs	r3, #0
 801134c:	613b      	str	r3, [r7, #16]
 801134e:	4b1e      	ldr	r3, [pc, #120]	; (80113c8 <HAL_PCD_MspInit+0xa0>)
 8011350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011352:	4a1d      	ldr	r2, [pc, #116]	; (80113c8 <HAL_PCD_MspInit+0xa0>)
 8011354:	f043 0301 	orr.w	r3, r3, #1
 8011358:	6313      	str	r3, [r2, #48]	; 0x30
 801135a:	4b1b      	ldr	r3, [pc, #108]	; (80113c8 <HAL_PCD_MspInit+0xa0>)
 801135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801135e:	f003 0301 	and.w	r3, r3, #1
 8011362:	613b      	str	r3, [r7, #16]
 8011364:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011366:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801136c:	2302      	movs	r3, #2
 801136e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011370:	2300      	movs	r3, #0
 8011372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011374:	2303      	movs	r3, #3
 8011376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011378:	230a      	movs	r3, #10
 801137a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801137c:	f107 0314 	add.w	r3, r7, #20
 8011380:	4619      	mov	r1, r3
 8011382:	4812      	ldr	r0, [pc, #72]	; (80113cc <HAL_PCD_MspInit+0xa4>)
 8011384:	f7f3 f8f2 	bl	800456c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011388:	4b0f      	ldr	r3, [pc, #60]	; (80113c8 <HAL_PCD_MspInit+0xa0>)
 801138a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801138c:	4a0e      	ldr	r2, [pc, #56]	; (80113c8 <HAL_PCD_MspInit+0xa0>)
 801138e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011392:	6353      	str	r3, [r2, #52]	; 0x34
 8011394:	2300      	movs	r3, #0
 8011396:	60fb      	str	r3, [r7, #12]
 8011398:	4b0b      	ldr	r3, [pc, #44]	; (80113c8 <HAL_PCD_MspInit+0xa0>)
 801139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801139c:	4a0a      	ldr	r2, [pc, #40]	; (80113c8 <HAL_PCD_MspInit+0xa0>)
 801139e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80113a2:	6453      	str	r3, [r2, #68]	; 0x44
 80113a4:	4b08      	ldr	r3, [pc, #32]	; (80113c8 <HAL_PCD_MspInit+0xa0>)
 80113a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80113ac:	60fb      	str	r3, [r7, #12]
 80113ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80113b0:	2200      	movs	r2, #0
 80113b2:	2105      	movs	r1, #5
 80113b4:	2043      	movs	r0, #67	; 0x43
 80113b6:	f7f2 fb5f 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80113ba:	2043      	movs	r0, #67	; 0x43
 80113bc:	f7f2 fb88 	bl	8003ad0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80113c0:	bf00      	nop
 80113c2:	3728      	adds	r7, #40	; 0x28
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	40023800 	.word	0x40023800
 80113cc:	40020000 	.word	0x40020000

080113d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80113e4:	4619      	mov	r1, r3
 80113e6:	4610      	mov	r0, r2
 80113e8:	f7fb f881 	bl	800c4ee <USBD_LL_SetupStage>
}
 80113ec:	bf00      	nop
 80113ee:	3708      	adds	r7, #8
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}

080113f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	460b      	mov	r3, r1
 80113fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011406:	78fa      	ldrb	r2, [r7, #3]
 8011408:	6879      	ldr	r1, [r7, #4]
 801140a:	4613      	mov	r3, r2
 801140c:	00db      	lsls	r3, r3, #3
 801140e:	4413      	add	r3, r2
 8011410:	009b      	lsls	r3, r3, #2
 8011412:	440b      	add	r3, r1
 8011414:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011418:	681a      	ldr	r2, [r3, #0]
 801141a:	78fb      	ldrb	r3, [r7, #3]
 801141c:	4619      	mov	r1, r3
 801141e:	f7fb f8bb 	bl	800c598 <USBD_LL_DataOutStage>
}
 8011422:	bf00      	nop
 8011424:	3708      	adds	r7, #8
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}

0801142a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b082      	sub	sp, #8
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]
 8011432:	460b      	mov	r3, r1
 8011434:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801143c:	78fa      	ldrb	r2, [r7, #3]
 801143e:	6879      	ldr	r1, [r7, #4]
 8011440:	4613      	mov	r3, r2
 8011442:	00db      	lsls	r3, r3, #3
 8011444:	4413      	add	r3, r2
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	440b      	add	r3, r1
 801144a:	334c      	adds	r3, #76	; 0x4c
 801144c:	681a      	ldr	r2, [r3, #0]
 801144e:	78fb      	ldrb	r3, [r7, #3]
 8011450:	4619      	mov	r1, r3
 8011452:	f7fb f954 	bl	800c6fe <USBD_LL_DataInStage>
}
 8011456:	bf00      	nop
 8011458:	3708      	adds	r7, #8
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}

0801145e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801145e:	b580      	push	{r7, lr}
 8011460:	b082      	sub	sp, #8
 8011462:	af00      	add	r7, sp, #0
 8011464:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801146c:	4618      	mov	r0, r3
 801146e:	f7fb fa88 	bl	800c982 <USBD_LL_SOF>
}
 8011472:	bf00      	nop
 8011474:	3708      	adds	r7, #8
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}

0801147a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801147a:	b580      	push	{r7, lr}
 801147c:	b084      	sub	sp, #16
 801147e:	af00      	add	r7, sp, #0
 8011480:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011482:	2301      	movs	r3, #1
 8011484:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	68db      	ldr	r3, [r3, #12]
 801148a:	2b02      	cmp	r3, #2
 801148c:	d001      	beq.n	8011492 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801148e:	f7f0 fd23 	bl	8001ed8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011498:	7bfa      	ldrb	r2, [r7, #15]
 801149a:	4611      	mov	r1, r2
 801149c:	4618      	mov	r0, r3
 801149e:	f7fb fa32 	bl	800c906 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7fb f9da 	bl	800c862 <USBD_LL_Reset>
}
 80114ae:	bf00      	nop
 80114b0:	3710      	adds	r7, #16
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
	...

080114b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fb fa2d 	bl	800c926 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	687a      	ldr	r2, [r7, #4]
 80114d8:	6812      	ldr	r2, [r2, #0]
 80114da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80114de:	f043 0301 	orr.w	r3, r3, #1
 80114e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6a1b      	ldr	r3, [r3, #32]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d005      	beq.n	80114f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80114ec:	4b04      	ldr	r3, [pc, #16]	; (8011500 <HAL_PCD_SuspendCallback+0x48>)
 80114ee:	691b      	ldr	r3, [r3, #16]
 80114f0:	4a03      	ldr	r2, [pc, #12]	; (8011500 <HAL_PCD_SuspendCallback+0x48>)
 80114f2:	f043 0306 	orr.w	r3, r3, #6
 80114f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80114f8:	bf00      	nop
 80114fa:	3708      	adds	r7, #8
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}
 8011500:	e000ed00 	.word	0xe000ed00

08011504 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b082      	sub	sp, #8
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011512:	4618      	mov	r0, r3
 8011514:	f7fb fa1d 	bl	800c952 <USBD_LL_Resume>
}
 8011518:	bf00      	nop
 801151a:	3708      	adds	r7, #8
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}

08011520 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b082      	sub	sp, #8
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
 8011528:	460b      	mov	r3, r1
 801152a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011532:	78fa      	ldrb	r2, [r7, #3]
 8011534:	4611      	mov	r1, r2
 8011536:	4618      	mov	r0, r3
 8011538:	f7fb fa75 	bl	800ca26 <USBD_LL_IsoOUTIncomplete>
}
 801153c:	bf00      	nop
 801153e:	3708      	adds	r7, #8
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b082      	sub	sp, #8
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	460b      	mov	r3, r1
 801154e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011556:	78fa      	ldrb	r2, [r7, #3]
 8011558:	4611      	mov	r1, r2
 801155a:	4618      	mov	r0, r3
 801155c:	f7fb fa31 	bl	800c9c2 <USBD_LL_IsoINIncomplete>
}
 8011560:	bf00      	nop
 8011562:	3708      	adds	r7, #8
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}

08011568 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011576:	4618      	mov	r0, r3
 8011578:	f7fb fa87 	bl	800ca8a <USBD_LL_DevConnected>
}
 801157c:	bf00      	nop
 801157e:	3708      	adds	r7, #8
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}

08011584 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b082      	sub	sp, #8
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011592:	4618      	mov	r0, r3
 8011594:	f7fb fa84 	bl	800caa0 <USBD_LL_DevDisconnected>
}
 8011598:	bf00      	nop
 801159a:	3708      	adds	r7, #8
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}

080115a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d13c      	bne.n	801162a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80115b0:	4a20      	ldr	r2, [pc, #128]	; (8011634 <USBD_LL_Init+0x94>)
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	4a1e      	ldr	r2, [pc, #120]	; (8011634 <USBD_LL_Init+0x94>)
 80115bc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80115c0:	4b1c      	ldr	r3, [pc, #112]	; (8011634 <USBD_LL_Init+0x94>)
 80115c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80115c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80115c8:	4b1a      	ldr	r3, [pc, #104]	; (8011634 <USBD_LL_Init+0x94>)
 80115ca:	2204      	movs	r2, #4
 80115cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80115ce:	4b19      	ldr	r3, [pc, #100]	; (8011634 <USBD_LL_Init+0x94>)
 80115d0:	2202      	movs	r2, #2
 80115d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80115d4:	4b17      	ldr	r3, [pc, #92]	; (8011634 <USBD_LL_Init+0x94>)
 80115d6:	2200      	movs	r2, #0
 80115d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80115da:	4b16      	ldr	r3, [pc, #88]	; (8011634 <USBD_LL_Init+0x94>)
 80115dc:	2202      	movs	r2, #2
 80115de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80115e0:	4b14      	ldr	r3, [pc, #80]	; (8011634 <USBD_LL_Init+0x94>)
 80115e2:	2200      	movs	r2, #0
 80115e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80115e6:	4b13      	ldr	r3, [pc, #76]	; (8011634 <USBD_LL_Init+0x94>)
 80115e8:	2200      	movs	r2, #0
 80115ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80115ec:	4b11      	ldr	r3, [pc, #68]	; (8011634 <USBD_LL_Init+0x94>)
 80115ee:	2200      	movs	r2, #0
 80115f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80115f2:	4b10      	ldr	r3, [pc, #64]	; (8011634 <USBD_LL_Init+0x94>)
 80115f4:	2200      	movs	r2, #0
 80115f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80115f8:	4b0e      	ldr	r3, [pc, #56]	; (8011634 <USBD_LL_Init+0x94>)
 80115fa:	2200      	movs	r2, #0
 80115fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80115fe:	480d      	ldr	r0, [pc, #52]	; (8011634 <USBD_LL_Init+0x94>)
 8011600:	f7f3 fc64 	bl	8004ecc <HAL_PCD_Init>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d001      	beq.n	801160e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801160a:	f7f0 fc65 	bl	8001ed8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801160e:	2180      	movs	r1, #128	; 0x80
 8011610:	4808      	ldr	r0, [pc, #32]	; (8011634 <USBD_LL_Init+0x94>)
 8011612:	f7f4 fec6 	bl	80063a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011616:	2240      	movs	r2, #64	; 0x40
 8011618:	2100      	movs	r1, #0
 801161a:	4806      	ldr	r0, [pc, #24]	; (8011634 <USBD_LL_Init+0x94>)
 801161c:	f7f4 fe7a 	bl	8006314 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011620:	2280      	movs	r2, #128	; 0x80
 8011622:	2101      	movs	r1, #1
 8011624:	4803      	ldr	r0, [pc, #12]	; (8011634 <USBD_LL_Init+0x94>)
 8011626:	f7f4 fe75 	bl	8006314 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801162a:	2300      	movs	r3, #0
}
 801162c:	4618      	mov	r0, r3
 801162e:	3708      	adds	r7, #8
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	2001d908 	.word	0x2001d908

08011638 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b084      	sub	sp, #16
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011640:	2300      	movs	r3, #0
 8011642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011644:	2300      	movs	r3, #0
 8011646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801164e:	4618      	mov	r0, r3
 8011650:	f7f3 fd64 	bl	800511c <HAL_PCD_Start>
 8011654:	4603      	mov	r3, r0
 8011656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011658:	7bfb      	ldrb	r3, [r7, #15]
 801165a:	4618      	mov	r0, r3
 801165c:	f000 f942 	bl	80118e4 <USBD_Get_USB_Status>
 8011660:	4603      	mov	r3, r0
 8011662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011664:	7bbb      	ldrb	r3, [r7, #14]
}
 8011666:	4618      	mov	r0, r3
 8011668:	3710      	adds	r7, #16
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}

0801166e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801166e:	b580      	push	{r7, lr}
 8011670:	b084      	sub	sp, #16
 8011672:	af00      	add	r7, sp, #0
 8011674:	6078      	str	r0, [r7, #4]
 8011676:	4608      	mov	r0, r1
 8011678:	4611      	mov	r1, r2
 801167a:	461a      	mov	r2, r3
 801167c:	4603      	mov	r3, r0
 801167e:	70fb      	strb	r3, [r7, #3]
 8011680:	460b      	mov	r3, r1
 8011682:	70bb      	strb	r3, [r7, #2]
 8011684:	4613      	mov	r3, r2
 8011686:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011688:	2300      	movs	r3, #0
 801168a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801168c:	2300      	movs	r3, #0
 801168e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011696:	78bb      	ldrb	r3, [r7, #2]
 8011698:	883a      	ldrh	r2, [r7, #0]
 801169a:	78f9      	ldrb	r1, [r7, #3]
 801169c:	f7f4 fa35 	bl	8005b0a <HAL_PCD_EP_Open>
 80116a0:	4603      	mov	r3, r0
 80116a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116a4:	7bfb      	ldrb	r3, [r7, #15]
 80116a6:	4618      	mov	r0, r3
 80116a8:	f000 f91c 	bl	80118e4 <USBD_Get_USB_Status>
 80116ac:	4603      	mov	r3, r0
 80116ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3710      	adds	r7, #16
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}

080116ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80116ba:	b580      	push	{r7, lr}
 80116bc:	b084      	sub	sp, #16
 80116be:	af00      	add	r7, sp, #0
 80116c0:	6078      	str	r0, [r7, #4]
 80116c2:	460b      	mov	r3, r1
 80116c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116c6:	2300      	movs	r3, #0
 80116c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116ca:	2300      	movs	r3, #0
 80116cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80116d4:	78fa      	ldrb	r2, [r7, #3]
 80116d6:	4611      	mov	r1, r2
 80116d8:	4618      	mov	r0, r3
 80116da:	f7f4 fa7e 	bl	8005bda <HAL_PCD_EP_Close>
 80116de:	4603      	mov	r3, r0
 80116e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116e2:	7bfb      	ldrb	r3, [r7, #15]
 80116e4:	4618      	mov	r0, r3
 80116e6:	f000 f8fd 	bl	80118e4 <USBD_Get_USB_Status>
 80116ea:	4603      	mov	r3, r0
 80116ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3710      	adds	r7, #16
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	460b      	mov	r3, r1
 8011702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011704:	2300      	movs	r3, #0
 8011706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011708:	2300      	movs	r3, #0
 801170a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011712:	78fa      	ldrb	r2, [r7, #3]
 8011714:	4611      	mov	r1, r2
 8011716:	4618      	mov	r0, r3
 8011718:	f7f4 fb56 	bl	8005dc8 <HAL_PCD_EP_SetStall>
 801171c:	4603      	mov	r3, r0
 801171e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011720:	7bfb      	ldrb	r3, [r7, #15]
 8011722:	4618      	mov	r0, r3
 8011724:	f000 f8de 	bl	80118e4 <USBD_Get_USB_Status>
 8011728:	4603      	mov	r3, r0
 801172a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801172c:	7bbb      	ldrb	r3, [r7, #14]
}
 801172e:	4618      	mov	r0, r3
 8011730:	3710      	adds	r7, #16
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}

08011736 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011736:	b580      	push	{r7, lr}
 8011738:	b084      	sub	sp, #16
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
 801173e:	460b      	mov	r3, r1
 8011740:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011742:	2300      	movs	r3, #0
 8011744:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011746:	2300      	movs	r3, #0
 8011748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011750:	78fa      	ldrb	r2, [r7, #3]
 8011752:	4611      	mov	r1, r2
 8011754:	4618      	mov	r0, r3
 8011756:	f7f4 fb9b 	bl	8005e90 <HAL_PCD_EP_ClrStall>
 801175a:	4603      	mov	r3, r0
 801175c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801175e:	7bfb      	ldrb	r3, [r7, #15]
 8011760:	4618      	mov	r0, r3
 8011762:	f000 f8bf 	bl	80118e4 <USBD_Get_USB_Status>
 8011766:	4603      	mov	r3, r0
 8011768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801176a:	7bbb      	ldrb	r3, [r7, #14]
}
 801176c:	4618      	mov	r0, r3
 801176e:	3710      	adds	r7, #16
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}

08011774 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011774:	b480      	push	{r7}
 8011776:	b085      	sub	sp, #20
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
 801177c:	460b      	mov	r3, r1
 801177e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011786:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801178c:	2b00      	cmp	r3, #0
 801178e:	da0b      	bge.n	80117a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011790:	78fb      	ldrb	r3, [r7, #3]
 8011792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011796:	68f9      	ldr	r1, [r7, #12]
 8011798:	4613      	mov	r3, r2
 801179a:	00db      	lsls	r3, r3, #3
 801179c:	4413      	add	r3, r2
 801179e:	009b      	lsls	r3, r3, #2
 80117a0:	440b      	add	r3, r1
 80117a2:	333e      	adds	r3, #62	; 0x3e
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	e00b      	b.n	80117c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80117a8:	78fb      	ldrb	r3, [r7, #3]
 80117aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80117ae:	68f9      	ldr	r1, [r7, #12]
 80117b0:	4613      	mov	r3, r2
 80117b2:	00db      	lsls	r3, r3, #3
 80117b4:	4413      	add	r3, r2
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	440b      	add	r3, r1
 80117ba:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80117be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	3714      	adds	r7, #20
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr

080117cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b084      	sub	sp, #16
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	460b      	mov	r3, r1
 80117d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117d8:	2300      	movs	r3, #0
 80117da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117dc:	2300      	movs	r3, #0
 80117de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80117e6:	78fa      	ldrb	r2, [r7, #3]
 80117e8:	4611      	mov	r1, r2
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7f4 f968 	bl	8005ac0 <HAL_PCD_SetAddress>
 80117f0:	4603      	mov	r3, r0
 80117f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117f4:	7bfb      	ldrb	r3, [r7, #15]
 80117f6:	4618      	mov	r0, r3
 80117f8:	f000 f874 	bl	80118e4 <USBD_Get_USB_Status>
 80117fc:	4603      	mov	r3, r0
 80117fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011800:	7bbb      	ldrb	r3, [r7, #14]
}
 8011802:	4618      	mov	r0, r3
 8011804:	3710      	adds	r7, #16
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}

0801180a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801180a:	b580      	push	{r7, lr}
 801180c:	b086      	sub	sp, #24
 801180e:	af00      	add	r7, sp, #0
 8011810:	60f8      	str	r0, [r7, #12]
 8011812:	607a      	str	r2, [r7, #4]
 8011814:	603b      	str	r3, [r7, #0]
 8011816:	460b      	mov	r3, r1
 8011818:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801181a:	2300      	movs	r3, #0
 801181c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801181e:	2300      	movs	r3, #0
 8011820:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011828:	7af9      	ldrb	r1, [r7, #11]
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	f7f4 fa81 	bl	8005d34 <HAL_PCD_EP_Transmit>
 8011832:	4603      	mov	r3, r0
 8011834:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011836:	7dfb      	ldrb	r3, [r7, #23]
 8011838:	4618      	mov	r0, r3
 801183a:	f000 f853 	bl	80118e4 <USBD_Get_USB_Status>
 801183e:	4603      	mov	r3, r0
 8011840:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011842:	7dbb      	ldrb	r3, [r7, #22]
}
 8011844:	4618      	mov	r0, r3
 8011846:	3718      	adds	r7, #24
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b086      	sub	sp, #24
 8011850:	af00      	add	r7, sp, #0
 8011852:	60f8      	str	r0, [r7, #12]
 8011854:	607a      	str	r2, [r7, #4]
 8011856:	603b      	str	r3, [r7, #0]
 8011858:	460b      	mov	r3, r1
 801185a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801185c:	2300      	movs	r3, #0
 801185e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011860:	2300      	movs	r3, #0
 8011862:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801186a:	7af9      	ldrb	r1, [r7, #11]
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	f7f4 f9fd 	bl	8005c6e <HAL_PCD_EP_Receive>
 8011874:	4603      	mov	r3, r0
 8011876:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011878:	7dfb      	ldrb	r3, [r7, #23]
 801187a:	4618      	mov	r0, r3
 801187c:	f000 f832 	bl	80118e4 <USBD_Get_USB_Status>
 8011880:	4603      	mov	r3, r0
 8011882:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011884:	7dbb      	ldrb	r3, [r7, #22]
}
 8011886:	4618      	mov	r0, r3
 8011888:	3718      	adds	r7, #24
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}

0801188e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801188e:	b580      	push	{r7, lr}
 8011890:	b082      	sub	sp, #8
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
 8011896:	460b      	mov	r3, r1
 8011898:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80118a0:	78fa      	ldrb	r2, [r7, #3]
 80118a2:	4611      	mov	r1, r2
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7f4 fa2d 	bl	8005d04 <HAL_PCD_EP_GetRxCount>
 80118aa:	4603      	mov	r3, r0
}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80118b4:	b480      	push	{r7}
 80118b6:	b083      	sub	sp, #12
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80118bc:	4b03      	ldr	r3, [pc, #12]	; (80118cc <USBD_static_malloc+0x18>)
}
 80118be:	4618      	mov	r0, r3
 80118c0:	370c      	adds	r7, #12
 80118c2:	46bd      	mov	sp, r7
 80118c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	2001de14 	.word	0x2001de14

080118d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80118d0:	b480      	push	{r7}
 80118d2:	b083      	sub	sp, #12
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]

}
 80118d8:	bf00      	nop
 80118da:	370c      	adds	r7, #12
 80118dc:	46bd      	mov	sp, r7
 80118de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e2:	4770      	bx	lr

080118e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b085      	sub	sp, #20
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	4603      	mov	r3, r0
 80118ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118ee:	2300      	movs	r3, #0
 80118f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80118f2:	79fb      	ldrb	r3, [r7, #7]
 80118f4:	2b03      	cmp	r3, #3
 80118f6:	d817      	bhi.n	8011928 <USBD_Get_USB_Status+0x44>
 80118f8:	a201      	add	r2, pc, #4	; (adr r2, 8011900 <USBD_Get_USB_Status+0x1c>)
 80118fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118fe:	bf00      	nop
 8011900:	08011911 	.word	0x08011911
 8011904:	08011917 	.word	0x08011917
 8011908:	0801191d 	.word	0x0801191d
 801190c:	08011923 	.word	0x08011923
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011910:	2300      	movs	r3, #0
 8011912:	73fb      	strb	r3, [r7, #15]
    break;
 8011914:	e00b      	b.n	801192e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011916:	2303      	movs	r3, #3
 8011918:	73fb      	strb	r3, [r7, #15]
    break;
 801191a:	e008      	b.n	801192e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801191c:	2301      	movs	r3, #1
 801191e:	73fb      	strb	r3, [r7, #15]
    break;
 8011920:	e005      	b.n	801192e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011922:	2303      	movs	r3, #3
 8011924:	73fb      	strb	r3, [r7, #15]
    break;
 8011926:	e002      	b.n	801192e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011928:	2303      	movs	r3, #3
 801192a:	73fb      	strb	r3, [r7, #15]
    break;
 801192c:	bf00      	nop
  }
  return usb_status;
 801192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011930:	4618      	mov	r0, r3
 8011932:	3714      	adds	r7, #20
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr

0801193c <__errno>:
 801193c:	4b01      	ldr	r3, [pc, #4]	; (8011944 <__errno+0x8>)
 801193e:	6818      	ldr	r0, [r3, #0]
 8011940:	4770      	bx	lr
 8011942:	bf00      	nop
 8011944:	2000018c 	.word	0x2000018c

08011948 <__libc_init_array>:
 8011948:	b570      	push	{r4, r5, r6, lr}
 801194a:	4d0d      	ldr	r5, [pc, #52]	; (8011980 <__libc_init_array+0x38>)
 801194c:	4c0d      	ldr	r4, [pc, #52]	; (8011984 <__libc_init_array+0x3c>)
 801194e:	1b64      	subs	r4, r4, r5
 8011950:	10a4      	asrs	r4, r4, #2
 8011952:	2600      	movs	r6, #0
 8011954:	42a6      	cmp	r6, r4
 8011956:	d109      	bne.n	801196c <__libc_init_array+0x24>
 8011958:	4d0b      	ldr	r5, [pc, #44]	; (8011988 <__libc_init_array+0x40>)
 801195a:	4c0c      	ldr	r4, [pc, #48]	; (801198c <__libc_init_array+0x44>)
 801195c:	f000 fd0e 	bl	801237c <_init>
 8011960:	1b64      	subs	r4, r4, r5
 8011962:	10a4      	asrs	r4, r4, #2
 8011964:	2600      	movs	r6, #0
 8011966:	42a6      	cmp	r6, r4
 8011968:	d105      	bne.n	8011976 <__libc_init_array+0x2e>
 801196a:	bd70      	pop	{r4, r5, r6, pc}
 801196c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011970:	4798      	blx	r3
 8011972:	3601      	adds	r6, #1
 8011974:	e7ee      	b.n	8011954 <__libc_init_array+0xc>
 8011976:	f855 3b04 	ldr.w	r3, [r5], #4
 801197a:	4798      	blx	r3
 801197c:	3601      	adds	r6, #1
 801197e:	e7f2      	b.n	8011966 <__libc_init_array+0x1e>
 8011980:	08014a88 	.word	0x08014a88
 8011984:	08014a88 	.word	0x08014a88
 8011988:	08014a88 	.word	0x08014a88
 801198c:	08014a8c 	.word	0x08014a8c

08011990 <malloc>:
 8011990:	4b02      	ldr	r3, [pc, #8]	; (801199c <malloc+0xc>)
 8011992:	4601      	mov	r1, r0
 8011994:	6818      	ldr	r0, [r3, #0]
 8011996:	f000 b88d 	b.w	8011ab4 <_malloc_r>
 801199a:	bf00      	nop
 801199c:	2000018c 	.word	0x2000018c

080119a0 <free>:
 80119a0:	4b02      	ldr	r3, [pc, #8]	; (80119ac <free+0xc>)
 80119a2:	4601      	mov	r1, r0
 80119a4:	6818      	ldr	r0, [r3, #0]
 80119a6:	f000 b819 	b.w	80119dc <_free_r>
 80119aa:	bf00      	nop
 80119ac:	2000018c 	.word	0x2000018c

080119b0 <memcpy>:
 80119b0:	440a      	add	r2, r1
 80119b2:	4291      	cmp	r1, r2
 80119b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80119b8:	d100      	bne.n	80119bc <memcpy+0xc>
 80119ba:	4770      	bx	lr
 80119bc:	b510      	push	{r4, lr}
 80119be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80119c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80119c6:	4291      	cmp	r1, r2
 80119c8:	d1f9      	bne.n	80119be <memcpy+0xe>
 80119ca:	bd10      	pop	{r4, pc}

080119cc <memset>:
 80119cc:	4402      	add	r2, r0
 80119ce:	4603      	mov	r3, r0
 80119d0:	4293      	cmp	r3, r2
 80119d2:	d100      	bne.n	80119d6 <memset+0xa>
 80119d4:	4770      	bx	lr
 80119d6:	f803 1b01 	strb.w	r1, [r3], #1
 80119da:	e7f9      	b.n	80119d0 <memset+0x4>

080119dc <_free_r>:
 80119dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119de:	2900      	cmp	r1, #0
 80119e0:	d044      	beq.n	8011a6c <_free_r+0x90>
 80119e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119e6:	9001      	str	r0, [sp, #4]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	f1a1 0404 	sub.w	r4, r1, #4
 80119ee:	bfb8      	it	lt
 80119f0:	18e4      	addlt	r4, r4, r3
 80119f2:	f000 f975 	bl	8011ce0 <__malloc_lock>
 80119f6:	4a1e      	ldr	r2, [pc, #120]	; (8011a70 <_free_r+0x94>)
 80119f8:	9801      	ldr	r0, [sp, #4]
 80119fa:	6813      	ldr	r3, [r2, #0]
 80119fc:	b933      	cbnz	r3, 8011a0c <_free_r+0x30>
 80119fe:	6063      	str	r3, [r4, #4]
 8011a00:	6014      	str	r4, [r2, #0]
 8011a02:	b003      	add	sp, #12
 8011a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a08:	f000 b970 	b.w	8011cec <__malloc_unlock>
 8011a0c:	42a3      	cmp	r3, r4
 8011a0e:	d908      	bls.n	8011a22 <_free_r+0x46>
 8011a10:	6825      	ldr	r5, [r4, #0]
 8011a12:	1961      	adds	r1, r4, r5
 8011a14:	428b      	cmp	r3, r1
 8011a16:	bf01      	itttt	eq
 8011a18:	6819      	ldreq	r1, [r3, #0]
 8011a1a:	685b      	ldreq	r3, [r3, #4]
 8011a1c:	1949      	addeq	r1, r1, r5
 8011a1e:	6021      	streq	r1, [r4, #0]
 8011a20:	e7ed      	b.n	80119fe <_free_r+0x22>
 8011a22:	461a      	mov	r2, r3
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	b10b      	cbz	r3, 8011a2c <_free_r+0x50>
 8011a28:	42a3      	cmp	r3, r4
 8011a2a:	d9fa      	bls.n	8011a22 <_free_r+0x46>
 8011a2c:	6811      	ldr	r1, [r2, #0]
 8011a2e:	1855      	adds	r5, r2, r1
 8011a30:	42a5      	cmp	r5, r4
 8011a32:	d10b      	bne.n	8011a4c <_free_r+0x70>
 8011a34:	6824      	ldr	r4, [r4, #0]
 8011a36:	4421      	add	r1, r4
 8011a38:	1854      	adds	r4, r2, r1
 8011a3a:	42a3      	cmp	r3, r4
 8011a3c:	6011      	str	r1, [r2, #0]
 8011a3e:	d1e0      	bne.n	8011a02 <_free_r+0x26>
 8011a40:	681c      	ldr	r4, [r3, #0]
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	6053      	str	r3, [r2, #4]
 8011a46:	4421      	add	r1, r4
 8011a48:	6011      	str	r1, [r2, #0]
 8011a4a:	e7da      	b.n	8011a02 <_free_r+0x26>
 8011a4c:	d902      	bls.n	8011a54 <_free_r+0x78>
 8011a4e:	230c      	movs	r3, #12
 8011a50:	6003      	str	r3, [r0, #0]
 8011a52:	e7d6      	b.n	8011a02 <_free_r+0x26>
 8011a54:	6825      	ldr	r5, [r4, #0]
 8011a56:	1961      	adds	r1, r4, r5
 8011a58:	428b      	cmp	r3, r1
 8011a5a:	bf04      	itt	eq
 8011a5c:	6819      	ldreq	r1, [r3, #0]
 8011a5e:	685b      	ldreq	r3, [r3, #4]
 8011a60:	6063      	str	r3, [r4, #4]
 8011a62:	bf04      	itt	eq
 8011a64:	1949      	addeq	r1, r1, r5
 8011a66:	6021      	streq	r1, [r4, #0]
 8011a68:	6054      	str	r4, [r2, #4]
 8011a6a:	e7ca      	b.n	8011a02 <_free_r+0x26>
 8011a6c:	b003      	add	sp, #12
 8011a6e:	bd30      	pop	{r4, r5, pc}
 8011a70:	2001e034 	.word	0x2001e034

08011a74 <sbrk_aligned>:
 8011a74:	b570      	push	{r4, r5, r6, lr}
 8011a76:	4e0e      	ldr	r6, [pc, #56]	; (8011ab0 <sbrk_aligned+0x3c>)
 8011a78:	460c      	mov	r4, r1
 8011a7a:	6831      	ldr	r1, [r6, #0]
 8011a7c:	4605      	mov	r5, r0
 8011a7e:	b911      	cbnz	r1, 8011a86 <sbrk_aligned+0x12>
 8011a80:	f000 f8f6 	bl	8011c70 <_sbrk_r>
 8011a84:	6030      	str	r0, [r6, #0]
 8011a86:	4621      	mov	r1, r4
 8011a88:	4628      	mov	r0, r5
 8011a8a:	f000 f8f1 	bl	8011c70 <_sbrk_r>
 8011a8e:	1c43      	adds	r3, r0, #1
 8011a90:	d00a      	beq.n	8011aa8 <sbrk_aligned+0x34>
 8011a92:	1cc4      	adds	r4, r0, #3
 8011a94:	f024 0403 	bic.w	r4, r4, #3
 8011a98:	42a0      	cmp	r0, r4
 8011a9a:	d007      	beq.n	8011aac <sbrk_aligned+0x38>
 8011a9c:	1a21      	subs	r1, r4, r0
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	f000 f8e6 	bl	8011c70 <_sbrk_r>
 8011aa4:	3001      	adds	r0, #1
 8011aa6:	d101      	bne.n	8011aac <sbrk_aligned+0x38>
 8011aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8011aac:	4620      	mov	r0, r4
 8011aae:	bd70      	pop	{r4, r5, r6, pc}
 8011ab0:	2001e038 	.word	0x2001e038

08011ab4 <_malloc_r>:
 8011ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ab8:	1ccd      	adds	r5, r1, #3
 8011aba:	f025 0503 	bic.w	r5, r5, #3
 8011abe:	3508      	adds	r5, #8
 8011ac0:	2d0c      	cmp	r5, #12
 8011ac2:	bf38      	it	cc
 8011ac4:	250c      	movcc	r5, #12
 8011ac6:	2d00      	cmp	r5, #0
 8011ac8:	4607      	mov	r7, r0
 8011aca:	db01      	blt.n	8011ad0 <_malloc_r+0x1c>
 8011acc:	42a9      	cmp	r1, r5
 8011ace:	d905      	bls.n	8011adc <_malloc_r+0x28>
 8011ad0:	230c      	movs	r3, #12
 8011ad2:	603b      	str	r3, [r7, #0]
 8011ad4:	2600      	movs	r6, #0
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011adc:	4e2e      	ldr	r6, [pc, #184]	; (8011b98 <_malloc_r+0xe4>)
 8011ade:	f000 f8ff 	bl	8011ce0 <__malloc_lock>
 8011ae2:	6833      	ldr	r3, [r6, #0]
 8011ae4:	461c      	mov	r4, r3
 8011ae6:	bb34      	cbnz	r4, 8011b36 <_malloc_r+0x82>
 8011ae8:	4629      	mov	r1, r5
 8011aea:	4638      	mov	r0, r7
 8011aec:	f7ff ffc2 	bl	8011a74 <sbrk_aligned>
 8011af0:	1c43      	adds	r3, r0, #1
 8011af2:	4604      	mov	r4, r0
 8011af4:	d14d      	bne.n	8011b92 <_malloc_r+0xde>
 8011af6:	6834      	ldr	r4, [r6, #0]
 8011af8:	4626      	mov	r6, r4
 8011afa:	2e00      	cmp	r6, #0
 8011afc:	d140      	bne.n	8011b80 <_malloc_r+0xcc>
 8011afe:	6823      	ldr	r3, [r4, #0]
 8011b00:	4631      	mov	r1, r6
 8011b02:	4638      	mov	r0, r7
 8011b04:	eb04 0803 	add.w	r8, r4, r3
 8011b08:	f000 f8b2 	bl	8011c70 <_sbrk_r>
 8011b0c:	4580      	cmp	r8, r0
 8011b0e:	d13a      	bne.n	8011b86 <_malloc_r+0xd2>
 8011b10:	6821      	ldr	r1, [r4, #0]
 8011b12:	3503      	adds	r5, #3
 8011b14:	1a6d      	subs	r5, r5, r1
 8011b16:	f025 0503 	bic.w	r5, r5, #3
 8011b1a:	3508      	adds	r5, #8
 8011b1c:	2d0c      	cmp	r5, #12
 8011b1e:	bf38      	it	cc
 8011b20:	250c      	movcc	r5, #12
 8011b22:	4629      	mov	r1, r5
 8011b24:	4638      	mov	r0, r7
 8011b26:	f7ff ffa5 	bl	8011a74 <sbrk_aligned>
 8011b2a:	3001      	adds	r0, #1
 8011b2c:	d02b      	beq.n	8011b86 <_malloc_r+0xd2>
 8011b2e:	6823      	ldr	r3, [r4, #0]
 8011b30:	442b      	add	r3, r5
 8011b32:	6023      	str	r3, [r4, #0]
 8011b34:	e00e      	b.n	8011b54 <_malloc_r+0xa0>
 8011b36:	6822      	ldr	r2, [r4, #0]
 8011b38:	1b52      	subs	r2, r2, r5
 8011b3a:	d41e      	bmi.n	8011b7a <_malloc_r+0xc6>
 8011b3c:	2a0b      	cmp	r2, #11
 8011b3e:	d916      	bls.n	8011b6e <_malloc_r+0xba>
 8011b40:	1961      	adds	r1, r4, r5
 8011b42:	42a3      	cmp	r3, r4
 8011b44:	6025      	str	r5, [r4, #0]
 8011b46:	bf18      	it	ne
 8011b48:	6059      	strne	r1, [r3, #4]
 8011b4a:	6863      	ldr	r3, [r4, #4]
 8011b4c:	bf08      	it	eq
 8011b4e:	6031      	streq	r1, [r6, #0]
 8011b50:	5162      	str	r2, [r4, r5]
 8011b52:	604b      	str	r3, [r1, #4]
 8011b54:	4638      	mov	r0, r7
 8011b56:	f104 060b 	add.w	r6, r4, #11
 8011b5a:	f000 f8c7 	bl	8011cec <__malloc_unlock>
 8011b5e:	f026 0607 	bic.w	r6, r6, #7
 8011b62:	1d23      	adds	r3, r4, #4
 8011b64:	1af2      	subs	r2, r6, r3
 8011b66:	d0b6      	beq.n	8011ad6 <_malloc_r+0x22>
 8011b68:	1b9b      	subs	r3, r3, r6
 8011b6a:	50a3      	str	r3, [r4, r2]
 8011b6c:	e7b3      	b.n	8011ad6 <_malloc_r+0x22>
 8011b6e:	6862      	ldr	r2, [r4, #4]
 8011b70:	42a3      	cmp	r3, r4
 8011b72:	bf0c      	ite	eq
 8011b74:	6032      	streq	r2, [r6, #0]
 8011b76:	605a      	strne	r2, [r3, #4]
 8011b78:	e7ec      	b.n	8011b54 <_malloc_r+0xa0>
 8011b7a:	4623      	mov	r3, r4
 8011b7c:	6864      	ldr	r4, [r4, #4]
 8011b7e:	e7b2      	b.n	8011ae6 <_malloc_r+0x32>
 8011b80:	4634      	mov	r4, r6
 8011b82:	6876      	ldr	r6, [r6, #4]
 8011b84:	e7b9      	b.n	8011afa <_malloc_r+0x46>
 8011b86:	230c      	movs	r3, #12
 8011b88:	603b      	str	r3, [r7, #0]
 8011b8a:	4638      	mov	r0, r7
 8011b8c:	f000 f8ae 	bl	8011cec <__malloc_unlock>
 8011b90:	e7a1      	b.n	8011ad6 <_malloc_r+0x22>
 8011b92:	6025      	str	r5, [r4, #0]
 8011b94:	e7de      	b.n	8011b54 <_malloc_r+0xa0>
 8011b96:	bf00      	nop
 8011b98:	2001e034 	.word	0x2001e034

08011b9c <cleanup_glue>:
 8011b9c:	b538      	push	{r3, r4, r5, lr}
 8011b9e:	460c      	mov	r4, r1
 8011ba0:	6809      	ldr	r1, [r1, #0]
 8011ba2:	4605      	mov	r5, r0
 8011ba4:	b109      	cbz	r1, 8011baa <cleanup_glue+0xe>
 8011ba6:	f7ff fff9 	bl	8011b9c <cleanup_glue>
 8011baa:	4621      	mov	r1, r4
 8011bac:	4628      	mov	r0, r5
 8011bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bb2:	f7ff bf13 	b.w	80119dc <_free_r>
	...

08011bb8 <_reclaim_reent>:
 8011bb8:	4b2c      	ldr	r3, [pc, #176]	; (8011c6c <_reclaim_reent+0xb4>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	4283      	cmp	r3, r0
 8011bbe:	b570      	push	{r4, r5, r6, lr}
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	d051      	beq.n	8011c68 <_reclaim_reent+0xb0>
 8011bc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011bc6:	b143      	cbz	r3, 8011bda <_reclaim_reent+0x22>
 8011bc8:	68db      	ldr	r3, [r3, #12]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d14a      	bne.n	8011c64 <_reclaim_reent+0xac>
 8011bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011bd0:	6819      	ldr	r1, [r3, #0]
 8011bd2:	b111      	cbz	r1, 8011bda <_reclaim_reent+0x22>
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	f7ff ff01 	bl	80119dc <_free_r>
 8011bda:	6961      	ldr	r1, [r4, #20]
 8011bdc:	b111      	cbz	r1, 8011be4 <_reclaim_reent+0x2c>
 8011bde:	4620      	mov	r0, r4
 8011be0:	f7ff fefc 	bl	80119dc <_free_r>
 8011be4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011be6:	b111      	cbz	r1, 8011bee <_reclaim_reent+0x36>
 8011be8:	4620      	mov	r0, r4
 8011bea:	f7ff fef7 	bl	80119dc <_free_r>
 8011bee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011bf0:	b111      	cbz	r1, 8011bf8 <_reclaim_reent+0x40>
 8011bf2:	4620      	mov	r0, r4
 8011bf4:	f7ff fef2 	bl	80119dc <_free_r>
 8011bf8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011bfa:	b111      	cbz	r1, 8011c02 <_reclaim_reent+0x4a>
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	f7ff feed 	bl	80119dc <_free_r>
 8011c02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011c04:	b111      	cbz	r1, 8011c0c <_reclaim_reent+0x54>
 8011c06:	4620      	mov	r0, r4
 8011c08:	f7ff fee8 	bl	80119dc <_free_r>
 8011c0c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011c0e:	b111      	cbz	r1, 8011c16 <_reclaim_reent+0x5e>
 8011c10:	4620      	mov	r0, r4
 8011c12:	f7ff fee3 	bl	80119dc <_free_r>
 8011c16:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011c18:	b111      	cbz	r1, 8011c20 <_reclaim_reent+0x68>
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	f7ff fede 	bl	80119dc <_free_r>
 8011c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c22:	b111      	cbz	r1, 8011c2a <_reclaim_reent+0x72>
 8011c24:	4620      	mov	r0, r4
 8011c26:	f7ff fed9 	bl	80119dc <_free_r>
 8011c2a:	69a3      	ldr	r3, [r4, #24]
 8011c2c:	b1e3      	cbz	r3, 8011c68 <_reclaim_reent+0xb0>
 8011c2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011c30:	4620      	mov	r0, r4
 8011c32:	4798      	blx	r3
 8011c34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011c36:	b1b9      	cbz	r1, 8011c68 <_reclaim_reent+0xb0>
 8011c38:	4620      	mov	r0, r4
 8011c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c3e:	f7ff bfad 	b.w	8011b9c <cleanup_glue>
 8011c42:	5949      	ldr	r1, [r1, r5]
 8011c44:	b941      	cbnz	r1, 8011c58 <_reclaim_reent+0xa0>
 8011c46:	3504      	adds	r5, #4
 8011c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c4a:	2d80      	cmp	r5, #128	; 0x80
 8011c4c:	68d9      	ldr	r1, [r3, #12]
 8011c4e:	d1f8      	bne.n	8011c42 <_reclaim_reent+0x8a>
 8011c50:	4620      	mov	r0, r4
 8011c52:	f7ff fec3 	bl	80119dc <_free_r>
 8011c56:	e7ba      	b.n	8011bce <_reclaim_reent+0x16>
 8011c58:	680e      	ldr	r6, [r1, #0]
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	f7ff febe 	bl	80119dc <_free_r>
 8011c60:	4631      	mov	r1, r6
 8011c62:	e7ef      	b.n	8011c44 <_reclaim_reent+0x8c>
 8011c64:	2500      	movs	r5, #0
 8011c66:	e7ef      	b.n	8011c48 <_reclaim_reent+0x90>
 8011c68:	bd70      	pop	{r4, r5, r6, pc}
 8011c6a:	bf00      	nop
 8011c6c:	2000018c 	.word	0x2000018c

08011c70 <_sbrk_r>:
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	4d06      	ldr	r5, [pc, #24]	; (8011c8c <_sbrk_r+0x1c>)
 8011c74:	2300      	movs	r3, #0
 8011c76:	4604      	mov	r4, r0
 8011c78:	4608      	mov	r0, r1
 8011c7a:	602b      	str	r3, [r5, #0]
 8011c7c:	f7f0 fe48 	bl	8002910 <_sbrk>
 8011c80:	1c43      	adds	r3, r0, #1
 8011c82:	d102      	bne.n	8011c8a <_sbrk_r+0x1a>
 8011c84:	682b      	ldr	r3, [r5, #0]
 8011c86:	b103      	cbz	r3, 8011c8a <_sbrk_r+0x1a>
 8011c88:	6023      	str	r3, [r4, #0]
 8011c8a:	bd38      	pop	{r3, r4, r5, pc}
 8011c8c:	2001e03c 	.word	0x2001e03c

08011c90 <siprintf>:
 8011c90:	b40e      	push	{r1, r2, r3}
 8011c92:	b500      	push	{lr}
 8011c94:	b09c      	sub	sp, #112	; 0x70
 8011c96:	ab1d      	add	r3, sp, #116	; 0x74
 8011c98:	9002      	str	r0, [sp, #8]
 8011c9a:	9006      	str	r0, [sp, #24]
 8011c9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011ca0:	4809      	ldr	r0, [pc, #36]	; (8011cc8 <siprintf+0x38>)
 8011ca2:	9107      	str	r1, [sp, #28]
 8011ca4:	9104      	str	r1, [sp, #16]
 8011ca6:	4909      	ldr	r1, [pc, #36]	; (8011ccc <siprintf+0x3c>)
 8011ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cac:	9105      	str	r1, [sp, #20]
 8011cae:	6800      	ldr	r0, [r0, #0]
 8011cb0:	9301      	str	r3, [sp, #4]
 8011cb2:	a902      	add	r1, sp, #8
 8011cb4:	f000 f87c 	bl	8011db0 <_svfiprintf_r>
 8011cb8:	9b02      	ldr	r3, [sp, #8]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	701a      	strb	r2, [r3, #0]
 8011cbe:	b01c      	add	sp, #112	; 0x70
 8011cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cc4:	b003      	add	sp, #12
 8011cc6:	4770      	bx	lr
 8011cc8:	2000018c 	.word	0x2000018c
 8011ccc:	ffff0208 	.word	0xffff0208

08011cd0 <strcpy>:
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011cd6:	f803 2b01 	strb.w	r2, [r3], #1
 8011cda:	2a00      	cmp	r2, #0
 8011cdc:	d1f9      	bne.n	8011cd2 <strcpy+0x2>
 8011cde:	4770      	bx	lr

08011ce0 <__malloc_lock>:
 8011ce0:	4801      	ldr	r0, [pc, #4]	; (8011ce8 <__malloc_lock+0x8>)
 8011ce2:	f7f1 b98e 	b.w	8003002 <__retarget_lock_acquire_recursive>
 8011ce6:	bf00      	nop
 8011ce8:	200025f8 	.word	0x200025f8

08011cec <__malloc_unlock>:
 8011cec:	4801      	ldr	r0, [pc, #4]	; (8011cf4 <__malloc_unlock+0x8>)
 8011cee:	f7f1 b99c 	b.w	800302a <__retarget_lock_release_recursive>
 8011cf2:	bf00      	nop
 8011cf4:	200025f8 	.word	0x200025f8

08011cf8 <__ssputs_r>:
 8011cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cfc:	688e      	ldr	r6, [r1, #8]
 8011cfe:	429e      	cmp	r6, r3
 8011d00:	4682      	mov	sl, r0
 8011d02:	460c      	mov	r4, r1
 8011d04:	4690      	mov	r8, r2
 8011d06:	461f      	mov	r7, r3
 8011d08:	d838      	bhi.n	8011d7c <__ssputs_r+0x84>
 8011d0a:	898a      	ldrh	r2, [r1, #12]
 8011d0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d10:	d032      	beq.n	8011d78 <__ssputs_r+0x80>
 8011d12:	6825      	ldr	r5, [r4, #0]
 8011d14:	6909      	ldr	r1, [r1, #16]
 8011d16:	eba5 0901 	sub.w	r9, r5, r1
 8011d1a:	6965      	ldr	r5, [r4, #20]
 8011d1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d24:	3301      	adds	r3, #1
 8011d26:	444b      	add	r3, r9
 8011d28:	106d      	asrs	r5, r5, #1
 8011d2a:	429d      	cmp	r5, r3
 8011d2c:	bf38      	it	cc
 8011d2e:	461d      	movcc	r5, r3
 8011d30:	0553      	lsls	r3, r2, #21
 8011d32:	d531      	bpl.n	8011d98 <__ssputs_r+0xa0>
 8011d34:	4629      	mov	r1, r5
 8011d36:	f7ff febd 	bl	8011ab4 <_malloc_r>
 8011d3a:	4606      	mov	r6, r0
 8011d3c:	b950      	cbnz	r0, 8011d54 <__ssputs_r+0x5c>
 8011d3e:	230c      	movs	r3, #12
 8011d40:	f8ca 3000 	str.w	r3, [sl]
 8011d44:	89a3      	ldrh	r3, [r4, #12]
 8011d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d4a:	81a3      	strh	r3, [r4, #12]
 8011d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d54:	6921      	ldr	r1, [r4, #16]
 8011d56:	464a      	mov	r2, r9
 8011d58:	f7ff fe2a 	bl	80119b0 <memcpy>
 8011d5c:	89a3      	ldrh	r3, [r4, #12]
 8011d5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d66:	81a3      	strh	r3, [r4, #12]
 8011d68:	6126      	str	r6, [r4, #16]
 8011d6a:	6165      	str	r5, [r4, #20]
 8011d6c:	444e      	add	r6, r9
 8011d6e:	eba5 0509 	sub.w	r5, r5, r9
 8011d72:	6026      	str	r6, [r4, #0]
 8011d74:	60a5      	str	r5, [r4, #8]
 8011d76:	463e      	mov	r6, r7
 8011d78:	42be      	cmp	r6, r7
 8011d7a:	d900      	bls.n	8011d7e <__ssputs_r+0x86>
 8011d7c:	463e      	mov	r6, r7
 8011d7e:	6820      	ldr	r0, [r4, #0]
 8011d80:	4632      	mov	r2, r6
 8011d82:	4641      	mov	r1, r8
 8011d84:	f000 faa8 	bl	80122d8 <memmove>
 8011d88:	68a3      	ldr	r3, [r4, #8]
 8011d8a:	1b9b      	subs	r3, r3, r6
 8011d8c:	60a3      	str	r3, [r4, #8]
 8011d8e:	6823      	ldr	r3, [r4, #0]
 8011d90:	4433      	add	r3, r6
 8011d92:	6023      	str	r3, [r4, #0]
 8011d94:	2000      	movs	r0, #0
 8011d96:	e7db      	b.n	8011d50 <__ssputs_r+0x58>
 8011d98:	462a      	mov	r2, r5
 8011d9a:	f000 fab7 	bl	801230c <_realloc_r>
 8011d9e:	4606      	mov	r6, r0
 8011da0:	2800      	cmp	r0, #0
 8011da2:	d1e1      	bne.n	8011d68 <__ssputs_r+0x70>
 8011da4:	6921      	ldr	r1, [r4, #16]
 8011da6:	4650      	mov	r0, sl
 8011da8:	f7ff fe18 	bl	80119dc <_free_r>
 8011dac:	e7c7      	b.n	8011d3e <__ssputs_r+0x46>
	...

08011db0 <_svfiprintf_r>:
 8011db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011db4:	4698      	mov	r8, r3
 8011db6:	898b      	ldrh	r3, [r1, #12]
 8011db8:	061b      	lsls	r3, r3, #24
 8011dba:	b09d      	sub	sp, #116	; 0x74
 8011dbc:	4607      	mov	r7, r0
 8011dbe:	460d      	mov	r5, r1
 8011dc0:	4614      	mov	r4, r2
 8011dc2:	d50e      	bpl.n	8011de2 <_svfiprintf_r+0x32>
 8011dc4:	690b      	ldr	r3, [r1, #16]
 8011dc6:	b963      	cbnz	r3, 8011de2 <_svfiprintf_r+0x32>
 8011dc8:	2140      	movs	r1, #64	; 0x40
 8011dca:	f7ff fe73 	bl	8011ab4 <_malloc_r>
 8011dce:	6028      	str	r0, [r5, #0]
 8011dd0:	6128      	str	r0, [r5, #16]
 8011dd2:	b920      	cbnz	r0, 8011dde <_svfiprintf_r+0x2e>
 8011dd4:	230c      	movs	r3, #12
 8011dd6:	603b      	str	r3, [r7, #0]
 8011dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ddc:	e0d1      	b.n	8011f82 <_svfiprintf_r+0x1d2>
 8011dde:	2340      	movs	r3, #64	; 0x40
 8011de0:	616b      	str	r3, [r5, #20]
 8011de2:	2300      	movs	r3, #0
 8011de4:	9309      	str	r3, [sp, #36]	; 0x24
 8011de6:	2320      	movs	r3, #32
 8011de8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8011df0:	2330      	movs	r3, #48	; 0x30
 8011df2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011f9c <_svfiprintf_r+0x1ec>
 8011df6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011dfa:	f04f 0901 	mov.w	r9, #1
 8011dfe:	4623      	mov	r3, r4
 8011e00:	469a      	mov	sl, r3
 8011e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e06:	b10a      	cbz	r2, 8011e0c <_svfiprintf_r+0x5c>
 8011e08:	2a25      	cmp	r2, #37	; 0x25
 8011e0a:	d1f9      	bne.n	8011e00 <_svfiprintf_r+0x50>
 8011e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8011e10:	d00b      	beq.n	8011e2a <_svfiprintf_r+0x7a>
 8011e12:	465b      	mov	r3, fp
 8011e14:	4622      	mov	r2, r4
 8011e16:	4629      	mov	r1, r5
 8011e18:	4638      	mov	r0, r7
 8011e1a:	f7ff ff6d 	bl	8011cf8 <__ssputs_r>
 8011e1e:	3001      	adds	r0, #1
 8011e20:	f000 80aa 	beq.w	8011f78 <_svfiprintf_r+0x1c8>
 8011e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e26:	445a      	add	r2, fp
 8011e28:	9209      	str	r2, [sp, #36]	; 0x24
 8011e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	f000 80a2 	beq.w	8011f78 <_svfiprintf_r+0x1c8>
 8011e34:	2300      	movs	r3, #0
 8011e36:	f04f 32ff 	mov.w	r2, #4294967295
 8011e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e3e:	f10a 0a01 	add.w	sl, sl, #1
 8011e42:	9304      	str	r3, [sp, #16]
 8011e44:	9307      	str	r3, [sp, #28]
 8011e46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e4a:	931a      	str	r3, [sp, #104]	; 0x68
 8011e4c:	4654      	mov	r4, sl
 8011e4e:	2205      	movs	r2, #5
 8011e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e54:	4851      	ldr	r0, [pc, #324]	; (8011f9c <_svfiprintf_r+0x1ec>)
 8011e56:	f7ee f9cb 	bl	80001f0 <memchr>
 8011e5a:	9a04      	ldr	r2, [sp, #16]
 8011e5c:	b9d8      	cbnz	r0, 8011e96 <_svfiprintf_r+0xe6>
 8011e5e:	06d0      	lsls	r0, r2, #27
 8011e60:	bf44      	itt	mi
 8011e62:	2320      	movmi	r3, #32
 8011e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e68:	0711      	lsls	r1, r2, #28
 8011e6a:	bf44      	itt	mi
 8011e6c:	232b      	movmi	r3, #43	; 0x2b
 8011e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e72:	f89a 3000 	ldrb.w	r3, [sl]
 8011e76:	2b2a      	cmp	r3, #42	; 0x2a
 8011e78:	d015      	beq.n	8011ea6 <_svfiprintf_r+0xf6>
 8011e7a:	9a07      	ldr	r2, [sp, #28]
 8011e7c:	4654      	mov	r4, sl
 8011e7e:	2000      	movs	r0, #0
 8011e80:	f04f 0c0a 	mov.w	ip, #10
 8011e84:	4621      	mov	r1, r4
 8011e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e8a:	3b30      	subs	r3, #48	; 0x30
 8011e8c:	2b09      	cmp	r3, #9
 8011e8e:	d94e      	bls.n	8011f2e <_svfiprintf_r+0x17e>
 8011e90:	b1b0      	cbz	r0, 8011ec0 <_svfiprintf_r+0x110>
 8011e92:	9207      	str	r2, [sp, #28]
 8011e94:	e014      	b.n	8011ec0 <_svfiprintf_r+0x110>
 8011e96:	eba0 0308 	sub.w	r3, r0, r8
 8011e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8011e9e:	4313      	orrs	r3, r2
 8011ea0:	9304      	str	r3, [sp, #16]
 8011ea2:	46a2      	mov	sl, r4
 8011ea4:	e7d2      	b.n	8011e4c <_svfiprintf_r+0x9c>
 8011ea6:	9b03      	ldr	r3, [sp, #12]
 8011ea8:	1d19      	adds	r1, r3, #4
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	9103      	str	r1, [sp, #12]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	bfbb      	ittet	lt
 8011eb2:	425b      	neglt	r3, r3
 8011eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8011eb8:	9307      	strge	r3, [sp, #28]
 8011eba:	9307      	strlt	r3, [sp, #28]
 8011ebc:	bfb8      	it	lt
 8011ebe:	9204      	strlt	r2, [sp, #16]
 8011ec0:	7823      	ldrb	r3, [r4, #0]
 8011ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8011ec4:	d10c      	bne.n	8011ee0 <_svfiprintf_r+0x130>
 8011ec6:	7863      	ldrb	r3, [r4, #1]
 8011ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8011eca:	d135      	bne.n	8011f38 <_svfiprintf_r+0x188>
 8011ecc:	9b03      	ldr	r3, [sp, #12]
 8011ece:	1d1a      	adds	r2, r3, #4
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	9203      	str	r2, [sp, #12]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	bfb8      	it	lt
 8011ed8:	f04f 33ff 	movlt.w	r3, #4294967295
 8011edc:	3402      	adds	r4, #2
 8011ede:	9305      	str	r3, [sp, #20]
 8011ee0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011fac <_svfiprintf_r+0x1fc>
 8011ee4:	7821      	ldrb	r1, [r4, #0]
 8011ee6:	2203      	movs	r2, #3
 8011ee8:	4650      	mov	r0, sl
 8011eea:	f7ee f981 	bl	80001f0 <memchr>
 8011eee:	b140      	cbz	r0, 8011f02 <_svfiprintf_r+0x152>
 8011ef0:	2340      	movs	r3, #64	; 0x40
 8011ef2:	eba0 000a 	sub.w	r0, r0, sl
 8011ef6:	fa03 f000 	lsl.w	r0, r3, r0
 8011efa:	9b04      	ldr	r3, [sp, #16]
 8011efc:	4303      	orrs	r3, r0
 8011efe:	3401      	adds	r4, #1
 8011f00:	9304      	str	r3, [sp, #16]
 8011f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f06:	4826      	ldr	r0, [pc, #152]	; (8011fa0 <_svfiprintf_r+0x1f0>)
 8011f08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f0c:	2206      	movs	r2, #6
 8011f0e:	f7ee f96f 	bl	80001f0 <memchr>
 8011f12:	2800      	cmp	r0, #0
 8011f14:	d038      	beq.n	8011f88 <_svfiprintf_r+0x1d8>
 8011f16:	4b23      	ldr	r3, [pc, #140]	; (8011fa4 <_svfiprintf_r+0x1f4>)
 8011f18:	bb1b      	cbnz	r3, 8011f62 <_svfiprintf_r+0x1b2>
 8011f1a:	9b03      	ldr	r3, [sp, #12]
 8011f1c:	3307      	adds	r3, #7
 8011f1e:	f023 0307 	bic.w	r3, r3, #7
 8011f22:	3308      	adds	r3, #8
 8011f24:	9303      	str	r3, [sp, #12]
 8011f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f28:	4433      	add	r3, r6
 8011f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8011f2c:	e767      	b.n	8011dfe <_svfiprintf_r+0x4e>
 8011f2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f32:	460c      	mov	r4, r1
 8011f34:	2001      	movs	r0, #1
 8011f36:	e7a5      	b.n	8011e84 <_svfiprintf_r+0xd4>
 8011f38:	2300      	movs	r3, #0
 8011f3a:	3401      	adds	r4, #1
 8011f3c:	9305      	str	r3, [sp, #20]
 8011f3e:	4619      	mov	r1, r3
 8011f40:	f04f 0c0a 	mov.w	ip, #10
 8011f44:	4620      	mov	r0, r4
 8011f46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f4a:	3a30      	subs	r2, #48	; 0x30
 8011f4c:	2a09      	cmp	r2, #9
 8011f4e:	d903      	bls.n	8011f58 <_svfiprintf_r+0x1a8>
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d0c5      	beq.n	8011ee0 <_svfiprintf_r+0x130>
 8011f54:	9105      	str	r1, [sp, #20]
 8011f56:	e7c3      	b.n	8011ee0 <_svfiprintf_r+0x130>
 8011f58:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	2301      	movs	r3, #1
 8011f60:	e7f0      	b.n	8011f44 <_svfiprintf_r+0x194>
 8011f62:	ab03      	add	r3, sp, #12
 8011f64:	9300      	str	r3, [sp, #0]
 8011f66:	462a      	mov	r2, r5
 8011f68:	4b0f      	ldr	r3, [pc, #60]	; (8011fa8 <_svfiprintf_r+0x1f8>)
 8011f6a:	a904      	add	r1, sp, #16
 8011f6c:	4638      	mov	r0, r7
 8011f6e:	f3af 8000 	nop.w
 8011f72:	1c42      	adds	r2, r0, #1
 8011f74:	4606      	mov	r6, r0
 8011f76:	d1d6      	bne.n	8011f26 <_svfiprintf_r+0x176>
 8011f78:	89ab      	ldrh	r3, [r5, #12]
 8011f7a:	065b      	lsls	r3, r3, #25
 8011f7c:	f53f af2c 	bmi.w	8011dd8 <_svfiprintf_r+0x28>
 8011f80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f82:	b01d      	add	sp, #116	; 0x74
 8011f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f88:	ab03      	add	r3, sp, #12
 8011f8a:	9300      	str	r3, [sp, #0]
 8011f8c:	462a      	mov	r2, r5
 8011f8e:	4b06      	ldr	r3, [pc, #24]	; (8011fa8 <_svfiprintf_r+0x1f8>)
 8011f90:	a904      	add	r1, sp, #16
 8011f92:	4638      	mov	r0, r7
 8011f94:	f000 f87a 	bl	801208c <_printf_i>
 8011f98:	e7eb      	b.n	8011f72 <_svfiprintf_r+0x1c2>
 8011f9a:	bf00      	nop
 8011f9c:	08014a4c 	.word	0x08014a4c
 8011fa0:	08014a56 	.word	0x08014a56
 8011fa4:	00000000 	.word	0x00000000
 8011fa8:	08011cf9 	.word	0x08011cf9
 8011fac:	08014a52 	.word	0x08014a52

08011fb0 <_printf_common>:
 8011fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fb4:	4616      	mov	r6, r2
 8011fb6:	4699      	mov	r9, r3
 8011fb8:	688a      	ldr	r2, [r1, #8]
 8011fba:	690b      	ldr	r3, [r1, #16]
 8011fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011fc0:	4293      	cmp	r3, r2
 8011fc2:	bfb8      	it	lt
 8011fc4:	4613      	movlt	r3, r2
 8011fc6:	6033      	str	r3, [r6, #0]
 8011fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011fcc:	4607      	mov	r7, r0
 8011fce:	460c      	mov	r4, r1
 8011fd0:	b10a      	cbz	r2, 8011fd6 <_printf_common+0x26>
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	6033      	str	r3, [r6, #0]
 8011fd6:	6823      	ldr	r3, [r4, #0]
 8011fd8:	0699      	lsls	r1, r3, #26
 8011fda:	bf42      	ittt	mi
 8011fdc:	6833      	ldrmi	r3, [r6, #0]
 8011fde:	3302      	addmi	r3, #2
 8011fe0:	6033      	strmi	r3, [r6, #0]
 8011fe2:	6825      	ldr	r5, [r4, #0]
 8011fe4:	f015 0506 	ands.w	r5, r5, #6
 8011fe8:	d106      	bne.n	8011ff8 <_printf_common+0x48>
 8011fea:	f104 0a19 	add.w	sl, r4, #25
 8011fee:	68e3      	ldr	r3, [r4, #12]
 8011ff0:	6832      	ldr	r2, [r6, #0]
 8011ff2:	1a9b      	subs	r3, r3, r2
 8011ff4:	42ab      	cmp	r3, r5
 8011ff6:	dc26      	bgt.n	8012046 <_printf_common+0x96>
 8011ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011ffc:	1e13      	subs	r3, r2, #0
 8011ffe:	6822      	ldr	r2, [r4, #0]
 8012000:	bf18      	it	ne
 8012002:	2301      	movne	r3, #1
 8012004:	0692      	lsls	r2, r2, #26
 8012006:	d42b      	bmi.n	8012060 <_printf_common+0xb0>
 8012008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801200c:	4649      	mov	r1, r9
 801200e:	4638      	mov	r0, r7
 8012010:	47c0      	blx	r8
 8012012:	3001      	adds	r0, #1
 8012014:	d01e      	beq.n	8012054 <_printf_common+0xa4>
 8012016:	6823      	ldr	r3, [r4, #0]
 8012018:	68e5      	ldr	r5, [r4, #12]
 801201a:	6832      	ldr	r2, [r6, #0]
 801201c:	f003 0306 	and.w	r3, r3, #6
 8012020:	2b04      	cmp	r3, #4
 8012022:	bf08      	it	eq
 8012024:	1aad      	subeq	r5, r5, r2
 8012026:	68a3      	ldr	r3, [r4, #8]
 8012028:	6922      	ldr	r2, [r4, #16]
 801202a:	bf0c      	ite	eq
 801202c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012030:	2500      	movne	r5, #0
 8012032:	4293      	cmp	r3, r2
 8012034:	bfc4      	itt	gt
 8012036:	1a9b      	subgt	r3, r3, r2
 8012038:	18ed      	addgt	r5, r5, r3
 801203a:	2600      	movs	r6, #0
 801203c:	341a      	adds	r4, #26
 801203e:	42b5      	cmp	r5, r6
 8012040:	d11a      	bne.n	8012078 <_printf_common+0xc8>
 8012042:	2000      	movs	r0, #0
 8012044:	e008      	b.n	8012058 <_printf_common+0xa8>
 8012046:	2301      	movs	r3, #1
 8012048:	4652      	mov	r2, sl
 801204a:	4649      	mov	r1, r9
 801204c:	4638      	mov	r0, r7
 801204e:	47c0      	blx	r8
 8012050:	3001      	adds	r0, #1
 8012052:	d103      	bne.n	801205c <_printf_common+0xac>
 8012054:	f04f 30ff 	mov.w	r0, #4294967295
 8012058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801205c:	3501      	adds	r5, #1
 801205e:	e7c6      	b.n	8011fee <_printf_common+0x3e>
 8012060:	18e1      	adds	r1, r4, r3
 8012062:	1c5a      	adds	r2, r3, #1
 8012064:	2030      	movs	r0, #48	; 0x30
 8012066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801206a:	4422      	add	r2, r4
 801206c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012074:	3302      	adds	r3, #2
 8012076:	e7c7      	b.n	8012008 <_printf_common+0x58>
 8012078:	2301      	movs	r3, #1
 801207a:	4622      	mov	r2, r4
 801207c:	4649      	mov	r1, r9
 801207e:	4638      	mov	r0, r7
 8012080:	47c0      	blx	r8
 8012082:	3001      	adds	r0, #1
 8012084:	d0e6      	beq.n	8012054 <_printf_common+0xa4>
 8012086:	3601      	adds	r6, #1
 8012088:	e7d9      	b.n	801203e <_printf_common+0x8e>
	...

0801208c <_printf_i>:
 801208c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012090:	7e0f      	ldrb	r7, [r1, #24]
 8012092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012094:	2f78      	cmp	r7, #120	; 0x78
 8012096:	4691      	mov	r9, r2
 8012098:	4680      	mov	r8, r0
 801209a:	460c      	mov	r4, r1
 801209c:	469a      	mov	sl, r3
 801209e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80120a2:	d807      	bhi.n	80120b4 <_printf_i+0x28>
 80120a4:	2f62      	cmp	r7, #98	; 0x62
 80120a6:	d80a      	bhi.n	80120be <_printf_i+0x32>
 80120a8:	2f00      	cmp	r7, #0
 80120aa:	f000 80d8 	beq.w	801225e <_printf_i+0x1d2>
 80120ae:	2f58      	cmp	r7, #88	; 0x58
 80120b0:	f000 80a3 	beq.w	80121fa <_printf_i+0x16e>
 80120b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80120b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80120bc:	e03a      	b.n	8012134 <_printf_i+0xa8>
 80120be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80120c2:	2b15      	cmp	r3, #21
 80120c4:	d8f6      	bhi.n	80120b4 <_printf_i+0x28>
 80120c6:	a101      	add	r1, pc, #4	; (adr r1, 80120cc <_printf_i+0x40>)
 80120c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80120cc:	08012125 	.word	0x08012125
 80120d0:	08012139 	.word	0x08012139
 80120d4:	080120b5 	.word	0x080120b5
 80120d8:	080120b5 	.word	0x080120b5
 80120dc:	080120b5 	.word	0x080120b5
 80120e0:	080120b5 	.word	0x080120b5
 80120e4:	08012139 	.word	0x08012139
 80120e8:	080120b5 	.word	0x080120b5
 80120ec:	080120b5 	.word	0x080120b5
 80120f0:	080120b5 	.word	0x080120b5
 80120f4:	080120b5 	.word	0x080120b5
 80120f8:	08012245 	.word	0x08012245
 80120fc:	08012169 	.word	0x08012169
 8012100:	08012227 	.word	0x08012227
 8012104:	080120b5 	.word	0x080120b5
 8012108:	080120b5 	.word	0x080120b5
 801210c:	08012267 	.word	0x08012267
 8012110:	080120b5 	.word	0x080120b5
 8012114:	08012169 	.word	0x08012169
 8012118:	080120b5 	.word	0x080120b5
 801211c:	080120b5 	.word	0x080120b5
 8012120:	0801222f 	.word	0x0801222f
 8012124:	682b      	ldr	r3, [r5, #0]
 8012126:	1d1a      	adds	r2, r3, #4
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	602a      	str	r2, [r5, #0]
 801212c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012134:	2301      	movs	r3, #1
 8012136:	e0a3      	b.n	8012280 <_printf_i+0x1f4>
 8012138:	6820      	ldr	r0, [r4, #0]
 801213a:	6829      	ldr	r1, [r5, #0]
 801213c:	0606      	lsls	r6, r0, #24
 801213e:	f101 0304 	add.w	r3, r1, #4
 8012142:	d50a      	bpl.n	801215a <_printf_i+0xce>
 8012144:	680e      	ldr	r6, [r1, #0]
 8012146:	602b      	str	r3, [r5, #0]
 8012148:	2e00      	cmp	r6, #0
 801214a:	da03      	bge.n	8012154 <_printf_i+0xc8>
 801214c:	232d      	movs	r3, #45	; 0x2d
 801214e:	4276      	negs	r6, r6
 8012150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012154:	485e      	ldr	r0, [pc, #376]	; (80122d0 <_printf_i+0x244>)
 8012156:	230a      	movs	r3, #10
 8012158:	e019      	b.n	801218e <_printf_i+0x102>
 801215a:	680e      	ldr	r6, [r1, #0]
 801215c:	602b      	str	r3, [r5, #0]
 801215e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012162:	bf18      	it	ne
 8012164:	b236      	sxthne	r6, r6
 8012166:	e7ef      	b.n	8012148 <_printf_i+0xbc>
 8012168:	682b      	ldr	r3, [r5, #0]
 801216a:	6820      	ldr	r0, [r4, #0]
 801216c:	1d19      	adds	r1, r3, #4
 801216e:	6029      	str	r1, [r5, #0]
 8012170:	0601      	lsls	r1, r0, #24
 8012172:	d501      	bpl.n	8012178 <_printf_i+0xec>
 8012174:	681e      	ldr	r6, [r3, #0]
 8012176:	e002      	b.n	801217e <_printf_i+0xf2>
 8012178:	0646      	lsls	r6, r0, #25
 801217a:	d5fb      	bpl.n	8012174 <_printf_i+0xe8>
 801217c:	881e      	ldrh	r6, [r3, #0]
 801217e:	4854      	ldr	r0, [pc, #336]	; (80122d0 <_printf_i+0x244>)
 8012180:	2f6f      	cmp	r7, #111	; 0x6f
 8012182:	bf0c      	ite	eq
 8012184:	2308      	moveq	r3, #8
 8012186:	230a      	movne	r3, #10
 8012188:	2100      	movs	r1, #0
 801218a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801218e:	6865      	ldr	r5, [r4, #4]
 8012190:	60a5      	str	r5, [r4, #8]
 8012192:	2d00      	cmp	r5, #0
 8012194:	bfa2      	ittt	ge
 8012196:	6821      	ldrge	r1, [r4, #0]
 8012198:	f021 0104 	bicge.w	r1, r1, #4
 801219c:	6021      	strge	r1, [r4, #0]
 801219e:	b90e      	cbnz	r6, 80121a4 <_printf_i+0x118>
 80121a0:	2d00      	cmp	r5, #0
 80121a2:	d04d      	beq.n	8012240 <_printf_i+0x1b4>
 80121a4:	4615      	mov	r5, r2
 80121a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80121aa:	fb03 6711 	mls	r7, r3, r1, r6
 80121ae:	5dc7      	ldrb	r7, [r0, r7]
 80121b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80121b4:	4637      	mov	r7, r6
 80121b6:	42bb      	cmp	r3, r7
 80121b8:	460e      	mov	r6, r1
 80121ba:	d9f4      	bls.n	80121a6 <_printf_i+0x11a>
 80121bc:	2b08      	cmp	r3, #8
 80121be:	d10b      	bne.n	80121d8 <_printf_i+0x14c>
 80121c0:	6823      	ldr	r3, [r4, #0]
 80121c2:	07de      	lsls	r6, r3, #31
 80121c4:	d508      	bpl.n	80121d8 <_printf_i+0x14c>
 80121c6:	6923      	ldr	r3, [r4, #16]
 80121c8:	6861      	ldr	r1, [r4, #4]
 80121ca:	4299      	cmp	r1, r3
 80121cc:	bfde      	ittt	le
 80121ce:	2330      	movle	r3, #48	; 0x30
 80121d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80121d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80121d8:	1b52      	subs	r2, r2, r5
 80121da:	6122      	str	r2, [r4, #16]
 80121dc:	f8cd a000 	str.w	sl, [sp]
 80121e0:	464b      	mov	r3, r9
 80121e2:	aa03      	add	r2, sp, #12
 80121e4:	4621      	mov	r1, r4
 80121e6:	4640      	mov	r0, r8
 80121e8:	f7ff fee2 	bl	8011fb0 <_printf_common>
 80121ec:	3001      	adds	r0, #1
 80121ee:	d14c      	bne.n	801228a <_printf_i+0x1fe>
 80121f0:	f04f 30ff 	mov.w	r0, #4294967295
 80121f4:	b004      	add	sp, #16
 80121f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121fa:	4835      	ldr	r0, [pc, #212]	; (80122d0 <_printf_i+0x244>)
 80121fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012200:	6829      	ldr	r1, [r5, #0]
 8012202:	6823      	ldr	r3, [r4, #0]
 8012204:	f851 6b04 	ldr.w	r6, [r1], #4
 8012208:	6029      	str	r1, [r5, #0]
 801220a:	061d      	lsls	r5, r3, #24
 801220c:	d514      	bpl.n	8012238 <_printf_i+0x1ac>
 801220e:	07df      	lsls	r7, r3, #31
 8012210:	bf44      	itt	mi
 8012212:	f043 0320 	orrmi.w	r3, r3, #32
 8012216:	6023      	strmi	r3, [r4, #0]
 8012218:	b91e      	cbnz	r6, 8012222 <_printf_i+0x196>
 801221a:	6823      	ldr	r3, [r4, #0]
 801221c:	f023 0320 	bic.w	r3, r3, #32
 8012220:	6023      	str	r3, [r4, #0]
 8012222:	2310      	movs	r3, #16
 8012224:	e7b0      	b.n	8012188 <_printf_i+0xfc>
 8012226:	6823      	ldr	r3, [r4, #0]
 8012228:	f043 0320 	orr.w	r3, r3, #32
 801222c:	6023      	str	r3, [r4, #0]
 801222e:	2378      	movs	r3, #120	; 0x78
 8012230:	4828      	ldr	r0, [pc, #160]	; (80122d4 <_printf_i+0x248>)
 8012232:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012236:	e7e3      	b.n	8012200 <_printf_i+0x174>
 8012238:	0659      	lsls	r1, r3, #25
 801223a:	bf48      	it	mi
 801223c:	b2b6      	uxthmi	r6, r6
 801223e:	e7e6      	b.n	801220e <_printf_i+0x182>
 8012240:	4615      	mov	r5, r2
 8012242:	e7bb      	b.n	80121bc <_printf_i+0x130>
 8012244:	682b      	ldr	r3, [r5, #0]
 8012246:	6826      	ldr	r6, [r4, #0]
 8012248:	6961      	ldr	r1, [r4, #20]
 801224a:	1d18      	adds	r0, r3, #4
 801224c:	6028      	str	r0, [r5, #0]
 801224e:	0635      	lsls	r5, r6, #24
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	d501      	bpl.n	8012258 <_printf_i+0x1cc>
 8012254:	6019      	str	r1, [r3, #0]
 8012256:	e002      	b.n	801225e <_printf_i+0x1d2>
 8012258:	0670      	lsls	r0, r6, #25
 801225a:	d5fb      	bpl.n	8012254 <_printf_i+0x1c8>
 801225c:	8019      	strh	r1, [r3, #0]
 801225e:	2300      	movs	r3, #0
 8012260:	6123      	str	r3, [r4, #16]
 8012262:	4615      	mov	r5, r2
 8012264:	e7ba      	b.n	80121dc <_printf_i+0x150>
 8012266:	682b      	ldr	r3, [r5, #0]
 8012268:	1d1a      	adds	r2, r3, #4
 801226a:	602a      	str	r2, [r5, #0]
 801226c:	681d      	ldr	r5, [r3, #0]
 801226e:	6862      	ldr	r2, [r4, #4]
 8012270:	2100      	movs	r1, #0
 8012272:	4628      	mov	r0, r5
 8012274:	f7ed ffbc 	bl	80001f0 <memchr>
 8012278:	b108      	cbz	r0, 801227e <_printf_i+0x1f2>
 801227a:	1b40      	subs	r0, r0, r5
 801227c:	6060      	str	r0, [r4, #4]
 801227e:	6863      	ldr	r3, [r4, #4]
 8012280:	6123      	str	r3, [r4, #16]
 8012282:	2300      	movs	r3, #0
 8012284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012288:	e7a8      	b.n	80121dc <_printf_i+0x150>
 801228a:	6923      	ldr	r3, [r4, #16]
 801228c:	462a      	mov	r2, r5
 801228e:	4649      	mov	r1, r9
 8012290:	4640      	mov	r0, r8
 8012292:	47d0      	blx	sl
 8012294:	3001      	adds	r0, #1
 8012296:	d0ab      	beq.n	80121f0 <_printf_i+0x164>
 8012298:	6823      	ldr	r3, [r4, #0]
 801229a:	079b      	lsls	r3, r3, #30
 801229c:	d413      	bmi.n	80122c6 <_printf_i+0x23a>
 801229e:	68e0      	ldr	r0, [r4, #12]
 80122a0:	9b03      	ldr	r3, [sp, #12]
 80122a2:	4298      	cmp	r0, r3
 80122a4:	bfb8      	it	lt
 80122a6:	4618      	movlt	r0, r3
 80122a8:	e7a4      	b.n	80121f4 <_printf_i+0x168>
 80122aa:	2301      	movs	r3, #1
 80122ac:	4632      	mov	r2, r6
 80122ae:	4649      	mov	r1, r9
 80122b0:	4640      	mov	r0, r8
 80122b2:	47d0      	blx	sl
 80122b4:	3001      	adds	r0, #1
 80122b6:	d09b      	beq.n	80121f0 <_printf_i+0x164>
 80122b8:	3501      	adds	r5, #1
 80122ba:	68e3      	ldr	r3, [r4, #12]
 80122bc:	9903      	ldr	r1, [sp, #12]
 80122be:	1a5b      	subs	r3, r3, r1
 80122c0:	42ab      	cmp	r3, r5
 80122c2:	dcf2      	bgt.n	80122aa <_printf_i+0x21e>
 80122c4:	e7eb      	b.n	801229e <_printf_i+0x212>
 80122c6:	2500      	movs	r5, #0
 80122c8:	f104 0619 	add.w	r6, r4, #25
 80122cc:	e7f5      	b.n	80122ba <_printf_i+0x22e>
 80122ce:	bf00      	nop
 80122d0:	08014a5d 	.word	0x08014a5d
 80122d4:	08014a6e 	.word	0x08014a6e

080122d8 <memmove>:
 80122d8:	4288      	cmp	r0, r1
 80122da:	b510      	push	{r4, lr}
 80122dc:	eb01 0402 	add.w	r4, r1, r2
 80122e0:	d902      	bls.n	80122e8 <memmove+0x10>
 80122e2:	4284      	cmp	r4, r0
 80122e4:	4623      	mov	r3, r4
 80122e6:	d807      	bhi.n	80122f8 <memmove+0x20>
 80122e8:	1e43      	subs	r3, r0, #1
 80122ea:	42a1      	cmp	r1, r4
 80122ec:	d008      	beq.n	8012300 <memmove+0x28>
 80122ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122f6:	e7f8      	b.n	80122ea <memmove+0x12>
 80122f8:	4402      	add	r2, r0
 80122fa:	4601      	mov	r1, r0
 80122fc:	428a      	cmp	r2, r1
 80122fe:	d100      	bne.n	8012302 <memmove+0x2a>
 8012300:	bd10      	pop	{r4, pc}
 8012302:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012306:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801230a:	e7f7      	b.n	80122fc <memmove+0x24>

0801230c <_realloc_r>:
 801230c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012310:	4680      	mov	r8, r0
 8012312:	4614      	mov	r4, r2
 8012314:	460e      	mov	r6, r1
 8012316:	b921      	cbnz	r1, 8012322 <_realloc_r+0x16>
 8012318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801231c:	4611      	mov	r1, r2
 801231e:	f7ff bbc9 	b.w	8011ab4 <_malloc_r>
 8012322:	b92a      	cbnz	r2, 8012330 <_realloc_r+0x24>
 8012324:	f7ff fb5a 	bl	80119dc <_free_r>
 8012328:	4625      	mov	r5, r4
 801232a:	4628      	mov	r0, r5
 801232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012330:	f000 f81b 	bl	801236a <_malloc_usable_size_r>
 8012334:	4284      	cmp	r4, r0
 8012336:	4607      	mov	r7, r0
 8012338:	d802      	bhi.n	8012340 <_realloc_r+0x34>
 801233a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801233e:	d812      	bhi.n	8012366 <_realloc_r+0x5a>
 8012340:	4621      	mov	r1, r4
 8012342:	4640      	mov	r0, r8
 8012344:	f7ff fbb6 	bl	8011ab4 <_malloc_r>
 8012348:	4605      	mov	r5, r0
 801234a:	2800      	cmp	r0, #0
 801234c:	d0ed      	beq.n	801232a <_realloc_r+0x1e>
 801234e:	42bc      	cmp	r4, r7
 8012350:	4622      	mov	r2, r4
 8012352:	4631      	mov	r1, r6
 8012354:	bf28      	it	cs
 8012356:	463a      	movcs	r2, r7
 8012358:	f7ff fb2a 	bl	80119b0 <memcpy>
 801235c:	4631      	mov	r1, r6
 801235e:	4640      	mov	r0, r8
 8012360:	f7ff fb3c 	bl	80119dc <_free_r>
 8012364:	e7e1      	b.n	801232a <_realloc_r+0x1e>
 8012366:	4635      	mov	r5, r6
 8012368:	e7df      	b.n	801232a <_realloc_r+0x1e>

0801236a <_malloc_usable_size_r>:
 801236a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801236e:	1f18      	subs	r0, r3, #4
 8012370:	2b00      	cmp	r3, #0
 8012372:	bfbc      	itt	lt
 8012374:	580b      	ldrlt	r3, [r1, r0]
 8012376:	18c0      	addlt	r0, r0, r3
 8012378:	4770      	bx	lr
	...

0801237c <_init>:
 801237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801237e:	bf00      	nop
 8012380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012382:	bc08      	pop	{r3}
 8012384:	469e      	mov	lr, r3
 8012386:	4770      	bx	lr

08012388 <_fini>:
 8012388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801238a:	bf00      	nop
 801238c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801238e:	bc08      	pop	{r3}
 8012390:	469e      	mov	lr, r3
 8012392:	4770      	bx	lr

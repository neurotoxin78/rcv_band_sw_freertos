
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007680  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002acc  08007820  08007820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2ec  0800a2ec  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2ec  0800a2ec  0001a2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2f4  0800a2f4  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2f4  0800a2f4  0001a2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2f8  0800a2f8  0001a2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800a2fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf0  200000c8  0800a3c4  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cb8  0800a3c4  00024cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d90e  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000436b  00000000  00000000  0003da06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00041d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  00043610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab95  00000000  00000000  00044cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d29e  00000000  00000000  0005f855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b9a6  00000000  00000000  0007caf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118499  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b2c  00000000  00000000  001184ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c8 	.word	0x200000c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007808 	.word	0x08007808

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000cc 	.word	0x200000cc
 80001dc:	08007808 	.word	0x08007808

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <displayBand>:
		currentBand -=1;
	}
}

void displayBand(int band_index)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af04      	add	r7, sp, #16
 800058a:	6078      	str	r0, [r7, #4]
    if(band_index != lastBand + 1 )
 800058c:	2304      	movs	r3, #4
 800058e:	3301      	adds	r3, #1
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	429a      	cmp	r2, r3
 8000594:	d067      	beq.n	8000666 <displayBand+0xe2>
    {
        ST7735_FillRectangleFast(0,0,160,38,ST7735_COLOR565(10, 10, 10));
 8000596:	f640 0341 	movw	r3, #2113	; 0x841
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2326      	movs	r3, #38	; 0x26
 800059e:	22a0      	movs	r2, #160	; 0xa0
 80005a0:	2100      	movs	r1, #0
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 fe58 	bl	8001258 <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,38,160,2,ST7735_COLOR565(50, 50, 50));
 80005a8:	f243 1386 	movw	r3, #12678	; 0x3186
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2302      	movs	r3, #2
 80005b0:	22a0      	movs	r2, #160	; 0xa0
 80005b2:	2126      	movs	r1, #38	; 0x26
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fe4f 	bl	8001258 <ST7735_FillRectangleFast>
        ST7735_WriteString(1, 1, band[band_index].name, Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_COLOR565(10, 10, 10));
 80005ba:	492d      	ldr	r1, [pc, #180]	; (8000670 <displayBand+0xec>)
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4613      	mov	r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4413      	add	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	440b      	add	r3, r1
 80005c8:	6819      	ldr	r1, [r3, #0]
 80005ca:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <displayBand+0xf0>)
 80005cc:	f640 0241 	movw	r2, #2113	; 0x841
 80005d0:	9202      	str	r2, [sp, #8]
 80005d2:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 80005d6:	9201      	str	r2, [sp, #4]
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	460a      	mov	r2, r1
 80005e0:	2101      	movs	r1, #1
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 fd7b 	bl	80010de <ST7735_WriteString>
        ST7735_WriteString(5, 26, "BAND", Font_7x10, ST7735_GREEN, ST7735_COLOR565(10, 10, 10));
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <displayBand+0xf4>)
 80005ea:	f640 0241 	movw	r2, #2113	; 0x841
 80005ee:	9202      	str	r2, [sp, #8]
 80005f0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	9200      	str	r2, [sp, #0]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a1f      	ldr	r2, [pc, #124]	; (800067c <displayBand+0xf8>)
 80005fe:	211a      	movs	r1, #26
 8000600:	2005      	movs	r0, #5
 8000602:	f000 fd6c 	bl	80010de <ST7735_WriteString>
        ST7735_WriteString(75, 1, band[band_index].minFreq, Font_11x18, ST7735_GREEN, ST7735_COLOR565(10, 10, 10));
 8000606:	491a      	ldr	r1, [pc, #104]	; (8000670 <displayBand+0xec>)
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4613      	mov	r3, r2
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	4413      	add	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	440b      	add	r3, r1
 8000614:	3304      	adds	r3, #4
 8000616:	6819      	ldr	r1, [r3, #0]
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <displayBand+0xfc>)
 800061a:	f640 0241 	movw	r2, #2113	; 0x841
 800061e:	9202      	str	r2, [sp, #8]
 8000620:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000624:	9201      	str	r2, [sp, #4]
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	460a      	mov	r2, r1
 800062e:	2101      	movs	r1, #1
 8000630:	204b      	movs	r0, #75	; 0x4b
 8000632:	f000 fd54 	bl	80010de <ST7735_WriteString>
        ST7735_WriteString(75, 19, band[band_index].maxFreq, Font_11x18, ST7735_GREEN, ST7735_COLOR565(10, 10, 10));
 8000636:	490e      	ldr	r1, [pc, #56]	; (8000670 <displayBand+0xec>)
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	4613      	mov	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	440b      	add	r3, r1
 8000644:	3308      	adds	r3, #8
 8000646:	6819      	ldr	r1, [r3, #0]
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <displayBand+0xfc>)
 800064a:	f640 0241 	movw	r2, #2113	; 0x841
 800064e:	9202      	str	r2, [sp, #8]
 8000650:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000654:	9201      	str	r2, [sp, #4]
 8000656:	685a      	ldr	r2, [r3, #4]
 8000658:	9200      	str	r2, [sp, #0]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	460a      	mov	r2, r1
 800065e:	2113      	movs	r1, #19
 8000660:	204b      	movs	r0, #75	; 0x4b
 8000662:	f000 fd3c 	bl	80010de <ST7735_WriteString>
    }

}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000000 	.word	0x20000000
 8000674:	2000004c 	.word	0x2000004c
 8000678:	2000003c 	.word	0x2000003c
 800067c:	08007890 	.word	0x08007890
 8000680:	20000044 	.word	0x20000044

08000684 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_CRC_Init+0x20>)
 800068a:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <MX_CRC_Init+0x24>)
 800068c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_CRC_Init+0x20>)
 8000690:	f001 facc 	bl	8001c2c <HAL_CRC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800069a:	f000 fb25 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000e4 	.word	0x200000e4
 80006a8:	40023000 	.word	0x40023000

080006ac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_CRC_MspInit+0x3c>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d10d      	bne.n	80006da <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_CRC_MspInit+0x40>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a09      	ldr	r2, [pc, #36]	; (80006ec <HAL_CRC_MspInit+0x40>)
 80006c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <HAL_CRC_MspInit+0x40>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023000 	.word	0x40023000
 80006ec:	40023800 	.word	0x40023800

080006f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EncoderQueue */
  EncoderQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &EncoderQueue_attributes);
 80006f4:	4a14      	ldr	r2, [pc, #80]	; (8000748 <MX_FREERTOS_Init+0x58>)
 80006f6:	2102      	movs	r1, #2
 80006f8:	2010      	movs	r0, #16
 80006fa:	f003 fce8 	bl	80040ce <osMessageQueueNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_FREERTOS_Init+0x5c>)
 8000702:	6013      	str	r3, [r2, #0]

  /* creation of ButtonQueue */
  ButtonQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ButtonQueue_attributes);
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_FREERTOS_Init+0x60>)
 8000706:	2102      	movs	r1, #2
 8000708:	2010      	movs	r0, #16
 800070a:	f003 fce0 	bl	80040ce <osMessageQueueNew>
 800070e:	4603      	mov	r3, r0
 8000710:	4a10      	ldr	r2, [pc, #64]	; (8000754 <MX_FREERTOS_Init+0x64>)
 8000712:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000714:	4a10      	ldr	r2, [pc, #64]	; (8000758 <MX_FREERTOS_Init+0x68>)
 8000716:	2100      	movs	r1, #0
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <MX_FREERTOS_Init+0x6c>)
 800071a:	f003 fc2b 	bl	8003f74 <osThreadNew>
 800071e:	4603      	mov	r3, r0
 8000720:	4a0f      	ldr	r2, [pc, #60]	; (8000760 <MX_FREERTOS_Init+0x70>)
 8000722:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000724:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <MX_FREERTOS_Init+0x74>)
 8000726:	2100      	movs	r1, #0
 8000728:	480f      	ldr	r0, [pc, #60]	; (8000768 <MX_FREERTOS_Init+0x78>)
 800072a:	f003 fc23 	bl	8003f74 <osThreadNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a0e      	ldr	r2, [pc, #56]	; (800076c <MX_FREERTOS_Init+0x7c>)
 8000732:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000734:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <MX_FREERTOS_Init+0x80>)
 8000736:	2100      	movs	r1, #0
 8000738:	480e      	ldr	r0, [pc, #56]	; (8000774 <MX_FREERTOS_Init+0x84>)
 800073a:	f003 fc1b 	bl	8003f74 <osThreadNew>
 800073e:	4603      	mov	r3, r0
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <MX_FREERTOS_Init+0x88>)
 8000742:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	0800a198 	.word	0x0800a198
 800074c:	200000f8 	.word	0x200000f8
 8000750:	0800a1b0 	.word	0x0800a1b0
 8000754:	200000fc 	.word	0x200000fc
 8000758:	0800a12c 	.word	0x0800a12c
 800075c:	0800077d 	.word	0x0800077d
 8000760:	200000ec 	.word	0x200000ec
 8000764:	0800a150 	.word	0x0800a150
 8000768:	0800078d 	.word	0x0800078d
 800076c:	200000f0 	.word	0x200000f0
 8000770:	0800a174 	.word	0x0800a174
 8000774:	080008b5 	.word	0x080008b5
 8000778:	200000f4 	.word	0x200000f4

0800077c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f003 fc87 	bl	8004098 <osDelay>
 800078a:	e7fb      	b.n	8000784 <StartDefaultTask+0x8>

0800078c <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b092      	sub	sp, #72	; 0x48
 8000790:	af04      	add	r7, sp, #16
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	/* Infinite loop */
	uint16_t EncoderReceiveResult = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t ButtonReceiveResult = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	863b      	strh	r3, [r7, #48]	; 0x30
	int32_t counter = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t button = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t last_counter = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t max_index = 5;
 80007a8:	2305      	movs	r3, #5
 80007aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	char buff[16];
	char bbuff[8];
	ST7735_FillScreenFast(ST7735_BLACK);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 fde8 	bl	8001382 <ST7735_FillScreenFast>
	displayBand(last_counter);
 80007b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80007b4:	f7ff fee6 	bl	8000584 <displayBand>
	for (;;) {
		//Encoder Rotate
		EncoderReceiveResult = osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 80007b8:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <StartDisplayTask+0x114>)
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80007c0:	2300      	movs	r3, #0
 80007c2:	2200      	movs	r2, #0
 80007c4:	f003 fd56 	bl	8004274 <osMessageQueueGet>
 80007c8:	4603      	mov	r3, r0
 80007ca:	867b      	strh	r3, [r7, #50]	; 0x32
		//snprintf(buff, sizeof(buff), "%02d", counter);
		//ST7735_WriteString(0, 60, buff, Font_7x10, ST7735_GREEN, ST7735_BLACK);
		if(counter == 2) {
 80007cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d113      	bne.n	80007fa <StartDisplayTask+0x6e>
			if(last_counter != max_index -1)
 80007d2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80007d6:	3b01      	subs	r3, #1
 80007d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007da:	429a      	cmp	r2, r3
 80007dc:	d005      	beq.n	80007ea <StartDisplayTask+0x5e>
			{
				last_counter += 1;
 80007de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007e0:	3301      	adds	r3, #1
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
				counter = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80007e8:	e003      	b.n	80007f2 <StartDisplayTask+0x66>
			} else
			{
				last_counter = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
				counter = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			displayBand(last_counter);
 80007f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80007f4:	f7ff fec6 	bl	8000584 <displayBand>
 80007f8:	e014      	b.n	8000824 <StartDisplayTask+0x98>
		}else if (counter == 1){
 80007fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d111      	bne.n	8000824 <StartDisplayTask+0x98>
			if(last_counter != 0)
 8000800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000802:	2b00      	cmp	r3, #0
 8000804:	d005      	beq.n	8000812 <StartDisplayTask+0x86>
			{
				last_counter -= 1;
 8000806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000808:	3b01      	subs	r3, #1
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
				counter = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000810:	e005      	b.n	800081e <StartDisplayTask+0x92>
			} else
			{
				last_counter = max_index -1;
 8000812:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000816:	3b01      	subs	r3, #1
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
				counter = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			displayBand(last_counter);
 800081e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000820:	f7ff feb0 	bl	8000584 <displayBand>
		{

		}

		//Button click
		ButtonReceiveResult = osMessageQueueGet(ButtonQueueHandle, &button, 0, 0);
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <StartDisplayTask+0x118>)
 8000826:	6818      	ldr	r0, [r3, #0]
 8000828:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800082c:	2300      	movs	r3, #0
 800082e:	2200      	movs	r2, #0
 8000830:	f003 fd20 	bl	8004274 <osMessageQueueGet>
 8000834:	4603      	mov	r3, r0
 8000836:	863b      	strh	r3, [r7, #48]	; 0x30
		if (button)
 8000838:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800083c:	2b00      	cmp	r3, #0
 800083e:	d02b      	beq.n	8000898 <StartDisplayTask+0x10c>
		{
			snprintf(bbuff, sizeof(bbuff), "%01d", button);
 8000840:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000844:	f107 000c 	add.w	r0, r7, #12
 8000848:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <StartDisplayTask+0x11c>)
 800084a:	2108      	movs	r1, #8
 800084c:	f006 fc5a 	bl	8007104 <sniprintf>
			ST7735_WriteString(80, 60, bbuff, Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <StartDisplayTask+0x120>)
 8000852:	f107 010c 	add.w	r1, r7, #12
 8000856:	2200      	movs	r2, #0
 8000858:	9202      	str	r2, [sp, #8]
 800085a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800085e:	9201      	str	r2, [sp, #4]
 8000860:	685a      	ldr	r2, [r3, #4]
 8000862:	9200      	str	r2, [sp, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	460a      	mov	r2, r1
 8000868:	213c      	movs	r1, #60	; 0x3c
 800086a:	2050      	movs	r0, #80	; 0x50
 800086c:	f000 fc37 	bl	80010de <ST7735_WriteString>
			button = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	84fb      	strh	r3, [r7, #38]	; 0x26
			osDelay(500);
 8000874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000878:	f003 fc0e 	bl	8004098 <osDelay>
			ST7735_WriteString(80, 60, "     ", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <StartDisplayTask+0x120>)
 800087e:	2200      	movs	r2, #0
 8000880:	9202      	str	r2, [sp, #8]
 8000882:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	9200      	str	r2, [sp, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <StartDisplayTask+0x124>)
 8000890:	213c      	movs	r1, #60	; 0x3c
 8000892:	2050      	movs	r0, #80	; 0x50
 8000894:	f000 fc23 	bl	80010de <ST7735_WriteString>
		}

		osDelay(100);
 8000898:	2064      	movs	r0, #100	; 0x64
 800089a:	f003 fbfd 	bl	8004098 <osDelay>
		EncoderReceiveResult = osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 800089e:	e78b      	b.n	80007b8 <StartDisplayTask+0x2c>
 80008a0:	200000f8 	.word	0x200000f8
 80008a4:	200000fc 	.word	0x200000fc
 80008a8:	080078d8 	.word	0x080078d8
 80008ac:	2000003c 	.word	0x2000003c
 80008b0:	080078e0 	.word	0x080078e0

080008b4 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	; 0x30
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	char buff[16];
	int32_t prevCounter = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t counter = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
	uint8_t buttonNumber = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t buttonSend = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <StartEncoderTask+0xb0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	3b01      	subs	r3, #1
 80008da:	b29b      	uxth	r3, r3
 80008dc:	0fda      	lsrs	r2, r3, #31
 80008de:	4413      	add	r3, r2
 80008e0:	105b      	asrs	r3, r3, #1
 80008e2:	425b      	negs	r3, r3
 80008e4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80008e8:	337f      	adds	r3, #127	; 0x7f
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (currCounter != prevCounter) {
 80008ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d01e      	beq.n	8000932 <StartEncoderTask+0x7e>
			if (currCounter > prevCounter) {
 80008f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f8:	429a      	cmp	r2, r3
 80008fa:	dd0a      	ble.n	8000912 <StartEncoderTask+0x5e>
				counter = 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <StartEncoderTask+0xb4>)
 8000902:	6818      	ldr	r0, [r3, #0]
 8000904:	f107 0110 	add.w	r1, r7, #16
 8000908:	2300      	movs	r3, #0
 800090a:	2200      	movs	r2, #0
 800090c:	f003 fc52 	bl	80041b4 <osMessageQueuePut>
 8000910:	e00d      	b.n	800092e <StartEncoderTask+0x7a>
			} else if (currCounter < prevCounter){
 8000912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000916:	429a      	cmp	r2, r3
 8000918:	da09      	bge.n	800092e <StartEncoderTask+0x7a>
				counter = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <StartEncoderTask+0xb4>)
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	f107 0110 	add.w	r1, r7, #16
 8000926:	2300      	movs	r3, #0
 8000928:	2200      	movs	r2, #0
 800092a:	f003 fc43 	bl	80041b4 <osMessageQueuePut>
			{

			}
			//snprintf(buff, sizeof(buff), "%06d", currCounter);
			//ST7735_WriteString(90, 46, buff, Font_7x10, ST7735_GREEN, ST7735_BLACK);
			prevCounter = currCounter;
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		// Button
		if(buttonPressed[buttonNumber]) {
 8000932:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000936:	4a0d      	ldr	r2, [pc, #52]	; (800096c <StartEncoderTask+0xb8>)
 8000938:	5cd3      	ldrb	r3, [r2, r3]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00c      	beq.n	800095a <StartEncoderTask+0xa6>
			buttonPressed[buttonNumber] = 0;
 8000940:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000944:	4a09      	ldr	r2, [pc, #36]	; (800096c <StartEncoderTask+0xb8>)
 8000946:	2100      	movs	r1, #0
 8000948:	54d1      	strb	r1, [r2, r3]
			//char buff[16];
			//snprintf(buff, sizeof(buff), "BUTTON %d", buttonNumber);
			//ST7735_WriteString(80, 60, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
			osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <StartEncoderTask+0xbc>)
 800094c:	6818      	ldr	r0, [r3, #0]
 800094e:	f107 010f 	add.w	r1, r7, #15
 8000952:	2300      	movs	r3, #0
 8000954:	2200      	movs	r2, #0
 8000956:	f003 fc2d 	bl	80041b4 <osMessageQueuePut>
		}
		osDelay(500);
 800095a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800095e:	f003 fb9b 	bl	8004098 <osDelay>
	for (;;) {
 8000962:	e7b4      	b.n	80008ce <StartEncoderTask+0x1a>
 8000964:	2000024c 	.word	0x2000024c
 8000968:	200000f8 	.word	0x200000f8
 800096c:	200001f4 	.word	0x200001f4
 8000970:	200000fc 	.word	0x200000fc

08000974 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <MX_GPIO_Init+0xe0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a30      	ldr	r2, [pc, #192]	; (8000a54 <MX_GPIO_Init+0xe0>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <MX_GPIO_Init+0xe0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <MX_GPIO_Init+0xe0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a29      	ldr	r2, [pc, #164]	; (8000a54 <MX_GPIO_Init+0xe0>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_GPIO_Init+0xe0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MX_GPIO_Init+0xe0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <MX_GPIO_Init+0xe0>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <MX_GPIO_Init+0xe0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_GPIO_Init+0xe0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <MX_GPIO_Init+0xe0>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_GPIO_Init+0xe0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	211c      	movs	r1, #28
 80009fe:	4816      	ldr	r0, [pc, #88]	; (8000a58 <MX_GPIO_Init+0xe4>)
 8000a00:	f001 fab4 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000a04:	2301      	movs	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	480f      	ldr	r0, [pc, #60]	; (8000a58 <MX_GPIO_Init+0xe4>)
 8000a1a:	f001 f923 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000a1e:	231c      	movs	r3, #28
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <MX_GPIO_Init+0xe4>)
 8000a36:	f001 f915 	bl	8001c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2006      	movs	r0, #6
 8000a40:	f001 f8ca 	bl	8001bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a44:	2006      	movs	r0, #6
 8000a46:	f001 f8e3 	bl	8001c10 <HAL_NVIC_EnableIRQ>

}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000

08000a5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a62:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <MX_I2C1_Init+0x54>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_I2C1_Init+0x58>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a9a:	f001 fa99 	bl	8001fd0 <HAL_I2C_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa4:	f000 f920 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000100 	.word	0x20000100
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	000186a0 	.word	0x000186a0

08000ab8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_I2C_MspInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12b      	bne.n	8000b32 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000af6:	23c0      	movs	r3, #192	; 0xc0
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afa:	2312      	movs	r3, #18
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b06:	2304      	movs	r3, #4
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <HAL_I2C_MspInit+0x8c>)
 8000b12:	f001 f8a7 	bl	8001c64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400

08000b48 <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000b4e:	f000 fa35 	bl	8000fbc <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 fc04 	bl	8001360 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <Display_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	9202      	str	r2, [sp, #8]
 8000b5e:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	9200      	str	r2, [sp, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <Display_Init+0x5c>)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	200f      	movs	r0, #15
 8000b70:	f000 fab5 	bl	80010de <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <Display_Init+0x60>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	9202      	str	r2, [sp, #8]
 8000b7a:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8000b7e:	9201      	str	r2, [sp, #4]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	9200      	str	r2, [sp, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a09      	ldr	r2, [pc, #36]	; (8000bac <Display_Init+0x64>)
 8000b88:	2119      	movs	r1, #25
 8000b8a:	2022      	movs	r0, #34	; 0x22
 8000b8c:	f000 faa7 	bl	80010de <ST7735_WriteString>
    HAL_Delay(2000);
 8000b90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b94:	f000 ff44 	bl	8001a20 <HAL_Delay>
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000004c 	.word	0x2000004c
 8000ba4:	080078e8 	.word	0x080078e8
 8000ba8:	20000044 	.word	0x20000044
 8000bac:	080078f4 	.word	0x080078f4

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb4:	f000 fef2 	bl	800199c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb8:	f000 f81c 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbc:	f7ff feda 	bl	8000974 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bc0:	f7ff ff4c 	bl	8000a5c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bc4:	f000 f896 	bl	8000cf4 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000bc8:	f000 fd9c 	bl	8001704 <MX_TIM3_Init>
  MX_CRC_Init();
 8000bcc:	f7ff fd5a 	bl	8000684 <MX_CRC_Init>
  MX_TIM2_Init();
 8000bd0:	f000 fd40 	bl	8001654 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000bd4:	213c      	movs	r1, #60	; 0x3c
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <main+0x40>)
 8000bd8:	f002 fc09 	bl	80033ee <HAL_TIM_Encoder_Start>
  Display_Init();
 8000bdc:	f7ff ffb4 	bl	8000b48 <Display_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000be0:	f003 f97e 	bl	8003ee0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000be4:	f7ff fd84 	bl	80006f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000be8:	f003 f99e 	bl	8003f28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <main+0x3c>
 8000bee:	bf00      	nop
 8000bf0:	2000024c 	.word	0x2000024c

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b094      	sub	sp, #80	; 0x50
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0320 	add.w	r3, r7, #32
 8000bfe:	2230      	movs	r2, #48	; 0x30
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f006 f91c 	bl	8006e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <SystemClock_Config+0xc8>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	4a26      	ldr	r2, [pc, #152]	; (8000cbc <SystemClock_Config+0xc8>)
 8000c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c26:	6413      	str	r3, [r2, #64]	; 0x40
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <SystemClock_Config+0xc8>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <SystemClock_Config+0xcc>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a20      	ldr	r2, [pc, #128]	; (8000cc0 <SystemClock_Config+0xcc>)
 8000c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <SystemClock_Config+0xcc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c50:	2301      	movs	r3, #1
 8000c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c64:	2319      	movs	r3, #25
 8000c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000c68:	2390      	movs	r3, #144	; 0x90
 8000c6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c70:	2303      	movs	r3, #3
 8000c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c74:	f107 0320 	add.w	r3, r7, #32
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 faed 	bl	8002258 <HAL_RCC_OscConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c84:	f000 f830 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c88:	230f      	movs	r3, #15
 8000c8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 fd4f 	bl	8002748 <HAL_RCC_ClockConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cb0:	f000 f81a 	bl	8000ce8 <Error_Handler>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3750      	adds	r7, #80	; 0x50
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40007000 	.word	0x40007000

08000cc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d101      	bne.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cd6:	f000 fe83 	bl	80019e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40010000 	.word	0x40010000

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <MX_SPI1_Init+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d40:	220a      	movs	r2, #10
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_SPI1_Init+0x64>)
 8000d46:	f001 ff11 	bl	8002b6c <HAL_SPI_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d50:	f7ff ffca 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000154 	.word	0x20000154
 8000d5c:	40013000 	.word	0x40013000

08000d60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_SPI_MspInit+0x84>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d12b      	bne.n	8000dda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_SPI_MspInit+0x88>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <HAL_SPI_MspInit+0x88>)
 8000d8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_SPI_MspInit+0x88>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_SPI_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_SPI_MspInit+0x88>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_SPI_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dba:	23a0      	movs	r3, #160	; 0xa0
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_SPI_MspInit+0x8c>)
 8000dd6:	f000 ff45 	bl	8001c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40013000 	.word	0x40013000
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000

08000df0 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2110      	movs	r1, #16
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <ST7735_Select+0x14>)
 8000dfa:	f001 f8b7 	bl	8001f6c <HAL_GPIO_WritePin>
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40020000 	.word	0x40020000

08000e08 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2110      	movs	r1, #16
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <ST7735_Unselect+0x14>)
 8000e12:	f001 f8ab 	bl	8001f6c <HAL_GPIO_WritePin>
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40020000 	.word	0x40020000

08000e20 <ST7735_Reset>:

static void ST7735_Reset() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2108      	movs	r1, #8
 8000e28:	4806      	ldr	r0, [pc, #24]	; (8000e44 <ST7735_Reset+0x24>)
 8000e2a:	f001 f89f 	bl	8001f6c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f000 fdf6 	bl	8001a20 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2108      	movs	r1, #8
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <ST7735_Reset+0x24>)
 8000e3a:	f001 f897 	bl	8001f6c <HAL_GPIO_WritePin>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40020000 	.word	0x40020000

08000e48 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2104      	movs	r1, #4
 8000e56:	4807      	ldr	r0, [pc, #28]	; (8000e74 <ST7735_WriteCommand+0x2c>)
 8000e58:	f001 f888 	bl	8001f6c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000e5c:	1df9      	adds	r1, r7, #7
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	2201      	movs	r2, #1
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <ST7735_WriteCommand+0x30>)
 8000e66:	f001 ff0a 	bl	8002c7e <HAL_SPI_Transmit>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40020000 	.word	0x40020000
 8000e78:	20000154 	.word	0x20000154

08000e7c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2104      	movs	r1, #4
 8000e8a:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <ST7735_WriteData+0x2c>)
 8000e8c:	f001 f86e 	bl	8001f6c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <ST7735_WriteData+0x30>)
 8000e9c:	f001 feef 	bl	8002c7e <HAL_SPI_Transmit>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	20000154 	.word	0x20000154

08000eb0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000ec2:	e034      	b.n	8000f2e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000ece:	7afb      	ldrb	r3, [r7, #11]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ffb9 	bl	8000e48 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000ee0:	7abb      	ldrb	r3, [r7, #10]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee8:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000eea:	7abb      	ldrb	r3, [r7, #10]
 8000eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ef0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000ef2:	7abb      	ldrb	r3, [r7, #10]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d008      	beq.n	8000f0a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000ef8:	7abb      	ldrb	r3, [r7, #10]
 8000efa:	4619      	mov	r1, r3
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ffbd 	bl	8000e7c <ST7735_WriteData>
            addr += numArgs;
 8000f02:	7abb      	ldrb	r3, [r7, #10]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000f0a:	89bb      	ldrh	r3, [r7, #12]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00e      	beq.n	8000f2e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000f1a:	89bb      	ldrh	r3, [r7, #12]
 8000f1c:	2bff      	cmp	r3, #255	; 0xff
 8000f1e:	d102      	bne.n	8000f26 <ST7735_ExecuteCommandList+0x76>
 8000f20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f24:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000f26:	89bb      	ldrh	r3, [r7, #12]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fd79 	bl	8001a20 <HAL_Delay>
    while(numCommands--) {
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	1e5a      	subs	r2, r3, #1
 8000f32:	73fa      	strb	r2, [r7, #15]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1c5      	bne.n	8000ec4 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000f42:	b590      	push	{r4, r7, lr}
 8000f44:	b085      	sub	sp, #20
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4604      	mov	r4, r0
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4623      	mov	r3, r4
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	4603      	mov	r3, r0
 8000f56:	71bb      	strb	r3, [r7, #6]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	717b      	strb	r3, [r7, #5]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000f60:	202a      	movs	r0, #42	; 0x2a
 8000f62:	f7ff ff71 	bl	8000e48 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000f66:	2300      	movs	r3, #0
 8000f68:	733b      	strb	r3, [r7, #12]
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	737b      	strb	r3, [r7, #13]
 8000f72:	2300      	movs	r3, #0
 8000f74:	73bb      	strb	r3, [r7, #14]
 8000f76:	797b      	ldrb	r3, [r7, #5]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	2104      	movs	r1, #4
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff79 	bl	8000e7c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000f8a:	202b      	movs	r0, #43	; 0x2b
 8000f8c:	f7ff ff5c 	bl	8000e48 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000f90:	79bb      	ldrb	r3, [r7, #6]
 8000f92:	331a      	adds	r3, #26
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000f98:	793b      	ldrb	r3, [r7, #4]
 8000f9a:	331a      	adds	r3, #26
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff68 	bl	8000e7c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000fac:	202c      	movs	r0, #44	; 0x2c
 8000fae:	f7ff ff4b 	bl	8000e48 <ST7735_WriteCommand>
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}
	...

08000fbc <ST7735_Init>:

void ST7735_Init() {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000fc0:	f7ff ff16 	bl	8000df0 <ST7735_Select>
    ST7735_Reset();
 8000fc4:	f7ff ff2c 	bl	8000e20 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000fc8:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <ST7735_Init+0x28>)
 8000fca:	f7ff ff71 	bl	8000eb0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <ST7735_Init+0x2c>)
 8000fd0:	f7ff ff6e 	bl	8000eb0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <ST7735_Init+0x30>)
 8000fd6:	f7ff ff6b 	bl	8000eb0 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000fda:	f7ff ff15 	bl	8000e08 <ST7735_Unselect>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	0800a1c8 	.word	0x0800a1c8
 8000fe8:	0800a204 	.word	0x0800a204
 8000fec:	0800a214 	.word	0x0800a214

08000ff0 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	b590      	push	{r4, r7, lr}
 8000ff4:	b089      	sub	sp, #36	; 0x24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
 8000ffe:	460b      	mov	r3, r1
 8001000:	80bb      	strh	r3, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	b2d8      	uxtb	r0, r3
 800100a:	88bb      	ldrh	r3, [r7, #4]
 800100c:	b2d9      	uxtb	r1, r3
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001016:	4413      	add	r3, r2
 8001018:	b2db      	uxtb	r3, r3
 800101a:	3b01      	subs	r3, #1
 800101c:	b2dc      	uxtb	r4, r3
 800101e:	88bb      	ldrh	r3, [r7, #4]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001026:	4413      	add	r3, r2
 8001028:	b2db      	uxtb	r3, r3
 800102a:	3b01      	subs	r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4622      	mov	r2, r4
 8001030:	f7ff ff87 	bl	8000f42 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	e043      	b.n	80010c2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800103a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	3b20      	subs	r3, #32
 8001040:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001044:	fb01 f303 	mul.w	r3, r1, r3
 8001048:	4619      	mov	r1, r3
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	440b      	add	r3, r1
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	e029      	b.n	80010b0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00e      	beq.n	800108a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800106c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	b29b      	uxth	r3, r3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	743b      	strb	r3, [r7, #16]
 8001076:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001078:	b2db      	uxtb	r3, r3
 800107a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	2102      	movs	r1, #2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fefa 	bl	8000e7c <ST7735_WriteData>
 8001088:	e00f      	b.n	80010aa <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800108a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	b29b      	uxth	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	733b      	strb	r3, [r7, #12]
 8001096:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800109a:	b2db      	uxtb	r3, r3
 800109c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	2102      	movs	r1, #2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fee9 	bl	8000e7c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	3301      	adds	r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80010b4:	461a      	mov	r2, r3
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d3cf      	bcc.n	800105c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	3301      	adds	r3, #1
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80010c6:	461a      	mov	r2, r3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d3b5      	bcc.n	800103a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	3724      	adds	r7, #36	; 0x24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010da:	b002      	add	sp, #8
 80010dc:	4770      	bx	lr

080010de <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80010de:	b082      	sub	sp, #8
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af04      	add	r7, sp, #16
 80010e6:	603a      	str	r2, [r7, #0]
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
 80010ee:	460b      	mov	r3, r1
 80010f0:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80010f2:	f7ff fe7d 	bl	8000df0 <ST7735_Select>

    while(*str) {
 80010f6:	e02d      	b.n	8001154 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	7d3a      	ldrb	r2, [r7, #20]
 80010fc:	4413      	add	r3, r2
 80010fe:	2b9f      	cmp	r3, #159	; 0x9f
 8001100:	dd13      	ble.n	800112a <ST7735_WriteString+0x4c>
            x = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001106:	7d7b      	ldrb	r3, [r7, #21]
 8001108:	b29a      	uxth	r2, r3
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	7d7a      	ldrb	r2, [r7, #21]
 8001114:	4413      	add	r3, r2
 8001116:	2b4f      	cmp	r3, #79	; 0x4f
 8001118:	dc21      	bgt.n	800115e <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b20      	cmp	r3, #32
 8001120:	d103      	bne.n	800112a <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	603b      	str	r3, [r7, #0]
                continue;
 8001128:	e014      	b.n	8001154 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	88b9      	ldrh	r1, [r7, #4]
 8001130:	88f8      	ldrh	r0, [r7, #6]
 8001132:	8c3b      	ldrh	r3, [r7, #32]
 8001134:	9302      	str	r3, [sp, #8]
 8001136:	8bbb      	ldrh	r3, [r7, #28]
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f7ff ff56 	bl	8000ff0 <ST7735_WriteChar>
        x += font.width;
 8001144:	7d3b      	ldrb	r3, [r7, #20]
 8001146:	b29a      	uxth	r2, r3
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	4413      	add	r3, r2
 800114c:	80fb      	strh	r3, [r7, #6]
        str++;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1cd      	bne.n	80010f8 <ST7735_WriteString+0x1a>
 800115c:	e000      	b.n	8001160 <ST7735_WriteString+0x82>
                break;
 800115e:	bf00      	nop
    }

    ST7735_Unselect();
 8001160:	f7ff fe52 	bl	8000e08 <ST7735_Unselect>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800116e:	b002      	add	sp, #8
 8001170:	4770      	bx	lr
	...

08001174 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	4604      	mov	r4, r0
 800117c:	4608      	mov	r0, r1
 800117e:	4611      	mov	r1, r2
 8001180:	461a      	mov	r2, r3
 8001182:	4623      	mov	r3, r4
 8001184:	80fb      	strh	r3, [r7, #6]
 8001186:	4603      	mov	r3, r0
 8001188:	80bb      	strh	r3, [r7, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	807b      	strh	r3, [r7, #2]
 800118e:	4613      	mov	r3, r2
 8001190:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	2b9f      	cmp	r3, #159	; 0x9f
 8001196:	d857      	bhi.n	8001248 <ST7735_FillRectangle+0xd4>
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	2b4f      	cmp	r3, #79	; 0x4f
 800119c:	d854      	bhi.n	8001248 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800119e:	88fa      	ldrh	r2, [r7, #6]
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	4413      	add	r3, r2
 80011a4:	2ba0      	cmp	r3, #160	; 0xa0
 80011a6:	dd03      	ble.n	80011b0 <ST7735_FillRectangle+0x3c>
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80011ae:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80011b0:	88ba      	ldrh	r2, [r7, #4]
 80011b2:	883b      	ldrh	r3, [r7, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	2b50      	cmp	r3, #80	; 0x50
 80011b8:	dd03      	ble.n	80011c2 <ST7735_FillRectangle+0x4e>
 80011ba:	88bb      	ldrh	r3, [r7, #4]
 80011bc:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80011c0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80011c2:	f7ff fe15 	bl	8000df0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80011c6:	88fb      	ldrh	r3, [r7, #6]
 80011c8:	b2d8      	uxtb	r0, r3
 80011ca:	88bb      	ldrh	r3, [r7, #4]
 80011cc:	b2d9      	uxtb	r1, r3
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4413      	add	r3, r2
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	3b01      	subs	r3, #1
 80011dc:	b2dc      	uxtb	r4, r3
 80011de:	88bb      	ldrh	r3, [r7, #4]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	883b      	ldrh	r3, [r7, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4413      	add	r3, r2
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	3b01      	subs	r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4622      	mov	r2, r4
 80011f0:	f7ff fea7 	bl	8000f42 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80011f4:	8c3b      	ldrh	r3, [r7, #32]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	733b      	strb	r3, [r7, #12]
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2104      	movs	r1, #4
 8001208:	4811      	ldr	r0, [pc, #68]	; (8001250 <ST7735_FillRectangle+0xdc>)
 800120a:	f000 feaf 	bl	8001f6c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800120e:	883b      	ldrh	r3, [r7, #0]
 8001210:	80bb      	strh	r3, [r7, #4]
 8001212:	e013      	b.n	800123c <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	80fb      	strh	r3, [r7, #6]
 8001218:	e00a      	b.n	8001230 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800121a:	f107 010c 	add.w	r1, r7, #12
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	2202      	movs	r2, #2
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <ST7735_FillRectangle+0xe0>)
 8001226:	f001 fd2a 	bl	8002c7e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	3b01      	subs	r3, #1
 800122e:	80fb      	strh	r3, [r7, #6]
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f1      	bne.n	800121a <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8001236:	88bb      	ldrh	r3, [r7, #4]
 8001238:	3b01      	subs	r3, #1
 800123a:	80bb      	strh	r3, [r7, #4]
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1e8      	bne.n	8001214 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8001242:	f7ff fde1 	bl	8000e08 <ST7735_Unselect>
 8001246:	e000      	b.n	800124a <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001248:	bf00      	nop
}
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	bd90      	pop	{r4, r7, pc}
 8001250:	40020000 	.word	0x40020000
 8001254:	20000154 	.word	0x20000154

08001258 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	4604      	mov	r4, r0
 8001260:	4608      	mov	r0, r1
 8001262:	4611      	mov	r1, r2
 8001264:	461a      	mov	r2, r3
 8001266:	4623      	mov	r3, r4
 8001268:	80fb      	strh	r3, [r7, #6]
 800126a:	4603      	mov	r3, r0
 800126c:	80bb      	strh	r3, [r7, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	807b      	strh	r3, [r7, #2]
 8001272:	4613      	mov	r3, r2
 8001274:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	2b9f      	cmp	r3, #159	; 0x9f
 800127a:	d869      	bhi.n	8001350 <ST7735_FillRectangleFast+0xf8>
 800127c:	88bb      	ldrh	r3, [r7, #4]
 800127e:	2b4f      	cmp	r3, #79	; 0x4f
 8001280:	d866      	bhi.n	8001350 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001282:	88fa      	ldrh	r2, [r7, #6]
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	4413      	add	r3, r2
 8001288:	2ba0      	cmp	r3, #160	; 0xa0
 800128a:	dd03      	ble.n	8001294 <ST7735_FillRectangleFast+0x3c>
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001292:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	883b      	ldrh	r3, [r7, #0]
 8001298:	4413      	add	r3, r2
 800129a:	2b50      	cmp	r3, #80	; 0x50
 800129c:	dd03      	ble.n	80012a6 <ST7735_FillRectangleFast+0x4e>
 800129e:	88bb      	ldrh	r3, [r7, #4]
 80012a0:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80012a4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80012a6:	f7ff fda3 	bl	8000df0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	b2d8      	uxtb	r0, r3
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	b2d9      	uxtb	r1, r3
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	3b01      	subs	r3, #1
 80012c0:	b2dc      	uxtb	r4, r3
 80012c2:	88bb      	ldrh	r3, [r7, #4]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	883b      	ldrh	r3, [r7, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4622      	mov	r2, r4
 80012d4:	f7ff fe35 	bl	8000f42 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 80012d8:	8c3b      	ldrh	r3, [r7, #32]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	723b      	strb	r3, [r7, #8]
 80012e2:	8c3b      	ldrh	r3, [r7, #32]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f005 fd89 	bl	8006e04 <malloc>
 80012f2:	4603      	mov	r3, r0
 80012f4:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 80012f6:	2300      	movs	r3, #0
 80012f8:	80fb      	strh	r3, [r7, #6]
 80012fa:	e008      	b.n	800130e <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	893a      	ldrh	r2, [r7, #8]
 8001306:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	3301      	adds	r3, #1
 800130c:	80fb      	strh	r3, [r7, #6]
 800130e:	88fa      	ldrh	r2, [r7, #6]
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	429a      	cmp	r2, r3
 8001314:	d3f2      	bcc.n	80012fc <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001316:	2201      	movs	r2, #1
 8001318:	2104      	movs	r1, #4
 800131a:	480f      	ldr	r0, [pc, #60]	; (8001358 <ST7735_FillRectangleFast+0x100>)
 800131c:	f000 fe26 	bl	8001f6c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001320:	883b      	ldrh	r3, [r7, #0]
 8001322:	80bb      	strh	r3, [r7, #4]
 8001324:	e00b      	b.n	800133e <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	b29a      	uxth	r2, r3
 800132c:	f04f 33ff 	mov.w	r3, #4294967295
 8001330:	68f9      	ldr	r1, [r7, #12]
 8001332:	480a      	ldr	r0, [pc, #40]	; (800135c <ST7735_FillRectangleFast+0x104>)
 8001334:	f001 fca3 	bl	8002c7e <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8001338:	88bb      	ldrh	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	80bb      	strh	r3, [r7, #4]
 800133e:	88bb      	ldrh	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f0      	bne.n	8001326 <ST7735_FillRectangleFast+0xce>

    free(line);
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f005 fd65 	bl	8006e14 <free>
    ST7735_Unselect();
 800134a:	f7ff fd5d 	bl	8000e08 <ST7735_Unselect>
 800134e:	e000      	b.n	8001352 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001350:	bf00      	nop
}
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bd90      	pop	{r4, r7, pc}
 8001358:	40020000 	.word	0x40020000
 800135c:	20000154 	.word	0x20000154

08001360 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af02      	add	r7, sp, #8
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2350      	movs	r3, #80	; 0x50
 8001370:	22a0      	movs	r2, #160	; 0xa0
 8001372:	2100      	movs	r1, #0
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff fefd 	bl	8001174 <ST7735_FillRectangle>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af02      	add	r7, sp, #8
 8001388:	4603      	mov	r3, r0
 800138a:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2350      	movs	r3, #80	; 0x50
 8001392:	22a0      	movs	r2, #160	; 0xa0
 8001394:	2100      	movs	r1, #0
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff ff5e 	bl	8001258 <ST7735_FillRectangleFast>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_MspInit+0x74>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a19      	ldr	r2, [pc, #100]	; (8001418 <HAL_MspInit+0x74>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_MspInit+0x74>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_MspInit+0x74>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <HAL_MspInit+0x74>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_MspInit+0x74>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	210f      	movs	r1, #15
 80013e6:	f06f 0001 	mvn.w	r0, #1
 80013ea:	f000 fbf5 	bl	8001bd8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2105      	movs	r1, #5
 80013f2:	2005      	movs	r0, #5
 80013f4:	f000 fbf0 	bl	8001bd8 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013f8:	2005      	movs	r0, #5
 80013fa:	f000 fc09 	bl	8001c10 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2105      	movs	r1, #5
 8001402:	2005      	movs	r0, #5
 8001404:	f000 fbe8 	bl	8001bd8 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001408:	2005      	movs	r0, #5
 800140a:	f000 fc01 	bl	8001c10 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	; 0x30
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	2019      	movs	r0, #25
 8001432:	f000 fbd1 	bl	8001bd8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001436:	2019      	movs	r0, #25
 8001438:	f000 fbea 	bl	8001c10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_InitTick+0xa0>)
 8001442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001444:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_InitTick+0xa0>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6453      	str	r3, [r2, #68]	; 0x44
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_InitTick+0xa0>)
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001458:	f107 0210 	add.w	r2, r7, #16
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f001 fb50 	bl	8002b08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001468:	f001 fb3a 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 800146c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800146e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001470:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <HAL_InitTick+0xa4>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	0c9b      	lsrs	r3, r3, #18
 8001478:	3b01      	subs	r3, #1
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_InitTick+0xa8>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <HAL_InitTick+0xac>)
 8001480:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_InitTick+0xa8>)
 8001484:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001488:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_InitTick+0xa8>)
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_InitTick+0xa8>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_InitTick+0xa8>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800149c:	4809      	ldr	r0, [pc, #36]	; (80014c4 <HAL_InitTick+0xa8>)
 800149e:	f001 fdf5 	bl	800308c <HAL_TIM_Base_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d104      	bne.n	80014b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80014a8:	4806      	ldr	r0, [pc, #24]	; (80014c4 <HAL_InitTick+0xa8>)
 80014aa:	f001 fe49 	bl	8003140 <HAL_TIM_Base_Start_IT>
 80014ae:	4603      	mov	r3, r0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	431bde83 	.word	0x431bde83
 80014c4:	200001ac 	.word	0x200001ac
 80014c8:	40010000 	.word	0x40010000

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 800150a:	2001      	movs	r0, #1
 800150c:	f000 fd48 	bl	8001fa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800151a:	f001 fff6 	bl	800350a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200001ac 	.word	0x200001ac

08001528 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <TIM2_IRQHandler+0x10>)
 800152e:	f001 ffec 	bl	800350a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000204 	.word	0x20000204

0800153c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001540:	4808      	ldr	r0, [pc, #32]	; (8001564 <TIM3_IRQHandler+0x28>)
 8001542:	f001 ffe2 	bl	800350a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <TIM3_IRQHandler+0x2c>)
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <TIM3_IRQHandler+0x2c>)
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <TIM3_IRQHandler+0x2c>)
 8001558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800155c:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000024c 	.word	0x2000024c
 8001568:	40000400 	.word	0x40000400

0800156c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 8001576:	23ff      	movs	r3, #255	; 0xff
 8001578:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 8001584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db11      	blt.n	80015b0 <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 800158c:	f000 fa3c 	bl	8001a08 <HAL_GetTick>
 8001590:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_GPIO_EXTI_Callback+0x50>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b63      	cmp	r3, #99	; 0x63
 800159c:	d90a      	bls.n	80015b4 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 800159e:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_GPIO_EXTI_Callback+0x50>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 80015a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a8:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <HAL_GPIO_EXTI_Callback+0x54>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	54d1      	strb	r1, [r2, r3]
 80015ae:	e002      	b.n	80015b6 <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 80015b0:	bf00      	nop
 80015b2:	e000      	b.n	80015b6 <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 80015b4:	bf00      	nop
}
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200001fc 	.word	0x200001fc
 80015c0:	200001f4 	.word	0x200001f4

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f005 fbda 	bl	8006dac <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20020000 	.word	0x20020000
 8001624:	00000400 	.word	0x00000400
 8001628:	20000200 	.word	0x20000200
 800162c:	20004cb8 	.word	0x20004cb8

08001630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165a:	f107 0320 	add.w	r3, r7, #32
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001676:	4b22      	ldr	r3, [pc, #136]	; (8001700 <MX_TIM2_Init+0xac>)
 8001678:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <MX_TIM2_Init+0xac>)
 8001680:	2200      	movs	r2, #0
 8001682:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <MX_TIM2_Init+0xac>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_TIM2_Init+0xac>)
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_TIM2_Init+0xac>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_TIM2_Init+0xac>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800169e:	4818      	ldr	r0, [pc, #96]	; (8001700 <MX_TIM2_Init+0xac>)
 80016a0:	f001 fdb0 	bl	8003204 <HAL_TIM_PWM_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80016aa:	f7ff fb1d 	bl	8000ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	4619      	mov	r1, r3
 80016bc:	4810      	ldr	r0, [pc, #64]	; (8001700 <MX_TIM2_Init+0xac>)
 80016be:	f002 fb49 	bl	8003d54 <HAL_TIMEx_MasterConfigSynchronization>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80016c8:	f7ff fb0e 	bl	8000ce8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016cc:	2360      	movs	r3, #96	; 0x60
 80016ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2204      	movs	r2, #4
 80016e0:	4619      	mov	r1, r3
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <MX_TIM2_Init+0xac>)
 80016e4:	f002 f81a 	bl	800371c <HAL_TIM_PWM_ConfigChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80016ee:	f7ff fafb 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016f2:	4803      	ldr	r0, [pc, #12]	; (8001700 <MX_TIM2_Init+0xac>)
 80016f4:	f000 f8f0 	bl	80018d8 <HAL_TIM_MspPostInit>

}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	; 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000204 	.word	0x20000204

08001704 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2224      	movs	r2, #36	; 0x24
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f005 fb94 	bl	8006e40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <MX_TIM3_Init+0xa0>)
 8001722:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <MX_TIM3_Init+0xa4>)
 8001724:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <MX_TIM3_Init+0xa0>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MX_TIM3_Init+0xa0>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <MX_TIM3_Init+0xa0>)
 8001734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001738:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_TIM3_Init+0xa0>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_TIM3_Init+0xa0>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001746:	2301      	movs	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800174e:	2301      	movs	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 8001756:	2306      	movs	r3, #6
 8001758:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800175e:	2301      	movs	r3, #1
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8001766:	2306      	movs	r3, #6
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	4619      	mov	r1, r3
 8001770:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_TIM3_Init+0xa0>)
 8001772:	f001 fd96 	bl	80032a2 <HAL_TIM_Encoder_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800177c:	f7ff fab4 	bl	8000ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_TIM3_Init+0xa0>)
 800178e:	f002 fae1 	bl	8003d54 <HAL_TIMEx_MasterConfigSynchronization>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001798:	f7ff faa6 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3730      	adds	r7, #48	; 0x30
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000024c 	.word	0x2000024c
 80017a8:	40000400 	.word	0x40000400

080017ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017bc:	d115      	bne.n	80017ea <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_TIM_PWM_MspInit+0x48>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_TIM_PWM_MspInit+0x48>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6413      	str	r3, [r2, #64]	; 0x40
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_TIM_PWM_MspInit+0x48>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2105      	movs	r1, #5
 80017de:	201c      	movs	r0, #28
 80017e0:	f000 f9fa 	bl	8001bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017e4:	201c      	movs	r0, #28
 80017e6:	f000 fa13 	bl	8001c10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800

080017f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a2c      	ldr	r2, [pc, #176]	; (80018c8 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d151      	bne.n	80018be <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_TIM_Encoder_MspInit+0xd4>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a2a      	ldr	r2, [pc, #168]	; (80018cc <HAL_TIM_Encoder_MspInit+0xd4>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <HAL_TIM_Encoder_MspInit+0xd4>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_TIM_Encoder_MspInit+0xd4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a23      	ldr	r2, [pc, #140]	; (80018cc <HAL_TIM_Encoder_MspInit+0xd4>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HAL_TIM_Encoder_MspInit+0xd4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_TIM_Encoder_MspInit+0xd4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <HAL_TIM_Encoder_MspInit+0xd4>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <HAL_TIM_Encoder_MspInit+0xd4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 800186e:	2340      	movs	r3, #64	; 0x40
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001876:	2301      	movs	r3, #1
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800187e:	2302      	movs	r3, #2
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4811      	ldr	r0, [pc, #68]	; (80018d0 <HAL_TIM_Encoder_MspInit+0xd8>)
 800188a:	f000 f9eb 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 800188e:	2320      	movs	r3, #32
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001896:	2301      	movs	r3, #1
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800189e:	2302      	movs	r3, #2
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	480a      	ldr	r0, [pc, #40]	; (80018d4 <HAL_TIM_Encoder_MspInit+0xdc>)
 80018aa:	f000 f9db 	bl	8001c64 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2105      	movs	r1, #5
 80018b2:	201d      	movs	r0, #29
 80018b4:	f000 f990 	bl	8001bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018b8:	201d      	movs	r0, #29
 80018ba:	f000 f9a9 	bl	8001c10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40000400 	.word	0x40000400
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40020400 	.word	0x40020400

080018d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f8:	d11d      	bne.n	8001936 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_TIM_MspPostInit+0x68>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_TIM_MspPostInit+0x68>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_TIM_MspPostInit+0x68>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8001916:	2302      	movs	r3, #2
 8001918:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001926:	2301      	movs	r3, #1
 8001928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	4619      	mov	r1, r3
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <HAL_TIM_MspPostInit+0x6c>)
 8001932:	f000 f997 	bl	8001c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3720      	adds	r7, #32
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	40020000 	.word	0x40020000

08001948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480d      	ldr	r0, [pc, #52]	; (8001984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194e:	490e      	ldr	r1, [pc, #56]	; (8001988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001950:	4a0e      	ldr	r2, [pc, #56]	; (800198c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001964:	4c0b      	ldr	r4, [pc, #44]	; (8001994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001972:	f7ff fe5d 	bl	8001630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001976:	f005 fa1f 	bl	8006db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197a:	f7ff f919 	bl	8000bb0 <main>
  bx  lr    
 800197e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 800198c:	0800a2fc 	.word	0x0800a2fc
  ldr r2, =_sbss
 8001990:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001994:	20004cb8 	.word	0x20004cb8

08001998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC_IRQHandler>
	...

0800199c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <HAL_Init+0x40>)
 80019a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_Init+0x40>)
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_Init+0x40>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 f8fc 	bl	8001bc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	200f      	movs	r0, #15
 80019cc:	f7ff fd26 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff fce8 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	2000005c 	.word	0x2000005c
 8001a04:	20000294 	.word	0x20000294

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000294 	.word	0x20000294

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_Delay+0x44>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000005c 	.word	0x2000005c

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ff4c 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bea:	f7ff ff61 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001bee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	68b9      	ldr	r1, [r7, #8]
 8001bf4:	6978      	ldr	r0, [r7, #20]
 8001bf6:	f7ff ffb1 	bl	8001b5c <NVIC_EncodePriority>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff80 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c08:	bf00      	nop
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff54 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00e      	b.n	8001c5c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	795b      	ldrb	r3, [r3, #5]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe fd2c 	bl	80006ac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	e159      	b.n	8001f34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	f040 8148 	bne.w	8001f2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d005      	beq.n	8001cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d130      	bne.n	8001d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cec:	2201      	movs	r2, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 0201 	and.w	r2, r3, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d017      	beq.n	8001d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d123      	bne.n	8001da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	08da      	lsrs	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3208      	adds	r2, #8
 8001da2:	69b9      	ldr	r1, [r7, #24]
 8001da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0203 	and.w	r2, r3, #3
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80a2 	beq.w	8001f2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_GPIO_Init+0x2e8>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	4a56      	ldr	r2, [pc, #344]	; (8001f4c <HAL_GPIO_Init+0x2e8>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfa:	4b54      	ldr	r3, [pc, #336]	; (8001f4c <HAL_GPIO_Init+0x2e8>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e06:	4a52      	ldr	r2, [pc, #328]	; (8001f50 <HAL_GPIO_Init+0x2ec>)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a49      	ldr	r2, [pc, #292]	; (8001f54 <HAL_GPIO_Init+0x2f0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d019      	beq.n	8001e66 <HAL_GPIO_Init+0x202>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a48      	ldr	r2, [pc, #288]	; (8001f58 <HAL_GPIO_Init+0x2f4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0x1fe>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a47      	ldr	r2, [pc, #284]	; (8001f5c <HAL_GPIO_Init+0x2f8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00d      	beq.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a46      	ldr	r2, [pc, #280]	; (8001f60 <HAL_GPIO_Init+0x2fc>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d007      	beq.n	8001e5a <HAL_GPIO_Init+0x1f6>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a45      	ldr	r2, [pc, #276]	; (8001f64 <HAL_GPIO_Init+0x300>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_GPIO_Init+0x1f2>
 8001e52:	2304      	movs	r3, #4
 8001e54:	e008      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e56:	2307      	movs	r3, #7
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e004      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e66:	2300      	movs	r3, #0
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	f002 0203 	and.w	r2, r2, #3
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	4093      	lsls	r3, r2
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e78:	4935      	ldr	r1, [pc, #212]	; (8001f50 <HAL_GPIO_Init+0x2ec>)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e86:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eaa:	4a2f      	ldr	r2, [pc, #188]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed4:	4a24      	ldr	r2, [pc, #144]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001efe:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f28:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3301      	adds	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b0f      	cmp	r3, #15
 8001f38:	f67f aea2 	bls.w	8001c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40013800 	.word	0x40013800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40013c00 	.word	0x40013c00

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f88:	e003      	b.n	8001f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	041a      	lsls	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	619a      	str	r2, [r3, #24]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fad4 	bl	800156c <HAL_GPIO_EXTI_Callback>
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e12b      	b.n	800223a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe fd5e 	bl	8000ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2224      	movs	r2, #36	; 0x24
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002022:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002034:	f000 fd40 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8002038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4a81      	ldr	r2, [pc, #516]	; (8002244 <HAL_I2C_Init+0x274>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d807      	bhi.n	8002054 <HAL_I2C_Init+0x84>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a80      	ldr	r2, [pc, #512]	; (8002248 <HAL_I2C_Init+0x278>)
 8002048:	4293      	cmp	r3, r2
 800204a:	bf94      	ite	ls
 800204c:	2301      	movls	r3, #1
 800204e:	2300      	movhi	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	e006      	b.n	8002062 <HAL_I2C_Init+0x92>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a7d      	ldr	r2, [pc, #500]	; (800224c <HAL_I2C_Init+0x27c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	bf94      	ite	ls
 800205c:	2301      	movls	r3, #1
 800205e:	2300      	movhi	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0e7      	b.n	800223a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4a78      	ldr	r2, [pc, #480]	; (8002250 <HAL_I2C_Init+0x280>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0c9b      	lsrs	r3, r3, #18
 8002074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a6a      	ldr	r2, [pc, #424]	; (8002244 <HAL_I2C_Init+0x274>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d802      	bhi.n	80020a4 <HAL_I2C_Init+0xd4>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	3301      	adds	r3, #1
 80020a2:	e009      	b.n	80020b8 <HAL_I2C_Init+0xe8>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	4a69      	ldr	r2, [pc, #420]	; (8002254 <HAL_I2C_Init+0x284>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	099b      	lsrs	r3, r3, #6
 80020b6:	3301      	adds	r3, #1
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	430b      	orrs	r3, r1
 80020be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	495c      	ldr	r1, [pc, #368]	; (8002244 <HAL_I2C_Init+0x274>)
 80020d4:	428b      	cmp	r3, r1
 80020d6:	d819      	bhi.n	800210c <HAL_I2C_Init+0x13c>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1e59      	subs	r1, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e6:	1c59      	adds	r1, r3, #1
 80020e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020ec:	400b      	ands	r3, r1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_I2C_Init+0x138>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1e59      	subs	r1, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002100:	3301      	adds	r3, #1
 8002102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002106:	e051      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 8002108:	2304      	movs	r3, #4
 800210a:	e04f      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d111      	bne.n	8002138 <HAL_I2C_Init+0x168>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1e58      	subs	r0, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	440b      	add	r3, r1
 8002122:	fbb0 f3f3 	udiv	r3, r0, r3
 8002126:	3301      	adds	r3, #1
 8002128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	e012      	b.n	800215e <HAL_I2C_Init+0x18e>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e58      	subs	r0, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	0099      	lsls	r1, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Init+0x196>
 8002162:	2301      	movs	r3, #1
 8002164:	e022      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10e      	bne.n	800218c <HAL_I2C_Init+0x1bc>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1e58      	subs	r0, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6859      	ldr	r1, [r3, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	440b      	add	r3, r1
 800217c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002180:	3301      	adds	r3, #1
 8002182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218a:	e00f      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1e58      	subs	r0, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	0099      	lsls	r1, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	6809      	ldr	r1, [r1, #0]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6911      	ldr	r1, [r2, #16]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68d2      	ldr	r2, [r2, #12]
 80021e6:	4311      	orrs	r1, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	000186a0 	.word	0x000186a0
 8002248:	001e847f 	.word	0x001e847f
 800224c:	003d08ff 	.word	0x003d08ff
 8002250:	431bde83 	.word	0x431bde83
 8002254:	10624dd3 	.word	0x10624dd3

08002258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e267      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d075      	beq.n	8002362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002276:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b04      	cmp	r3, #4
 8002280:	d00c      	beq.n	800229c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002282:	4b85      	ldr	r3, [pc, #532]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800228a:	2b08      	cmp	r3, #8
 800228c:	d112      	bne.n	80022b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228e:	4b82      	ldr	r3, [pc, #520]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800229a:	d10b      	bne.n	80022b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	4b7e      	ldr	r3, [pc, #504]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d05b      	beq.n	8002360 <HAL_RCC_OscConfig+0x108>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d157      	bne.n	8002360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e242      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x74>
 80022be:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a75      	ldr	r2, [pc, #468]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01d      	b.n	8002308 <HAL_RCC_OscConfig+0xb0>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x98>
 80022d6:	4b70      	ldr	r3, [pc, #448]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6f      	ldr	r2, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b6d      	ldr	r3, [pc, #436]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6c      	ldr	r2, [pc, #432]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0xb0>
 80022f0:	4b69      	ldr	r3, [pc, #420]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a68      	ldr	r2, [pc, #416]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b66      	ldr	r3, [pc, #408]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a65      	ldr	r2, [pc, #404]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fb7a 	bl	8001a08 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002318:	f7ff fb76 	bl	8001a08 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e207      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b5b      	ldr	r3, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0xc0>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff fb66 	bl	8001a08 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002340:	f7ff fb62 	bl	8001a08 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e1f3      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	4b51      	ldr	r3, [pc, #324]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0xe8>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d063      	beq.n	8002436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800236e:	4b4a      	ldr	r3, [pc, #296]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237a:	4b47      	ldr	r3, [pc, #284]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002382:	2b08      	cmp	r3, #8
 8002384:	d11c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002386:	4b44      	ldr	r3, [pc, #272]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d116      	bne.n	80023c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_RCC_OscConfig+0x152>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e1c7      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4937      	ldr	r1, [pc, #220]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	e03a      	b.n	8002436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c8:	4b34      	ldr	r3, [pc, #208]	; (800249c <HAL_RCC_OscConfig+0x244>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7ff fb1b 	bl	8001a08 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d6:	f7ff fb17 	bl	8001a08 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e1a8      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b28      	ldr	r3, [pc, #160]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4925      	ldr	r1, [pc, #148]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_RCC_OscConfig+0x244>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7ff fafa 	bl	8001a08 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002418:	f7ff faf6 	bl	8001a08 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e187      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d036      	beq.n	80024b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_RCC_OscConfig+0x248>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7ff fada 	bl	8001a08 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002458:	f7ff fad6 	bl	8001a08 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e167      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 800246c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x200>
 8002476:	e01b      	b.n	80024b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RCC_OscConfig+0x248>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7ff fac3 	bl	8001a08 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	e00e      	b.n	80024a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002486:	f7ff fabf 	bl	8001a08 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d907      	bls.n	80024a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e150      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
 8002498:	40023800 	.word	0x40023800
 800249c:	42470000 	.word	0x42470000
 80024a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	4b88      	ldr	r3, [pc, #544]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ea      	bne.n	8002486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8097 	beq.w	80025ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c2:	4b81      	ldr	r3, [pc, #516]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	4b7d      	ldr	r3, [pc, #500]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a7c      	ldr	r2, [pc, #496]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b7a      	ldr	r3, [pc, #488]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ea:	2301      	movs	r3, #1
 80024ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ee:	4b77      	ldr	r3, [pc, #476]	; (80026cc <HAL_RCC_OscConfig+0x474>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d118      	bne.n	800252c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fa:	4b74      	ldr	r3, [pc, #464]	; (80026cc <HAL_RCC_OscConfig+0x474>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a73      	ldr	r2, [pc, #460]	; (80026cc <HAL_RCC_OscConfig+0x474>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002506:	f7ff fa7f 	bl	8001a08 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7ff fa7b 	bl	8001a08 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e10c      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <HAL_RCC_OscConfig+0x474>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x2ea>
 8002534:	4b64      	ldr	r3, [pc, #400]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a63      	ldr	r2, [pc, #396]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
 8002540:	e01c      	b.n	800257c <HAL_RCC_OscConfig+0x324>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b05      	cmp	r3, #5
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x30c>
 800254a:	4b5f      	ldr	r3, [pc, #380]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a5e      	ldr	r2, [pc, #376]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
 8002556:	4b5c      	ldr	r3, [pc, #368]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	4a5b      	ldr	r2, [pc, #364]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6713      	str	r3, [r2, #112]	; 0x70
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0x324>
 8002564:	4b58      	ldr	r3, [pc, #352]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	4a57      	ldr	r2, [pc, #348]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	6713      	str	r3, [r2, #112]	; 0x70
 8002570:	4b55      	ldr	r3, [pc, #340]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	4a54      	ldr	r2, [pc, #336]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002576:	f023 0304 	bic.w	r3, r3, #4
 800257a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d015      	beq.n	80025b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7ff fa40 	bl	8001a08 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258c:	f7ff fa3c 	bl	8001a08 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0cb      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a2:	4b49      	ldr	r3, [pc, #292]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0ee      	beq.n	800258c <HAL_RCC_OscConfig+0x334>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b0:	f7ff fa2a 	bl	8001a08 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7ff fa26 	bl	8001a08 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0b5      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ce:	4b3e      	ldr	r3, [pc, #248]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ee      	bne.n	80025b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025da:	7dfb      	ldrb	r3, [r7, #23]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e0:	4b39      	ldr	r3, [pc, #228]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	4a38      	ldr	r2, [pc, #224]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80a1 	beq.w	8002738 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f6:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d05c      	beq.n	80026bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d141      	bne.n	800268e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <HAL_RCC_OscConfig+0x478>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7ff f9fa 	bl	8001a08 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002618:	f7ff f9f6 	bl	8001a08 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e087      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	019b      	lsls	r3, r3, #6
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	3b01      	subs	r3, #1
 8002650:	041b      	lsls	r3, r3, #16
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	061b      	lsls	r3, r3, #24
 800265a:	491b      	ldr	r1, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x478>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7ff f9cf 	bl	8001a08 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266e:	f7ff f9cb 	bl	8001a08 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e05c      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x416>
 800268c:	e054      	b.n	8002738 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_RCC_OscConfig+0x478>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff f9b8 	bl	8001a08 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269c:	f7ff f9b4 	bl	8001a08 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e045      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x444>
 80026ba:	e03d      	b.n	8002738 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e038      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40007000 	.word	0x40007000
 80026d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026d4:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x4ec>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d028      	beq.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d121      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d11a      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800270a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800270c:	4293      	cmp	r3, r2
 800270e:	d111      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	3b01      	subs	r3, #1
 800271e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800

08002748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0cc      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b68      	ldr	r3, [pc, #416]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d90c      	bls.n	8002784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b65      	ldr	r3, [pc, #404]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b63      	ldr	r3, [pc, #396]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0b8      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800279c:	4b59      	ldr	r3, [pc, #356]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a58      	ldr	r2, [pc, #352]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b4:	4b53      	ldr	r3, [pc, #332]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a52      	ldr	r2, [pc, #328]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c0:	4b50      	ldr	r3, [pc, #320]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	494d      	ldr	r1, [pc, #308]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d044      	beq.n	8002868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b47      	ldr	r3, [pc, #284]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d119      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002802:	2b03      	cmp	r3, #3
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e06f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002816:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e067      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002826:	4b37      	ldr	r3, [pc, #220]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4934      	ldr	r1, [pc, #208]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002838:	f7ff f8e6 	bl	8001a08 <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7ff f8e2 	bl	8001a08 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e04f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 020c 	and.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	429a      	cmp	r2, r3
 8002866:	d1eb      	bne.n	8002840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d20c      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b22      	ldr	r3, [pc, #136]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e032      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4916      	ldr	r1, [pc, #88]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	490e      	ldr	r1, [pc, #56]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ce:	f000 f821 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028d2:	4602      	mov	r2, r0
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	490a      	ldr	r1, [pc, #40]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	5ccb      	ldrb	r3, [r1, r3]
 80028e2:	fa22 f303 	lsr.w	r3, r2, r3
 80028e6:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fd94 	bl	800141c <HAL_InitTick>

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023c00 	.word	0x40023c00
 8002904:	40023800 	.word	0x40023800
 8002908:	0800a240 	.word	0x0800a240
 800290c:	20000054 	.word	0x20000054
 8002910:	20000058 	.word	0x20000058

08002914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002918:	b090      	sub	sp, #64	; 0x40
 800291a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
 8002920:	2300      	movs	r3, #0
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800292c:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b08      	cmp	r3, #8
 8002936:	d00d      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x40>
 8002938:	2b08      	cmp	r3, #8
 800293a:	f200 80a1 	bhi.w	8002a80 <HAL_RCC_GetSysClockFreq+0x16c>
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x34>
 8002942:	2b04      	cmp	r3, #4
 8002944:	d003      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x3a>
 8002946:	e09b      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x184>)
 800294a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800294c:	e09b      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800294e:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002950:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002952:	e098      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002954:	4b4f      	ldr	r3, [pc, #316]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800295e:	4b4d      	ldr	r3, [pc, #308]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d028      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296a:	4b4a      	ldr	r3, [pc, #296]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	2200      	movs	r2, #0
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	627a      	str	r2, [r7, #36]	; 0x24
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800297c:	2100      	movs	r1, #0
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002980:	fb03 f201 	mul.w	r2, r3, r1
 8002984:	2300      	movs	r3, #0
 8002986:	fb00 f303 	mul.w	r3, r0, r3
 800298a:	4413      	add	r3, r2
 800298c:	4a43      	ldr	r2, [pc, #268]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x188>)
 800298e:	fba0 1202 	umull	r1, r2, r0, r2
 8002992:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002994:	460a      	mov	r2, r1
 8002996:	62ba      	str	r2, [r7, #40]	; 0x28
 8002998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800299a:	4413      	add	r3, r2
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a0:	2200      	movs	r2, #0
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	61fa      	str	r2, [r7, #28]
 80029a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029ae:	f7fd fc67 	bl	8000280 <__aeabi_uldivmod>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4613      	mov	r3, r2
 80029b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ba:	e053      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029bc:	4b35      	ldr	r3, [pc, #212]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	2200      	movs	r2, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	617a      	str	r2, [r7, #20]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029ce:	f04f 0b00 	mov.w	fp, #0
 80029d2:	4652      	mov	r2, sl
 80029d4:	465b      	mov	r3, fp
 80029d6:	f04f 0000 	mov.w	r0, #0
 80029da:	f04f 0100 	mov.w	r1, #0
 80029de:	0159      	lsls	r1, r3, #5
 80029e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e4:	0150      	lsls	r0, r2, #5
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	ebb2 080a 	subs.w	r8, r2, sl
 80029ee:	eb63 090b 	sbc.w	r9, r3, fp
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a06:	ebb2 0408 	subs.w	r4, r2, r8
 8002a0a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	00eb      	lsls	r3, r5, #3
 8002a18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a1c:	00e2      	lsls	r2, r4, #3
 8002a1e:	4614      	mov	r4, r2
 8002a20:	461d      	mov	r5, r3
 8002a22:	eb14 030a 	adds.w	r3, r4, sl
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	eb45 030b 	adc.w	r3, r5, fp
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	028b      	lsls	r3, r1, #10
 8002a3e:	4621      	mov	r1, r4
 8002a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a44:	4621      	mov	r1, r4
 8002a46:	028a      	lsls	r2, r1, #10
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	60fa      	str	r2, [r7, #12]
 8002a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a58:	f7fd fc12 	bl	8000280 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4613      	mov	r3, r2
 8002a62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3740      	adds	r7, #64	; 0x40
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	017d7840 	.word	0x017d7840

08002aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000054 	.word	0x20000054

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0a9b      	lsrs	r3, r3, #10
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	0800a250 	.word	0x0800a250

08002ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ae4:	f7ff ffdc 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0b5b      	lsrs	r3, r3, #13
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	; (8002b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	0800a250 	.word	0x0800a250

08002b08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	220f      	movs	r2, #15
 8002b16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_RCC_GetClockConfig+0x5c>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0203 	and.w	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_RCC_GetClockConfig+0x5c>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <HAL_RCC_GetClockConfig+0x5c>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_RCC_GetClockConfig+0x5c>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	08db      	lsrs	r3, r3, #3
 8002b42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <HAL_RCC_GetClockConfig+0x60>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0207 	and.w	r2, r3, #7
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	601a      	str	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40023c00 	.word	0x40023c00

08002b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e07b      	b.n	8002c76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d108      	bne.n	8002b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8e:	d009      	beq.n	8002ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
 8002b96:	e005      	b.n	8002ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe f8ce 	bl	8000d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	ea42 0103 	orr.w	r1, r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	f003 0104 	and.w	r1, r3, #4
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f003 0210 	and.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b088      	sub	sp, #32
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_SPI_Transmit+0x22>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e126      	b.n	8002eee <HAL_SPI_Transmit+0x270>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ca8:	f7fe feae 	bl	8001a08 <HAL_GetTick>
 8002cac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d002      	beq.n	8002cc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cc2:	e10b      	b.n	8002edc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_SPI_Transmit+0x52>
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cd4:	e102      	b.n	8002edc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2203      	movs	r2, #3
 8002cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	88fa      	ldrh	r2, [r7, #6]
 8002cee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d1c:	d10f      	bne.n	8002d3e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d007      	beq.n	8002d5c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d64:	d14b      	bne.n	8002dfe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_SPI_Transmit+0xf6>
 8002d6e:	8afb      	ldrh	r3, [r7, #22]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d13e      	bne.n	8002df2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	881a      	ldrh	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	1c9a      	adds	r2, r3, #2
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d98:	e02b      	b.n	8002df2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d112      	bne.n	8002dce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	881a      	ldrh	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	1c9a      	adds	r2, r3, #2
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dcc:	e011      	b.n	8002df2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dce:	f7fe fe1b 	bl	8001a08 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d803      	bhi.n	8002de6 <HAL_SPI_Transmit+0x168>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d102      	bne.n	8002dec <HAL_SPI_Transmit+0x16e>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002df0:	e074      	b.n	8002edc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ce      	bne.n	8002d9a <HAL_SPI_Transmit+0x11c>
 8002dfc:	e04c      	b.n	8002e98 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_SPI_Transmit+0x18e>
 8002e06:	8afb      	ldrh	r3, [r7, #22]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d140      	bne.n	8002e8e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	7812      	ldrb	r2, [r2, #0]
 8002e18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e32:	e02c      	b.n	8002e8e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d113      	bne.n	8002e6a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	330c      	adds	r3, #12
 8002e4c:	7812      	ldrb	r2, [r2, #0]
 8002e4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e68:	e011      	b.n	8002e8e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e6a:	f7fe fdcd 	bl	8001a08 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d803      	bhi.n	8002e82 <HAL_SPI_Transmit+0x204>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d102      	bne.n	8002e88 <HAL_SPI_Transmit+0x20a>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d102      	bne.n	8002e8e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e8c:	e026      	b.n	8002edc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1cd      	bne.n	8002e34 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	6839      	ldr	r1, [r7, #0]
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f8b3 	bl	8003008 <SPI_EndRxTxTransaction>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	e000      	b.n	8002edc <HAL_SPI_Transmit+0x25e>
  }

error:
 8002eda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002eec:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f08:	f7fe fd7e 	bl	8001a08 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	4413      	add	r3, r2
 8002f16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f18:	f7fe fd76 	bl	8001a08 <HAL_GetTick>
 8002f1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f1e:	4b39      	ldr	r3, [pc, #228]	; (8003004 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	015b      	lsls	r3, r3, #5
 8002f24:	0d1b      	lsrs	r3, r3, #20
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	fb02 f303 	mul.w	r3, r2, r3
 8002f2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f2e:	e054      	b.n	8002fda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d050      	beq.n	8002fda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f38:	f7fe fd66 	bl	8001a08 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d902      	bls.n	8002f4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d13d      	bne.n	8002fca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f66:	d111      	bne.n	8002f8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f70:	d004      	beq.n	8002f7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7a:	d107      	bne.n	8002f8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f94:	d10f      	bne.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e017      	b.n	8002ffa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d19b      	bne.n	8002f30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3720      	adds	r7, #32
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000054 	.word	0x20000054

08003008 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <SPI_EndRxTxTransaction+0x7c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <SPI_EndRxTxTransaction+0x80>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	0d5b      	lsrs	r3, r3, #21
 8003020:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003032:	d112      	bne.n	800305a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2200      	movs	r2, #0
 800303c:	2180      	movs	r1, #128	; 0x80
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff ff5a 	bl	8002ef8 <SPI_WaitFlagStateUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	f043 0220 	orr.w	r2, r3, #32
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e00f      	b.n	800307a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	3b01      	subs	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003070:	2b80      	cmp	r3, #128	; 0x80
 8003072:	d0f2      	beq.n	800305a <SPI_EndRxTxTransaction+0x52>
 8003074:	e000      	b.n	8003078 <SPI_EndRxTxTransaction+0x70>
        break;
 8003076:	bf00      	nop
  }

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000054 	.word	0x20000054
 8003088:	165e9f81 	.word	0x165e9f81

0800308c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e041      	b.n	8003122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f839 	bl	800312a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3304      	adds	r3, #4
 80030c8:	4619      	mov	r1, r3
 80030ca:	4610      	mov	r0, r2
 80030cc:	f000 fc10 	bl	80038f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	d001      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e044      	b.n	80031e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d018      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x6c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003182:	d013      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x6c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1a      	ldr	r2, [pc, #104]	; (80031f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00e      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x6c>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a19      	ldr	r2, [pc, #100]	; (80031f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d009      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x6c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a17      	ldr	r2, [pc, #92]	; (80031fc <HAL_TIM_Base_Start_IT+0xbc>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d004      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x6c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a16      	ldr	r2, [pc, #88]	; (8003200 <HAL_TIM_Base_Start_IT+0xc0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d111      	bne.n	80031d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d010      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ce:	e007      	b.n	80031e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40010000 	.word	0x40010000
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800
 80031fc:	40000c00 	.word	0x40000c00
 8003200:	40014000 	.word	0x40014000

08003204 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e041      	b.n	800329a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe fabe 	bl	80017ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3304      	adds	r3, #4
 8003240:	4619      	mov	r1, r3
 8003242:	4610      	mov	r0, r2
 8003244:	f000 fb54 	bl	80038f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e097      	b.n	80033e6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fe fa94 	bl	80017f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032e6:	f023 0307 	bic.w	r3, r3, #7
 80032ea:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f000 fafa 	bl	80038f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	f023 0303 	bic.w	r3, r3, #3
 8003328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	4313      	orrs	r3, r2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003342:	f023 030c 	bic.w	r3, r3, #12
 8003346:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800334e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	4313      	orrs	r3, r2
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	011a      	lsls	r2, r3, #4
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	031b      	lsls	r3, r3, #12
 8003372:	4313      	orrs	r3, r2
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003380:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003388:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	4313      	orrs	r3, r2
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033fe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003406:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800340e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003416:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d110      	bne.n	8003440 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d102      	bne.n	800342a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003424:	7b7b      	ldrb	r3, [r7, #13]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d001      	beq.n	800342e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e069      	b.n	8003502 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800343e:	e031      	b.n	80034a4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b04      	cmp	r3, #4
 8003444:	d110      	bne.n	8003468 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003446:	7bbb      	ldrb	r3, [r7, #14]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d102      	bne.n	8003452 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800344c:	7b3b      	ldrb	r3, [r7, #12]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d001      	beq.n	8003456 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e055      	b.n	8003502 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003466:	e01d      	b.n	80034a4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d108      	bne.n	8003480 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800346e:	7bbb      	ldrb	r3, [r7, #14]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d105      	bne.n	8003480 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003474:	7b7b      	ldrb	r3, [r7, #13]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d102      	bne.n	8003480 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800347a:	7b3b      	ldrb	r3, [r7, #12]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d001      	beq.n	8003484 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e03e      	b.n	8003502 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_Encoder_Start+0xc4>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d008      	beq.n	80034c2 <HAL_TIM_Encoder_Start+0xd4>
 80034b0:	e00f      	b.n	80034d2 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2201      	movs	r2, #1
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fc24 	bl	8003d08 <TIM_CCxChannelCmd>
      break;
 80034c0:	e016      	b.n	80034f0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2201      	movs	r2, #1
 80034c8:	2104      	movs	r1, #4
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fc1c 	bl	8003d08 <TIM_CCxChannelCmd>
      break;
 80034d0:	e00e      	b.n	80034f0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2201      	movs	r2, #1
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fc14 	bl	8003d08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2201      	movs	r2, #1
 80034e6:	2104      	movs	r1, #4
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fc0d 	bl	8003d08 <TIM_CCxChannelCmd>
      break;
 80034ee:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b02      	cmp	r3, #2
 800351e:	d122      	bne.n	8003566 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d11b      	bne.n	8003566 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 0202 	mvn.w	r2, #2
 8003536:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f9b1 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 8003552:	e005      	b.n	8003560 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f9a3 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f9b4 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b04      	cmp	r3, #4
 8003572:	d122      	bne.n	80035ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d11b      	bne.n	80035ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f06f 0204 	mvn.w	r2, #4
 800358a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f987 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 80035a6:	e005      	b.n	80035b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f979 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f98a 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d122      	bne.n	800360e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d11b      	bne.n	800360e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f06f 0208 	mvn.w	r2, #8
 80035de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2204      	movs	r2, #4
 80035e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f95d 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 80035fa:	e005      	b.n	8003608 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f94f 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f960 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b10      	cmp	r3, #16
 800361a:	d122      	bne.n	8003662 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b10      	cmp	r3, #16
 8003628:	d11b      	bne.n	8003662 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f06f 0210 	mvn.w	r2, #16
 8003632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2208      	movs	r2, #8
 8003638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f933 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 800364e:	e005      	b.n	800365c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f925 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f936 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d10e      	bne.n	800368e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d107      	bne.n	800368e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f06f 0201 	mvn.w	r2, #1
 8003686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fd fb1b 	bl	8000cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003698:	2b80      	cmp	r3, #128	; 0x80
 800369a:	d10e      	bne.n	80036ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	2b80      	cmp	r3, #128	; 0x80
 80036a8:	d107      	bne.n	80036ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fbc5 	bl	8003e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d10e      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d107      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f8fb 	bl	80038dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d10e      	bne.n	8003712 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d107      	bne.n	8003712 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f06f 0220 	mvn.w	r2, #32
 800370a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fb8f 	bl	8003e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003736:	2302      	movs	r3, #2
 8003738:	e0ae      	b.n	8003898 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b0c      	cmp	r3, #12
 8003746:	f200 809f 	bhi.w	8003888 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800374a:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	08003785 	.word	0x08003785
 8003754:	08003889 	.word	0x08003889
 8003758:	08003889 	.word	0x08003889
 800375c:	08003889 	.word	0x08003889
 8003760:	080037c5 	.word	0x080037c5
 8003764:	08003889 	.word	0x08003889
 8003768:	08003889 	.word	0x08003889
 800376c:	08003889 	.word	0x08003889
 8003770:	08003807 	.word	0x08003807
 8003774:	08003889 	.word	0x08003889
 8003778:	08003889 	.word	0x08003889
 800377c:	08003889 	.word	0x08003889
 8003780:	08003847 	.word	0x08003847
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f930 	bl	80039f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0208 	orr.w	r2, r2, #8
 800379e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0204 	bic.w	r2, r2, #4
 80037ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6999      	ldr	r1, [r3, #24]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	619a      	str	r2, [r3, #24]
      break;
 80037c2:	e064      	b.n	800388e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f976 	bl	8003abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6999      	ldr	r1, [r3, #24]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	021a      	lsls	r2, r3, #8
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	619a      	str	r2, [r3, #24]
      break;
 8003804:	e043      	b.n	800388e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	4618      	mov	r0, r3
 800380e:	f000 f9c1 	bl	8003b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0208 	orr.w	r2, r2, #8
 8003820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0204 	bic.w	r2, r2, #4
 8003830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69d9      	ldr	r1, [r3, #28]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	61da      	str	r2, [r3, #28]
      break;
 8003844:	e023      	b.n	800388e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fa0b 	bl	8003c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69d9      	ldr	r1, [r3, #28]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	021a      	lsls	r2, r3, #8
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	61da      	str	r2, [r3, #28]
      break;
 8003886:	e002      	b.n	800388e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	75fb      	strb	r3, [r7, #23]
      break;
 800388c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003896:	7dfb      	ldrb	r3, [r7, #23]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a34      	ldr	r2, [pc, #208]	; (80039d4 <TIM_Base_SetConfig+0xe4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00f      	beq.n	8003928 <TIM_Base_SetConfig+0x38>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390e:	d00b      	beq.n	8003928 <TIM_Base_SetConfig+0x38>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a31      	ldr	r2, [pc, #196]	; (80039d8 <TIM_Base_SetConfig+0xe8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_Base_SetConfig+0x38>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a30      	ldr	r2, [pc, #192]	; (80039dc <TIM_Base_SetConfig+0xec>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0x38>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a2f      	ldr	r2, [pc, #188]	; (80039e0 <TIM_Base_SetConfig+0xf0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a25      	ldr	r2, [pc, #148]	; (80039d4 <TIM_Base_SetConfig+0xe4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d01b      	beq.n	800397a <TIM_Base_SetConfig+0x8a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d017      	beq.n	800397a <TIM_Base_SetConfig+0x8a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a22      	ldr	r2, [pc, #136]	; (80039d8 <TIM_Base_SetConfig+0xe8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <TIM_Base_SetConfig+0x8a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a21      	ldr	r2, [pc, #132]	; (80039dc <TIM_Base_SetConfig+0xec>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00f      	beq.n	800397a <TIM_Base_SetConfig+0x8a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <TIM_Base_SetConfig+0xf0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00b      	beq.n	800397a <TIM_Base_SetConfig+0x8a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a1f      	ldr	r2, [pc, #124]	; (80039e4 <TIM_Base_SetConfig+0xf4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d007      	beq.n	800397a <TIM_Base_SetConfig+0x8a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a1e      	ldr	r2, [pc, #120]	; (80039e8 <TIM_Base_SetConfig+0xf8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_Base_SetConfig+0x8a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <TIM_Base_SetConfig+0xfc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d108      	bne.n	800398c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <TIM_Base_SetConfig+0xe4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d103      	bne.n	80039c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	615a      	str	r2, [r3, #20]
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40010000 	.word	0x40010000
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800
 80039e0:	40000c00 	.word	0x40000c00
 80039e4:	40014000 	.word	0x40014000
 80039e8:	40014400 	.word	0x40014400
 80039ec:	40014800 	.word	0x40014800

080039f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f023 0201 	bic.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 0302 	bic.w	r3, r3, #2
 8003a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <TIM_OC1_SetConfig+0xc8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d10c      	bne.n	8003a66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 0308 	bic.w	r3, r3, #8
 8003a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <TIM_OC1_SetConfig+0xc8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d111      	bne.n	8003a92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	621a      	str	r2, [r3, #32]
}
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	40010000 	.word	0x40010000

08003abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f023 0210 	bic.w	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0320 	bic.w	r3, r3, #32
 8003b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <TIM_OC2_SetConfig+0xd4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d10d      	bne.n	8003b38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <TIM_OC2_SetConfig+0xd4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d113      	bne.n	8003b68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	621a      	str	r2, [r3, #32]
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000

08003b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <TIM_OC3_SetConfig+0xd0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10d      	bne.n	8003c0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <TIM_OC3_SetConfig+0xd0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d113      	bne.n	8003c3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	621a      	str	r2, [r3, #32]
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40010000 	.word	0x40010000

08003c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	031b      	lsls	r3, r3, #12
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <TIM_OC4_SetConfig+0x9c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d109      	bne.n	8003cdc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	019b      	lsls	r3, r3, #6
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	621a      	str	r2, [r3, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40010000 	.word	0x40010000

08003d08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a1a      	ldr	r2, [r3, #32]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a1a      	ldr	r2, [r3, #32]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d40:	431a      	orrs	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e050      	b.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d018      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db8:	d013      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a18      	ldr	r2, [pc, #96]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00e      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d10c      	bne.n	8003dfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003de8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40000400 	.word	0x40000400
 8003e24:	40000800 	.word	0x40000800
 8003e28:	40000c00 	.word	0x40000c00
 8003e2c:	40014000 	.word	0x40014000

08003e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <__NVIC_SetPriority>:
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	6039      	str	r1, [r7, #0]
 8003e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	db0a      	blt.n	8003e82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	490c      	ldr	r1, [pc, #48]	; (8003ea4 <__NVIC_SetPriority+0x4c>)
 8003e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e76:	0112      	lsls	r2, r2, #4
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e80:	e00a      	b.n	8003e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4908      	ldr	r1, [pc, #32]	; (8003ea8 <__NVIC_SetPriority+0x50>)
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	3b04      	subs	r3, #4
 8003e90:	0112      	lsls	r2, r2, #4
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	440b      	add	r3, r1
 8003e96:	761a      	strb	r2, [r3, #24]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000e100 	.word	0xe000e100
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <SysTick_Handler+0x1c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003eb4:	f001 ff12 	bl	8005cdc <xTaskGetSchedulerState>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d001      	beq.n	8003ec2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003ebe:	f002 fcfb 	bl	80068b8 <xPortSysTickHandler>
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	e000e010 	.word	0xe000e010

08003ecc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	f06f 0004 	mvn.w	r0, #4
 8003ed6:	f7ff ffbf 	bl	8003e58 <__NVIC_SetPriority>
#endif
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ee6:	f3ef 8305 	mrs	r3, IPSR
 8003eea:	603b      	str	r3, [r7, #0]
  return(result);
 8003eec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003ef2:	f06f 0305 	mvn.w	r3, #5
 8003ef6:	607b      	str	r3, [r7, #4]
 8003ef8:	e00c      	b.n	8003f14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <osKernelInitialize+0x44>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d105      	bne.n	8003f0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <osKernelInitialize+0x44>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	607b      	str	r3, [r7, #4]
 8003f0c:	e002      	b.n	8003f14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f14:	687b      	ldr	r3, [r7, #4]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20000298 	.word	0x20000298

08003f28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f2e:	f3ef 8305 	mrs	r3, IPSR
 8003f32:	603b      	str	r3, [r7, #0]
  return(result);
 8003f34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003f3a:	f06f 0305 	mvn.w	r3, #5
 8003f3e:	607b      	str	r3, [r7, #4]
 8003f40:	e010      	b.n	8003f64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <osKernelStart+0x48>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d109      	bne.n	8003f5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f4a:	f7ff ffbf 	bl	8003ecc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <osKernelStart+0x48>)
 8003f50:	2202      	movs	r2, #2
 8003f52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f54:	f001 fa66 	bl	8005424 <vTaskStartScheduler>
      stat = osOK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	607b      	str	r3, [r7, #4]
 8003f5c:	e002      	b.n	8003f64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f64:	687b      	ldr	r3, [r7, #4]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000298 	.word	0x20000298

08003f74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08e      	sub	sp, #56	; 0x38
 8003f78:	af04      	add	r7, sp, #16
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f84:	f3ef 8305 	mrs	r3, IPSR
 8003f88:	617b      	str	r3, [r7, #20]
  return(result);
 8003f8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d17e      	bne.n	800408e <osThreadNew+0x11a>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d07b      	beq.n	800408e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003f9a:	2318      	movs	r3, #24
 8003f9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d045      	beq.n	800403a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <osThreadNew+0x48>
        name = attr->name;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <osThreadNew+0x6e>
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b38      	cmp	r3, #56	; 0x38
 8003fd4:	d805      	bhi.n	8003fe2 <osThreadNew+0x6e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <osThreadNew+0x72>
        return (NULL);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e054      	b.n	8004090 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00e      	beq.n	800401c <osThreadNew+0xa8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2bbb      	cmp	r3, #187	; 0xbb
 8004004:	d90a      	bls.n	800401c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800400a:	2b00      	cmp	r3, #0
 800400c:	d006      	beq.n	800401c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <osThreadNew+0xa8>
        mem = 1;
 8004016:	2301      	movs	r3, #1
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	e010      	b.n	800403e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10c      	bne.n	800403e <osThreadNew+0xca>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d108      	bne.n	800403e <osThreadNew+0xca>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <osThreadNew+0xca>
          mem = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	e001      	b.n	800403e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d110      	bne.n	8004066 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800404c:	9202      	str	r2, [sp, #8]
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	6a3a      	ldr	r2, [r7, #32]
 8004058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fff6 	bl	800504c <xTaskCreateStatic>
 8004060:	4603      	mov	r3, r0
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	e013      	b.n	800408e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d110      	bne.n	800408e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	b29a      	uxth	r2, r3
 8004070:	f107 0310 	add.w	r3, r7, #16
 8004074:	9301      	str	r3, [sp, #4]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f001 f841 	bl	8005106 <xTaskCreate>
 8004084:	4603      	mov	r3, r0
 8004086:	2b01      	cmp	r3, #1
 8004088:	d001      	beq.n	800408e <osThreadNew+0x11a>
            hTask = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800408e:	693b      	ldr	r3, [r7, #16]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3728      	adds	r7, #40	; 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040a0:	f3ef 8305 	mrs	r3, IPSR
 80040a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80040a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <osDelay+0x1c>
    stat = osErrorISR;
 80040ac:	f06f 0305 	mvn.w	r3, #5
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	e007      	b.n	80040c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f001 f97c 	bl	80053bc <vTaskDelay>
    }
  }

  return (stat);
 80040c4:	68fb      	ldr	r3, [r7, #12]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b08a      	sub	sp, #40	; 0x28
 80040d2:	af02      	add	r7, sp, #8
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040de:	f3ef 8305 	mrs	r3, IPSR
 80040e2:	613b      	str	r3, [r7, #16]
  return(result);
 80040e4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d15f      	bne.n	80041aa <osMessageQueueNew+0xdc>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d05c      	beq.n	80041aa <osMessageQueueNew+0xdc>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d059      	beq.n	80041aa <osMessageQueueNew+0xdc>
    mem = -1;
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295
 80040fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d029      	beq.n	8004156 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d012      	beq.n	8004130 <osMessageQueueNew+0x62>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b4f      	cmp	r3, #79	; 0x4f
 8004110:	d90e      	bls.n	8004130 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	fb01 f303 	mul.w	r3, r1, r3
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <osMessageQueueNew+0x62>
        mem = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	e014      	b.n	800415a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d110      	bne.n	800415a <osMessageQueueNew+0x8c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10c      	bne.n	800415a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004144:	2b00      	cmp	r3, #0
 8004146:	d108      	bne.n	800415a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d104      	bne.n	800415a <osMessageQueueNew+0x8c>
          mem = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	e001      	b.n	800415a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d10b      	bne.n	8004178 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2100      	movs	r1, #0
 800416a:	9100      	str	r1, [sp, #0]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fa2e 	bl	80045d0 <xQueueGenericCreateStatic>
 8004174:	61f8      	str	r0, [r7, #28]
 8004176:	e008      	b.n	800418a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d105      	bne.n	800418a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800417e:	2200      	movs	r2, #0
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fa9c 	bl	80046c0 <xQueueGenericCreate>
 8004188:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00c      	beq.n	80041aa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <osMessageQueueNew+0xd0>
        name = attr->name;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e001      	b.n	80041a2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80041a2:	6979      	ldr	r1, [r7, #20]
 80041a4:	69f8      	ldr	r0, [r7, #28]
 80041a6:	f000 fef3 	bl	8004f90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80041aa:	69fb      	ldr	r3, [r7, #28]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3720      	adds	r7, #32
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041cc:	f3ef 8305 	mrs	r3, IPSR
 80041d0:	617b      	str	r3, [r7, #20]
  return(result);
 80041d2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d028      	beq.n	800422a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <osMessageQueuePut+0x36>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <osMessageQueuePut+0x36>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80041ea:	f06f 0303 	mvn.w	r3, #3
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	e038      	b.n	8004264 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80041f6:	f107 0210 	add.w	r2, r7, #16
 80041fa:	2300      	movs	r3, #0
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	69b8      	ldr	r0, [r7, #24]
 8004200:	f000 fbba 	bl	8004978 <xQueueGenericSendFromISR>
 8004204:	4603      	mov	r3, r0
 8004206:	2b01      	cmp	r3, #1
 8004208:	d003      	beq.n	8004212 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800420a:	f06f 0302 	mvn.w	r3, #2
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	e028      	b.n	8004264 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d025      	beq.n	8004264 <osMessageQueuePut+0xb0>
 8004218:	4b15      	ldr	r3, [pc, #84]	; (8004270 <osMessageQueuePut+0xbc>)
 800421a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	e01c      	b.n	8004264 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <osMessageQueuePut+0x82>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d103      	bne.n	800423e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004236:	f06f 0303 	mvn.w	r3, #3
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	e012      	b.n	8004264 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800423e:	2300      	movs	r3, #0
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	69b8      	ldr	r0, [r7, #24]
 8004246:	f000 fa99 	bl	800477c <xQueueGenericSend>
 800424a:	4603      	mov	r3, r0
 800424c:	2b01      	cmp	r3, #1
 800424e:	d009      	beq.n	8004264 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004256:	f06f 0301 	mvn.w	r3, #1
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	e002      	b.n	8004264 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800425e:	f06f 0302 	mvn.w	r3, #2
 8004262:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004264:	69fb      	ldr	r3, [r7, #28]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800428a:	f3ef 8305 	mrs	r3, IPSR
 800428e:	617b      	str	r3, [r7, #20]
  return(result);
 8004290:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004292:	2b00      	cmp	r3, #0
 8004294:	d028      	beq.n	80042e8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <osMessageQueueGet+0x34>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <osMessageQueueGet+0x34>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80042a8:	f06f 0303 	mvn.w	r3, #3
 80042ac:	61fb      	str	r3, [r7, #28]
 80042ae:	e037      	b.n	8004320 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80042b4:	f107 0310 	add.w	r3, r7, #16
 80042b8:	461a      	mov	r2, r3
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	69b8      	ldr	r0, [r7, #24]
 80042be:	f000 fcd7 	bl	8004c70 <xQueueReceiveFromISR>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d003      	beq.n	80042d0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80042c8:	f06f 0302 	mvn.w	r3, #2
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	e027      	b.n	8004320 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d024      	beq.n	8004320 <osMessageQueueGet+0xac>
 80042d6:	4b15      	ldr	r3, [pc, #84]	; (800432c <osMessageQueueGet+0xb8>)
 80042d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	e01b      	b.n	8004320 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <osMessageQueueGet+0x80>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d103      	bne.n	80042fc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80042f4:	f06f 0303 	mvn.w	r3, #3
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	e011      	b.n	8004320 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	69b8      	ldr	r0, [r7, #24]
 8004302:	f000 fbd5 	bl	8004ab0 <xQueueReceive>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d009      	beq.n	8004320 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004312:	f06f 0301 	mvn.w	r3, #1
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	e002      	b.n	8004320 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800431a:	f06f 0302 	mvn.w	r3, #2
 800431e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004320:	69fb      	ldr	r3, [r7, #28]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	e000ed04 	.word	0xe000ed04

08004330 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a07      	ldr	r2, [pc, #28]	; (800435c <vApplicationGetIdleTaskMemory+0x2c>)
 8004340:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4a06      	ldr	r2, [pc, #24]	; (8004360 <vApplicationGetIdleTaskMemory+0x30>)
 8004346:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2280      	movs	r2, #128	; 0x80
 800434c:	601a      	str	r2, [r3, #0]
}
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	2000029c 	.word	0x2000029c
 8004360:	20000358 	.word	0x20000358

08004364 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a07      	ldr	r2, [pc, #28]	; (8004390 <vApplicationGetTimerTaskMemory+0x2c>)
 8004374:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	4a06      	ldr	r2, [pc, #24]	; (8004394 <vApplicationGetTimerTaskMemory+0x30>)
 800437a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004382:	601a      	str	r2, [r3, #0]
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	20000558 	.word	0x20000558
 8004394:	20000614 	.word	0x20000614

08004398 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f103 0208 	add.w	r2, r3, #8
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f04f 32ff 	mov.w	r2, #4294967295
 80043b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f103 0208 	add.w	r2, r3, #8
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f103 0208 	add.w	r2, r3, #8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043f2:	b480      	push	{r7}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]
}
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004450:	d103      	bne.n	800445a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e00c      	b.n	8004474 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3308      	adds	r3, #8
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	e002      	b.n	8004468 <vListInsert+0x2e>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	429a      	cmp	r2, r3
 8004472:	d2f6      	bcs.n	8004462 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	601a      	str	r2, [r3, #0]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6892      	ldr	r2, [r2, #8]
 80044c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6852      	ldr	r2, [r2, #4]
 80044cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d103      	bne.n	80044e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	1e5a      	subs	r2, r3, #1
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800452a:	f002 f933 	bl	8006794 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004536:	68f9      	ldr	r1, [r7, #12]
 8004538:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800453a:	fb01 f303 	mul.w	r3, r1, r3
 800453e:	441a      	add	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455a:	3b01      	subs	r3, #1
 800455c:	68f9      	ldr	r1, [r7, #12]
 800455e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	441a      	add	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	22ff      	movs	r2, #255	; 0xff
 800456e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	22ff      	movs	r2, #255	; 0xff
 8004576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d114      	bne.n	80045aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01a      	beq.n	80045be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3310      	adds	r3, #16
 800458c:	4618      	mov	r0, r3
 800458e:	f001 f9e3 	bl	8005958 <xTaskRemoveFromEventList>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d012      	beq.n	80045be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004598:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <xQueueGenericReset+0xcc>)
 800459a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	e009      	b.n	80045be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3310      	adds	r3, #16
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff fef2 	bl	8004398 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3324      	adds	r3, #36	; 0x24
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff feed 	bl	8004398 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045be:	f002 f919 	bl	80067f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045c2:	2301      	movs	r3, #1
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	e000ed04 	.word	0xe000ed04

080045d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08e      	sub	sp, #56	; 0x38
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045f6:	bf00      	nop
 80045f8:	e7fe      	b.n	80045f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <xQueueGenericCreateStatic+0x52>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <xQueueGenericCreateStatic+0x56>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <xQueueGenericCreateStatic+0x58>
 8004626:	2300      	movs	r3, #0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	623b      	str	r3, [r7, #32]
}
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <xQueueGenericCreateStatic+0x7e>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <xQueueGenericCreateStatic+0x82>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <xQueueGenericCreateStatic+0x84>
 8004652:	2300      	movs	r3, #0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	61fb      	str	r3, [r7, #28]
}
 800466a:	bf00      	nop
 800466c:	e7fe      	b.n	800466c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800466e:	2350      	movs	r3, #80	; 0x50
 8004670:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b50      	cmp	r3, #80	; 0x50
 8004676:	d00a      	beq.n	800468e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	61bb      	str	r3, [r7, #24]
}
 800468a:	bf00      	nop
 800468c:	e7fe      	b.n	800468c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800468e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00d      	beq.n	80046b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	4613      	mov	r3, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f83f 	bl	8004734 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3730      	adds	r7, #48	; 0x30
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	4613      	mov	r3, r2
 80046cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10a      	bne.n	80046ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	613b      	str	r3, [r7, #16]
}
 80046e6:	bf00      	nop
 80046e8:	e7fe      	b.n	80046e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	3350      	adds	r3, #80	; 0x50
 80046f8:	4618      	mov	r0, r3
 80046fa:	f002 f96d 	bl	80069d8 <pvPortMalloc>
 80046fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d011      	beq.n	800472a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	3350      	adds	r3, #80	; 0x50
 800470e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004718:	79fa      	ldrb	r2, [r7, #7]
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4613      	mov	r3, r2
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f805 	bl	8004734 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800472a:	69bb      	ldr	r3, [r7, #24]
	}
 800472c:	4618      	mov	r0, r3
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d103      	bne.n	8004750 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e002      	b.n	8004756 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004762:	2101      	movs	r1, #1
 8004764:	69b8      	ldr	r0, [r7, #24]
 8004766:	f7ff fecb 	bl	8004500 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004772:	bf00      	nop
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08e      	sub	sp, #56	; 0x38
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800478a:	2300      	movs	r3, #0
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <xQueueGenericSend+0x32>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d103      	bne.n	80047bc <xQueueGenericSend+0x40>
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <xQueueGenericSend+0x44>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <xQueueGenericSend+0x46>
 80047c0:	2300      	movs	r3, #0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <xQueueGenericSend+0x60>
	__asm volatile
 80047c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047d8:	bf00      	nop
 80047da:	e7fe      	b.n	80047da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d103      	bne.n	80047ea <xQueueGenericSend+0x6e>
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <xQueueGenericSend+0x72>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <xQueueGenericSend+0x74>
 80047ee:	2300      	movs	r3, #0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <xQueueGenericSend+0x8e>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	623b      	str	r3, [r7, #32]
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800480a:	f001 fa67 	bl	8005cdc <xTaskGetSchedulerState>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d102      	bne.n	800481a <xQueueGenericSend+0x9e>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <xQueueGenericSend+0xa2>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <xQueueGenericSend+0xa4>
 800481e:	2300      	movs	r3, #0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10a      	bne.n	800483a <xQueueGenericSend+0xbe>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	61fb      	str	r3, [r7, #28]
}
 8004836:	bf00      	nop
 8004838:	e7fe      	b.n	8004838 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800483a:	f001 ffab 	bl	8006794 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004846:	429a      	cmp	r2, r3
 8004848:	d302      	bcc.n	8004850 <xQueueGenericSend+0xd4>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d129      	bne.n	80048a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004856:	f000 fa8b 	bl	8004d70 <prvCopyDataToQueue>
 800485a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	2b00      	cmp	r3, #0
 8004862:	d010      	beq.n	8004886 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	3324      	adds	r3, #36	; 0x24
 8004868:	4618      	mov	r0, r3
 800486a:	f001 f875 	bl	8005958 <xTaskRemoveFromEventList>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d013      	beq.n	800489c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004874:	4b3f      	ldr	r3, [pc, #252]	; (8004974 <xQueueGenericSend+0x1f8>)
 8004876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	e00a      	b.n	800489c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800488c:	4b39      	ldr	r3, [pc, #228]	; (8004974 <xQueueGenericSend+0x1f8>)
 800488e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800489c:	f001 ffaa 	bl	80067f4 <vPortExitCritical>
				return pdPASS;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e063      	b.n	800496c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048aa:	f001 ffa3 	bl	80067f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e05c      	b.n	800496c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d106      	bne.n	80048c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048b8:	f107 0314 	add.w	r3, r7, #20
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 f8af 	bl	8005a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048c6:	f001 ff95 	bl	80067f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048ca:	f000 fe1b 	bl	8005504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048ce:	f001 ff61 	bl	8006794 <vPortEnterCritical>
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048d8:	b25b      	sxtb	r3, r3
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048de:	d103      	bne.n	80048e8 <xQueueGenericSend+0x16c>
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ee:	b25b      	sxtb	r3, r3
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f4:	d103      	bne.n	80048fe <xQueueGenericSend+0x182>
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048fe:	f001 ff79 	bl	80067f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004902:	1d3a      	adds	r2, r7, #4
 8004904:	f107 0314 	add.w	r3, r7, #20
 8004908:	4611      	mov	r1, r2
 800490a:	4618      	mov	r0, r3
 800490c:	f001 f89e 	bl	8005a4c <xTaskCheckForTimeOut>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d124      	bne.n	8004960 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004916:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004918:	f000 fb22 	bl	8004f60 <prvIsQueueFull>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d018      	beq.n	8004954 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	3310      	adds	r3, #16
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	4611      	mov	r1, r2
 800492a:	4618      	mov	r0, r3
 800492c:	f000 ffc4 	bl	80058b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004932:	f000 faad 	bl	8004e90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004936:	f000 fdf3 	bl	8005520 <xTaskResumeAll>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	f47f af7c 	bne.w	800483a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004942:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <xQueueGenericSend+0x1f8>)
 8004944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	e772      	b.n	800483a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004956:	f000 fa9b 	bl	8004e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800495a:	f000 fde1 	bl	8005520 <xTaskResumeAll>
 800495e:	e76c      	b.n	800483a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004962:	f000 fa95 	bl	8004e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004966:	f000 fddb 	bl	8005520 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800496a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800496c:	4618      	mov	r0, r3
 800496e:	3738      	adds	r7, #56	; 0x38
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	e000ed04 	.word	0xe000ed04

08004978 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b090      	sub	sp, #64	; 0x40
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d103      	bne.n	80049b4 <xQueueGenericSendFromISR+0x3c>
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <xQueueGenericSendFromISR+0x40>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <xQueueGenericSendFromISR+0x42>
 80049b8:	2300      	movs	r3, #0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049d0:	bf00      	nop
 80049d2:	e7fe      	b.n	80049d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d103      	bne.n	80049e2 <xQueueGenericSendFromISR+0x6a>
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <xQueueGenericSendFromISR+0x6e>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <xQueueGenericSendFromISR+0x70>
 80049e6:	2300      	movs	r3, #0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	623b      	str	r3, [r7, #32]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a02:	f001 ffa9 	bl	8006958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a06:	f3ef 8211 	mrs	r2, BASEPRI
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	61fa      	str	r2, [r7, #28]
 8004a1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d302      	bcc.n	8004a34 <xQueueGenericSendFromISR+0xbc>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d12f      	bne.n	8004a94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a4a:	f000 f991 	bl	8004d70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	d112      	bne.n	8004a7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d016      	beq.n	8004a8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	3324      	adds	r3, #36	; 0x24
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 ff77 	bl	8005958 <xTaskRemoveFromEventList>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00e      	beq.n	8004a8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00b      	beq.n	8004a8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e007      	b.n	8004a8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a82:	3301      	adds	r3, #1
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	b25a      	sxtb	r2, r3
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004a92:	e001      	b.n	8004a98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004aa2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3740      	adds	r7, #64	; 0x40
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08c      	sub	sp, #48	; 0x30
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <xQueueReceive+0x30>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	623b      	str	r3, [r7, #32]
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d103      	bne.n	8004aee <xQueueReceive+0x3e>
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <xQueueReceive+0x42>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <xQueueReceive+0x44>
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <xQueueReceive+0x5e>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	61fb      	str	r3, [r7, #28]
}
 8004b0a:	bf00      	nop
 8004b0c:	e7fe      	b.n	8004b0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b0e:	f001 f8e5 	bl	8005cdc <xTaskGetSchedulerState>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <xQueueReceive+0x6e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <xQueueReceive+0x72>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <xQueueReceive+0x74>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <xQueueReceive+0x8e>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	61bb      	str	r3, [r7, #24]
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b3e:	f001 fe29 	bl	8006794 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01f      	beq.n	8004b8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b52:	f000 f977 	bl	8004e44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	1e5a      	subs	r2, r3, #1
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00f      	beq.n	8004b86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	3310      	adds	r3, #16
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fef4 	bl	8005958 <xTaskRemoveFromEventList>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b76:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <xQueueReceive+0x1bc>)
 8004b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b86:	f001 fe35 	bl	80067f4 <vPortExitCritical>
				return pdPASS;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e069      	b.n	8004c62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d103      	bne.n	8004b9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b94:	f001 fe2e 	bl	80067f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e062      	b.n	8004c62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ba2:	f107 0310 	add.w	r3, r7, #16
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 ff3a 	bl	8005a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bb0:	f001 fe20 	bl	80067f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bb4:	f000 fca6 	bl	8005504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bb8:	f001 fdec 	bl	8006794 <vPortEnterCritical>
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bc2:	b25b      	sxtb	r3, r3
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d103      	bne.n	8004bd2 <xQueueReceive+0x122>
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bd8:	b25b      	sxtb	r3, r3
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d103      	bne.n	8004be8 <xQueueReceive+0x138>
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be8:	f001 fe04 	bl	80067f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bec:	1d3a      	adds	r2, r7, #4
 8004bee:	f107 0310 	add.w	r3, r7, #16
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 ff29 	bl	8005a4c <xTaskCheckForTimeOut>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d123      	bne.n	8004c48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c02:	f000 f997 	bl	8004f34 <prvIsQueueEmpty>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d017      	beq.n	8004c3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	3324      	adds	r3, #36	; 0x24
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	4611      	mov	r1, r2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fe4f 	bl	80058b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c1c:	f000 f938 	bl	8004e90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c20:	f000 fc7e 	bl	8005520 <xTaskResumeAll>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d189      	bne.n	8004b3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c2a:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <xQueueReceive+0x1bc>)
 8004c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	e780      	b.n	8004b3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c3e:	f000 f927 	bl	8004e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c42:	f000 fc6d 	bl	8005520 <xTaskResumeAll>
 8004c46:	e77a      	b.n	8004b3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c4a:	f000 f921 	bl	8004e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c4e:	f000 fc67 	bl	8005520 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c54:	f000 f96e 	bl	8004f34 <prvIsQueueEmpty>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f43f af6f 	beq.w	8004b3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3730      	adds	r7, #48	; 0x30
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	e000ed04 	.word	0xe000ed04

08004c70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08e      	sub	sp, #56	; 0x38
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10a      	bne.n	8004c9c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	623b      	str	r3, [r7, #32]
}
 8004c98:	bf00      	nop
 8004c9a:	e7fe      	b.n	8004c9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <xQueueReceiveFromISR+0x3a>
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <xQueueReceiveFromISR+0x3e>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <xQueueReceiveFromISR+0x40>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	61fb      	str	r3, [r7, #28]
}
 8004cc6:	bf00      	nop
 8004cc8:	e7fe      	b.n	8004cc8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cca:	f001 fe45 	bl	8006958 <vPortValidateInterruptPriority>
	__asm volatile
 8004cce:	f3ef 8211 	mrs	r2, BASEPRI
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	61ba      	str	r2, [r7, #24]
 8004ce4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004ce6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d02f      	beq.n	8004d56 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d04:	f000 f89e 	bl	8004e44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	1e5a      	subs	r2, r3, #1
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004d10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d18:	d112      	bne.n	8004d40 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d016      	beq.n	8004d50 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	3310      	adds	r3, #16
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fe16 	bl	8005958 <xTaskRemoveFromEventList>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00e      	beq.n	8004d50 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00b      	beq.n	8004d50 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	e007      	b.n	8004d50 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d44:	3301      	adds	r3, #1
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	b25a      	sxtb	r2, r3
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004d50:	2301      	movs	r3, #1
 8004d52:	637b      	str	r3, [r7, #52]	; 0x34
 8004d54:	e001      	b.n	8004d5a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f383 8811 	msr	BASEPRI, r3
}
 8004d64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3738      	adds	r7, #56	; 0x38
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d14d      	bne.n	8004e32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 ffbc 	bl	8005d18 <xTaskPriorityDisinherit>
 8004da0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	e043      	b.n	8004e32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d119      	bne.n	8004de4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6858      	ldr	r0, [r3, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	461a      	mov	r2, r3
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	f002 f832 	bl	8006e24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	441a      	add	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d32b      	bcc.n	8004e32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	e026      	b.n	8004e32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	68d8      	ldr	r0, [r3, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	461a      	mov	r2, r3
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	f002 f818 	bl	8006e24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	425b      	negs	r3, r3
 8004dfe:	441a      	add	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d207      	bcs.n	8004e20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	425b      	negs	r3, r3
 8004e1a:	441a      	add	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d105      	bne.n	8004e32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e3a:	697b      	ldr	r3, [r7, #20]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d018      	beq.n	8004e88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	441a      	add	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d303      	bcc.n	8004e78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68d9      	ldr	r1, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	461a      	mov	r2, r3
 8004e82:	6838      	ldr	r0, [r7, #0]
 8004e84:	f001 ffce 	bl	8006e24 <memcpy>
	}
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e98:	f001 fc7c 	bl	8006794 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ea4:	e011      	b.n	8004eca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d012      	beq.n	8004ed4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3324      	adds	r3, #36	; 0x24
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fd50 	bl	8005958 <xTaskRemoveFromEventList>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ebe:	f000 fe27 	bl	8005b10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	dce9      	bgt.n	8004ea6 <prvUnlockQueue+0x16>
 8004ed2:	e000      	b.n	8004ed6 <prvUnlockQueue+0x46>
					break;
 8004ed4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	22ff      	movs	r2, #255	; 0xff
 8004eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ede:	f001 fc89 	bl	80067f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ee2:	f001 fc57 	bl	8006794 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eee:	e011      	b.n	8004f14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d012      	beq.n	8004f1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3310      	adds	r3, #16
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fd2b 	bl	8005958 <xTaskRemoveFromEventList>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f08:	f000 fe02 	bl	8005b10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f0c:	7bbb      	ldrb	r3, [r7, #14]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	dce9      	bgt.n	8004ef0 <prvUnlockQueue+0x60>
 8004f1c:	e000      	b.n	8004f20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	22ff      	movs	r2, #255	; 0xff
 8004f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f28:	f001 fc64 	bl	80067f4 <vPortExitCritical>
}
 8004f2c:	bf00      	nop
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f3c:	f001 fc2a 	bl	8006794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d102      	bne.n	8004f4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	e001      	b.n	8004f52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f52:	f001 fc4f 	bl	80067f4 <vPortExitCritical>

	return xReturn;
 8004f56:	68fb      	ldr	r3, [r7, #12]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f68:	f001 fc14 	bl	8006794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d102      	bne.n	8004f7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e001      	b.n	8004f82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f82:	f001 fc37 	bl	80067f4 <vPortExitCritical>

	return xReturn;
 8004f86:	68fb      	ldr	r3, [r7, #12]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	e014      	b.n	8004fca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fa0:	4a0f      	ldr	r2, [pc, #60]	; (8004fe0 <vQueueAddToRegistry+0x50>)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fac:	490c      	ldr	r1, [pc, #48]	; (8004fe0 <vQueueAddToRegistry+0x50>)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fb6:	4a0a      	ldr	r2, [pc, #40]	; (8004fe0 <vQueueAddToRegistry+0x50>)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fc2:	e006      	b.n	8004fd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b07      	cmp	r3, #7
 8004fce:	d9e7      	bls.n	8004fa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000a14 	.word	0x20000a14

08004fe4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ff4:	f001 fbce 	bl	8006794 <vPortEnterCritical>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d103      	bne.n	800500e <vQueueWaitForMessageRestricted+0x2a>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005014:	b25b      	sxtb	r3, r3
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501a:	d103      	bne.n	8005024 <vQueueWaitForMessageRestricted+0x40>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005024:	f001 fbe6 	bl	80067f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	2b00      	cmp	r3, #0
 800502e:	d106      	bne.n	800503e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	3324      	adds	r3, #36	; 0x24
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	4618      	mov	r0, r3
 800503a:	f000 fc61 	bl	8005900 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800503e:	6978      	ldr	r0, [r7, #20]
 8005040:	f7ff ff26 	bl	8004e90 <prvUnlockQueue>
	}
 8005044:	bf00      	nop
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08e      	sub	sp, #56	; 0x38
 8005050:	af04      	add	r7, sp, #16
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800505a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	623b      	str	r3, [r7, #32]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <xTaskCreateStatic+0x46>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	61fb      	str	r3, [r7, #28]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005092:	23bc      	movs	r3, #188	; 0xbc
 8005094:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2bbc      	cmp	r3, #188	; 0xbc
 800509a:	d00a      	beq.n	80050b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	61bb      	str	r3, [r7, #24]
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01e      	beq.n	80050f8 <xTaskCreateStatic+0xac>
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01b      	beq.n	80050f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	2202      	movs	r2, #2
 80050ce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050d2:	2300      	movs	r3, #0
 80050d4:	9303      	str	r3, [sp, #12]
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	9302      	str	r3, [sp, #8]
 80050da:	f107 0314 	add.w	r3, r7, #20
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f850 	bl	8005190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050f2:	f000 f8f3 	bl	80052dc <prvAddNewTaskToReadyList>
 80050f6:	e001      	b.n	80050fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050fc:	697b      	ldr	r3, [r7, #20]
	}
 80050fe:	4618      	mov	r0, r3
 8005100:	3728      	adds	r7, #40	; 0x28
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005106:	b580      	push	{r7, lr}
 8005108:	b08c      	sub	sp, #48	; 0x30
 800510a:	af04      	add	r7, sp, #16
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4618      	mov	r0, r3
 800511c:	f001 fc5c 	bl	80069d8 <pvPortMalloc>
 8005120:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00e      	beq.n	8005146 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005128:	20bc      	movs	r0, #188	; 0xbc
 800512a:	f001 fc55 	bl	80069d8 <pvPortMalloc>
 800512e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
 800513c:	e005      	b.n	800514a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800513e:	6978      	ldr	r0, [r7, #20]
 8005140:	f001 fd16 	bl	8006b70 <vPortFree>
 8005144:	e001      	b.n	800514a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d017      	beq.n	8005180 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005158:	88fa      	ldrh	r2, [r7, #6]
 800515a:	2300      	movs	r3, #0
 800515c:	9303      	str	r3, [sp, #12]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	9302      	str	r3, [sp, #8]
 8005162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f80e 	bl	8005190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005174:	69f8      	ldr	r0, [r7, #28]
 8005176:	f000 f8b1 	bl	80052dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800517a:	2301      	movs	r3, #1
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	e002      	b.n	8005186 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005180:	f04f 33ff 	mov.w	r3, #4294967295
 8005184:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005186:	69bb      	ldr	r3, [r7, #24]
	}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	461a      	mov	r2, r3
 80051a8:	21a5      	movs	r1, #165	; 0xa5
 80051aa:	f001 fe49 	bl	8006e40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051b8:	3b01      	subs	r3, #1
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f023 0307 	bic.w	r3, r3, #7
 80051c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	617b      	str	r3, [r7, #20]
}
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d01f      	beq.n	800522e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	e012      	b.n	800521a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	7819      	ldrb	r1, [r3, #0]
 80051fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	3334      	adds	r3, #52	; 0x34
 8005204:	460a      	mov	r2, r1
 8005206:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	4413      	add	r3, r2
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d006      	beq.n	8005222 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	3301      	adds	r3, #1
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	2b0f      	cmp	r3, #15
 800521e:	d9e9      	bls.n	80051f4 <prvInitialiseNewTask+0x64>
 8005220:	e000      	b.n	8005224 <prvInitialiseNewTask+0x94>
			{
				break;
 8005222:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800522c:	e003      	b.n	8005236 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	2b37      	cmp	r3, #55	; 0x37
 800523a:	d901      	bls.n	8005240 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800523c:	2337      	movs	r3, #55	; 0x37
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005244:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800524a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	2200      	movs	r2, #0
 8005250:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	3304      	adds	r3, #4
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff f8be 	bl	80043d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	3318      	adds	r3, #24
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff f8b9 	bl	80043d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800527a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	2200      	movs	r2, #0
 8005280:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	2200      	movs	r2, #0
 8005288:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	3354      	adds	r3, #84	; 0x54
 8005290:	2260      	movs	r2, #96	; 0x60
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f001 fdd3 	bl	8006e40 <memset>
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	4a0c      	ldr	r2, [pc, #48]	; (80052d0 <prvInitialiseNewTask+0x140>)
 800529e:	659a      	str	r2, [r3, #88]	; 0x58
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	4a0c      	ldr	r2, [pc, #48]	; (80052d4 <prvInitialiseNewTask+0x144>)
 80052a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	4a0b      	ldr	r2, [pc, #44]	; (80052d8 <prvInitialiseNewTask+0x148>)
 80052aa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	68f9      	ldr	r1, [r7, #12]
 80052b0:	69b8      	ldr	r0, [r7, #24]
 80052b2:	f001 f941 	bl	8006538 <pxPortInitialiseStack>
 80052b6:	4602      	mov	r2, r0
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052c8:	bf00      	nop
 80052ca:	3720      	adds	r7, #32
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	0800a278 	.word	0x0800a278
 80052d4:	0800a298 	.word	0x0800a298
 80052d8:	0800a258 	.word	0x0800a258

080052dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052e4:	f001 fa56 	bl	8006794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052e8:	4b2d      	ldr	r3, [pc, #180]	; (80053a0 <prvAddNewTaskToReadyList+0xc4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3301      	adds	r3, #1
 80052ee:	4a2c      	ldr	r2, [pc, #176]	; (80053a0 <prvAddNewTaskToReadyList+0xc4>)
 80052f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052f2:	4b2c      	ldr	r3, [pc, #176]	; (80053a4 <prvAddNewTaskToReadyList+0xc8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052fa:	4a2a      	ldr	r2, [pc, #168]	; (80053a4 <prvAddNewTaskToReadyList+0xc8>)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005300:	4b27      	ldr	r3, [pc, #156]	; (80053a0 <prvAddNewTaskToReadyList+0xc4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d110      	bne.n	800532a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005308:	f000 fc26 	bl	8005b58 <prvInitialiseTaskLists>
 800530c:	e00d      	b.n	800532a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800530e:	4b26      	ldr	r3, [pc, #152]	; (80053a8 <prvAddNewTaskToReadyList+0xcc>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005316:	4b23      	ldr	r3, [pc, #140]	; (80053a4 <prvAddNewTaskToReadyList+0xc8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	429a      	cmp	r2, r3
 8005322:	d802      	bhi.n	800532a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005324:	4a1f      	ldr	r2, [pc, #124]	; (80053a4 <prvAddNewTaskToReadyList+0xc8>)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800532a:	4b20      	ldr	r3, [pc, #128]	; (80053ac <prvAddNewTaskToReadyList+0xd0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3301      	adds	r3, #1
 8005330:	4a1e      	ldr	r2, [pc, #120]	; (80053ac <prvAddNewTaskToReadyList+0xd0>)
 8005332:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005334:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <prvAddNewTaskToReadyList+0xd0>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005340:	4b1b      	ldr	r3, [pc, #108]	; (80053b0 <prvAddNewTaskToReadyList+0xd4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d903      	bls.n	8005350 <prvAddNewTaskToReadyList+0x74>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	4a18      	ldr	r2, [pc, #96]	; (80053b0 <prvAddNewTaskToReadyList+0xd4>)
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4a15      	ldr	r2, [pc, #84]	; (80053b4 <prvAddNewTaskToReadyList+0xd8>)
 800535e:	441a      	add	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3304      	adds	r3, #4
 8005364:	4619      	mov	r1, r3
 8005366:	4610      	mov	r0, r2
 8005368:	f7ff f843 	bl	80043f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800536c:	f001 fa42 	bl	80067f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005370:	4b0d      	ldr	r3, [pc, #52]	; (80053a8 <prvAddNewTaskToReadyList+0xcc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00e      	beq.n	8005396 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005378:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <prvAddNewTaskToReadyList+0xc8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	429a      	cmp	r2, r3
 8005384:	d207      	bcs.n	8005396 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005386:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <prvAddNewTaskToReadyList+0xdc>)
 8005388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000f28 	.word	0x20000f28
 80053a4:	20000a54 	.word	0x20000a54
 80053a8:	20000f34 	.word	0x20000f34
 80053ac:	20000f44 	.word	0x20000f44
 80053b0:	20000f30 	.word	0x20000f30
 80053b4:	20000a58 	.word	0x20000a58
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d017      	beq.n	80053fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <vTaskDelay+0x60>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <vTaskDelay+0x30>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	60bb      	str	r3, [r7, #8]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053ec:	f000 f88a 	bl	8005504 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053f0:	2100      	movs	r1, #0
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fcfe 	bl	8005df4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053f8:	f000 f892 	bl	8005520 <xTaskResumeAll>
 80053fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d107      	bne.n	8005414 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005404:	4b06      	ldr	r3, [pc, #24]	; (8005420 <vTaskDelay+0x64>)
 8005406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000f50 	.word	0x20000f50
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	; 0x28
 8005428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005432:	463a      	mov	r2, r7
 8005434:	1d39      	adds	r1, r7, #4
 8005436:	f107 0308 	add.w	r3, r7, #8
 800543a:	4618      	mov	r0, r3
 800543c:	f7fe ff78 	bl	8004330 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	9202      	str	r2, [sp, #8]
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	2300      	movs	r3, #0
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	2300      	movs	r3, #0
 8005450:	460a      	mov	r2, r1
 8005452:	4924      	ldr	r1, [pc, #144]	; (80054e4 <vTaskStartScheduler+0xc0>)
 8005454:	4824      	ldr	r0, [pc, #144]	; (80054e8 <vTaskStartScheduler+0xc4>)
 8005456:	f7ff fdf9 	bl	800504c <xTaskCreateStatic>
 800545a:	4603      	mov	r3, r0
 800545c:	4a23      	ldr	r2, [pc, #140]	; (80054ec <vTaskStartScheduler+0xc8>)
 800545e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005460:	4b22      	ldr	r3, [pc, #136]	; (80054ec <vTaskStartScheduler+0xc8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e001      	b.n	8005472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d102      	bne.n	800547e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005478:	f000 fd10 	bl	8005e9c <xTimerCreateTimerTask>
 800547c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d11b      	bne.n	80054bc <vTaskStartScheduler+0x98>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	613b      	str	r3, [r7, #16]
}
 8005496:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005498:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <vTaskStartScheduler+0xcc>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3354      	adds	r3, #84	; 0x54
 800549e:	4a15      	ldr	r2, [pc, #84]	; (80054f4 <vTaskStartScheduler+0xd0>)
 80054a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054a2:	4b15      	ldr	r3, [pc, #84]	; (80054f8 <vTaskStartScheduler+0xd4>)
 80054a4:	f04f 32ff 	mov.w	r2, #4294967295
 80054a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054aa:	4b14      	ldr	r3, [pc, #80]	; (80054fc <vTaskStartScheduler+0xd8>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054b0:	4b13      	ldr	r3, [pc, #76]	; (8005500 <vTaskStartScheduler+0xdc>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054b6:	f001 f8cb 	bl	8006650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054ba:	e00e      	b.n	80054da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c2:	d10a      	bne.n	80054da <vTaskStartScheduler+0xb6>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	60fb      	str	r3, [r7, #12]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <vTaskStartScheduler+0xb4>
}
 80054da:	bf00      	nop
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	08007900 	.word	0x08007900
 80054e8:	08005b29 	.word	0x08005b29
 80054ec:	20000f4c 	.word	0x20000f4c
 80054f0:	20000a54 	.word	0x20000a54
 80054f4:	20000064 	.word	0x20000064
 80054f8:	20000f48 	.word	0x20000f48
 80054fc:	20000f34 	.word	0x20000f34
 8005500:	20000f2c 	.word	0x20000f2c

08005504 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005508:	4b04      	ldr	r3, [pc, #16]	; (800551c <vTaskSuspendAll+0x18>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3301      	adds	r3, #1
 800550e:	4a03      	ldr	r2, [pc, #12]	; (800551c <vTaskSuspendAll+0x18>)
 8005510:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005512:	bf00      	nop
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	20000f50 	.word	0x20000f50

08005520 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800552e:	4b42      	ldr	r3, [pc, #264]	; (8005638 <xTaskResumeAll+0x118>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <xTaskResumeAll+0x2c>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	603b      	str	r3, [r7, #0]
}
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800554c:	f001 f922 	bl	8006794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005550:	4b39      	ldr	r3, [pc, #228]	; (8005638 <xTaskResumeAll+0x118>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3b01      	subs	r3, #1
 8005556:	4a38      	ldr	r2, [pc, #224]	; (8005638 <xTaskResumeAll+0x118>)
 8005558:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800555a:	4b37      	ldr	r3, [pc, #220]	; (8005638 <xTaskResumeAll+0x118>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d162      	bne.n	8005628 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005562:	4b36      	ldr	r3, [pc, #216]	; (800563c <xTaskResumeAll+0x11c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d05e      	beq.n	8005628 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800556a:	e02f      	b.n	80055cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800556c:	4b34      	ldr	r3, [pc, #208]	; (8005640 <xTaskResumeAll+0x120>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3318      	adds	r3, #24
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe ff97 	bl	80044ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3304      	adds	r3, #4
 8005582:	4618      	mov	r0, r3
 8005584:	f7fe ff92 	bl	80044ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	4b2d      	ldr	r3, [pc, #180]	; (8005644 <xTaskResumeAll+0x124>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d903      	bls.n	800559c <xTaskResumeAll+0x7c>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	4a2a      	ldr	r2, [pc, #168]	; (8005644 <xTaskResumeAll+0x124>)
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4a27      	ldr	r2, [pc, #156]	; (8005648 <xTaskResumeAll+0x128>)
 80055aa:	441a      	add	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f7fe ff1d 	bl	80043f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055bc:	4b23      	ldr	r3, [pc, #140]	; (800564c <xTaskResumeAll+0x12c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d302      	bcc.n	80055cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80055c6:	4b22      	ldr	r3, [pc, #136]	; (8005650 <xTaskResumeAll+0x130>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055cc:	4b1c      	ldr	r3, [pc, #112]	; (8005640 <xTaskResumeAll+0x120>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1cb      	bne.n	800556c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055da:	f000 fb5f 	bl	8005c9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055de:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <xTaskResumeAll+0x134>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d010      	beq.n	800560c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055ea:	f000 f847 	bl	800567c <xTaskIncrementTick>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055f4:	4b16      	ldr	r3, [pc, #88]	; (8005650 <xTaskResumeAll+0x130>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f1      	bne.n	80055ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005606:	4b13      	ldr	r3, [pc, #76]	; (8005654 <xTaskResumeAll+0x134>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800560c:	4b10      	ldr	r3, [pc, #64]	; (8005650 <xTaskResumeAll+0x130>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005614:	2301      	movs	r3, #1
 8005616:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005618:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <xTaskResumeAll+0x138>)
 800561a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005628:	f001 f8e4 	bl	80067f4 <vPortExitCritical>

	return xAlreadyYielded;
 800562c:	68bb      	ldr	r3, [r7, #8]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000f50 	.word	0x20000f50
 800563c:	20000f28 	.word	0x20000f28
 8005640:	20000ee8 	.word	0x20000ee8
 8005644:	20000f30 	.word	0x20000f30
 8005648:	20000a58 	.word	0x20000a58
 800564c:	20000a54 	.word	0x20000a54
 8005650:	20000f3c 	.word	0x20000f3c
 8005654:	20000f38 	.word	0x20000f38
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005662:	4b05      	ldr	r3, [pc, #20]	; (8005678 <xTaskGetTickCount+0x1c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005668:	687b      	ldr	r3, [r7, #4]
}
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20000f2c 	.word	0x20000f2c

0800567c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005686:	4b4f      	ldr	r3, [pc, #316]	; (80057c4 <xTaskIncrementTick+0x148>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f040 808f 	bne.w	80057ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005690:	4b4d      	ldr	r3, [pc, #308]	; (80057c8 <xTaskIncrementTick+0x14c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3301      	adds	r3, #1
 8005696:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005698:	4a4b      	ldr	r2, [pc, #300]	; (80057c8 <xTaskIncrementTick+0x14c>)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d120      	bne.n	80056e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80056a4:	4b49      	ldr	r3, [pc, #292]	; (80057cc <xTaskIncrementTick+0x150>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	603b      	str	r3, [r7, #0]
}
 80056c0:	bf00      	nop
 80056c2:	e7fe      	b.n	80056c2 <xTaskIncrementTick+0x46>
 80056c4:	4b41      	ldr	r3, [pc, #260]	; (80057cc <xTaskIncrementTick+0x150>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <xTaskIncrementTick+0x154>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a3f      	ldr	r2, [pc, #252]	; (80057cc <xTaskIncrementTick+0x150>)
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	4a3f      	ldr	r2, [pc, #252]	; (80057d0 <xTaskIncrementTick+0x154>)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	4b3e      	ldr	r3, [pc, #248]	; (80057d4 <xTaskIncrementTick+0x158>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3301      	adds	r3, #1
 80056de:	4a3d      	ldr	r2, [pc, #244]	; (80057d4 <xTaskIncrementTick+0x158>)
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	f000 fadb 	bl	8005c9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056e6:	4b3c      	ldr	r3, [pc, #240]	; (80057d8 <xTaskIncrementTick+0x15c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d349      	bcc.n	8005784 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056f0:	4b36      	ldr	r3, [pc, #216]	; (80057cc <xTaskIncrementTick+0x150>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056fa:	4b37      	ldr	r3, [pc, #220]	; (80057d8 <xTaskIncrementTick+0x15c>)
 80056fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005700:	601a      	str	r2, [r3, #0]
					break;
 8005702:	e03f      	b.n	8005784 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005704:	4b31      	ldr	r3, [pc, #196]	; (80057cc <xTaskIncrementTick+0x150>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	429a      	cmp	r2, r3
 800571a:	d203      	bcs.n	8005724 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800571c:	4a2e      	ldr	r2, [pc, #184]	; (80057d8 <xTaskIncrementTick+0x15c>)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005722:	e02f      	b.n	8005784 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	3304      	adds	r3, #4
 8005728:	4618      	mov	r0, r3
 800572a:	f7fe febf 	bl	80044ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005732:	2b00      	cmp	r3, #0
 8005734:	d004      	beq.n	8005740 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	3318      	adds	r3, #24
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe feb6 	bl	80044ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	4b25      	ldr	r3, [pc, #148]	; (80057dc <xTaskIncrementTick+0x160>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d903      	bls.n	8005754 <xTaskIncrementTick+0xd8>
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	4a22      	ldr	r2, [pc, #136]	; (80057dc <xTaskIncrementTick+0x160>)
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4a1f      	ldr	r2, [pc, #124]	; (80057e0 <xTaskIncrementTick+0x164>)
 8005762:	441a      	add	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	3304      	adds	r3, #4
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f7fe fe41 	bl	80043f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	4b1b      	ldr	r3, [pc, #108]	; (80057e4 <xTaskIncrementTick+0x168>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	429a      	cmp	r2, r3
 800577c:	d3b8      	bcc.n	80056f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800577e:	2301      	movs	r3, #1
 8005780:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005782:	e7b5      	b.n	80056f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005784:	4b17      	ldr	r3, [pc, #92]	; (80057e4 <xTaskIncrementTick+0x168>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578a:	4915      	ldr	r1, [pc, #84]	; (80057e0 <xTaskIncrementTick+0x164>)
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d901      	bls.n	80057a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800579c:	2301      	movs	r3, #1
 800579e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057a0:	4b11      	ldr	r3, [pc, #68]	; (80057e8 <xTaskIncrementTick+0x16c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80057a8:	2301      	movs	r3, #1
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	e004      	b.n	80057b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057ae:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <xTaskIncrementTick+0x170>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3301      	adds	r3, #1
 80057b4:	4a0d      	ldr	r2, [pc, #52]	; (80057ec <xTaskIncrementTick+0x170>)
 80057b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057b8:	697b      	ldr	r3, [r7, #20]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000f50 	.word	0x20000f50
 80057c8:	20000f2c 	.word	0x20000f2c
 80057cc:	20000ee0 	.word	0x20000ee0
 80057d0:	20000ee4 	.word	0x20000ee4
 80057d4:	20000f40 	.word	0x20000f40
 80057d8:	20000f48 	.word	0x20000f48
 80057dc:	20000f30 	.word	0x20000f30
 80057e0:	20000a58 	.word	0x20000a58
 80057e4:	20000a54 	.word	0x20000a54
 80057e8:	20000f3c 	.word	0x20000f3c
 80057ec:	20000f38 	.word	0x20000f38

080057f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057f6:	4b2a      	ldr	r3, [pc, #168]	; (80058a0 <vTaskSwitchContext+0xb0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057fe:	4b29      	ldr	r3, [pc, #164]	; (80058a4 <vTaskSwitchContext+0xb4>)
 8005800:	2201      	movs	r2, #1
 8005802:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005804:	e046      	b.n	8005894 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005806:	4b27      	ldr	r3, [pc, #156]	; (80058a4 <vTaskSwitchContext+0xb4>)
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800580c:	4b26      	ldr	r3, [pc, #152]	; (80058a8 <vTaskSwitchContext+0xb8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	e010      	b.n	8005836 <vTaskSwitchContext+0x46>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10a      	bne.n	8005830 <vTaskSwitchContext+0x40>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	607b      	str	r3, [r7, #4]
}
 800582c:	bf00      	nop
 800582e:	e7fe      	b.n	800582e <vTaskSwitchContext+0x3e>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3b01      	subs	r3, #1
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	491d      	ldr	r1, [pc, #116]	; (80058ac <vTaskSwitchContext+0xbc>)
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0e4      	beq.n	8005814 <vTaskSwitchContext+0x24>
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4a15      	ldr	r2, [pc, #84]	; (80058ac <vTaskSwitchContext+0xbc>)
 8005856:	4413      	add	r3, r2
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	605a      	str	r2, [r3, #4]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	3308      	adds	r3, #8
 800586c:	429a      	cmp	r2, r3
 800586e:	d104      	bne.n	800587a <vTaskSwitchContext+0x8a>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4a0b      	ldr	r2, [pc, #44]	; (80058b0 <vTaskSwitchContext+0xc0>)
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	4a08      	ldr	r2, [pc, #32]	; (80058a8 <vTaskSwitchContext+0xb8>)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800588a:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <vTaskSwitchContext+0xc0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3354      	adds	r3, #84	; 0x54
 8005890:	4a08      	ldr	r2, [pc, #32]	; (80058b4 <vTaskSwitchContext+0xc4>)
 8005892:	6013      	str	r3, [r2, #0]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	20000f50 	.word	0x20000f50
 80058a4:	20000f3c 	.word	0x20000f3c
 80058a8:	20000f30 	.word	0x20000f30
 80058ac:	20000a58 	.word	0x20000a58
 80058b0:	20000a54 	.word	0x20000a54
 80058b4:	20000064 	.word	0x20000064

080058b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	60fb      	str	r3, [r7, #12]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058de:	4b07      	ldr	r3, [pc, #28]	; (80058fc <vTaskPlaceOnEventList+0x44>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3318      	adds	r3, #24
 80058e4:	4619      	mov	r1, r3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fe fda7 	bl	800443a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058ec:	2101      	movs	r1, #1
 80058ee:	6838      	ldr	r0, [r7, #0]
 80058f0:	f000 fa80 	bl	8005df4 <prvAddCurrentTaskToDelayedList>
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20000a54 	.word	0x20000a54

08005900 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	617b      	str	r3, [r7, #20]
}
 8005924:	bf00      	nop
 8005926:	e7fe      	b.n	8005926 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005928:	4b0a      	ldr	r3, [pc, #40]	; (8005954 <vTaskPlaceOnEventListRestricted+0x54>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3318      	adds	r3, #24
 800592e:	4619      	mov	r1, r3
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f7fe fd5e 	bl	80043f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800593c:	f04f 33ff 	mov.w	r3, #4294967295
 8005940:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	68b8      	ldr	r0, [r7, #8]
 8005946:	f000 fa55 	bl	8005df4 <prvAddCurrentTaskToDelayedList>
	}
 800594a:	bf00      	nop
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000a54 	.word	0x20000a54

08005958 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	60fb      	str	r3, [r7, #12]
}
 8005980:	bf00      	nop
 8005982:	e7fe      	b.n	8005982 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	3318      	adds	r3, #24
 8005988:	4618      	mov	r0, r3
 800598a:	f7fe fd8f 	bl	80044ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598e:	4b1e      	ldr	r3, [pc, #120]	; (8005a08 <xTaskRemoveFromEventList+0xb0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d11d      	bne.n	80059d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	3304      	adds	r3, #4
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe fd86 	bl	80044ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a4:	4b19      	ldr	r3, [pc, #100]	; (8005a0c <xTaskRemoveFromEventList+0xb4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d903      	bls.n	80059b4 <xTaskRemoveFromEventList+0x5c>
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	4a16      	ldr	r2, [pc, #88]	; (8005a0c <xTaskRemoveFromEventList+0xb4>)
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4a13      	ldr	r2, [pc, #76]	; (8005a10 <xTaskRemoveFromEventList+0xb8>)
 80059c2:	441a      	add	r2, r3
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	3304      	adds	r3, #4
 80059c8:	4619      	mov	r1, r3
 80059ca:	4610      	mov	r0, r2
 80059cc:	f7fe fd11 	bl	80043f2 <vListInsertEnd>
 80059d0:	e005      	b.n	80059de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	3318      	adds	r3, #24
 80059d6:	4619      	mov	r1, r3
 80059d8:	480e      	ldr	r0, [pc, #56]	; (8005a14 <xTaskRemoveFromEventList+0xbc>)
 80059da:	f7fe fd0a 	bl	80043f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <xTaskRemoveFromEventList+0xc0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d905      	bls.n	80059f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059ec:	2301      	movs	r3, #1
 80059ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059f0:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <xTaskRemoveFromEventList+0xc4>)
 80059f2:	2201      	movs	r2, #1
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e001      	b.n	80059fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059fc:	697b      	ldr	r3, [r7, #20]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000f50 	.word	0x20000f50
 8005a0c:	20000f30 	.word	0x20000f30
 8005a10:	20000a58 	.word	0x20000a58
 8005a14:	20000ee8 	.word	0x20000ee8
 8005a18:	20000a54 	.word	0x20000a54
 8005a1c:	20000f3c 	.word	0x20000f3c

08005a20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a28:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <vTaskInternalSetTimeOutState+0x24>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a30:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <vTaskInternalSetTimeOutState+0x28>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	605a      	str	r2, [r3, #4]
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	20000f40 	.word	0x20000f40
 8005a48:	20000f2c 	.word	0x20000f2c

08005a4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	613b      	str	r3, [r7, #16]
}
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	60fb      	str	r3, [r7, #12]
}
 8005a8a:	bf00      	nop
 8005a8c:	e7fe      	b.n	8005a8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a8e:	f000 fe81 	bl	8006794 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a92:	4b1d      	ldr	r3, [pc, #116]	; (8005b08 <xTaskCheckForTimeOut+0xbc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aaa:	d102      	bne.n	8005ab2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	e023      	b.n	8005afa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <xTaskCheckForTimeOut+0xc0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d007      	beq.n	8005ace <xTaskCheckForTimeOut+0x82>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d302      	bcc.n	8005ace <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	e015      	b.n	8005afa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d20b      	bcs.n	8005af0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	1ad2      	subs	r2, r2, r3
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff ff9b 	bl	8005a20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
 8005aee:	e004      	b.n	8005afa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005af6:	2301      	movs	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005afa:	f000 fe7b 	bl	80067f4 <vPortExitCritical>

	return xReturn;
 8005afe:	69fb      	ldr	r3, [r7, #28]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3720      	adds	r7, #32
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20000f2c 	.word	0x20000f2c
 8005b0c:	20000f40 	.word	0x20000f40

08005b10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b14:	4b03      	ldr	r3, [pc, #12]	; (8005b24 <vTaskMissedYield+0x14>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
}
 8005b1a:	bf00      	nop
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	20000f3c 	.word	0x20000f3c

08005b28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b30:	f000 f852 	bl	8005bd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b34:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <prvIdleTask+0x28>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d9f9      	bls.n	8005b30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b3c:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <prvIdleTask+0x2c>)
 8005b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b4c:	e7f0      	b.n	8005b30 <prvIdleTask+0x8>
 8005b4e:	bf00      	nop
 8005b50:	20000a58 	.word	0x20000a58
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b5e:	2300      	movs	r3, #0
 8005b60:	607b      	str	r3, [r7, #4]
 8005b62:	e00c      	b.n	8005b7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4a12      	ldr	r2, [pc, #72]	; (8005bb8 <prvInitialiseTaskLists+0x60>)
 8005b70:	4413      	add	r3, r2
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fe fc10 	bl	8004398 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	607b      	str	r3, [r7, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b37      	cmp	r3, #55	; 0x37
 8005b82:	d9ef      	bls.n	8005b64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b84:	480d      	ldr	r0, [pc, #52]	; (8005bbc <prvInitialiseTaskLists+0x64>)
 8005b86:	f7fe fc07 	bl	8004398 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b8a:	480d      	ldr	r0, [pc, #52]	; (8005bc0 <prvInitialiseTaskLists+0x68>)
 8005b8c:	f7fe fc04 	bl	8004398 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b90:	480c      	ldr	r0, [pc, #48]	; (8005bc4 <prvInitialiseTaskLists+0x6c>)
 8005b92:	f7fe fc01 	bl	8004398 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b96:	480c      	ldr	r0, [pc, #48]	; (8005bc8 <prvInitialiseTaskLists+0x70>)
 8005b98:	f7fe fbfe 	bl	8004398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b9c:	480b      	ldr	r0, [pc, #44]	; (8005bcc <prvInitialiseTaskLists+0x74>)
 8005b9e:	f7fe fbfb 	bl	8004398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <prvInitialiseTaskLists+0x78>)
 8005ba4:	4a05      	ldr	r2, [pc, #20]	; (8005bbc <prvInitialiseTaskLists+0x64>)
 8005ba6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <prvInitialiseTaskLists+0x7c>)
 8005baa:	4a05      	ldr	r2, [pc, #20]	; (8005bc0 <prvInitialiseTaskLists+0x68>)
 8005bac:	601a      	str	r2, [r3, #0]
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000a58 	.word	0x20000a58
 8005bbc:	20000eb8 	.word	0x20000eb8
 8005bc0:	20000ecc 	.word	0x20000ecc
 8005bc4:	20000ee8 	.word	0x20000ee8
 8005bc8:	20000efc 	.word	0x20000efc
 8005bcc:	20000f14 	.word	0x20000f14
 8005bd0:	20000ee0 	.word	0x20000ee0
 8005bd4:	20000ee4 	.word	0x20000ee4

08005bd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bde:	e019      	b.n	8005c14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005be0:	f000 fdd8 	bl	8006794 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be4:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <prvCheckTasksWaitingTermination+0x50>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fe fc5b 	bl	80044ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <prvCheckTasksWaitingTermination+0x54>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	4a0b      	ldr	r2, [pc, #44]	; (8005c2c <prvCheckTasksWaitingTermination+0x54>)
 8005bfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c00:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <prvCheckTasksWaitingTermination+0x58>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	4a0a      	ldr	r2, [pc, #40]	; (8005c30 <prvCheckTasksWaitingTermination+0x58>)
 8005c08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c0a:	f000 fdf3 	bl	80067f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f810 	bl	8005c34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c14:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <prvCheckTasksWaitingTermination+0x58>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e1      	bne.n	8005be0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000efc 	.word	0x20000efc
 8005c2c:	20000f28 	.word	0x20000f28
 8005c30:	20000f10 	.word	0x20000f10

08005c34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3354      	adds	r3, #84	; 0x54
 8005c40:	4618      	mov	r0, r3
 8005c42:	f001 f9f3 	bl	800702c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d108      	bne.n	8005c62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 ff8b 	bl	8006b70 <vPortFree>
				vPortFree( pxTCB );
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 ff88 	bl	8006b70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c60:	e018      	b.n	8005c94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d103      	bne.n	8005c74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 ff7f 	bl	8006b70 <vPortFree>
	}
 8005c72:	e00f      	b.n	8005c94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d00a      	beq.n	8005c94 <prvDeleteTCB+0x60>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	60fb      	str	r3, [r7, #12]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <prvDeleteTCB+0x5e>
	}
 8005c94:	bf00      	nop
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <prvResetNextTaskUnblockTime+0x38>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cac:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8005cae:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cb4:	e008      	b.n	8005cc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb6:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <prvResetNextTaskUnblockTime+0x38>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	4a04      	ldr	r2, [pc, #16]	; (8005cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8005cc6:	6013      	str	r3, [r2, #0]
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	20000ee0 	.word	0x20000ee0
 8005cd8:	20000f48 	.word	0x20000f48

08005cdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ce2:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <xTaskGetSchedulerState+0x34>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cea:	2301      	movs	r3, #1
 8005cec:	607b      	str	r3, [r7, #4]
 8005cee:	e008      	b.n	8005d02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf0:	4b08      	ldr	r3, [pc, #32]	; (8005d14 <xTaskGetSchedulerState+0x38>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	607b      	str	r3, [r7, #4]
 8005cfc:	e001      	b.n	8005d02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d02:	687b      	ldr	r3, [r7, #4]
	}
 8005d04:	4618      	mov	r0, r3
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	20000f34 	.word	0x20000f34
 8005d14:	20000f50 	.word	0x20000f50

08005d18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d056      	beq.n	8005ddc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d2e:	4b2e      	ldr	r3, [pc, #184]	; (8005de8 <xTaskPriorityDisinherit+0xd0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d00a      	beq.n	8005d4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	60fb      	str	r3, [r7, #12]
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10a      	bne.n	8005d6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	60bb      	str	r3, [r7, #8]
}
 8005d68:	bf00      	nop
 8005d6a:	e7fe      	b.n	8005d6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d70:	1e5a      	subs	r2, r3, #1
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d02c      	beq.n	8005ddc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d128      	bne.n	8005ddc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fe fb8c 	bl	80044ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dac:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <xTaskPriorityDisinherit+0xd4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d903      	bls.n	8005dbc <xTaskPriorityDisinherit+0xa4>
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	4a0c      	ldr	r2, [pc, #48]	; (8005dec <xTaskPriorityDisinherit+0xd4>)
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4a09      	ldr	r2, [pc, #36]	; (8005df0 <xTaskPriorityDisinherit+0xd8>)
 8005dca:	441a      	add	r2, r3
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	f7fe fb0d 	bl	80043f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ddc:	697b      	ldr	r3, [r7, #20]
	}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000a54 	.word	0x20000a54
 8005dec:	20000f30 	.word	0x20000f30
 8005df0:	20000a58 	.word	0x20000a58

08005df4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dfe:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e04:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe fb4e 	bl	80044ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e16:	d10a      	bne.n	8005e2e <prvAddCurrentTaskToDelayedList+0x3a>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d007      	beq.n	8005e2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e1e:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3304      	adds	r3, #4
 8005e24:	4619      	mov	r1, r3
 8005e26:	4819      	ldr	r0, [pc, #100]	; (8005e8c <prvAddCurrentTaskToDelayedList+0x98>)
 8005e28:	f7fe fae3 	bl	80043f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e2c:	e026      	b.n	8005e7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4413      	add	r3, r2
 8005e34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d209      	bcs.n	8005e5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e46:	4b12      	ldr	r3, [pc, #72]	; (8005e90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f7fe faf1 	bl	800443a <vListInsert>
}
 8005e58:	e010      	b.n	8005e7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e5a:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3304      	adds	r3, #4
 8005e64:	4619      	mov	r1, r3
 8005e66:	4610      	mov	r0, r2
 8005e68:	f7fe fae7 	bl	800443a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d202      	bcs.n	8005e7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e76:	4a08      	ldr	r2, [pc, #32]	; (8005e98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6013      	str	r3, [r2, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20000f2c 	.word	0x20000f2c
 8005e88:	20000a54 	.word	0x20000a54
 8005e8c:	20000f14 	.word	0x20000f14
 8005e90:	20000ee4 	.word	0x20000ee4
 8005e94:	20000ee0 	.word	0x20000ee0
 8005e98:	20000f48 	.word	0x20000f48

08005e9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	; 0x28
 8005ea0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ea6:	f000 fb07 	bl	80064b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005eaa:	4b1c      	ldr	r3, [pc, #112]	; (8005f1c <xTimerCreateTimerTask+0x80>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d021      	beq.n	8005ef6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005eba:	1d3a      	adds	r2, r7, #4
 8005ebc:	f107 0108 	add.w	r1, r7, #8
 8005ec0:	f107 030c 	add.w	r3, r7, #12
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fe fa4d 	bl	8004364 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	9202      	str	r2, [sp, #8]
 8005ed2:	9301      	str	r3, [sp, #4]
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	460a      	mov	r2, r1
 8005edc:	4910      	ldr	r1, [pc, #64]	; (8005f20 <xTimerCreateTimerTask+0x84>)
 8005ede:	4811      	ldr	r0, [pc, #68]	; (8005f24 <xTimerCreateTimerTask+0x88>)
 8005ee0:	f7ff f8b4 	bl	800504c <xTaskCreateStatic>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	4a10      	ldr	r2, [pc, #64]	; (8005f28 <xTimerCreateTimerTask+0x8c>)
 8005ee8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005eea:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <xTimerCreateTimerTask+0x8c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	613b      	str	r3, [r7, #16]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f12:	697b      	ldr	r3, [r7, #20]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	20000f84 	.word	0x20000f84
 8005f20:	08007908 	.word	0x08007908
 8005f24:	08006061 	.word	0x08006061
 8005f28:	20000f88 	.word	0x20000f88

08005f2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	; 0x28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	623b      	str	r3, [r7, #32]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f5a:	4b1a      	ldr	r3, [pc, #104]	; (8005fc4 <xTimerGenericCommand+0x98>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d02a      	beq.n	8005fb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b05      	cmp	r3, #5
 8005f72:	dc18      	bgt.n	8005fa6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f74:	f7ff feb2 	bl	8005cdc <xTaskGetSchedulerState>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d109      	bne.n	8005f92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f7e:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <xTimerGenericCommand+0x98>)
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	f107 0110 	add.w	r1, r7, #16
 8005f86:	2300      	movs	r3, #0
 8005f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f8a:	f7fe fbf7 	bl	800477c <xQueueGenericSend>
 8005f8e:	6278      	str	r0, [r7, #36]	; 0x24
 8005f90:	e012      	b.n	8005fb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f92:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <xTimerGenericCommand+0x98>)
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	f107 0110 	add.w	r1, r7, #16
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f7fe fbed 	bl	800477c <xQueueGenericSend>
 8005fa2:	6278      	str	r0, [r7, #36]	; 0x24
 8005fa4:	e008      	b.n	8005fb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005fa6:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <xTimerGenericCommand+0x98>)
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	f107 0110 	add.w	r1, r7, #16
 8005fae:	2300      	movs	r3, #0
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	f7fe fce1 	bl	8004978 <xQueueGenericSendFromISR>
 8005fb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3728      	adds	r7, #40	; 0x28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000f84 	.word	0x20000f84

08005fc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd2:	4b22      	ldr	r3, [pc, #136]	; (800605c <prvProcessExpiredTimer+0x94>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fe fa63 	bl	80044ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d022      	beq.n	800603a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	699a      	ldr	r2, [r3, #24]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	18d1      	adds	r1, r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	6978      	ldr	r0, [r7, #20]
 8006002:	f000 f8d1 	bl	80061a8 <prvInsertTimerInActiveList>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01f      	beq.n	800604c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800600c:	2300      	movs	r3, #0
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	2300      	movs	r3, #0
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	2100      	movs	r1, #0
 8006016:	6978      	ldr	r0, [r7, #20]
 8006018:	f7ff ff88 	bl	8005f2c <xTimerGenericCommand>
 800601c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d113      	bne.n	800604c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	60fb      	str	r3, [r7, #12]
}
 8006036:	bf00      	nop
 8006038:	e7fe      	b.n	8006038 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	b2da      	uxtb	r2, r3
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	6978      	ldr	r0, [r7, #20]
 8006052:	4798      	blx	r3
}
 8006054:	bf00      	nop
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20000f7c 	.word	0x20000f7c

08006060 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006068:	f107 0308 	add.w	r3, r7, #8
 800606c:	4618      	mov	r0, r3
 800606e:	f000 f857 	bl	8006120 <prvGetNextExpireTime>
 8006072:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4619      	mov	r1, r3
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f803 	bl	8006084 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800607e:	f000 f8d5 	bl	800622c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006082:	e7f1      	b.n	8006068 <prvTimerTask+0x8>

08006084 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800608e:	f7ff fa39 	bl	8005504 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006092:	f107 0308 	add.w	r3, r7, #8
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f866 	bl	8006168 <prvSampleTimeNow>
 800609c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d130      	bne.n	8006106 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <prvProcessTimerOrBlockTask+0x3c>
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d806      	bhi.n	80060c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80060b2:	f7ff fa35 	bl	8005520 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060b6:	68f9      	ldr	r1, [r7, #12]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff ff85 	bl	8005fc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060be:	e024      	b.n	800610a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060c6:	4b13      	ldr	r3, [pc, #76]	; (8006114 <prvProcessTimerOrBlockTask+0x90>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <prvProcessTimerOrBlockTask+0x50>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <prvProcessTimerOrBlockTask+0x52>
 80060d4:	2300      	movs	r3, #0
 80060d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060d8:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <prvProcessTimerOrBlockTask+0x94>)
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	4619      	mov	r1, r3
 80060e6:	f7fe ff7d 	bl	8004fe4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060ea:	f7ff fa19 	bl	8005520 <xTaskResumeAll>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060f4:	4b09      	ldr	r3, [pc, #36]	; (800611c <prvProcessTimerOrBlockTask+0x98>)
 80060f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	f3bf 8f6f 	isb	sy
}
 8006104:	e001      	b.n	800610a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006106:	f7ff fa0b 	bl	8005520 <xTaskResumeAll>
}
 800610a:	bf00      	nop
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20000f80 	.word	0x20000f80
 8006118:	20000f84 	.word	0x20000f84
 800611c:	e000ed04 	.word	0xe000ed04

08006120 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006128:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <prvGetNextExpireTime+0x44>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <prvGetNextExpireTime+0x16>
 8006132:	2201      	movs	r2, #1
 8006134:	e000      	b.n	8006138 <prvGetNextExpireTime+0x18>
 8006136:	2200      	movs	r2, #0
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d105      	bne.n	8006150 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006144:	4b07      	ldr	r3, [pc, #28]	; (8006164 <prvGetNextExpireTime+0x44>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	e001      	b.n	8006154 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006154:	68fb      	ldr	r3, [r7, #12]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20000f7c 	.word	0x20000f7c

08006168 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006170:	f7ff fa74 	bl	800565c <xTaskGetTickCount>
 8006174:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006176:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <prvSampleTimeNow+0x3c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	429a      	cmp	r2, r3
 800617e:	d205      	bcs.n	800618c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006180:	f000 f936 	bl	80063f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	e002      	b.n	8006192 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006192:	4a04      	ldr	r2, [pc, #16]	; (80061a4 <prvSampleTimeNow+0x3c>)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006198:	68fb      	ldr	r3, [r7, #12]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20000f8c 	.word	0x20000f8c

080061a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d812      	bhi.n	80061f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	1ad2      	subs	r2, r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d302      	bcc.n	80061e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061dc:	2301      	movs	r3, #1
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	e01b      	b.n	800621a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061e2:	4b10      	ldr	r3, [pc, #64]	; (8006224 <prvInsertTimerInActiveList+0x7c>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3304      	adds	r3, #4
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f7fe f924 	bl	800443a <vListInsert>
 80061f2:	e012      	b.n	800621a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d206      	bcs.n	800620a <prvInsertTimerInActiveList+0x62>
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d302      	bcc.n	800620a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006204:	2301      	movs	r3, #1
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	e007      	b.n	800621a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800620a:	4b07      	ldr	r3, [pc, #28]	; (8006228 <prvInsertTimerInActiveList+0x80>)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3304      	adds	r3, #4
 8006212:	4619      	mov	r1, r3
 8006214:	4610      	mov	r0, r2
 8006216:	f7fe f910 	bl	800443a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800621a:	697b      	ldr	r3, [r7, #20]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20000f80 	.word	0x20000f80
 8006228:	20000f7c 	.word	0x20000f7c

0800622c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08e      	sub	sp, #56	; 0x38
 8006230:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006232:	e0ca      	b.n	80063ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	da18      	bge.n	800626c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800623a:	1d3b      	adds	r3, r7, #4
 800623c:	3304      	adds	r3, #4
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10a      	bne.n	800625c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	61fb      	str	r3, [r7, #28]
}
 8006258:	bf00      	nop
 800625a:	e7fe      	b.n	800625a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006262:	6850      	ldr	r0, [r2, #4]
 8006264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006266:	6892      	ldr	r2, [r2, #8]
 8006268:	4611      	mov	r1, r2
 800626a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f2c0 80aa 	blt.w	80063c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d004      	beq.n	800628a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	3304      	adds	r3, #4
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe f911 	bl	80044ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800628a:	463b      	mov	r3, r7
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff ff6b 	bl	8006168 <prvSampleTimeNow>
 8006292:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b09      	cmp	r3, #9
 8006298:	f200 8097 	bhi.w	80063ca <prvProcessReceivedCommands+0x19e>
 800629c:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <prvProcessReceivedCommands+0x78>)
 800629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a2:	bf00      	nop
 80062a4:	080062cd 	.word	0x080062cd
 80062a8:	080062cd 	.word	0x080062cd
 80062ac:	080062cd 	.word	0x080062cd
 80062b0:	08006341 	.word	0x08006341
 80062b4:	08006355 	.word	0x08006355
 80062b8:	0800639f 	.word	0x0800639f
 80062bc:	080062cd 	.word	0x080062cd
 80062c0:	080062cd 	.word	0x080062cd
 80062c4:	08006341 	.word	0x08006341
 80062c8:	08006355 	.word	0x08006355
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062d2:	f043 0301 	orr.w	r3, r3, #1
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	18d1      	adds	r1, r2, r3
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ec:	f7ff ff5c 	bl	80061a8 <prvInsertTimerInActiveList>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d069      	beq.n	80063ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d05e      	beq.n	80063ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	441a      	add	r2, r3
 8006314:	2300      	movs	r3, #0
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	2300      	movs	r3, #0
 800631a:	2100      	movs	r1, #0
 800631c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800631e:	f7ff fe05 	bl	8005f2c <xTimerGenericCommand>
 8006322:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d14f      	bne.n	80063ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	61bb      	str	r3, [r7, #24]
}
 800633c:	bf00      	nop
 800633e:	e7fe      	b.n	800633e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006346:	f023 0301 	bic.w	r3, r3, #1
 800634a:	b2da      	uxtb	r2, r3
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006352:	e03a      	b.n	80063ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800635a:	f043 0301 	orr.w	r3, r3, #1
 800635e:	b2da      	uxtb	r2, r3
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	617b      	str	r3, [r7, #20]
}
 8006386:	bf00      	nop
 8006388:	e7fe      	b.n	8006388 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	18d1      	adds	r1, r2, r3
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006398:	f7ff ff06 	bl	80061a8 <prvInsertTimerInActiveList>
					break;
 800639c:	e015      	b.n	80063ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d103      	bne.n	80063b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80063ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ae:	f000 fbdf 	bl	8006b70 <vPortFree>
 80063b2:	e00a      	b.n	80063ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ba:	f023 0301 	bic.w	r3, r3, #1
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063c6:	e000      	b.n	80063ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80063c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063ca:	4b08      	ldr	r3, [pc, #32]	; (80063ec <prvProcessReceivedCommands+0x1c0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	1d39      	adds	r1, r7, #4
 80063d0:	2200      	movs	r2, #0
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe fb6c 	bl	8004ab0 <xQueueReceive>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f47f af2a 	bne.w	8006234 <prvProcessReceivedCommands+0x8>
	}
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	3730      	adds	r7, #48	; 0x30
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000f84 	.word	0x20000f84

080063f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063f6:	e048      	b.n	800648a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063f8:	4b2d      	ldr	r3, [pc, #180]	; (80064b0 <prvSwitchTimerLists+0xc0>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006402:	4b2b      	ldr	r3, [pc, #172]	; (80064b0 <prvSwitchTimerLists+0xc0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3304      	adds	r3, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe f84b 	bl	80044ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d02e      	beq.n	800648a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4413      	add	r3, r2
 8006434:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	429a      	cmp	r2, r3
 800643c:	d90e      	bls.n	800645c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800644a:	4b19      	ldr	r3, [pc, #100]	; (80064b0 <prvSwitchTimerLists+0xc0>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3304      	adds	r3, #4
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f7fd fff0 	bl	800443a <vListInsert>
 800645a:	e016      	b.n	800648a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800645c:	2300      	movs	r3, #0
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	2300      	movs	r3, #0
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	2100      	movs	r1, #0
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7ff fd60 	bl	8005f2c <xTimerGenericCommand>
 800646c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10a      	bne.n	800648a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	603b      	str	r3, [r7, #0]
}
 8006486:	bf00      	nop
 8006488:	e7fe      	b.n	8006488 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800648a:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <prvSwitchTimerLists+0xc0>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1b1      	bne.n	80063f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006494:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <prvSwitchTimerLists+0xc0>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800649a:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <prvSwitchTimerLists+0xc4>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a04      	ldr	r2, [pc, #16]	; (80064b0 <prvSwitchTimerLists+0xc0>)
 80064a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064a2:	4a04      	ldr	r2, [pc, #16]	; (80064b4 <prvSwitchTimerLists+0xc4>)
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	6013      	str	r3, [r2, #0]
}
 80064a8:	bf00      	nop
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000f7c 	.word	0x20000f7c
 80064b4:	20000f80 	.word	0x20000f80

080064b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064be:	f000 f969 	bl	8006794 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064c2:	4b15      	ldr	r3, [pc, #84]	; (8006518 <prvCheckForValidListAndQueue+0x60>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d120      	bne.n	800650c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064ca:	4814      	ldr	r0, [pc, #80]	; (800651c <prvCheckForValidListAndQueue+0x64>)
 80064cc:	f7fd ff64 	bl	8004398 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064d0:	4813      	ldr	r0, [pc, #76]	; (8006520 <prvCheckForValidListAndQueue+0x68>)
 80064d2:	f7fd ff61 	bl	8004398 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064d6:	4b13      	ldr	r3, [pc, #76]	; (8006524 <prvCheckForValidListAndQueue+0x6c>)
 80064d8:	4a10      	ldr	r2, [pc, #64]	; (800651c <prvCheckForValidListAndQueue+0x64>)
 80064da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064dc:	4b12      	ldr	r3, [pc, #72]	; (8006528 <prvCheckForValidListAndQueue+0x70>)
 80064de:	4a10      	ldr	r2, [pc, #64]	; (8006520 <prvCheckForValidListAndQueue+0x68>)
 80064e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064e2:	2300      	movs	r3, #0
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	4b11      	ldr	r3, [pc, #68]	; (800652c <prvCheckForValidListAndQueue+0x74>)
 80064e8:	4a11      	ldr	r2, [pc, #68]	; (8006530 <prvCheckForValidListAndQueue+0x78>)
 80064ea:	2110      	movs	r1, #16
 80064ec:	200a      	movs	r0, #10
 80064ee:	f7fe f86f 	bl	80045d0 <xQueueGenericCreateStatic>
 80064f2:	4603      	mov	r3, r0
 80064f4:	4a08      	ldr	r2, [pc, #32]	; (8006518 <prvCheckForValidListAndQueue+0x60>)
 80064f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064f8:	4b07      	ldr	r3, [pc, #28]	; (8006518 <prvCheckForValidListAndQueue+0x60>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006500:	4b05      	ldr	r3, [pc, #20]	; (8006518 <prvCheckForValidListAndQueue+0x60>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	490b      	ldr	r1, [pc, #44]	; (8006534 <prvCheckForValidListAndQueue+0x7c>)
 8006506:	4618      	mov	r0, r3
 8006508:	f7fe fd42 	bl	8004f90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800650c:	f000 f972 	bl	80067f4 <vPortExitCritical>
}
 8006510:	bf00      	nop
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000f84 	.word	0x20000f84
 800651c:	20000f54 	.word	0x20000f54
 8006520:	20000f68 	.word	0x20000f68
 8006524:	20000f7c 	.word	0x20000f7c
 8006528:	20000f80 	.word	0x20000f80
 800652c:	20001030 	.word	0x20001030
 8006530:	20000f90 	.word	0x20000f90
 8006534:	08007910 	.word	0x08007910

08006538 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3b04      	subs	r3, #4
 8006548:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3b04      	subs	r3, #4
 8006556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f023 0201 	bic.w	r2, r3, #1
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3b04      	subs	r3, #4
 8006566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006568:	4a0c      	ldr	r2, [pc, #48]	; (800659c <pxPortInitialiseStack+0x64>)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3b14      	subs	r3, #20
 8006572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3b04      	subs	r3, #4
 800657e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f06f 0202 	mvn.w	r2, #2
 8006586:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3b20      	subs	r3, #32
 800658c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800658e:	68fb      	ldr	r3, [r7, #12]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	080065a1 	.word	0x080065a1

080065a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065aa:	4b12      	ldr	r3, [pc, #72]	; (80065f4 <prvTaskExitError+0x54>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d00a      	beq.n	80065ca <prvTaskExitError+0x2a>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	60fb      	str	r3, [r7, #12]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <prvTaskExitError+0x28>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	60bb      	str	r3, [r7, #8]
}
 80065dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065de:	bf00      	nop
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0fc      	beq.n	80065e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065e6:	bf00      	nop
 80065e8:	bf00      	nop
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	20000060 	.word	0x20000060
	...

08006600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006600:	4b07      	ldr	r3, [pc, #28]	; (8006620 <pxCurrentTCBConst2>)
 8006602:	6819      	ldr	r1, [r3, #0]
 8006604:	6808      	ldr	r0, [r1, #0]
 8006606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660a:	f380 8809 	msr	PSP, r0
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f380 8811 	msr	BASEPRI, r0
 800661a:	4770      	bx	lr
 800661c:	f3af 8000 	nop.w

08006620 <pxCurrentTCBConst2>:
 8006620:	20000a54 	.word	0x20000a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop

08006628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006628:	4808      	ldr	r0, [pc, #32]	; (800664c <prvPortStartFirstTask+0x24>)
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	6800      	ldr	r0, [r0, #0]
 800662e:	f380 8808 	msr	MSP, r0
 8006632:	f04f 0000 	mov.w	r0, #0
 8006636:	f380 8814 	msr	CONTROL, r0
 800663a:	b662      	cpsie	i
 800663c:	b661      	cpsie	f
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	df00      	svc	0
 8006648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800664a:	bf00      	nop
 800664c:	e000ed08 	.word	0xe000ed08

08006650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006656:	4b46      	ldr	r3, [pc, #280]	; (8006770 <xPortStartScheduler+0x120>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a46      	ldr	r2, [pc, #280]	; (8006774 <xPortStartScheduler+0x124>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d10a      	bne.n	8006676 <xPortStartScheduler+0x26>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	613b      	str	r3, [r7, #16]
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006676:	4b3e      	ldr	r3, [pc, #248]	; (8006770 <xPortStartScheduler+0x120>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a3f      	ldr	r2, [pc, #252]	; (8006778 <xPortStartScheduler+0x128>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d10a      	bne.n	8006696 <xPortStartScheduler+0x46>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	60fb      	str	r3, [r7, #12]
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006696:	4b39      	ldr	r3, [pc, #228]	; (800677c <xPortStartScheduler+0x12c>)
 8006698:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	22ff      	movs	r2, #255	; 0xff
 80066a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	4b31      	ldr	r3, [pc, #196]	; (8006780 <xPortStartScheduler+0x130>)
 80066bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066be:	4b31      	ldr	r3, [pc, #196]	; (8006784 <xPortStartScheduler+0x134>)
 80066c0:	2207      	movs	r2, #7
 80066c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066c4:	e009      	b.n	80066da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80066c6:	4b2f      	ldr	r3, [pc, #188]	; (8006784 <xPortStartScheduler+0x134>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	4a2d      	ldr	r2, [pc, #180]	; (8006784 <xPortStartScheduler+0x134>)
 80066ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e2:	2b80      	cmp	r3, #128	; 0x80
 80066e4:	d0ef      	beq.n	80066c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066e6:	4b27      	ldr	r3, [pc, #156]	; (8006784 <xPortStartScheduler+0x134>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f1c3 0307 	rsb	r3, r3, #7
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d00a      	beq.n	8006708 <xPortStartScheduler+0xb8>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	60bb      	str	r3, [r7, #8]
}
 8006704:	bf00      	nop
 8006706:	e7fe      	b.n	8006706 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006708:	4b1e      	ldr	r3, [pc, #120]	; (8006784 <xPortStartScheduler+0x134>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	4a1d      	ldr	r2, [pc, #116]	; (8006784 <xPortStartScheduler+0x134>)
 8006710:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006712:	4b1c      	ldr	r3, [pc, #112]	; (8006784 <xPortStartScheduler+0x134>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800671a:	4a1a      	ldr	r2, [pc, #104]	; (8006784 <xPortStartScheduler+0x134>)
 800671c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	b2da      	uxtb	r2, r3
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006726:	4b18      	ldr	r3, [pc, #96]	; (8006788 <xPortStartScheduler+0x138>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a17      	ldr	r2, [pc, #92]	; (8006788 <xPortStartScheduler+0x138>)
 800672c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <xPortStartScheduler+0x138>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a14      	ldr	r2, [pc, #80]	; (8006788 <xPortStartScheduler+0x138>)
 8006738:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800673c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800673e:	f000 f8dd 	bl	80068fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006742:	4b12      	ldr	r3, [pc, #72]	; (800678c <xPortStartScheduler+0x13c>)
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006748:	f000 f8fc 	bl	8006944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800674c:	4b10      	ldr	r3, [pc, #64]	; (8006790 <xPortStartScheduler+0x140>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a0f      	ldr	r2, [pc, #60]	; (8006790 <xPortStartScheduler+0x140>)
 8006752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006756:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006758:	f7ff ff66 	bl	8006628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800675c:	f7ff f848 	bl	80057f0 <vTaskSwitchContext>
	prvTaskExitError();
 8006760:	f7ff ff1e 	bl	80065a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	e000ed00 	.word	0xe000ed00
 8006774:	410fc271 	.word	0x410fc271
 8006778:	410fc270 	.word	0x410fc270
 800677c:	e000e400 	.word	0xe000e400
 8006780:	20001080 	.word	0x20001080
 8006784:	20001084 	.word	0x20001084
 8006788:	e000ed20 	.word	0xe000ed20
 800678c:	20000060 	.word	0x20000060
 8006790:	e000ef34 	.word	0xe000ef34

08006794 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	607b      	str	r3, [r7, #4]
}
 80067ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067ae:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <vPortEnterCritical+0x58>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3301      	adds	r3, #1
 80067b4:	4a0d      	ldr	r2, [pc, #52]	; (80067ec <vPortEnterCritical+0x58>)
 80067b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <vPortEnterCritical+0x58>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d10f      	bne.n	80067e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <vPortEnterCritical+0x5c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	603b      	str	r3, [r7, #0]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <vPortEnterCritical+0x4a>
	}
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	20000060 	.word	0x20000060
 80067f0:	e000ed04 	.word	0xe000ed04

080067f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067fa:	4b12      	ldr	r3, [pc, #72]	; (8006844 <vPortExitCritical+0x50>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <vPortExitCritical+0x24>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	607b      	str	r3, [r7, #4]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <vPortExitCritical+0x50>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3b01      	subs	r3, #1
 800681e:	4a09      	ldr	r2, [pc, #36]	; (8006844 <vPortExitCritical+0x50>)
 8006820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006822:	4b08      	ldr	r3, [pc, #32]	; (8006844 <vPortExitCritical+0x50>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <vPortExitCritical+0x42>
 800682a:	2300      	movs	r3, #0
 800682c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	f383 8811 	msr	BASEPRI, r3
}
 8006834:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000060 	.word	0x20000060
	...

08006850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006850:	f3ef 8009 	mrs	r0, PSP
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <pxCurrentTCBConst>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	f01e 0f10 	tst.w	lr, #16
 8006860:	bf08      	it	eq
 8006862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686a:	6010      	str	r0, [r2, #0]
 800686c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006874:	f380 8811 	msr	BASEPRI, r0
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f7fe ffb6 	bl	80057f0 <vTaskSwitchContext>
 8006884:	f04f 0000 	mov.w	r0, #0
 8006888:	f380 8811 	msr	BASEPRI, r0
 800688c:	bc09      	pop	{r0, r3}
 800688e:	6819      	ldr	r1, [r3, #0]
 8006890:	6808      	ldr	r0, [r1, #0]
 8006892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006896:	f01e 0f10 	tst.w	lr, #16
 800689a:	bf08      	it	eq
 800689c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068a0:	f380 8809 	msr	PSP, r0
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	f3af 8000 	nop.w

080068b0 <pxCurrentTCBConst>:
 80068b0:	20000a54 	.word	0x20000a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop

080068b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	607b      	str	r3, [r7, #4]
}
 80068d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068d2:	f7fe fed3 	bl	800567c <xTaskIncrementTick>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <xPortSysTickHandler+0x40>)
 80068de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	2300      	movs	r3, #0
 80068e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	f383 8811 	msr	BASEPRI, r3
}
 80068ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006900:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <vPortSetupTimerInterrupt+0x34>)
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006906:	4b0b      	ldr	r3, [pc, #44]	; (8006934 <vPortSetupTimerInterrupt+0x38>)
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800690c:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <vPortSetupTimerInterrupt+0x3c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a0a      	ldr	r2, [pc, #40]	; (800693c <vPortSetupTimerInterrupt+0x40>)
 8006912:	fba2 2303 	umull	r2, r3, r2, r3
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	4a09      	ldr	r2, [pc, #36]	; (8006940 <vPortSetupTimerInterrupt+0x44>)
 800691a:	3b01      	subs	r3, #1
 800691c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800691e:	4b04      	ldr	r3, [pc, #16]	; (8006930 <vPortSetupTimerInterrupt+0x34>)
 8006920:	2207      	movs	r2, #7
 8006922:	601a      	str	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	e000e010 	.word	0xe000e010
 8006934:	e000e018 	.word	0xe000e018
 8006938:	20000054 	.word	0x20000054
 800693c:	10624dd3 	.word	0x10624dd3
 8006940:	e000e014 	.word	0xe000e014

08006944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006954 <vPortEnableVFP+0x10>
 8006948:	6801      	ldr	r1, [r0, #0]
 800694a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800694e:	6001      	str	r1, [r0, #0]
 8006950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006952:	bf00      	nop
 8006954:	e000ed88 	.word	0xe000ed88

08006958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800695e:	f3ef 8305 	mrs	r3, IPSR
 8006962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b0f      	cmp	r3, #15
 8006968:	d914      	bls.n	8006994 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800696a:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <vPortValidateInterruptPriority+0x70>)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006974:	4b15      	ldr	r3, [pc, #84]	; (80069cc <vPortValidateInterruptPriority+0x74>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	7afa      	ldrb	r2, [r7, #11]
 800697a:	429a      	cmp	r2, r3
 800697c:	d20a      	bcs.n	8006994 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	607b      	str	r3, [r7, #4]
}
 8006990:	bf00      	nop
 8006992:	e7fe      	b.n	8006992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006994:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <vPortValidateInterruptPriority+0x78>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800699c:	4b0d      	ldr	r3, [pc, #52]	; (80069d4 <vPortValidateInterruptPriority+0x7c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d90a      	bls.n	80069ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	603b      	str	r3, [r7, #0]
}
 80069b6:	bf00      	nop
 80069b8:	e7fe      	b.n	80069b8 <vPortValidateInterruptPriority+0x60>
	}
 80069ba:	bf00      	nop
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	e000e3f0 	.word	0xe000e3f0
 80069cc:	20001080 	.word	0x20001080
 80069d0:	e000ed0c 	.word	0xe000ed0c
 80069d4:	20001084 	.word	0x20001084

080069d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08a      	sub	sp, #40	; 0x28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069e4:	f7fe fd8e 	bl	8005504 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069e8:	4b5b      	ldr	r3, [pc, #364]	; (8006b58 <pvPortMalloc+0x180>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069f0:	f000 f920 	bl	8006c34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069f4:	4b59      	ldr	r3, [pc, #356]	; (8006b5c <pvPortMalloc+0x184>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f040 8093 	bne.w	8006b28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d01d      	beq.n	8006a44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a08:	2208      	movs	r2, #8
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d014      	beq.n	8006a44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f023 0307 	bic.w	r3, r3, #7
 8006a20:	3308      	adds	r3, #8
 8006a22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <pvPortMalloc+0x6c>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	617b      	str	r3, [r7, #20]
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d06e      	beq.n	8006b28 <pvPortMalloc+0x150>
 8006a4a:	4b45      	ldr	r3, [pc, #276]	; (8006b60 <pvPortMalloc+0x188>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d869      	bhi.n	8006b28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a54:	4b43      	ldr	r3, [pc, #268]	; (8006b64 <pvPortMalloc+0x18c>)
 8006a56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a58:	4b42      	ldr	r3, [pc, #264]	; (8006b64 <pvPortMalloc+0x18c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a5e:	e004      	b.n	8006a6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d903      	bls.n	8006a7c <pvPortMalloc+0xa4>
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1f1      	bne.n	8006a60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a7c:	4b36      	ldr	r3, [pc, #216]	; (8006b58 <pvPortMalloc+0x180>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d050      	beq.n	8006b28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	4413      	add	r3, r2
 8006a8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d91f      	bls.n	8006ae8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4413      	add	r3, r2
 8006aae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <pvPortMalloc+0xf8>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	613b      	str	r3, [r7, #16]
}
 8006acc:	bf00      	nop
 8006ace:	e7fe      	b.n	8006ace <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	1ad2      	subs	r2, r2, r3
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ae2:	69b8      	ldr	r0, [r7, #24]
 8006ae4:	f000 f908 	bl	8006cf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ae8:	4b1d      	ldr	r3, [pc, #116]	; (8006b60 <pvPortMalloc+0x188>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	4a1b      	ldr	r2, [pc, #108]	; (8006b60 <pvPortMalloc+0x188>)
 8006af4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006af6:	4b1a      	ldr	r3, [pc, #104]	; (8006b60 <pvPortMalloc+0x188>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b1b      	ldr	r3, [pc, #108]	; (8006b68 <pvPortMalloc+0x190>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d203      	bcs.n	8006b0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b02:	4b17      	ldr	r3, [pc, #92]	; (8006b60 <pvPortMalloc+0x188>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a18      	ldr	r2, [pc, #96]	; (8006b68 <pvPortMalloc+0x190>)
 8006b08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	4b13      	ldr	r3, [pc, #76]	; (8006b5c <pvPortMalloc+0x184>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b1e:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <pvPortMalloc+0x194>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3301      	adds	r3, #1
 8006b24:	4a11      	ldr	r2, [pc, #68]	; (8006b6c <pvPortMalloc+0x194>)
 8006b26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b28:	f7fe fcfa 	bl	8005520 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <pvPortMalloc+0x174>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	60fb      	str	r3, [r7, #12]
}
 8006b48:	bf00      	nop
 8006b4a:	e7fe      	b.n	8006b4a <pvPortMalloc+0x172>
	return pvReturn;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3728      	adds	r7, #40	; 0x28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20004c90 	.word	0x20004c90
 8006b5c:	20004ca4 	.word	0x20004ca4
 8006b60:	20004c94 	.word	0x20004c94
 8006b64:	20004c88 	.word	0x20004c88
 8006b68:	20004c98 	.word	0x20004c98
 8006b6c:	20004c9c 	.word	0x20004c9c

08006b70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d04d      	beq.n	8006c1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b82:	2308      	movs	r3, #8
 8006b84:	425b      	negs	r3, r3
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	4413      	add	r3, r2
 8006b8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	4b24      	ldr	r3, [pc, #144]	; (8006c28 <vPortFree+0xb8>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <vPortFree+0x44>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	60fb      	str	r3, [r7, #12]
}
 8006bb0:	bf00      	nop
 8006bb2:	e7fe      	b.n	8006bb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <vPortFree+0x62>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	60bb      	str	r3, [r7, #8]
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <vPortFree+0xb8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01e      	beq.n	8006c1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d11a      	bne.n	8006c1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <vPortFree+0xb8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	401a      	ands	r2, r3
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bf8:	f7fe fc84 	bl	8005504 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	4b0a      	ldr	r3, [pc, #40]	; (8006c2c <vPortFree+0xbc>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4413      	add	r3, r2
 8006c06:	4a09      	ldr	r2, [pc, #36]	; (8006c2c <vPortFree+0xbc>)
 8006c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c0a:	6938      	ldr	r0, [r7, #16]
 8006c0c:	f000 f874 	bl	8006cf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c10:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <vPortFree+0xc0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	4a06      	ldr	r2, [pc, #24]	; (8006c30 <vPortFree+0xc0>)
 8006c18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c1a:	f7fe fc81 	bl	8005520 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c1e:	bf00      	nop
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20004ca4 	.word	0x20004ca4
 8006c2c:	20004c94 	.word	0x20004c94
 8006c30:	20004ca0 	.word	0x20004ca0

08006c34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c40:	4b27      	ldr	r3, [pc, #156]	; (8006ce0 <prvHeapInit+0xac>)
 8006c42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00c      	beq.n	8006c68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3307      	adds	r3, #7
 8006c52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0307 	bic.w	r3, r3, #7
 8006c5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	4a1f      	ldr	r2, [pc, #124]	; (8006ce0 <prvHeapInit+0xac>)
 8006c64:	4413      	add	r3, r2
 8006c66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ce4 <prvHeapInit+0xb0>)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c72:	4b1c      	ldr	r3, [pc, #112]	; (8006ce4 <prvHeapInit+0xb0>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c80:	2208      	movs	r2, #8
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	1a9b      	subs	r3, r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0307 	bic.w	r3, r3, #7
 8006c8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a15      	ldr	r2, [pc, #84]	; (8006ce8 <prvHeapInit+0xb4>)
 8006c94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c96:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <prvHeapInit+0xb4>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c9e:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <prvHeapInit+0xb4>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	1ad2      	subs	r2, r2, r3
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <prvHeapInit+0xb4>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <prvHeapInit+0xb8>)
 8006cc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <prvHeapInit+0xbc>)
 8006cca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ccc:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <prvHeapInit+0xc0>)
 8006cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cd2:	601a      	str	r2, [r3, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	20001088 	.word	0x20001088
 8006ce4:	20004c88 	.word	0x20004c88
 8006ce8:	20004c90 	.word	0x20004c90
 8006cec:	20004c98 	.word	0x20004c98
 8006cf0:	20004c94 	.word	0x20004c94
 8006cf4:	20004ca4 	.word	0x20004ca4

08006cf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d00:	4b28      	ldr	r3, [pc, #160]	; (8006da4 <prvInsertBlockIntoFreeList+0xac>)
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	e002      	b.n	8006d0c <prvInsertBlockIntoFreeList+0x14>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d8f7      	bhi.n	8006d06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	4413      	add	r3, r2
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d108      	bne.n	8006d3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	441a      	add	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	441a      	add	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d118      	bne.n	8006d80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b15      	ldr	r3, [pc, #84]	; (8006da8 <prvInsertBlockIntoFreeList+0xb0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d00d      	beq.n	8006d76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	441a      	add	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e008      	b.n	8006d88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d76:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <prvInsertBlockIntoFreeList+0xb0>)
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e003      	b.n	8006d88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d002      	beq.n	8006d96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d96:	bf00      	nop
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	20004c88 	.word	0x20004c88
 8006da8:	20004c90 	.word	0x20004c90

08006dac <__errno>:
 8006dac:	4b01      	ldr	r3, [pc, #4]	; (8006db4 <__errno+0x8>)
 8006dae:	6818      	ldr	r0, [r3, #0]
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000064 	.word	0x20000064

08006db8 <__libc_init_array>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	4d0d      	ldr	r5, [pc, #52]	; (8006df0 <__libc_init_array+0x38>)
 8006dbc:	4c0d      	ldr	r4, [pc, #52]	; (8006df4 <__libc_init_array+0x3c>)
 8006dbe:	1b64      	subs	r4, r4, r5
 8006dc0:	10a4      	asrs	r4, r4, #2
 8006dc2:	2600      	movs	r6, #0
 8006dc4:	42a6      	cmp	r6, r4
 8006dc6:	d109      	bne.n	8006ddc <__libc_init_array+0x24>
 8006dc8:	4d0b      	ldr	r5, [pc, #44]	; (8006df8 <__libc_init_array+0x40>)
 8006dca:	4c0c      	ldr	r4, [pc, #48]	; (8006dfc <__libc_init_array+0x44>)
 8006dcc:	f000 fd1c 	bl	8007808 <_init>
 8006dd0:	1b64      	subs	r4, r4, r5
 8006dd2:	10a4      	asrs	r4, r4, #2
 8006dd4:	2600      	movs	r6, #0
 8006dd6:	42a6      	cmp	r6, r4
 8006dd8:	d105      	bne.n	8006de6 <__libc_init_array+0x2e>
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de0:	4798      	blx	r3
 8006de2:	3601      	adds	r6, #1
 8006de4:	e7ee      	b.n	8006dc4 <__libc_init_array+0xc>
 8006de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dea:	4798      	blx	r3
 8006dec:	3601      	adds	r6, #1
 8006dee:	e7f2      	b.n	8006dd6 <__libc_init_array+0x1e>
 8006df0:	0800a2f4 	.word	0x0800a2f4
 8006df4:	0800a2f4 	.word	0x0800a2f4
 8006df8:	0800a2f4 	.word	0x0800a2f4
 8006dfc:	0800a2f8 	.word	0x0800a2f8

08006e00 <__retarget_lock_acquire_recursive>:
 8006e00:	4770      	bx	lr

08006e02 <__retarget_lock_release_recursive>:
 8006e02:	4770      	bx	lr

08006e04 <malloc>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	; (8006e10 <malloc+0xc>)
 8006e06:	4601      	mov	r1, r0
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f000 b88d 	b.w	8006f28 <_malloc_r>
 8006e0e:	bf00      	nop
 8006e10:	20000064 	.word	0x20000064

08006e14 <free>:
 8006e14:	4b02      	ldr	r3, [pc, #8]	; (8006e20 <free+0xc>)
 8006e16:	4601      	mov	r1, r0
 8006e18:	6818      	ldr	r0, [r3, #0]
 8006e1a:	f000 b819 	b.w	8006e50 <_free_r>
 8006e1e:	bf00      	nop
 8006e20:	20000064 	.word	0x20000064

08006e24 <memcpy>:
 8006e24:	440a      	add	r2, r1
 8006e26:	4291      	cmp	r1, r2
 8006e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e2c:	d100      	bne.n	8006e30 <memcpy+0xc>
 8006e2e:	4770      	bx	lr
 8006e30:	b510      	push	{r4, lr}
 8006e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e3a:	4291      	cmp	r1, r2
 8006e3c:	d1f9      	bne.n	8006e32 <memcpy+0xe>
 8006e3e:	bd10      	pop	{r4, pc}

08006e40 <memset>:
 8006e40:	4402      	add	r2, r0
 8006e42:	4603      	mov	r3, r0
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d100      	bne.n	8006e4a <memset+0xa>
 8006e48:	4770      	bx	lr
 8006e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e4e:	e7f9      	b.n	8006e44 <memset+0x4>

08006e50 <_free_r>:
 8006e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e52:	2900      	cmp	r1, #0
 8006e54:	d044      	beq.n	8006ee0 <_free_r+0x90>
 8006e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5a:	9001      	str	r0, [sp, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e62:	bfb8      	it	lt
 8006e64:	18e4      	addlt	r4, r4, r3
 8006e66:	f000 f981 	bl	800716c <__malloc_lock>
 8006e6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <_free_r+0x94>)
 8006e6c:	9801      	ldr	r0, [sp, #4]
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	b933      	cbnz	r3, 8006e80 <_free_r+0x30>
 8006e72:	6063      	str	r3, [r4, #4]
 8006e74:	6014      	str	r4, [r2, #0]
 8006e76:	b003      	add	sp, #12
 8006e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e7c:	f000 b97c 	b.w	8007178 <__malloc_unlock>
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	d908      	bls.n	8006e96 <_free_r+0x46>
 8006e84:	6825      	ldr	r5, [r4, #0]
 8006e86:	1961      	adds	r1, r4, r5
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	bf01      	itttt	eq
 8006e8c:	6819      	ldreq	r1, [r3, #0]
 8006e8e:	685b      	ldreq	r3, [r3, #4]
 8006e90:	1949      	addeq	r1, r1, r5
 8006e92:	6021      	streq	r1, [r4, #0]
 8006e94:	e7ed      	b.n	8006e72 <_free_r+0x22>
 8006e96:	461a      	mov	r2, r3
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	b10b      	cbz	r3, 8006ea0 <_free_r+0x50>
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	d9fa      	bls.n	8006e96 <_free_r+0x46>
 8006ea0:	6811      	ldr	r1, [r2, #0]
 8006ea2:	1855      	adds	r5, r2, r1
 8006ea4:	42a5      	cmp	r5, r4
 8006ea6:	d10b      	bne.n	8006ec0 <_free_r+0x70>
 8006ea8:	6824      	ldr	r4, [r4, #0]
 8006eaa:	4421      	add	r1, r4
 8006eac:	1854      	adds	r4, r2, r1
 8006eae:	42a3      	cmp	r3, r4
 8006eb0:	6011      	str	r1, [r2, #0]
 8006eb2:	d1e0      	bne.n	8006e76 <_free_r+0x26>
 8006eb4:	681c      	ldr	r4, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	6053      	str	r3, [r2, #4]
 8006eba:	4421      	add	r1, r4
 8006ebc:	6011      	str	r1, [r2, #0]
 8006ebe:	e7da      	b.n	8006e76 <_free_r+0x26>
 8006ec0:	d902      	bls.n	8006ec8 <_free_r+0x78>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	6003      	str	r3, [r0, #0]
 8006ec6:	e7d6      	b.n	8006e76 <_free_r+0x26>
 8006ec8:	6825      	ldr	r5, [r4, #0]
 8006eca:	1961      	adds	r1, r4, r5
 8006ecc:	428b      	cmp	r3, r1
 8006ece:	bf04      	itt	eq
 8006ed0:	6819      	ldreq	r1, [r3, #0]
 8006ed2:	685b      	ldreq	r3, [r3, #4]
 8006ed4:	6063      	str	r3, [r4, #4]
 8006ed6:	bf04      	itt	eq
 8006ed8:	1949      	addeq	r1, r1, r5
 8006eda:	6021      	streq	r1, [r4, #0]
 8006edc:	6054      	str	r4, [r2, #4]
 8006ede:	e7ca      	b.n	8006e76 <_free_r+0x26>
 8006ee0:	b003      	add	sp, #12
 8006ee2:	bd30      	pop	{r4, r5, pc}
 8006ee4:	20004cac 	.word	0x20004cac

08006ee8 <sbrk_aligned>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4e0e      	ldr	r6, [pc, #56]	; (8006f24 <sbrk_aligned+0x3c>)
 8006eec:	460c      	mov	r4, r1
 8006eee:	6831      	ldr	r1, [r6, #0]
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	b911      	cbnz	r1, 8006efa <sbrk_aligned+0x12>
 8006ef4:	f000 f8f6 	bl	80070e4 <_sbrk_r>
 8006ef8:	6030      	str	r0, [r6, #0]
 8006efa:	4621      	mov	r1, r4
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 f8f1 	bl	80070e4 <_sbrk_r>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d00a      	beq.n	8006f1c <sbrk_aligned+0x34>
 8006f06:	1cc4      	adds	r4, r0, #3
 8006f08:	f024 0403 	bic.w	r4, r4, #3
 8006f0c:	42a0      	cmp	r0, r4
 8006f0e:	d007      	beq.n	8006f20 <sbrk_aligned+0x38>
 8006f10:	1a21      	subs	r1, r4, r0
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 f8e6 	bl	80070e4 <_sbrk_r>
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d101      	bne.n	8006f20 <sbrk_aligned+0x38>
 8006f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f20:	4620      	mov	r0, r4
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	20004cb0 	.word	0x20004cb0

08006f28 <_malloc_r>:
 8006f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2c:	1ccd      	adds	r5, r1, #3
 8006f2e:	f025 0503 	bic.w	r5, r5, #3
 8006f32:	3508      	adds	r5, #8
 8006f34:	2d0c      	cmp	r5, #12
 8006f36:	bf38      	it	cc
 8006f38:	250c      	movcc	r5, #12
 8006f3a:	2d00      	cmp	r5, #0
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	db01      	blt.n	8006f44 <_malloc_r+0x1c>
 8006f40:	42a9      	cmp	r1, r5
 8006f42:	d905      	bls.n	8006f50 <_malloc_r+0x28>
 8006f44:	230c      	movs	r3, #12
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	2600      	movs	r6, #0
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f50:	4e2e      	ldr	r6, [pc, #184]	; (800700c <_malloc_r+0xe4>)
 8006f52:	f000 f90b 	bl	800716c <__malloc_lock>
 8006f56:	6833      	ldr	r3, [r6, #0]
 8006f58:	461c      	mov	r4, r3
 8006f5a:	bb34      	cbnz	r4, 8006faa <_malloc_r+0x82>
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	4638      	mov	r0, r7
 8006f60:	f7ff ffc2 	bl	8006ee8 <sbrk_aligned>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	4604      	mov	r4, r0
 8006f68:	d14d      	bne.n	8007006 <_malloc_r+0xde>
 8006f6a:	6834      	ldr	r4, [r6, #0]
 8006f6c:	4626      	mov	r6, r4
 8006f6e:	2e00      	cmp	r6, #0
 8006f70:	d140      	bne.n	8006ff4 <_malloc_r+0xcc>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	4631      	mov	r1, r6
 8006f76:	4638      	mov	r0, r7
 8006f78:	eb04 0803 	add.w	r8, r4, r3
 8006f7c:	f000 f8b2 	bl	80070e4 <_sbrk_r>
 8006f80:	4580      	cmp	r8, r0
 8006f82:	d13a      	bne.n	8006ffa <_malloc_r+0xd2>
 8006f84:	6821      	ldr	r1, [r4, #0]
 8006f86:	3503      	adds	r5, #3
 8006f88:	1a6d      	subs	r5, r5, r1
 8006f8a:	f025 0503 	bic.w	r5, r5, #3
 8006f8e:	3508      	adds	r5, #8
 8006f90:	2d0c      	cmp	r5, #12
 8006f92:	bf38      	it	cc
 8006f94:	250c      	movcc	r5, #12
 8006f96:	4629      	mov	r1, r5
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f7ff ffa5 	bl	8006ee8 <sbrk_aligned>
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d02b      	beq.n	8006ffa <_malloc_r+0xd2>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	442b      	add	r3, r5
 8006fa6:	6023      	str	r3, [r4, #0]
 8006fa8:	e00e      	b.n	8006fc8 <_malloc_r+0xa0>
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	1b52      	subs	r2, r2, r5
 8006fae:	d41e      	bmi.n	8006fee <_malloc_r+0xc6>
 8006fb0:	2a0b      	cmp	r2, #11
 8006fb2:	d916      	bls.n	8006fe2 <_malloc_r+0xba>
 8006fb4:	1961      	adds	r1, r4, r5
 8006fb6:	42a3      	cmp	r3, r4
 8006fb8:	6025      	str	r5, [r4, #0]
 8006fba:	bf18      	it	ne
 8006fbc:	6059      	strne	r1, [r3, #4]
 8006fbe:	6863      	ldr	r3, [r4, #4]
 8006fc0:	bf08      	it	eq
 8006fc2:	6031      	streq	r1, [r6, #0]
 8006fc4:	5162      	str	r2, [r4, r5]
 8006fc6:	604b      	str	r3, [r1, #4]
 8006fc8:	4638      	mov	r0, r7
 8006fca:	f104 060b 	add.w	r6, r4, #11
 8006fce:	f000 f8d3 	bl	8007178 <__malloc_unlock>
 8006fd2:	f026 0607 	bic.w	r6, r6, #7
 8006fd6:	1d23      	adds	r3, r4, #4
 8006fd8:	1af2      	subs	r2, r6, r3
 8006fda:	d0b6      	beq.n	8006f4a <_malloc_r+0x22>
 8006fdc:	1b9b      	subs	r3, r3, r6
 8006fde:	50a3      	str	r3, [r4, r2]
 8006fe0:	e7b3      	b.n	8006f4a <_malloc_r+0x22>
 8006fe2:	6862      	ldr	r2, [r4, #4]
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	bf0c      	ite	eq
 8006fe8:	6032      	streq	r2, [r6, #0]
 8006fea:	605a      	strne	r2, [r3, #4]
 8006fec:	e7ec      	b.n	8006fc8 <_malloc_r+0xa0>
 8006fee:	4623      	mov	r3, r4
 8006ff0:	6864      	ldr	r4, [r4, #4]
 8006ff2:	e7b2      	b.n	8006f5a <_malloc_r+0x32>
 8006ff4:	4634      	mov	r4, r6
 8006ff6:	6876      	ldr	r6, [r6, #4]
 8006ff8:	e7b9      	b.n	8006f6e <_malloc_r+0x46>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	4638      	mov	r0, r7
 8007000:	f000 f8ba 	bl	8007178 <__malloc_unlock>
 8007004:	e7a1      	b.n	8006f4a <_malloc_r+0x22>
 8007006:	6025      	str	r5, [r4, #0]
 8007008:	e7de      	b.n	8006fc8 <_malloc_r+0xa0>
 800700a:	bf00      	nop
 800700c:	20004cac 	.word	0x20004cac

08007010 <cleanup_glue>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	460c      	mov	r4, r1
 8007014:	6809      	ldr	r1, [r1, #0]
 8007016:	4605      	mov	r5, r0
 8007018:	b109      	cbz	r1, 800701e <cleanup_glue+0xe>
 800701a:	f7ff fff9 	bl	8007010 <cleanup_glue>
 800701e:	4621      	mov	r1, r4
 8007020:	4628      	mov	r0, r5
 8007022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007026:	f7ff bf13 	b.w	8006e50 <_free_r>
	...

0800702c <_reclaim_reent>:
 800702c:	4b2c      	ldr	r3, [pc, #176]	; (80070e0 <_reclaim_reent+0xb4>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4283      	cmp	r3, r0
 8007032:	b570      	push	{r4, r5, r6, lr}
 8007034:	4604      	mov	r4, r0
 8007036:	d051      	beq.n	80070dc <_reclaim_reent+0xb0>
 8007038:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800703a:	b143      	cbz	r3, 800704e <_reclaim_reent+0x22>
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d14a      	bne.n	80070d8 <_reclaim_reent+0xac>
 8007042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007044:	6819      	ldr	r1, [r3, #0]
 8007046:	b111      	cbz	r1, 800704e <_reclaim_reent+0x22>
 8007048:	4620      	mov	r0, r4
 800704a:	f7ff ff01 	bl	8006e50 <_free_r>
 800704e:	6961      	ldr	r1, [r4, #20]
 8007050:	b111      	cbz	r1, 8007058 <_reclaim_reent+0x2c>
 8007052:	4620      	mov	r0, r4
 8007054:	f7ff fefc 	bl	8006e50 <_free_r>
 8007058:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800705a:	b111      	cbz	r1, 8007062 <_reclaim_reent+0x36>
 800705c:	4620      	mov	r0, r4
 800705e:	f7ff fef7 	bl	8006e50 <_free_r>
 8007062:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007064:	b111      	cbz	r1, 800706c <_reclaim_reent+0x40>
 8007066:	4620      	mov	r0, r4
 8007068:	f7ff fef2 	bl	8006e50 <_free_r>
 800706c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800706e:	b111      	cbz	r1, 8007076 <_reclaim_reent+0x4a>
 8007070:	4620      	mov	r0, r4
 8007072:	f7ff feed 	bl	8006e50 <_free_r>
 8007076:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007078:	b111      	cbz	r1, 8007080 <_reclaim_reent+0x54>
 800707a:	4620      	mov	r0, r4
 800707c:	f7ff fee8 	bl	8006e50 <_free_r>
 8007080:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007082:	b111      	cbz	r1, 800708a <_reclaim_reent+0x5e>
 8007084:	4620      	mov	r0, r4
 8007086:	f7ff fee3 	bl	8006e50 <_free_r>
 800708a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800708c:	b111      	cbz	r1, 8007094 <_reclaim_reent+0x68>
 800708e:	4620      	mov	r0, r4
 8007090:	f7ff fede 	bl	8006e50 <_free_r>
 8007094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007096:	b111      	cbz	r1, 800709e <_reclaim_reent+0x72>
 8007098:	4620      	mov	r0, r4
 800709a:	f7ff fed9 	bl	8006e50 <_free_r>
 800709e:	69a3      	ldr	r3, [r4, #24]
 80070a0:	b1e3      	cbz	r3, 80070dc <_reclaim_reent+0xb0>
 80070a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80070a4:	4620      	mov	r0, r4
 80070a6:	4798      	blx	r3
 80070a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80070aa:	b1b9      	cbz	r1, 80070dc <_reclaim_reent+0xb0>
 80070ac:	4620      	mov	r0, r4
 80070ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070b2:	f7ff bfad 	b.w	8007010 <cleanup_glue>
 80070b6:	5949      	ldr	r1, [r1, r5]
 80070b8:	b941      	cbnz	r1, 80070cc <_reclaim_reent+0xa0>
 80070ba:	3504      	adds	r5, #4
 80070bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070be:	2d80      	cmp	r5, #128	; 0x80
 80070c0:	68d9      	ldr	r1, [r3, #12]
 80070c2:	d1f8      	bne.n	80070b6 <_reclaim_reent+0x8a>
 80070c4:	4620      	mov	r0, r4
 80070c6:	f7ff fec3 	bl	8006e50 <_free_r>
 80070ca:	e7ba      	b.n	8007042 <_reclaim_reent+0x16>
 80070cc:	680e      	ldr	r6, [r1, #0]
 80070ce:	4620      	mov	r0, r4
 80070d0:	f7ff febe 	bl	8006e50 <_free_r>
 80070d4:	4631      	mov	r1, r6
 80070d6:	e7ef      	b.n	80070b8 <_reclaim_reent+0x8c>
 80070d8:	2500      	movs	r5, #0
 80070da:	e7ef      	b.n	80070bc <_reclaim_reent+0x90>
 80070dc:	bd70      	pop	{r4, r5, r6, pc}
 80070de:	bf00      	nop
 80070e0:	20000064 	.word	0x20000064

080070e4 <_sbrk_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4d06      	ldr	r5, [pc, #24]	; (8007100 <_sbrk_r+0x1c>)
 80070e8:	2300      	movs	r3, #0
 80070ea:	4604      	mov	r4, r0
 80070ec:	4608      	mov	r0, r1
 80070ee:	602b      	str	r3, [r5, #0]
 80070f0:	f7fa fa68 	bl	80015c4 <_sbrk>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_sbrk_r+0x1a>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_sbrk_r+0x1a>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	20004cb4 	.word	0x20004cb4

08007104 <sniprintf>:
 8007104:	b40c      	push	{r2, r3}
 8007106:	b530      	push	{r4, r5, lr}
 8007108:	4b17      	ldr	r3, [pc, #92]	; (8007168 <sniprintf+0x64>)
 800710a:	1e0c      	subs	r4, r1, #0
 800710c:	681d      	ldr	r5, [r3, #0]
 800710e:	b09d      	sub	sp, #116	; 0x74
 8007110:	da08      	bge.n	8007124 <sniprintf+0x20>
 8007112:	238b      	movs	r3, #139	; 0x8b
 8007114:	602b      	str	r3, [r5, #0]
 8007116:	f04f 30ff 	mov.w	r0, #4294967295
 800711a:	b01d      	add	sp, #116	; 0x74
 800711c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007120:	b002      	add	sp, #8
 8007122:	4770      	bx	lr
 8007124:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007128:	f8ad 3014 	strh.w	r3, [sp, #20]
 800712c:	bf14      	ite	ne
 800712e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007132:	4623      	moveq	r3, r4
 8007134:	9304      	str	r3, [sp, #16]
 8007136:	9307      	str	r3, [sp, #28]
 8007138:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800713c:	9002      	str	r0, [sp, #8]
 800713e:	9006      	str	r0, [sp, #24]
 8007140:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007144:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007146:	ab21      	add	r3, sp, #132	; 0x84
 8007148:	a902      	add	r1, sp, #8
 800714a:	4628      	mov	r0, r5
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	f000 f875 	bl	800723c <_svfiprintf_r>
 8007152:	1c43      	adds	r3, r0, #1
 8007154:	bfbc      	itt	lt
 8007156:	238b      	movlt	r3, #139	; 0x8b
 8007158:	602b      	strlt	r3, [r5, #0]
 800715a:	2c00      	cmp	r4, #0
 800715c:	d0dd      	beq.n	800711a <sniprintf+0x16>
 800715e:	9b02      	ldr	r3, [sp, #8]
 8007160:	2200      	movs	r2, #0
 8007162:	701a      	strb	r2, [r3, #0]
 8007164:	e7d9      	b.n	800711a <sniprintf+0x16>
 8007166:	bf00      	nop
 8007168:	20000064 	.word	0x20000064

0800716c <__malloc_lock>:
 800716c:	4801      	ldr	r0, [pc, #4]	; (8007174 <__malloc_lock+0x8>)
 800716e:	f7ff be47 	b.w	8006e00 <__retarget_lock_acquire_recursive>
 8007172:	bf00      	nop
 8007174:	20004ca8 	.word	0x20004ca8

08007178 <__malloc_unlock>:
 8007178:	4801      	ldr	r0, [pc, #4]	; (8007180 <__malloc_unlock+0x8>)
 800717a:	f7ff be42 	b.w	8006e02 <__retarget_lock_release_recursive>
 800717e:	bf00      	nop
 8007180:	20004ca8 	.word	0x20004ca8

08007184 <__ssputs_r>:
 8007184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007188:	688e      	ldr	r6, [r1, #8]
 800718a:	429e      	cmp	r6, r3
 800718c:	4682      	mov	sl, r0
 800718e:	460c      	mov	r4, r1
 8007190:	4690      	mov	r8, r2
 8007192:	461f      	mov	r7, r3
 8007194:	d838      	bhi.n	8007208 <__ssputs_r+0x84>
 8007196:	898a      	ldrh	r2, [r1, #12]
 8007198:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800719c:	d032      	beq.n	8007204 <__ssputs_r+0x80>
 800719e:	6825      	ldr	r5, [r4, #0]
 80071a0:	6909      	ldr	r1, [r1, #16]
 80071a2:	eba5 0901 	sub.w	r9, r5, r1
 80071a6:	6965      	ldr	r5, [r4, #20]
 80071a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071b0:	3301      	adds	r3, #1
 80071b2:	444b      	add	r3, r9
 80071b4:	106d      	asrs	r5, r5, #1
 80071b6:	429d      	cmp	r5, r3
 80071b8:	bf38      	it	cc
 80071ba:	461d      	movcc	r5, r3
 80071bc:	0553      	lsls	r3, r2, #21
 80071be:	d531      	bpl.n	8007224 <__ssputs_r+0xa0>
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7ff feb1 	bl	8006f28 <_malloc_r>
 80071c6:	4606      	mov	r6, r0
 80071c8:	b950      	cbnz	r0, 80071e0 <__ssputs_r+0x5c>
 80071ca:	230c      	movs	r3, #12
 80071cc:	f8ca 3000 	str.w	r3, [sl]
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071d6:	81a3      	strh	r3, [r4, #12]
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295
 80071dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e0:	6921      	ldr	r1, [r4, #16]
 80071e2:	464a      	mov	r2, r9
 80071e4:	f7ff fe1e 	bl	8006e24 <memcpy>
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f2:	81a3      	strh	r3, [r4, #12]
 80071f4:	6126      	str	r6, [r4, #16]
 80071f6:	6165      	str	r5, [r4, #20]
 80071f8:	444e      	add	r6, r9
 80071fa:	eba5 0509 	sub.w	r5, r5, r9
 80071fe:	6026      	str	r6, [r4, #0]
 8007200:	60a5      	str	r5, [r4, #8]
 8007202:	463e      	mov	r6, r7
 8007204:	42be      	cmp	r6, r7
 8007206:	d900      	bls.n	800720a <__ssputs_r+0x86>
 8007208:	463e      	mov	r6, r7
 800720a:	6820      	ldr	r0, [r4, #0]
 800720c:	4632      	mov	r2, r6
 800720e:	4641      	mov	r1, r8
 8007210:	f000 faa8 	bl	8007764 <memmove>
 8007214:	68a3      	ldr	r3, [r4, #8]
 8007216:	1b9b      	subs	r3, r3, r6
 8007218:	60a3      	str	r3, [r4, #8]
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	4433      	add	r3, r6
 800721e:	6023      	str	r3, [r4, #0]
 8007220:	2000      	movs	r0, #0
 8007222:	e7db      	b.n	80071dc <__ssputs_r+0x58>
 8007224:	462a      	mov	r2, r5
 8007226:	f000 fab7 	bl	8007798 <_realloc_r>
 800722a:	4606      	mov	r6, r0
 800722c:	2800      	cmp	r0, #0
 800722e:	d1e1      	bne.n	80071f4 <__ssputs_r+0x70>
 8007230:	6921      	ldr	r1, [r4, #16]
 8007232:	4650      	mov	r0, sl
 8007234:	f7ff fe0c 	bl	8006e50 <_free_r>
 8007238:	e7c7      	b.n	80071ca <__ssputs_r+0x46>
	...

0800723c <_svfiprintf_r>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	4698      	mov	r8, r3
 8007242:	898b      	ldrh	r3, [r1, #12]
 8007244:	061b      	lsls	r3, r3, #24
 8007246:	b09d      	sub	sp, #116	; 0x74
 8007248:	4607      	mov	r7, r0
 800724a:	460d      	mov	r5, r1
 800724c:	4614      	mov	r4, r2
 800724e:	d50e      	bpl.n	800726e <_svfiprintf_r+0x32>
 8007250:	690b      	ldr	r3, [r1, #16]
 8007252:	b963      	cbnz	r3, 800726e <_svfiprintf_r+0x32>
 8007254:	2140      	movs	r1, #64	; 0x40
 8007256:	f7ff fe67 	bl	8006f28 <_malloc_r>
 800725a:	6028      	str	r0, [r5, #0]
 800725c:	6128      	str	r0, [r5, #16]
 800725e:	b920      	cbnz	r0, 800726a <_svfiprintf_r+0x2e>
 8007260:	230c      	movs	r3, #12
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	e0d1      	b.n	800740e <_svfiprintf_r+0x1d2>
 800726a:	2340      	movs	r3, #64	; 0x40
 800726c:	616b      	str	r3, [r5, #20]
 800726e:	2300      	movs	r3, #0
 8007270:	9309      	str	r3, [sp, #36]	; 0x24
 8007272:	2320      	movs	r3, #32
 8007274:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007278:	f8cd 800c 	str.w	r8, [sp, #12]
 800727c:	2330      	movs	r3, #48	; 0x30
 800727e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007428 <_svfiprintf_r+0x1ec>
 8007282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007286:	f04f 0901 	mov.w	r9, #1
 800728a:	4623      	mov	r3, r4
 800728c:	469a      	mov	sl, r3
 800728e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007292:	b10a      	cbz	r2, 8007298 <_svfiprintf_r+0x5c>
 8007294:	2a25      	cmp	r2, #37	; 0x25
 8007296:	d1f9      	bne.n	800728c <_svfiprintf_r+0x50>
 8007298:	ebba 0b04 	subs.w	fp, sl, r4
 800729c:	d00b      	beq.n	80072b6 <_svfiprintf_r+0x7a>
 800729e:	465b      	mov	r3, fp
 80072a0:	4622      	mov	r2, r4
 80072a2:	4629      	mov	r1, r5
 80072a4:	4638      	mov	r0, r7
 80072a6:	f7ff ff6d 	bl	8007184 <__ssputs_r>
 80072aa:	3001      	adds	r0, #1
 80072ac:	f000 80aa 	beq.w	8007404 <_svfiprintf_r+0x1c8>
 80072b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072b2:	445a      	add	r2, fp
 80072b4:	9209      	str	r2, [sp, #36]	; 0x24
 80072b6:	f89a 3000 	ldrb.w	r3, [sl]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 80a2 	beq.w	8007404 <_svfiprintf_r+0x1c8>
 80072c0:	2300      	movs	r3, #0
 80072c2:	f04f 32ff 	mov.w	r2, #4294967295
 80072c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ca:	f10a 0a01 	add.w	sl, sl, #1
 80072ce:	9304      	str	r3, [sp, #16]
 80072d0:	9307      	str	r3, [sp, #28]
 80072d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072d6:	931a      	str	r3, [sp, #104]	; 0x68
 80072d8:	4654      	mov	r4, sl
 80072da:	2205      	movs	r2, #5
 80072dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e0:	4851      	ldr	r0, [pc, #324]	; (8007428 <_svfiprintf_r+0x1ec>)
 80072e2:	f7f8 ff7d 	bl	80001e0 <memchr>
 80072e6:	9a04      	ldr	r2, [sp, #16]
 80072e8:	b9d8      	cbnz	r0, 8007322 <_svfiprintf_r+0xe6>
 80072ea:	06d0      	lsls	r0, r2, #27
 80072ec:	bf44      	itt	mi
 80072ee:	2320      	movmi	r3, #32
 80072f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072f4:	0711      	lsls	r1, r2, #28
 80072f6:	bf44      	itt	mi
 80072f8:	232b      	movmi	r3, #43	; 0x2b
 80072fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007302:	2b2a      	cmp	r3, #42	; 0x2a
 8007304:	d015      	beq.n	8007332 <_svfiprintf_r+0xf6>
 8007306:	9a07      	ldr	r2, [sp, #28]
 8007308:	4654      	mov	r4, sl
 800730a:	2000      	movs	r0, #0
 800730c:	f04f 0c0a 	mov.w	ip, #10
 8007310:	4621      	mov	r1, r4
 8007312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007316:	3b30      	subs	r3, #48	; 0x30
 8007318:	2b09      	cmp	r3, #9
 800731a:	d94e      	bls.n	80073ba <_svfiprintf_r+0x17e>
 800731c:	b1b0      	cbz	r0, 800734c <_svfiprintf_r+0x110>
 800731e:	9207      	str	r2, [sp, #28]
 8007320:	e014      	b.n	800734c <_svfiprintf_r+0x110>
 8007322:	eba0 0308 	sub.w	r3, r0, r8
 8007326:	fa09 f303 	lsl.w	r3, r9, r3
 800732a:	4313      	orrs	r3, r2
 800732c:	9304      	str	r3, [sp, #16]
 800732e:	46a2      	mov	sl, r4
 8007330:	e7d2      	b.n	80072d8 <_svfiprintf_r+0x9c>
 8007332:	9b03      	ldr	r3, [sp, #12]
 8007334:	1d19      	adds	r1, r3, #4
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	9103      	str	r1, [sp, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	bfbb      	ittet	lt
 800733e:	425b      	neglt	r3, r3
 8007340:	f042 0202 	orrlt.w	r2, r2, #2
 8007344:	9307      	strge	r3, [sp, #28]
 8007346:	9307      	strlt	r3, [sp, #28]
 8007348:	bfb8      	it	lt
 800734a:	9204      	strlt	r2, [sp, #16]
 800734c:	7823      	ldrb	r3, [r4, #0]
 800734e:	2b2e      	cmp	r3, #46	; 0x2e
 8007350:	d10c      	bne.n	800736c <_svfiprintf_r+0x130>
 8007352:	7863      	ldrb	r3, [r4, #1]
 8007354:	2b2a      	cmp	r3, #42	; 0x2a
 8007356:	d135      	bne.n	80073c4 <_svfiprintf_r+0x188>
 8007358:	9b03      	ldr	r3, [sp, #12]
 800735a:	1d1a      	adds	r2, r3, #4
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	9203      	str	r2, [sp, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	bfb8      	it	lt
 8007364:	f04f 33ff 	movlt.w	r3, #4294967295
 8007368:	3402      	adds	r4, #2
 800736a:	9305      	str	r3, [sp, #20]
 800736c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007438 <_svfiprintf_r+0x1fc>
 8007370:	7821      	ldrb	r1, [r4, #0]
 8007372:	2203      	movs	r2, #3
 8007374:	4650      	mov	r0, sl
 8007376:	f7f8 ff33 	bl	80001e0 <memchr>
 800737a:	b140      	cbz	r0, 800738e <_svfiprintf_r+0x152>
 800737c:	2340      	movs	r3, #64	; 0x40
 800737e:	eba0 000a 	sub.w	r0, r0, sl
 8007382:	fa03 f000 	lsl.w	r0, r3, r0
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	4303      	orrs	r3, r0
 800738a:	3401      	adds	r4, #1
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007392:	4826      	ldr	r0, [pc, #152]	; (800742c <_svfiprintf_r+0x1f0>)
 8007394:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007398:	2206      	movs	r2, #6
 800739a:	f7f8 ff21 	bl	80001e0 <memchr>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d038      	beq.n	8007414 <_svfiprintf_r+0x1d8>
 80073a2:	4b23      	ldr	r3, [pc, #140]	; (8007430 <_svfiprintf_r+0x1f4>)
 80073a4:	bb1b      	cbnz	r3, 80073ee <_svfiprintf_r+0x1b2>
 80073a6:	9b03      	ldr	r3, [sp, #12]
 80073a8:	3307      	adds	r3, #7
 80073aa:	f023 0307 	bic.w	r3, r3, #7
 80073ae:	3308      	adds	r3, #8
 80073b0:	9303      	str	r3, [sp, #12]
 80073b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b4:	4433      	add	r3, r6
 80073b6:	9309      	str	r3, [sp, #36]	; 0x24
 80073b8:	e767      	b.n	800728a <_svfiprintf_r+0x4e>
 80073ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80073be:	460c      	mov	r4, r1
 80073c0:	2001      	movs	r0, #1
 80073c2:	e7a5      	b.n	8007310 <_svfiprintf_r+0xd4>
 80073c4:	2300      	movs	r3, #0
 80073c6:	3401      	adds	r4, #1
 80073c8:	9305      	str	r3, [sp, #20]
 80073ca:	4619      	mov	r1, r3
 80073cc:	f04f 0c0a 	mov.w	ip, #10
 80073d0:	4620      	mov	r0, r4
 80073d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073d6:	3a30      	subs	r2, #48	; 0x30
 80073d8:	2a09      	cmp	r2, #9
 80073da:	d903      	bls.n	80073e4 <_svfiprintf_r+0x1a8>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0c5      	beq.n	800736c <_svfiprintf_r+0x130>
 80073e0:	9105      	str	r1, [sp, #20]
 80073e2:	e7c3      	b.n	800736c <_svfiprintf_r+0x130>
 80073e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80073e8:	4604      	mov	r4, r0
 80073ea:	2301      	movs	r3, #1
 80073ec:	e7f0      	b.n	80073d0 <_svfiprintf_r+0x194>
 80073ee:	ab03      	add	r3, sp, #12
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	462a      	mov	r2, r5
 80073f4:	4b0f      	ldr	r3, [pc, #60]	; (8007434 <_svfiprintf_r+0x1f8>)
 80073f6:	a904      	add	r1, sp, #16
 80073f8:	4638      	mov	r0, r7
 80073fa:	f3af 8000 	nop.w
 80073fe:	1c42      	adds	r2, r0, #1
 8007400:	4606      	mov	r6, r0
 8007402:	d1d6      	bne.n	80073b2 <_svfiprintf_r+0x176>
 8007404:	89ab      	ldrh	r3, [r5, #12]
 8007406:	065b      	lsls	r3, r3, #25
 8007408:	f53f af2c 	bmi.w	8007264 <_svfiprintf_r+0x28>
 800740c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800740e:	b01d      	add	sp, #116	; 0x74
 8007410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007414:	ab03      	add	r3, sp, #12
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	462a      	mov	r2, r5
 800741a:	4b06      	ldr	r3, [pc, #24]	; (8007434 <_svfiprintf_r+0x1f8>)
 800741c:	a904      	add	r1, sp, #16
 800741e:	4638      	mov	r0, r7
 8007420:	f000 f87a 	bl	8007518 <_printf_i>
 8007424:	e7eb      	b.n	80073fe <_svfiprintf_r+0x1c2>
 8007426:	bf00      	nop
 8007428:	0800a2b8 	.word	0x0800a2b8
 800742c:	0800a2c2 	.word	0x0800a2c2
 8007430:	00000000 	.word	0x00000000
 8007434:	08007185 	.word	0x08007185
 8007438:	0800a2be 	.word	0x0800a2be

0800743c <_printf_common>:
 800743c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007440:	4616      	mov	r6, r2
 8007442:	4699      	mov	r9, r3
 8007444:	688a      	ldr	r2, [r1, #8]
 8007446:	690b      	ldr	r3, [r1, #16]
 8007448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800744c:	4293      	cmp	r3, r2
 800744e:	bfb8      	it	lt
 8007450:	4613      	movlt	r3, r2
 8007452:	6033      	str	r3, [r6, #0]
 8007454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007458:	4607      	mov	r7, r0
 800745a:	460c      	mov	r4, r1
 800745c:	b10a      	cbz	r2, 8007462 <_printf_common+0x26>
 800745e:	3301      	adds	r3, #1
 8007460:	6033      	str	r3, [r6, #0]
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	0699      	lsls	r1, r3, #26
 8007466:	bf42      	ittt	mi
 8007468:	6833      	ldrmi	r3, [r6, #0]
 800746a:	3302      	addmi	r3, #2
 800746c:	6033      	strmi	r3, [r6, #0]
 800746e:	6825      	ldr	r5, [r4, #0]
 8007470:	f015 0506 	ands.w	r5, r5, #6
 8007474:	d106      	bne.n	8007484 <_printf_common+0x48>
 8007476:	f104 0a19 	add.w	sl, r4, #25
 800747a:	68e3      	ldr	r3, [r4, #12]
 800747c:	6832      	ldr	r2, [r6, #0]
 800747e:	1a9b      	subs	r3, r3, r2
 8007480:	42ab      	cmp	r3, r5
 8007482:	dc26      	bgt.n	80074d2 <_printf_common+0x96>
 8007484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007488:	1e13      	subs	r3, r2, #0
 800748a:	6822      	ldr	r2, [r4, #0]
 800748c:	bf18      	it	ne
 800748e:	2301      	movne	r3, #1
 8007490:	0692      	lsls	r2, r2, #26
 8007492:	d42b      	bmi.n	80074ec <_printf_common+0xb0>
 8007494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007498:	4649      	mov	r1, r9
 800749a:	4638      	mov	r0, r7
 800749c:	47c0      	blx	r8
 800749e:	3001      	adds	r0, #1
 80074a0:	d01e      	beq.n	80074e0 <_printf_common+0xa4>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	68e5      	ldr	r5, [r4, #12]
 80074a6:	6832      	ldr	r2, [r6, #0]
 80074a8:	f003 0306 	and.w	r3, r3, #6
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	bf08      	it	eq
 80074b0:	1aad      	subeq	r5, r5, r2
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	6922      	ldr	r2, [r4, #16]
 80074b6:	bf0c      	ite	eq
 80074b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074bc:	2500      	movne	r5, #0
 80074be:	4293      	cmp	r3, r2
 80074c0:	bfc4      	itt	gt
 80074c2:	1a9b      	subgt	r3, r3, r2
 80074c4:	18ed      	addgt	r5, r5, r3
 80074c6:	2600      	movs	r6, #0
 80074c8:	341a      	adds	r4, #26
 80074ca:	42b5      	cmp	r5, r6
 80074cc:	d11a      	bne.n	8007504 <_printf_common+0xc8>
 80074ce:	2000      	movs	r0, #0
 80074d0:	e008      	b.n	80074e4 <_printf_common+0xa8>
 80074d2:	2301      	movs	r3, #1
 80074d4:	4652      	mov	r2, sl
 80074d6:	4649      	mov	r1, r9
 80074d8:	4638      	mov	r0, r7
 80074da:	47c0      	blx	r8
 80074dc:	3001      	adds	r0, #1
 80074de:	d103      	bne.n	80074e8 <_printf_common+0xac>
 80074e0:	f04f 30ff 	mov.w	r0, #4294967295
 80074e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e8:	3501      	adds	r5, #1
 80074ea:	e7c6      	b.n	800747a <_printf_common+0x3e>
 80074ec:	18e1      	adds	r1, r4, r3
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	2030      	movs	r0, #48	; 0x30
 80074f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074f6:	4422      	add	r2, r4
 80074f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007500:	3302      	adds	r3, #2
 8007502:	e7c7      	b.n	8007494 <_printf_common+0x58>
 8007504:	2301      	movs	r3, #1
 8007506:	4622      	mov	r2, r4
 8007508:	4649      	mov	r1, r9
 800750a:	4638      	mov	r0, r7
 800750c:	47c0      	blx	r8
 800750e:	3001      	adds	r0, #1
 8007510:	d0e6      	beq.n	80074e0 <_printf_common+0xa4>
 8007512:	3601      	adds	r6, #1
 8007514:	e7d9      	b.n	80074ca <_printf_common+0x8e>
	...

08007518 <_printf_i>:
 8007518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800751c:	7e0f      	ldrb	r7, [r1, #24]
 800751e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007520:	2f78      	cmp	r7, #120	; 0x78
 8007522:	4691      	mov	r9, r2
 8007524:	4680      	mov	r8, r0
 8007526:	460c      	mov	r4, r1
 8007528:	469a      	mov	sl, r3
 800752a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800752e:	d807      	bhi.n	8007540 <_printf_i+0x28>
 8007530:	2f62      	cmp	r7, #98	; 0x62
 8007532:	d80a      	bhi.n	800754a <_printf_i+0x32>
 8007534:	2f00      	cmp	r7, #0
 8007536:	f000 80d8 	beq.w	80076ea <_printf_i+0x1d2>
 800753a:	2f58      	cmp	r7, #88	; 0x58
 800753c:	f000 80a3 	beq.w	8007686 <_printf_i+0x16e>
 8007540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007548:	e03a      	b.n	80075c0 <_printf_i+0xa8>
 800754a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800754e:	2b15      	cmp	r3, #21
 8007550:	d8f6      	bhi.n	8007540 <_printf_i+0x28>
 8007552:	a101      	add	r1, pc, #4	; (adr r1, 8007558 <_printf_i+0x40>)
 8007554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007558:	080075b1 	.word	0x080075b1
 800755c:	080075c5 	.word	0x080075c5
 8007560:	08007541 	.word	0x08007541
 8007564:	08007541 	.word	0x08007541
 8007568:	08007541 	.word	0x08007541
 800756c:	08007541 	.word	0x08007541
 8007570:	080075c5 	.word	0x080075c5
 8007574:	08007541 	.word	0x08007541
 8007578:	08007541 	.word	0x08007541
 800757c:	08007541 	.word	0x08007541
 8007580:	08007541 	.word	0x08007541
 8007584:	080076d1 	.word	0x080076d1
 8007588:	080075f5 	.word	0x080075f5
 800758c:	080076b3 	.word	0x080076b3
 8007590:	08007541 	.word	0x08007541
 8007594:	08007541 	.word	0x08007541
 8007598:	080076f3 	.word	0x080076f3
 800759c:	08007541 	.word	0x08007541
 80075a0:	080075f5 	.word	0x080075f5
 80075a4:	08007541 	.word	0x08007541
 80075a8:	08007541 	.word	0x08007541
 80075ac:	080076bb 	.word	0x080076bb
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	1d1a      	adds	r2, r3, #4
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	602a      	str	r2, [r5, #0]
 80075b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075c0:	2301      	movs	r3, #1
 80075c2:	e0a3      	b.n	800770c <_printf_i+0x1f4>
 80075c4:	6820      	ldr	r0, [r4, #0]
 80075c6:	6829      	ldr	r1, [r5, #0]
 80075c8:	0606      	lsls	r6, r0, #24
 80075ca:	f101 0304 	add.w	r3, r1, #4
 80075ce:	d50a      	bpl.n	80075e6 <_printf_i+0xce>
 80075d0:	680e      	ldr	r6, [r1, #0]
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	2e00      	cmp	r6, #0
 80075d6:	da03      	bge.n	80075e0 <_printf_i+0xc8>
 80075d8:	232d      	movs	r3, #45	; 0x2d
 80075da:	4276      	negs	r6, r6
 80075dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e0:	485e      	ldr	r0, [pc, #376]	; (800775c <_printf_i+0x244>)
 80075e2:	230a      	movs	r3, #10
 80075e4:	e019      	b.n	800761a <_printf_i+0x102>
 80075e6:	680e      	ldr	r6, [r1, #0]
 80075e8:	602b      	str	r3, [r5, #0]
 80075ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075ee:	bf18      	it	ne
 80075f0:	b236      	sxthne	r6, r6
 80075f2:	e7ef      	b.n	80075d4 <_printf_i+0xbc>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	6820      	ldr	r0, [r4, #0]
 80075f8:	1d19      	adds	r1, r3, #4
 80075fa:	6029      	str	r1, [r5, #0]
 80075fc:	0601      	lsls	r1, r0, #24
 80075fe:	d501      	bpl.n	8007604 <_printf_i+0xec>
 8007600:	681e      	ldr	r6, [r3, #0]
 8007602:	e002      	b.n	800760a <_printf_i+0xf2>
 8007604:	0646      	lsls	r6, r0, #25
 8007606:	d5fb      	bpl.n	8007600 <_printf_i+0xe8>
 8007608:	881e      	ldrh	r6, [r3, #0]
 800760a:	4854      	ldr	r0, [pc, #336]	; (800775c <_printf_i+0x244>)
 800760c:	2f6f      	cmp	r7, #111	; 0x6f
 800760e:	bf0c      	ite	eq
 8007610:	2308      	moveq	r3, #8
 8007612:	230a      	movne	r3, #10
 8007614:	2100      	movs	r1, #0
 8007616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800761a:	6865      	ldr	r5, [r4, #4]
 800761c:	60a5      	str	r5, [r4, #8]
 800761e:	2d00      	cmp	r5, #0
 8007620:	bfa2      	ittt	ge
 8007622:	6821      	ldrge	r1, [r4, #0]
 8007624:	f021 0104 	bicge.w	r1, r1, #4
 8007628:	6021      	strge	r1, [r4, #0]
 800762a:	b90e      	cbnz	r6, 8007630 <_printf_i+0x118>
 800762c:	2d00      	cmp	r5, #0
 800762e:	d04d      	beq.n	80076cc <_printf_i+0x1b4>
 8007630:	4615      	mov	r5, r2
 8007632:	fbb6 f1f3 	udiv	r1, r6, r3
 8007636:	fb03 6711 	mls	r7, r3, r1, r6
 800763a:	5dc7      	ldrb	r7, [r0, r7]
 800763c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007640:	4637      	mov	r7, r6
 8007642:	42bb      	cmp	r3, r7
 8007644:	460e      	mov	r6, r1
 8007646:	d9f4      	bls.n	8007632 <_printf_i+0x11a>
 8007648:	2b08      	cmp	r3, #8
 800764a:	d10b      	bne.n	8007664 <_printf_i+0x14c>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	07de      	lsls	r6, r3, #31
 8007650:	d508      	bpl.n	8007664 <_printf_i+0x14c>
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	6861      	ldr	r1, [r4, #4]
 8007656:	4299      	cmp	r1, r3
 8007658:	bfde      	ittt	le
 800765a:	2330      	movle	r3, #48	; 0x30
 800765c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007660:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007664:	1b52      	subs	r2, r2, r5
 8007666:	6122      	str	r2, [r4, #16]
 8007668:	f8cd a000 	str.w	sl, [sp]
 800766c:	464b      	mov	r3, r9
 800766e:	aa03      	add	r2, sp, #12
 8007670:	4621      	mov	r1, r4
 8007672:	4640      	mov	r0, r8
 8007674:	f7ff fee2 	bl	800743c <_printf_common>
 8007678:	3001      	adds	r0, #1
 800767a:	d14c      	bne.n	8007716 <_printf_i+0x1fe>
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	b004      	add	sp, #16
 8007682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007686:	4835      	ldr	r0, [pc, #212]	; (800775c <_printf_i+0x244>)
 8007688:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800768c:	6829      	ldr	r1, [r5, #0]
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	f851 6b04 	ldr.w	r6, [r1], #4
 8007694:	6029      	str	r1, [r5, #0]
 8007696:	061d      	lsls	r5, r3, #24
 8007698:	d514      	bpl.n	80076c4 <_printf_i+0x1ac>
 800769a:	07df      	lsls	r7, r3, #31
 800769c:	bf44      	itt	mi
 800769e:	f043 0320 	orrmi.w	r3, r3, #32
 80076a2:	6023      	strmi	r3, [r4, #0]
 80076a4:	b91e      	cbnz	r6, 80076ae <_printf_i+0x196>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	f023 0320 	bic.w	r3, r3, #32
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	2310      	movs	r3, #16
 80076b0:	e7b0      	b.n	8007614 <_printf_i+0xfc>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	f043 0320 	orr.w	r3, r3, #32
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	2378      	movs	r3, #120	; 0x78
 80076bc:	4828      	ldr	r0, [pc, #160]	; (8007760 <_printf_i+0x248>)
 80076be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076c2:	e7e3      	b.n	800768c <_printf_i+0x174>
 80076c4:	0659      	lsls	r1, r3, #25
 80076c6:	bf48      	it	mi
 80076c8:	b2b6      	uxthmi	r6, r6
 80076ca:	e7e6      	b.n	800769a <_printf_i+0x182>
 80076cc:	4615      	mov	r5, r2
 80076ce:	e7bb      	b.n	8007648 <_printf_i+0x130>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	6826      	ldr	r6, [r4, #0]
 80076d4:	6961      	ldr	r1, [r4, #20]
 80076d6:	1d18      	adds	r0, r3, #4
 80076d8:	6028      	str	r0, [r5, #0]
 80076da:	0635      	lsls	r5, r6, #24
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	d501      	bpl.n	80076e4 <_printf_i+0x1cc>
 80076e0:	6019      	str	r1, [r3, #0]
 80076e2:	e002      	b.n	80076ea <_printf_i+0x1d2>
 80076e4:	0670      	lsls	r0, r6, #25
 80076e6:	d5fb      	bpl.n	80076e0 <_printf_i+0x1c8>
 80076e8:	8019      	strh	r1, [r3, #0]
 80076ea:	2300      	movs	r3, #0
 80076ec:	6123      	str	r3, [r4, #16]
 80076ee:	4615      	mov	r5, r2
 80076f0:	e7ba      	b.n	8007668 <_printf_i+0x150>
 80076f2:	682b      	ldr	r3, [r5, #0]
 80076f4:	1d1a      	adds	r2, r3, #4
 80076f6:	602a      	str	r2, [r5, #0]
 80076f8:	681d      	ldr	r5, [r3, #0]
 80076fa:	6862      	ldr	r2, [r4, #4]
 80076fc:	2100      	movs	r1, #0
 80076fe:	4628      	mov	r0, r5
 8007700:	f7f8 fd6e 	bl	80001e0 <memchr>
 8007704:	b108      	cbz	r0, 800770a <_printf_i+0x1f2>
 8007706:	1b40      	subs	r0, r0, r5
 8007708:	6060      	str	r0, [r4, #4]
 800770a:	6863      	ldr	r3, [r4, #4]
 800770c:	6123      	str	r3, [r4, #16]
 800770e:	2300      	movs	r3, #0
 8007710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007714:	e7a8      	b.n	8007668 <_printf_i+0x150>
 8007716:	6923      	ldr	r3, [r4, #16]
 8007718:	462a      	mov	r2, r5
 800771a:	4649      	mov	r1, r9
 800771c:	4640      	mov	r0, r8
 800771e:	47d0      	blx	sl
 8007720:	3001      	adds	r0, #1
 8007722:	d0ab      	beq.n	800767c <_printf_i+0x164>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	079b      	lsls	r3, r3, #30
 8007728:	d413      	bmi.n	8007752 <_printf_i+0x23a>
 800772a:	68e0      	ldr	r0, [r4, #12]
 800772c:	9b03      	ldr	r3, [sp, #12]
 800772e:	4298      	cmp	r0, r3
 8007730:	bfb8      	it	lt
 8007732:	4618      	movlt	r0, r3
 8007734:	e7a4      	b.n	8007680 <_printf_i+0x168>
 8007736:	2301      	movs	r3, #1
 8007738:	4632      	mov	r2, r6
 800773a:	4649      	mov	r1, r9
 800773c:	4640      	mov	r0, r8
 800773e:	47d0      	blx	sl
 8007740:	3001      	adds	r0, #1
 8007742:	d09b      	beq.n	800767c <_printf_i+0x164>
 8007744:	3501      	adds	r5, #1
 8007746:	68e3      	ldr	r3, [r4, #12]
 8007748:	9903      	ldr	r1, [sp, #12]
 800774a:	1a5b      	subs	r3, r3, r1
 800774c:	42ab      	cmp	r3, r5
 800774e:	dcf2      	bgt.n	8007736 <_printf_i+0x21e>
 8007750:	e7eb      	b.n	800772a <_printf_i+0x212>
 8007752:	2500      	movs	r5, #0
 8007754:	f104 0619 	add.w	r6, r4, #25
 8007758:	e7f5      	b.n	8007746 <_printf_i+0x22e>
 800775a:	bf00      	nop
 800775c:	0800a2c9 	.word	0x0800a2c9
 8007760:	0800a2da 	.word	0x0800a2da

08007764 <memmove>:
 8007764:	4288      	cmp	r0, r1
 8007766:	b510      	push	{r4, lr}
 8007768:	eb01 0402 	add.w	r4, r1, r2
 800776c:	d902      	bls.n	8007774 <memmove+0x10>
 800776e:	4284      	cmp	r4, r0
 8007770:	4623      	mov	r3, r4
 8007772:	d807      	bhi.n	8007784 <memmove+0x20>
 8007774:	1e43      	subs	r3, r0, #1
 8007776:	42a1      	cmp	r1, r4
 8007778:	d008      	beq.n	800778c <memmove+0x28>
 800777a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800777e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007782:	e7f8      	b.n	8007776 <memmove+0x12>
 8007784:	4402      	add	r2, r0
 8007786:	4601      	mov	r1, r0
 8007788:	428a      	cmp	r2, r1
 800778a:	d100      	bne.n	800778e <memmove+0x2a>
 800778c:	bd10      	pop	{r4, pc}
 800778e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007796:	e7f7      	b.n	8007788 <memmove+0x24>

08007798 <_realloc_r>:
 8007798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800779c:	4680      	mov	r8, r0
 800779e:	4614      	mov	r4, r2
 80077a0:	460e      	mov	r6, r1
 80077a2:	b921      	cbnz	r1, 80077ae <_realloc_r+0x16>
 80077a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077a8:	4611      	mov	r1, r2
 80077aa:	f7ff bbbd 	b.w	8006f28 <_malloc_r>
 80077ae:	b92a      	cbnz	r2, 80077bc <_realloc_r+0x24>
 80077b0:	f7ff fb4e 	bl	8006e50 <_free_r>
 80077b4:	4625      	mov	r5, r4
 80077b6:	4628      	mov	r0, r5
 80077b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077bc:	f000 f81b 	bl	80077f6 <_malloc_usable_size_r>
 80077c0:	4284      	cmp	r4, r0
 80077c2:	4607      	mov	r7, r0
 80077c4:	d802      	bhi.n	80077cc <_realloc_r+0x34>
 80077c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077ca:	d812      	bhi.n	80077f2 <_realloc_r+0x5a>
 80077cc:	4621      	mov	r1, r4
 80077ce:	4640      	mov	r0, r8
 80077d0:	f7ff fbaa 	bl	8006f28 <_malloc_r>
 80077d4:	4605      	mov	r5, r0
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d0ed      	beq.n	80077b6 <_realloc_r+0x1e>
 80077da:	42bc      	cmp	r4, r7
 80077dc:	4622      	mov	r2, r4
 80077de:	4631      	mov	r1, r6
 80077e0:	bf28      	it	cs
 80077e2:	463a      	movcs	r2, r7
 80077e4:	f7ff fb1e 	bl	8006e24 <memcpy>
 80077e8:	4631      	mov	r1, r6
 80077ea:	4640      	mov	r0, r8
 80077ec:	f7ff fb30 	bl	8006e50 <_free_r>
 80077f0:	e7e1      	b.n	80077b6 <_realloc_r+0x1e>
 80077f2:	4635      	mov	r5, r6
 80077f4:	e7df      	b.n	80077b6 <_realloc_r+0x1e>

080077f6 <_malloc_usable_size_r>:
 80077f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077fa:	1f18      	subs	r0, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	bfbc      	itt	lt
 8007800:	580b      	ldrlt	r3, [r1, r0]
 8007802:	18c0      	addlt	r0, r0, r3
 8007804:	4770      	bx	lr
	...

08007808 <_init>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	bf00      	nop
 800780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780e:	bc08      	pop	{r3}
 8007810:	469e      	mov	lr, r3
 8007812:	4770      	bx	lr

08007814 <_fini>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	bf00      	nop
 8007818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781a:	bc08      	pop	{r3}
 800781c:	469e      	mov	lr, r3
 800781e:	4770      	bx	lr

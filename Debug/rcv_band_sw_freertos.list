
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022f4  0800d13c  0800d13c  0001d13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f430  0800f430  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f430  0800f430  0001f430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f438  0800f438  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f438  0800f438  0001f438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f43c  0800f43c  0001f43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  0800f440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005838  2000019c  0800f5dc  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200059d4  0800f5dc  000259d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002821f  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005eec  00000000  00000000  000483eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002098  00000000  00000000  0004e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001de8  00000000  00000000  00050370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e98e  00000000  00000000  00052158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000298d1  00000000  00000000  00070ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ff9b  00000000  00000000  0009a3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a352  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a1c  00000000  00000000  0013a3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000019c 	.word	0x2000019c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d124 	.word	0x0800d124

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a0 	.word	0x200001a0
 80001dc:	0800d124 	.word	0x0800d124

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_CRC_Init+0x20>)
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <MX_CRC_Init+0x24>)
 80004ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_CRC_Init+0x20>)
 80004f0:	f001 f8be 	bl	8001670 <HAL_CRC_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004fa:	f000 fa33 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200001b8 	.word	0x200001b8
 8000508:	40023000 	.word	0x40023000

0800050c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <HAL_CRC_MspInit+0x3c>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d10d      	bne.n	800053a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023000 	.word	0x40023000
 800054c:	40023800 	.word	0x40023800

08000550 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000554:	4a10      	ldr	r2, [pc, #64]	; (8000598 <MX_FREERTOS_Init+0x48>)
 8000556:	2100      	movs	r1, #0
 8000558:	4810      	ldr	r0, [pc, #64]	; (800059c <MX_FREERTOS_Init+0x4c>)
 800055a:	f009 fae5 	bl	8009b28 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a0f      	ldr	r2, [pc, #60]	; (80005a0 <MX_FREERTOS_Init+0x50>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000564:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <MX_FREERTOS_Init+0x54>)
 8000566:	2100      	movs	r1, #0
 8000568:	480f      	ldr	r0, [pc, #60]	; (80005a8 <MX_FREERTOS_Init+0x58>)
 800056a:	f009 fadd 	bl	8009b28 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <MX_FREERTOS_Init+0x5c>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000574:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <MX_FREERTOS_Init+0x60>)
 8000576:	2100      	movs	r1, #0
 8000578:	480e      	ldr	r0, [pc, #56]	; (80005b4 <MX_FREERTOS_Init+0x64>)
 800057a:	f009 fad5 	bl	8009b28 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <MX_FREERTOS_Init+0x68>)
 8000582:	6013      	str	r3, [r2, #0]

  /* creation of usbTask */
  usbTaskHandle = osThreadNew(StartUSBTask, NULL, &usbTask_attributes);
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <MX_FREERTOS_Init+0x6c>)
 8000586:	2100      	movs	r1, #0
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <MX_FREERTOS_Init+0x70>)
 800058a:	f009 facd 	bl	8009b28 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <MX_FREERTOS_Init+0x74>)
 8000592:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	0800f28c 	.word	0x0800f28c
 800059c:	080005c9 	.word	0x080005c9
 80005a0:	200001c0 	.word	0x200001c0
 80005a4:	0800f2b0 	.word	0x0800f2b0
 80005a8:	080005dd 	.word	0x080005dd
 80005ac:	200001c4 	.word	0x200001c4
 80005b0:	0800f2d4 	.word	0x0800f2d4
 80005b4:	080005ed 	.word	0x080005ed
 80005b8:	200001c8 	.word	0x200001c8
 80005bc:	0800f2f8 	.word	0x0800f2f8
 80005c0:	080005fd 	.word	0x080005fd
 80005c4:	200001cc 	.word	0x200001cc

080005c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005d0:	f00b ffdc 	bl	800c58c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f009 fb39 	bl	8009c4c <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartDefaultTask+0xc>

080005dc <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f009 fb31 	bl	8009c4c <osDelay>
 80005ea:	e7fb      	b.n	80005e4 <StartDisplayTask+0x8>

080005ec <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f009 fb29 	bl	8009c4c <osDelay>
 80005fa:	e7fb      	b.n	80005f4 <StartEncoderTask+0x8>

080005fc <StartUSBTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSBTask */
void StartUSBTask(void *argument)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUSBTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f009 fb21 	bl	8009c4c <osDelay>
 800060a:	e7fb      	b.n	8000604 <StartUSBTask+0x8>

0800060c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a2c      	ldr	r2, [pc, #176]	; (80006dc <MX_GPIO_Init+0xd0>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a25      	ldr	r2, [pc, #148]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a1e      	ldr	r2, [pc, #120]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_GPIO_Init+0xd0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_GPIO_Init+0xd0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	211c      	movs	r1, #28
 8000696:	4812      	ldr	r0, [pc, #72]	; (80006e0 <MX_GPIO_Init+0xd4>)
 8000698:	f001 f98a 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800069c:	2301      	movs	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <MX_GPIO_Init+0xd4>)
 80006b2:	f000 fff9 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 80006b6:	231c      	movs	r3, #28
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_GPIO_Init+0xd4>)
 80006ce:	f000 ffeb 	bl	80016a8 <HAL_GPIO_Init>

}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020000 	.word	0x40020000

080006e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C1_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MX_I2C1_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_I2C1_Init+0x58>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_I2C1_Init+0x50>)
 8000702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_I2C1_Init+0x50>)
 8000722:	f001 f95f 	bl	80019e4 <HAL_I2C_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 f91a 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200001d0 	.word	0x200001d0
 8000738:	40005400 	.word	0x40005400
 800073c:	000186a0 	.word	0x000186a0

08000740 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <HAL_I2C_MspInit+0x84>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d12b      	bne.n	80007ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800077e:	23c0      	movs	r3, #192	; 0xc0
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000782:	2312      	movs	r3, #18
 8000784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800078e:	2304      	movs	r3, #4
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <HAL_I2C_MspInit+0x8c>)
 800079a:	f000 ff85 	bl	80016a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 80007a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40005400 	.word	0x40005400
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020400 	.word	0x40020400

080007d0 <display_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void display_init() {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af04      	add	r7, sp, #16
    ST7735_Init();
 80007d6:	f000 fa2f 	bl	8000c38 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 fb7a 	bl	8000ed4 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(1, 25, "reciever init...", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <display_init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	9202      	str	r2, [sp, #8]
 80007e6:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 80007ea:	9201      	str	r2, [sp, #4]
 80007ec:	685a      	ldr	r2, [r3, #4]
 80007ee:	9200      	str	r2, [sp, #0]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <display_init+0x5c>)
 80007f4:	2119      	movs	r1, #25
 80007f6:	2001      	movs	r0, #1
 80007f8:	f000 faaf 	bl	8000d5a <ST7735_WriteString>
    ST7735_WriteString(1, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <display_init+0x60>)
 80007fe:	2200      	movs	r2, #0
 8000800:	9202      	str	r2, [sp, #8]
 8000802:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8000806:	9201      	str	r2, [sp, #4]
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	9200      	str	r2, [sp, #0]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a09      	ldr	r2, [pc, #36]	; (8000834 <display_init+0x64>)
 8000810:	2100      	movs	r1, #0
 8000812:	2001      	movs	r0, #1
 8000814:	f000 faa1 	bl	8000d5a <ST7735_WriteString>
    HAL_Delay(2000);
 8000818:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800081c:	f000 fe22 	bl	8001464 <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000000 	.word	0x20000000
 800082c:	0800d168 	.word	0x0800d168
 8000830:	20000008 	.word	0x20000008
 8000834:	0800d17c 	.word	0x0800d17c

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083c:	f000 fdd0 	bl	80013e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000840:	f000 f816 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f7ff fee2 	bl	800060c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000848:	f7ff ff4c 	bl	80006e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800084c:	f000 f890 	bl	8000970 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000850:	f000 fc2a 	bl	80010a8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000854:	f000 fc7c 	bl	8001150 <MX_TIM5_Init>
  MX_CRC_Init();
 8000858:	f7ff fe44 	bl	80004e4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  display_init();
 800085c:	f7ff ffb8 	bl	80007d0 <display_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000860:	f009 f918 	bl	8009a94 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000864:	f7ff fe74 	bl	8000550 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000868:	f009 f938 	bl	8009adc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086c:	e7fe      	b.n	800086c <main+0x34>
	...

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	; 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f00c fb86 	bl	800cf90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b27      	ldr	r3, [pc, #156]	; (8000938 <SystemClock_Config+0xc8>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a26      	ldr	r2, [pc, #152]	; (8000938 <SystemClock_Config+0xc8>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b24      	ldr	r3, [pc, #144]	; (8000938 <SystemClock_Config+0xc8>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <SystemClock_Config+0xcc>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a20      	ldr	r2, [pc, #128]	; (800093c <SystemClock_Config+0xcc>)
 80008ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <SystemClock_Config+0xcc>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008e0:	2319      	movs	r3, #25
 80008e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80008e4:	2390      	movs	r3, #144	; 0x90
 80008e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008ec:	2303      	movs	r3, #3
 80008ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 fc63 	bl	80031c0 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000900:	f000 f830 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2302      	movs	r3, #2
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2102      	movs	r1, #2
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fec5 	bl	80036b0 <HAL_RCC_ClockConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800092c:	f000 f81a 	bl	8000964 <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	3750      	adds	r7, #80	; 0x50
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d101      	bne.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000952:	f000 fd67 	bl	8001424 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40010000 	.word	0x40010000

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <MX_SPI1_Init+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_SPI1_Init+0x64>)
 800097c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000980:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_SPI1_Init+0x64>)
 800099c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009bc:	220a      	movs	r2, #10
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009c2:	f003 f887 	bl	8003ad4 <HAL_SPI_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009cc:	f7ff ffca 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000224 	.word	0x20000224
 80009d8:	40013000 	.word	0x40013000

080009dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <HAL_SPI_MspInit+0x84>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d12b      	bne.n	8000a56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_SPI_MspInit+0x88>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <HAL_SPI_MspInit+0x88>)
 8000a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <HAL_SPI_MspInit+0x88>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_SPI_MspInit+0x88>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <HAL_SPI_MspInit+0x88>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_SPI_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a36:	23a0      	movs	r3, #160	; 0xa0
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a46:	2305      	movs	r3, #5
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <HAL_SPI_MspInit+0x8c>)
 8000a52:	f000 fe29 	bl	80016a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40013000 	.word	0x40013000
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020000 	.word	0x40020000

08000a6c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2110      	movs	r1, #16
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <ST7735_Select+0x14>)
 8000a76:	f000 ff9b 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020000 	.word	0x40020000

08000a84 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <ST7735_Unselect+0x14>)
 8000a8e:	f000 ff8f 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40020000 	.word	0x40020000

08000a9c <ST7735_Reset>:

static void ST7735_Reset() {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <ST7735_Reset+0x24>)
 8000aa6:	f000 ff83 	bl	80019b0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000aaa:	2005      	movs	r0, #5
 8000aac:	f000 fcda 	bl	8001464 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <ST7735_Reset+0x24>)
 8000ab6:	f000 ff7b 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <ST7735_WriteCommand+0x2c>)
 8000ad4:	f000 ff6c 	bl	80019b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000ad8:	1df9      	adds	r1, r7, #7
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <ST7735_WriteCommand+0x30>)
 8000ae2:	f003 f880 	bl	8003be6 <HAL_SPI_Transmit>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40020000 	.word	0x40020000
 8000af4:	20000224 	.word	0x20000224

08000af8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2104      	movs	r1, #4
 8000b06:	4807      	ldr	r0, [pc, #28]	; (8000b24 <ST7735_WriteData+0x2c>)
 8000b08:	f000 ff52 	bl	80019b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	4804      	ldr	r0, [pc, #16]	; (8000b28 <ST7735_WriteData+0x30>)
 8000b18:	f003 f865 	bl	8003be6 <HAL_SPI_Transmit>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40020000 	.word	0x40020000
 8000b28:	20000224 	.word	0x20000224

08000b2c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000b3e:	e034      	b.n	8000baa <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000b4a:	7afb      	ldrb	r3, [r7, #11]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffb9 	bl	8000ac4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	1c5a      	adds	r2, r3, #1
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000b5c:	7abb      	ldrb	r3, [r7, #10]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b64:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000b66:	7abb      	ldrb	r3, [r7, #10]
 8000b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b6c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000b6e:	7abb      	ldrb	r3, [r7, #10]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d008      	beq.n	8000b86 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000b74:	7abb      	ldrb	r3, [r7, #10]
 8000b76:	4619      	mov	r1, r3
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ffbd 	bl	8000af8 <ST7735_WriteData>
            addr += numArgs;
 8000b7e:	7abb      	ldrb	r3, [r7, #10]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	4413      	add	r3, r2
 8000b84:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000b86:	89bb      	ldrh	r3, [r7, #12]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00e      	beq.n	8000baa <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000b96:	89bb      	ldrh	r3, [r7, #12]
 8000b98:	2bff      	cmp	r3, #255	; 0xff
 8000b9a:	d102      	bne.n	8000ba2 <ST7735_ExecuteCommandList+0x76>
 8000b9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ba0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000ba2:	89bb      	ldrh	r3, [r7, #12]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fc5d 	bl	8001464 <HAL_Delay>
    while(numCommands--) {
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	1e5a      	subs	r2, r3, #1
 8000bae:	73fa      	strb	r2, [r7, #15]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1c5      	bne.n	8000b40 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000bbe:	b590      	push	{r4, r7, lr}
 8000bc0:	b085      	sub	sp, #20
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	4611      	mov	r1, r2
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4623      	mov	r3, r4
 8000bce:	71fb      	strb	r3, [r7, #7]
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71bb      	strb	r3, [r7, #6]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	717b      	strb	r3, [r7, #5]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000bdc:	202a      	movs	r0, #42	; 0x2a
 8000bde:	f7ff ff71 	bl	8000ac4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000be2:	2300      	movs	r3, #0
 8000be4:	733b      	strb	r3, [r7, #12]
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	737b      	strb	r3, [r7, #13]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73bb      	strb	r3, [r7, #14]
 8000bf2:	797b      	ldrb	r3, [r7, #5]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	2104      	movs	r1, #4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff79 	bl	8000af8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000c06:	202b      	movs	r0, #43	; 0x2b
 8000c08:	f7ff ff5c 	bl	8000ac4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	331a      	adds	r3, #26
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000c14:	793b      	ldrb	r3, [r7, #4]
 8000c16:	331a      	adds	r3, #26
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2104      	movs	r1, #4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff68 	bl	8000af8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000c28:	202c      	movs	r0, #44	; 0x2c
 8000c2a:	f7ff ff4b 	bl	8000ac4 <ST7735_WriteCommand>
}
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd90      	pop	{r4, r7, pc}
	...

08000c38 <ST7735_Init>:

void ST7735_Init() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000c3c:	f7ff ff16 	bl	8000a6c <ST7735_Select>
    ST7735_Reset();
 8000c40:	f7ff ff2c 	bl	8000a9c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000c44:	4806      	ldr	r0, [pc, #24]	; (8000c60 <ST7735_Init+0x28>)
 8000c46:	f7ff ff71 	bl	8000b2c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <ST7735_Init+0x2c>)
 8000c4c:	f7ff ff6e 	bl	8000b2c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <ST7735_Init+0x30>)
 8000c52:	f7ff ff6b 	bl	8000b2c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000c56:	f7ff ff15 	bl	8000a84 <ST7735_Unselect>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	0800f31c 	.word	0x0800f31c
 8000c64:	0800f358 	.word	0x0800f358
 8000c68:	0800f368 	.word	0x0800f368

08000c6c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	b590      	push	{r4, r7, lr}
 8000c70:	b089      	sub	sp, #36	; 0x24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	80bb      	strh	r3, [r7, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	b2d8      	uxtb	r0, r3
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	b2d9      	uxtb	r1, r3
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000c92:	4413      	add	r3, r2
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	3b01      	subs	r3, #1
 8000c98:	b2dc      	uxtb	r4, r3
 8000c9a:	88bb      	ldrh	r3, [r7, #4]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	4622      	mov	r2, r4
 8000cac:	f7ff ff87 	bl	8000bbe <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
 8000cb4:	e043      	b.n	8000d3e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	3b20      	subs	r3, #32
 8000cbc:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000cc0:	fb01 f303 	mul.w	r3, r1, r3
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	440b      	add	r3, r1
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	e029      	b.n	8000d2c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00e      	beq.n	8000d06 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000ce8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	743b      	strb	r3, [r7, #16]
 8000cf2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fefa 	bl	8000af8 <ST7735_WriteData>
 8000d04:	e00f      	b.n	8000d26 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000d06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	733b      	strb	r3, [r7, #12]
 8000d12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	2102      	movs	r1, #2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fee9 	bl	8000af8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	61bb      	str	r3, [r7, #24]
 8000d2c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d30:	461a      	mov	r2, r3
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d3cf      	bcc.n	8000cd8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d42:	461a      	mov	r2, r3
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d3b5      	bcc.n	8000cb6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	3724      	adds	r7, #36	; 0x24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d56:	b002      	add	sp, #8
 8000d58:	4770      	bx	lr

08000d5a <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af04      	add	r7, sp, #16
 8000d62:	603a      	str	r2, [r7, #0]
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000d6e:	f7ff fe7d 	bl	8000a6c <ST7735_Select>

    while(*str) {
 8000d72:	e02d      	b.n	8000dd0 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	7d3a      	ldrb	r2, [r7, #20]
 8000d78:	4413      	add	r3, r2
 8000d7a:	2b9f      	cmp	r3, #159	; 0x9f
 8000d7c:	dd13      	ble.n	8000da6 <ST7735_WriteString+0x4c>
            x = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000d82:	7d7b      	ldrb	r3, [r7, #21]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	88bb      	ldrh	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000d8c:	88bb      	ldrh	r3, [r7, #4]
 8000d8e:	7d7a      	ldrb	r2, [r7, #21]
 8000d90:	4413      	add	r3, r2
 8000d92:	2b4f      	cmp	r3, #79	; 0x4f
 8000d94:	dc21      	bgt.n	8000dda <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b20      	cmp	r3, #32
 8000d9c:	d103      	bne.n	8000da6 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	603b      	str	r3, [r7, #0]
                continue;
 8000da4:	e014      	b.n	8000dd0 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	88b9      	ldrh	r1, [r7, #4]
 8000dac:	88f8      	ldrh	r0, [r7, #6]
 8000dae:	8c3b      	ldrh	r3, [r7, #32]
 8000db0:	9302      	str	r3, [sp, #8]
 8000db2:	8bbb      	ldrh	r3, [r7, #28]
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f7ff ff56 	bl	8000c6c <ST7735_WriteChar>
        x += font.width;
 8000dc0:	7d3b      	ldrb	r3, [r7, #20]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	80fb      	strh	r3, [r7, #6]
        str++;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1cd      	bne.n	8000d74 <ST7735_WriteString+0x1a>
 8000dd8:	e000      	b.n	8000ddc <ST7735_WriteString+0x82>
                break;
 8000dda:	bf00      	nop
    }

    ST7735_Unselect();
 8000ddc:	f7ff fe52 	bl	8000a84 <ST7735_Unselect>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dea:	b002      	add	sp, #8
 8000dec:	4770      	bx	lr
	...

08000df0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4604      	mov	r4, r0
 8000df8:	4608      	mov	r0, r1
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4623      	mov	r3, r4
 8000e00:	80fb      	strh	r3, [r7, #6]
 8000e02:	4603      	mov	r3, r0
 8000e04:	80bb      	strh	r3, [r7, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	807b      	strh	r3, [r7, #2]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	2b9f      	cmp	r3, #159	; 0x9f
 8000e12:	d857      	bhi.n	8000ec4 <ST7735_FillRectangle+0xd4>
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	2b4f      	cmp	r3, #79	; 0x4f
 8000e18:	d854      	bhi.n	8000ec4 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000e1a:	88fa      	ldrh	r2, [r7, #6]
 8000e1c:	887b      	ldrh	r3, [r7, #2]
 8000e1e:	4413      	add	r3, r2
 8000e20:	2ba0      	cmp	r3, #160	; 0xa0
 8000e22:	dd03      	ble.n	8000e2c <ST7735_FillRectangle+0x3c>
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000e2a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000e2c:	88ba      	ldrh	r2, [r7, #4]
 8000e2e:	883b      	ldrh	r3, [r7, #0]
 8000e30:	4413      	add	r3, r2
 8000e32:	2b50      	cmp	r3, #80	; 0x50
 8000e34:	dd03      	ble.n	8000e3e <ST7735_FillRectangle+0x4e>
 8000e36:	88bb      	ldrh	r3, [r7, #4]
 8000e38:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000e3c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000e3e:	f7ff fe15 	bl	8000a6c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	b2d8      	uxtb	r0, r3
 8000e46:	88bb      	ldrh	r3, [r7, #4]
 8000e48:	b2d9      	uxtb	r1, r3
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4413      	add	r3, r2
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	3b01      	subs	r3, #1
 8000e58:	b2dc      	uxtb	r4, r3
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	883b      	ldrh	r3, [r7, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4413      	add	r3, r2
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	3b01      	subs	r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	4622      	mov	r2, r4
 8000e6c:	f7ff fea7 	bl	8000bbe <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000e70:	8c3b      	ldrh	r3, [r7, #32]
 8000e72:	0a1b      	lsrs	r3, r3, #8
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	733b      	strb	r3, [r7, #12]
 8000e7a:	8c3b      	ldrh	r3, [r7, #32]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2104      	movs	r1, #4
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <ST7735_FillRectangle+0xdc>)
 8000e86:	f000 fd93 	bl	80019b0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000e8a:	883b      	ldrh	r3, [r7, #0]
 8000e8c:	80bb      	strh	r3, [r7, #4]
 8000e8e:	e013      	b.n	8000eb8 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8000e90:	887b      	ldrh	r3, [r7, #2]
 8000e92:	80fb      	strh	r3, [r7, #6]
 8000e94:	e00a      	b.n	8000eac <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000e96:	f107 010c 	add.w	r1, r7, #12
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <ST7735_FillRectangle+0xe0>)
 8000ea2:	f002 fea0 	bl	8003be6 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	80fb      	strh	r3, [r7, #6]
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1f1      	bne.n	8000e96 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8000eb2:	88bb      	ldrh	r3, [r7, #4]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	80bb      	strh	r3, [r7, #4]
 8000eb8:	88bb      	ldrh	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1e8      	bne.n	8000e90 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8000ebe:	f7ff fde1 	bl	8000a84 <ST7735_Unselect>
 8000ec2:	e000      	b.n	8000ec6 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000ec4:	bf00      	nop
}
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd90      	pop	{r4, r7, pc}
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	20000224 	.word	0x20000224

08000ed4 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2350      	movs	r3, #80	; 0x50
 8000ee4:	22a0      	movs	r2, #160	; 0xa0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff ff81 	bl	8000df0 <ST7735_FillRectangle>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <HAL_MspInit+0x74>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <HAL_MspInit+0x74>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_MspInit+0x74>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_MspInit+0x74>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <HAL_MspInit+0x74>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_MspInit+0x74>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	210f      	movs	r1, #15
 8000f3a:	f06f 0001 	mvn.w	r0, #1
 8000f3e:	f000 fb6d 	bl	800161c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2105      	movs	r1, #5
 8000f46:	2005      	movs	r0, #5
 8000f48:	f000 fb68 	bl	800161c <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000f4c:	2005      	movs	r0, #5
 8000f4e:	f000 fb81 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2105      	movs	r1, #5
 8000f56:	2005      	movs	r0, #5
 8000f58:	f000 fb60 	bl	800161c <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000f5c:	2005      	movs	r0, #5
 8000f5e:	f000 fb79 	bl	8001654 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800

08000f70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	2019      	movs	r0, #25
 8000f86:	f000 fb49 	bl	800161c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f8a:	2019      	movs	r0, #25
 8000f8c:	f000 fb62 	bl	8001654 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <HAL_InitTick+0xa0>)
 8000f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f98:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <HAL_InitTick+0xa0>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_InitTick+0xa0>)
 8000fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fac:	f107 0210 	add.w	r2, r7, #16
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fd5a 	bl	8003a70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fbc:	f002 fd44 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8000fc0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc4:	4a13      	ldr	r2, [pc, #76]	; (8001014 <HAL_InitTick+0xa4>)
 8000fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fca:	0c9b      	lsrs	r3, r3, #18
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_InitTick+0xa8>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <HAL_InitTick+0xac>)
 8000fd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_InitTick+0xa8>)
 8000fd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fdc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_InitTick+0xa8>)
 8000fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_InitTick+0xa8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_InitTick+0xa8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ff0:	4809      	ldr	r0, [pc, #36]	; (8001018 <HAL_InitTick+0xa8>)
 8000ff2:	f002 ffff 	bl	8003ff4 <HAL_TIM_Base_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ffc:	4806      	ldr	r0, [pc, #24]	; (8001018 <HAL_InitTick+0xa8>)
 8000ffe:	f003 f853 	bl	80040a8 <HAL_TIM_Base_Start_IT>
 8001002:	4603      	mov	r3, r0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3730      	adds	r7, #48	; 0x30
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	431bde83 	.word	0x431bde83
 8001018:	2000027c 	.word	0x2000027c
 800101c:	40010000 	.word	0x40010000

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001062:	f003 f978 	bl	8004356 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000027c 	.word	0x2000027c

08001070 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <OTG_FS_IRQHandler+0x10>)
 8001076:	f000 ff49 	bl	8001f0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20005248 	.word	0x20005248

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	2224      	movs	r2, #36	; 0x24
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f00b ff6a 	bl	800cf90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <MX_TIM3_Init+0xa0>)
 80010c6:	4a21      	ldr	r2, [pc, #132]	; (800114c <MX_TIM3_Init+0xa4>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_TIM3_Init+0xa0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_TIM3_Init+0xa0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_TIM3_Init+0xa0>)
 80010d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_TIM3_Init+0xa0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_TIM3_Init+0xa0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010f2:	2301      	movs	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 80010fa:	2306      	movs	r3, #6
 80010fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001102:	2301      	movs	r3, #1
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 800110a:	2306      	movs	r3, #6
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	4619      	mov	r1, r3
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <MX_TIM3_Init+0xa0>)
 8001116:	f003 f878 	bl	800420a <HAL_TIM_Encoder_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001120:	f7ff fc20 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_TIM3_Init+0xa0>)
 8001132:	f003 fd0f 	bl	8004b54 <HAL_TIMEx_MasterConfigSynchronization>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800113c:	f7ff fc12 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	3730      	adds	r7, #48	; 0x30
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002c4 	.word	0x200002c4
 800114c:	40000400 	.word	0x40000400

08001150 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001156:	f107 0320 	add.w	r3, r7, #32
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]
 800116e:	615a      	str	r2, [r3, #20]
 8001170:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <MX_TIM5_Init+0xac>)
 8001174:	4a22      	ldr	r2, [pc, #136]	; (8001200 <MX_TIM5_Init+0xb0>)
 8001176:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <MX_TIM5_Init+0xac>)
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_TIM5_Init+0xac>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_TIM5_Init+0xac>)
 8001186:	f04f 32ff 	mov.w	r2, #4294967295
 800118a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_TIM5_Init+0xac>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_TIM5_Init+0xac>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001198:	4818      	ldr	r0, [pc, #96]	; (80011fc <MX_TIM5_Init+0xac>)
 800119a:	f002 ffe7 	bl	800416c <HAL_TIM_PWM_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80011a4:	f7ff fbde 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	4619      	mov	r1, r3
 80011b6:	4811      	ldr	r0, [pc, #68]	; (80011fc <MX_TIM5_Init+0xac>)
 80011b8:	f003 fccc 	bl	8004b54 <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80011c2:	f7ff fbcf 	bl	8000964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c6:	2360      	movs	r3, #96	; 0x60
 80011c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2204      	movs	r2, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	4807      	ldr	r0, [pc, #28]	; (80011fc <MX_TIM5_Init+0xac>)
 80011de:	f003 f9c3 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80011e8:	f7ff fbbc 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <MX_TIM5_Init+0xac>)
 80011ee:	f000 f893 	bl	8001318 <HAL_TIM_MspPostInit>

}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000030c 	.word	0x2000030c
 8001200:	40000c00 	.word	0x40000c00

08001204 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d149      	bne.n	80012ba <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <HAL_TIM_Encoder_MspInit+0xc4>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <HAL_TIM_Encoder_MspInit+0xc4>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a18      	ldr	r2, [pc, #96]	; (80012c8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 800127a:	2340      	movs	r3, #64	; 0x40
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001282:	2301      	movs	r3, #1
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800128a:	2302      	movs	r3, #2
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <HAL_TIM_Encoder_MspInit+0xc8>)
 8001296:	f000 fa07 	bl	80016a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 800129a:	2320      	movs	r3, #32
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012aa:	2302      	movs	r3, #2
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4806      	ldr	r0, [pc, #24]	; (80012d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 80012b6:	f000 f9f7 	bl	80016a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40000400 	.word	0x40000400
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400

080012d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <HAL_TIM_PWM_MspInit+0x3c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d10d      	bne.n	8001302 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_TIM_PWM_MspInit+0x40>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a09      	ldr	r2, [pc, #36]	; (8001314 <HAL_TIM_PWM_MspInit+0x40>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <HAL_TIM_PWM_MspInit+0x40>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40000c00 	.word	0x40000c00
 8001314:	40023800 	.word	0x40023800

08001318 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <HAL_TIM_MspPostInit+0x68>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d11d      	bne.n	8001376 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_TIM_MspPostInit+0x6c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <HAL_TIM_MspPostInit+0x6c>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_TIM_MspPostInit+0x6c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8001356:	2302      	movs	r3, #2
 8001358:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001366:	2302      	movs	r3, #2
 8001368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <HAL_TIM_MspPostInit+0x70>)
 8001372:	f000 f999 	bl	80016a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3720      	adds	r7, #32
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40000c00 	.word	0x40000c00
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000

0800138c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800138c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001392:	490e      	ldr	r1, [pc, #56]	; (80013cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001394:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013a8:	4c0b      	ldr	r4, [pc, #44]	; (80013d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013b6:	f7ff fe65 	bl	8001084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ba:	f00b fdb5 	bl	800cf28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013be:	f7ff fa3b 	bl	8000838 <main>
  bx  lr    
 80013c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013cc:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 80013d0:	0800f440 	.word	0x0800f440
  ldr r2, =_sbss
 80013d4:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 80013d8:	200059d4 	.word	0x200059d4

080013dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC_IRQHandler>
	...

080013e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <HAL_Init+0x40>)
 80013ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_Init+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_Init+0x40>)
 80013f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <HAL_Init+0x40>)
 8001402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001406:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f8fc 	bl	8001606 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140e:	200f      	movs	r0, #15
 8001410:	f7ff fdae 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001414:	f7ff fd70 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023c00 	.word	0x40023c00

08001424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x20>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <HAL_IncTick+0x24>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000018 	.word	0x20000018
 8001448:	20000354 	.word	0x20000354

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000354 	.word	0x20000354

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff ffee 	bl	800144c <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_Delay+0x44>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffde 	bl	800144c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000018 	.word	0x20000018

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4907      	ldr	r1, [pc, #28]	; (8001548 <__NVIC_EnableIRQ+0x38>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ff4c 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162e:	f7ff ff61 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001632:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	68b9      	ldr	r1, [r7, #8]
 8001638:	6978      	ldr	r0, [r7, #20]
 800163a:	f7ff ffb1 	bl	80015a0 <NVIC_EncodePriority>
 800163e:	4602      	mov	r2, r0
 8001640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff80 	bl	800154c <__NVIC_SetPriority>
}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff54 	bl	8001510 <__NVIC_EnableIRQ>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00e      	b.n	80016a0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	795b      	ldrb	r3, [r3, #5]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d105      	bne.n	8001698 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe ff3a 	bl	800050c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e159      	b.n	8001978 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8148 	bne.w	8001972 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d005      	beq.n	80016fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d130      	bne.n	800175c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 0201 	and.w	r2, r3, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b03      	cmp	r3, #3
 8001766:	d017      	beq.n	8001798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d123      	bne.n	80017ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	220f      	movs	r2, #15
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	69b9      	ldr	r1, [r7, #24]
 80017e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0203 	and.w	r2, r3, #3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80a2 	beq.w	8001972 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b57      	ldr	r3, [pc, #348]	; (8001990 <HAL_GPIO_Init+0x2e8>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a56      	ldr	r2, [pc, #344]	; (8001990 <HAL_GPIO_Init+0x2e8>)
 8001838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b54      	ldr	r3, [pc, #336]	; (8001990 <HAL_GPIO_Init+0x2e8>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800184a:	4a52      	ldr	r2, [pc, #328]	; (8001994 <HAL_GPIO_Init+0x2ec>)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a49      	ldr	r2, [pc, #292]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d019      	beq.n	80018aa <HAL_GPIO_Init+0x202>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a48      	ldr	r2, [pc, #288]	; (800199c <HAL_GPIO_Init+0x2f4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0x1fe>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a47      	ldr	r2, [pc, #284]	; (80019a0 <HAL_GPIO_Init+0x2f8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00d      	beq.n	80018a2 <HAL_GPIO_Init+0x1fa>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a46      	ldr	r2, [pc, #280]	; (80019a4 <HAL_GPIO_Init+0x2fc>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d007      	beq.n	800189e <HAL_GPIO_Init+0x1f6>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a45      	ldr	r2, [pc, #276]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_GPIO_Init+0x1f2>
 8001896:	2304      	movs	r3, #4
 8001898:	e008      	b.n	80018ac <HAL_GPIO_Init+0x204>
 800189a:	2307      	movs	r3, #7
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x204>
 800189e:	2303      	movs	r3, #3
 80018a0:	e004      	b.n	80018ac <HAL_GPIO_Init+0x204>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_Init+0x204>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x204>
 80018aa:	2300      	movs	r3, #0
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f002 0203 	and.w	r2, r2, #3
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4093      	lsls	r3, r2
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018bc:	4935      	ldr	r1, [pc, #212]	; (8001994 <HAL_GPIO_Init+0x2ec>)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ca:	4b38      	ldr	r3, [pc, #224]	; (80019ac <HAL_GPIO_Init+0x304>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ee:	4a2f      	ldr	r2, [pc, #188]	; (80019ac <HAL_GPIO_Init+0x304>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f4:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_GPIO_Init+0x304>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001918:	4a24      	ldr	r2, [pc, #144]	; (80019ac <HAL_GPIO_Init+0x304>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800191e:	4b23      	ldr	r3, [pc, #140]	; (80019ac <HAL_GPIO_Init+0x304>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001942:	4a1a      	ldr	r2, [pc, #104]	; (80019ac <HAL_GPIO_Init+0x304>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_GPIO_Init+0x304>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800196c:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <HAL_GPIO_Init+0x304>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3301      	adds	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b0f      	cmp	r3, #15
 800197c:	f67f aea2 	bls.w	80016c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40013800 	.word	0x40013800
 8001998:	40020000 	.word	0x40020000
 800199c:	40020400 	.word	0x40020400
 80019a0:	40020800 	.word	0x40020800
 80019a4:	40020c00 	.word	0x40020c00
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40013c00 	.word	0x40013c00

080019b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
 80019bc:	4613      	mov	r3, r2
 80019be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c0:	787b      	ldrb	r3, [r7, #1]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019cc:	e003      	b.n	80019d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	041a      	lsls	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	619a      	str	r2, [r3, #24]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e12b      	b.n	8001c4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7fe fe98 	bl	8000740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2224      	movs	r2, #36	; 0x24
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a48:	f001 ffea 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8001a4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4a81      	ldr	r2, [pc, #516]	; (8001c58 <HAL_I2C_Init+0x274>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d807      	bhi.n	8001a68 <HAL_I2C_Init+0x84>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4a80      	ldr	r2, [pc, #512]	; (8001c5c <HAL_I2C_Init+0x278>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	bf94      	ite	ls
 8001a60:	2301      	movls	r3, #1
 8001a62:	2300      	movhi	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	e006      	b.n	8001a76 <HAL_I2C_Init+0x92>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4a7d      	ldr	r2, [pc, #500]	; (8001c60 <HAL_I2C_Init+0x27c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	bf94      	ite	ls
 8001a70:	2301      	movls	r3, #1
 8001a72:	2300      	movhi	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0e7      	b.n	8001c4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4a78      	ldr	r2, [pc, #480]	; (8001c64 <HAL_I2C_Init+0x280>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	0c9b      	lsrs	r3, r3, #18
 8001a88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4a6a      	ldr	r2, [pc, #424]	; (8001c58 <HAL_I2C_Init+0x274>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d802      	bhi.n	8001ab8 <HAL_I2C_Init+0xd4>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	e009      	b.n	8001acc <HAL_I2C_Init+0xe8>
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	4a69      	ldr	r2, [pc, #420]	; (8001c68 <HAL_I2C_Init+0x284>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	3301      	adds	r3, #1
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ade:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	495c      	ldr	r1, [pc, #368]	; (8001c58 <HAL_I2C_Init+0x274>)
 8001ae8:	428b      	cmp	r3, r1
 8001aea:	d819      	bhi.n	8001b20 <HAL_I2C_Init+0x13c>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1e59      	subs	r1, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001afa:	1c59      	adds	r1, r3, #1
 8001afc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b00:	400b      	ands	r3, r1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00a      	beq.n	8001b1c <HAL_I2C_Init+0x138>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1e59      	subs	r1, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b14:	3301      	adds	r3, #1
 8001b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1a:	e051      	b.n	8001bc0 <HAL_I2C_Init+0x1dc>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e04f      	b.n	8001bc0 <HAL_I2C_Init+0x1dc>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d111      	bne.n	8001b4c <HAL_I2C_Init+0x168>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1e58      	subs	r0, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	440b      	add	r3, r1
 8001b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	e012      	b.n	8001b72 <HAL_I2C_Init+0x18e>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1e58      	subs	r0, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	0099      	lsls	r1, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b62:	3301      	adds	r3, #1
 8001b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2301      	moveq	r3, #1
 8001b6e:	2300      	movne	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_Init+0x196>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e022      	b.n	8001bc0 <HAL_I2C_Init+0x1dc>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10e      	bne.n	8001ba0 <HAL_I2C_Init+0x1bc>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1e58      	subs	r0, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6859      	ldr	r1, [r3, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	440b      	add	r3, r1
 8001b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b94:	3301      	adds	r3, #1
 8001b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b9e:	e00f      	b.n	8001bc0 <HAL_I2C_Init+0x1dc>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1e58      	subs	r0, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	0099      	lsls	r1, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	6809      	ldr	r1, [r1, #0]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69da      	ldr	r2, [r3, #28]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6911      	ldr	r1, [r2, #16]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68d2      	ldr	r2, [r2, #12]
 8001bfa:	4311      	orrs	r1, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	430b      	orrs	r3, r1
 8001c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	000186a0 	.word	0x000186a0
 8001c5c:	001e847f 	.word	0x001e847f
 8001c60:	003d08ff 	.word	0x003d08ff
 8001c64:	431bde83 	.word	0x431bde83
 8001c68:	10624dd3 	.word	0x10624dd3

08001c6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6e:	b08f      	sub	sp, #60	; 0x3c
 8001c70:	af0a      	add	r7, sp, #40	; 0x28
 8001c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e10f      	b.n	8001e9e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d106      	bne.n	8001c9e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f00a fe1b 	bl	800c8d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 f8e0 	bl	8004e82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	687e      	ldr	r6, [r7, #4]
 8001cca:	466d      	mov	r5, sp
 8001ccc:	f106 0410 	add.w	r4, r6, #16
 8001cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ce0:	1d33      	adds	r3, r6, #4
 8001ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce4:	6838      	ldr	r0, [r7, #0]
 8001ce6:	f002 ffb7 	bl	8004c58 <USB_CoreInit>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0d0      	b.n	8001e9e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 f8ce 	bl	8004ea4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e04a      	b.n	8001da4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	333d      	adds	r3, #61	; 0x3d
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	333c      	adds	r3, #60	; 0x3c
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	b298      	uxth	r0, r3
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	3344      	adds	r3, #68	; 0x44
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3340      	adds	r3, #64	; 0x40
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3348      	adds	r3, #72	; 0x48
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	334c      	adds	r3, #76	; 0x4c
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	3354      	adds	r3, #84	; 0x54
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	3301      	adds	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3af      	bcc.n	8001d0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	e044      	b.n	8001e3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3b5      	bcc.n	8001db4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	687e      	ldr	r6, [r7, #4]
 8001e50:	466d      	mov	r5, sp
 8001e52:	f106 0410 	add.w	r4, r6, #16
 8001e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e66:	1d33      	adds	r3, r6, #4
 8001e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e6a:	6838      	ldr	r0, [r7, #0]
 8001e6c:	f003 f866 	bl	8004f3c <USB_DevInit>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00d      	b.n	8001e9e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 f9b5 	bl	8006206 <USB_DevDisconnect>

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_PCD_Start+0x1c>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e020      	b.n	8001f04 <HAL_PCD_Start+0x5e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d109      	bne.n	8001ee6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d005      	beq.n	8001ee6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 ffb8 	bl	8004e60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f004 f965 	bl	80061c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b08d      	sub	sp, #52	; 0x34
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 fa23 	bl	800636e <USB_GetMode>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 848a 	bne.w	8002844 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f004 f987 	bl	8006248 <USB_ReadInterrupts>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 8480 	beq.w	8002842 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f004 f974 	bl	8006248 <USB_ReadInterrupts>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d107      	bne.n	8001f7a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f002 0202 	and.w	r2, r2, #2
 8001f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 f962 	bl	8006248 <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d161      	bne.n	8002052 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0210 	bic.w	r2, r2, #16
 8001f9c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f003 020f 	and.w	r2, r3, #15
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	0c5b      	lsrs	r3, r3, #17
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d124      	bne.n	8002014 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d035      	beq.n	8002042 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6a38      	ldr	r0, [r7, #32]
 8001fea:	f003 ff99 	bl	8005f20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ffa:	441a      	add	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	6a1a      	ldr	r2, [r3, #32]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800200c:	441a      	add	r2, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	621a      	str	r2, [r3, #32]
 8002012:	e016      	b.n	8002042 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	0c5b      	lsrs	r3, r3, #17
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	2b06      	cmp	r3, #6
 800201e:	d110      	bne.n	8002042 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002026:	2208      	movs	r2, #8
 8002028:	4619      	mov	r1, r3
 800202a:	6a38      	ldr	r0, [r7, #32]
 800202c:	f003 ff78 	bl	8005f20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	6a1a      	ldr	r2, [r3, #32]
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800203c:	441a      	add	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0210 	orr.w	r2, r2, #16
 8002050:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f004 f8f6 	bl	8006248 <USB_ReadInterrupts>
 800205c:	4603      	mov	r3, r0
 800205e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002062:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002066:	f040 80a7 	bne.w	80021b8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f004 f8fb 	bl	800626e <USB_ReadDevAllOutEpInterrupt>
 8002078:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800207a:	e099      	b.n	80021b0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 808e 	beq.w	80021a4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f004 f91f 	bl	80062d6 <USB_ReadDevOutEPInterrupt>
 8002098:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00c      	beq.n	80020be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b0:	461a      	mov	r2, r3
 80020b2:	2301      	movs	r3, #1
 80020b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 feef 	bl	8002e9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d4:	461a      	mov	r2, r3
 80020d6:	2308      	movs	r3, #8
 80020d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 ffc5 	bl	800306c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f8:	461a      	mov	r2, r3
 80020fa:	2310      	movs	r3, #16
 80020fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d030      	beq.n	800216a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002110:	2b80      	cmp	r3, #128	; 0x80
 8002112:	d109      	bne.n	8002128 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002126:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	3304      	adds	r3, #4
 800213c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	78db      	ldrb	r3, [r3, #3]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d108      	bne.n	8002158 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2200      	movs	r2, #0
 800214a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	b2db      	uxtb	r3, r3
 8002150:	4619      	mov	r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f00a fcba 	bl	800cacc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002164:	461a      	mov	r2, r3
 8002166:	2302      	movs	r3, #2
 8002168:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002180:	461a      	mov	r2, r3
 8002182:	2320      	movs	r3, #32
 8002184:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	4413      	add	r3, r2
 8002198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219c:	461a      	mov	r2, r3
 800219e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	3301      	adds	r3, #1
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f47f af62 	bne.w	800207c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 f843 	bl	8006248 <USB_ReadInterrupts>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021cc:	f040 80db 	bne.w	8002386 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f004 f864 	bl	80062a2 <USB_ReadDevAllInEpInterrupt>
 80021da:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021e0:	e0cd      	b.n	800237e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80c2 	beq.w	8002372 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f004 f88a 	bl	8006312 <USB_ReadDevInEPInterrupt>
 80021fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d057      	beq.n	80022ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	2201      	movs	r2, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800221e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	69f9      	ldr	r1, [r7, #28]
 8002226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800222a:	4013      	ands	r3, r2
 800222c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800223a:	461a      	mov	r2, r3
 800223c:	2301      	movs	r3, #1
 800223e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d132      	bne.n	80022ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	334c      	adds	r3, #76	; 0x4c
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4403      	add	r3, r0
 8002268:	3348      	adds	r3, #72	; 0x48
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4419      	add	r1, r3
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4403      	add	r3, r0
 800227c:	334c      	adds	r3, #76	; 0x4c
 800227e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	2b00      	cmp	r3, #0
 8002284:	d113      	bne.n	80022ae <HAL_PCD_IRQHandler+0x3a2>
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	3354      	adds	r3, #84	; 0x54
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d108      	bne.n	80022ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022a6:	461a      	mov	r2, r3
 80022a8:	2101      	movs	r1, #1
 80022aa:	f004 f891 	bl	80063d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	4619      	mov	r1, r3
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f00a fb8e 	bl	800c9d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022d0:	461a      	mov	r2, r3
 80022d2:	2308      	movs	r3, #8
 80022d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ec:	461a      	mov	r2, r3
 80022ee:	2310      	movs	r3, #16
 80022f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	4413      	add	r3, r2
 8002304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002308:	461a      	mov	r2, r3
 800230a:	2340      	movs	r3, #64	; 0x40
 800230c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d023      	beq.n	8002360 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800231a:	6a38      	ldr	r0, [r7, #32]
 800231c:	f002 ff72 	bl	8005204 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	3338      	adds	r3, #56	; 0x38
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	3304      	adds	r3, #4
 8002332:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	78db      	ldrb	r3, [r3, #3]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d108      	bne.n	800234e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2200      	movs	r2, #0
 8002340:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4619      	mov	r1, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f00a fbd1 	bl	800caf0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800235a:	461a      	mov	r2, r3
 800235c:	2302      	movs	r3, #2
 800235e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800236a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fd08 	bl	8002d82 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	3301      	adds	r3, #1
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	085b      	lsrs	r3, r3, #1
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	f47f af2e 	bne.w	80021e2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f003 ff5c 	bl	8006248 <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800239a:	d122      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d108      	bne.n	80023cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023c2:	2100      	movs	r1, #0
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 feef 	bl	80031a8 <HAL_PCDEx_LPM_Callback>
 80023ca:	e002      	b.n	80023d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f00a fb6f 	bl	800cab0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 ff2e 	bl	8006248 <USB_ReadInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023f6:	d112      	bne.n	800241e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d102      	bne.n	800240e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f00a fb2b 	bl	800ca64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800241c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f003 ff10 	bl	8006248 <USB_ReadInterrupts>
 8002428:	4603      	mov	r3, r0
 800242a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002432:	f040 80b7 	bne.w	80025a4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2110      	movs	r1, #16
 8002450:	4618      	mov	r0, r3
 8002452:	f002 fed7 	bl	8005204 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002456:	2300      	movs	r3, #0
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800245a:	e046      	b.n	80024ea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002468:	461a      	mov	r2, r3
 800246a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800246e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002480:	0151      	lsls	r1, r2, #5
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	440a      	add	r2, r1
 8002486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800248a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800248e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249c:	461a      	mov	r2, r3
 800249e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b4:	0151      	lsls	r1, r2, #5
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	440a      	add	r2, r1
 80024ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d4:	0151      	lsls	r1, r2, #5
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	440a      	add	r2, r1
 80024da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	3301      	adds	r3, #1
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d3b3      	bcc.n	800245c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002502:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002506:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	2b00      	cmp	r3, #0
 800250e:	d016      	beq.n	800253e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002520:	f043 030b 	orr.w	r3, r3, #11
 8002524:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002536:	f043 030b 	orr.w	r3, r3, #11
 800253a:	6453      	str	r3, [r2, #68]	; 0x44
 800253c:	e015      	b.n	800256a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800254c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002550:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002554:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002564:	f043 030b 	orr.w	r3, r3, #11
 8002568:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002578:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800257c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800258e:	461a      	mov	r2, r3
 8002590:	f003 ff1e 	bl	80063d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f003 fe4d 	bl	8006248 <USB_ReadInterrupts>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b8:	d124      	bne.n	8002604 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fee3 	bl	800638a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f002 fe98 	bl	80052fe <USB_GetDevSpeed>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461a      	mov	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681c      	ldr	r4, [r3, #0]
 80025da:	f001 fa15 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 80025de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	4620      	mov	r0, r4
 80025ea:	f002 fb97 	bl	8004d1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f00a fa19 	bl	800ca26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002602:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f003 fe1d 	bl	8006248 <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d10a      	bne.n	800262e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f00a f9f6 	bl	800ca0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695a      	ldr	r2, [r3, #20]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f002 0208 	and.w	r2, r2, #8
 800262c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fe08 	bl	8006248 <USB_ReadInterrupts>
 8002638:	4603      	mov	r3, r0
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d122      	bne.n	8002688 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800264e:	2301      	movs	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	e014      	b.n	800267e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	b2db      	uxtb	r3, r3
 8002670:	4619      	mov	r1, r3
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fb27 	bl	8002cc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	3301      	adds	r3, #1
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	429a      	cmp	r2, r3
 8002686:	d3e5      	bcc.n	8002654 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fddb 	bl	8006248 <USB_ReadInterrupts>
 8002692:	4603      	mov	r3, r0
 8002694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800269c:	d13b      	bne.n	8002716 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800269e:	2301      	movs	r3, #1
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	e02b      	b.n	80026fc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3340      	adds	r3, #64	; 0x40
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d115      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80026ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da12      	bge.n	80026f6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	333f      	adds	r3, #63	; 0x3f
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fae8 	bl	8002cc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	3301      	adds	r3, #1
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002702:	429a      	cmp	r2, r3
 8002704:	d3ce      	bcc.n	80026a4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002714:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f003 fd94 	bl	8006248 <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800272a:	d155      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800272c:	2301      	movs	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
 8002730:	e045      	b.n	80027be <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4413      	add	r3, r2
 800273a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d12e      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800275a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	da2b      	bge.n	80027b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800276c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002770:	429a      	cmp	r2, r3
 8002772:	d121      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b4:	6053      	str	r3, [r2, #4]
            break;
 80027b6:	e007      	b.n	80027c8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	3301      	adds	r3, #1
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d3b4      	bcc.n	8002732 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f003 fd33 	bl	8006248 <USB_ReadInterrupts>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ec:	d10a      	bne.n	8002804 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f00a f990 	bl	800cb14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002802:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f003 fd1d 	bl	8006248 <USB_ReadInterrupts>
 800280e:	4603      	mov	r3, r0
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b04      	cmp	r3, #4
 8002816:	d115      	bne.n	8002844 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f00a f980 	bl	800cb30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	430a      	orrs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	e000      	b.n	8002844 <HAL_PCD_IRQHandler+0x938>
      return;
 8002842:	bf00      	nop
    }
  }
}
 8002844:	3734      	adds	r7, #52	; 0x34
 8002846:	46bd      	mov	sp, r7
 8002848:	bd90      	pop	{r4, r7, pc}

0800284a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_PCD_SetAddress+0x1a>
 8002860:	2302      	movs	r3, #2
 8002862:	e013      	b.n	800288c <HAL_PCD_SetAddress+0x42>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f003 fc7b 	bl	8006178 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	4608      	mov	r0, r1
 800289e:	4611      	mov	r1, r2
 80028a0:	461a      	mov	r2, r3
 80028a2:	4603      	mov	r3, r0
 80028a4:	70fb      	strb	r3, [r7, #3]
 80028a6:	460b      	mov	r3, r1
 80028a8:	803b      	strh	r3, [r7, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	da0f      	bge.n	80028da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	f003 020f 	and.w	r2, r3, #15
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	3338      	adds	r3, #56	; 0x38
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	3304      	adds	r3, #4
 80028d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	705a      	strb	r2, [r3, #1]
 80028d8:	e00f      	b.n	80028fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	f003 020f 	and.w	r2, r3, #15
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	3304      	adds	r3, #4
 80028f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028fa:	78fb      	ldrb	r3, [r7, #3]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	b2da      	uxtb	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002906:	883a      	ldrh	r2, [r7, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	78ba      	ldrb	r2, [r7, #2]
 8002910:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	785b      	ldrb	r3, [r3, #1]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002924:	78bb      	ldrb	r3, [r7, #2]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d102      	bne.n	8002930 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_PCD_EP_Open+0xaa>
 800293a:	2302      	movs	r3, #2
 800293c:	e00e      	b.n	800295c <HAL_PCD_EP_Open+0xc8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68f9      	ldr	r1, [r7, #12]
 800294c:	4618      	mov	r0, r3
 800294e:	f002 fcfb 	bl	8005348 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800295a:	7afb      	ldrb	r3, [r7, #11]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002974:	2b00      	cmp	r3, #0
 8002976:	da0f      	bge.n	8002998 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	f003 020f 	and.w	r2, r3, #15
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	3338      	adds	r3, #56	; 0x38
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	3304      	adds	r3, #4
 800298e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	705a      	strb	r2, [r3, #1]
 8002996:	e00f      	b.n	80029b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	f003 020f 	and.w	r2, r3, #15
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	3304      	adds	r3, #4
 80029b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_PCD_EP_Close+0x6e>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e00e      	b.n	80029f0 <HAL_PCD_EP_Close+0x8c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f002 fd39 	bl	8005458 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	460b      	mov	r3, r1
 8002a06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a08:	7afb      	ldrb	r3, [r7, #11]
 8002a0a:	f003 020f 	and.w	r2, r3, #15
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3304      	adds	r3, #4
 8002a20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2200      	movs	r2, #0
 8002a38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3a:	7afb      	ldrb	r3, [r7, #11]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a54:	7afb      	ldrb	r3, [r7, #11]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6979      	ldr	r1, [r7, #20]
 8002a6c:	f003 f818 	bl	8005aa0 <USB_EP0StartXfer>
 8002a70:	e008      	b.n	8002a84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6979      	ldr	r1, [r7, #20]
 8002a80:	f002 fdc6 	bl	8005610 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002ab0:	681b      	ldr	r3, [r3, #0]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	460b      	mov	r3, r1
 8002acc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ace:	7afb      	ldrb	r3, [r7, #11]
 8002ad0:	f003 020f 	and.w	r2, r3, #15
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	3338      	adds	r3, #56	; 0x38
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2200      	movs	r2, #0
 8002af6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2201      	movs	r2, #1
 8002afc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002afe:	7afb      	ldrb	r3, [r7, #11]
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d102      	bne.n	8002b18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b18:	7afb      	ldrb	r3, [r7, #11]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	6979      	ldr	r1, [r7, #20]
 8002b30:	f002 ffb6 	bl	8005aa0 <USB_EP0StartXfer>
 8002b34:	e008      	b.n	8002b48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	6979      	ldr	r1, [r7, #20]
 8002b44:	f002 fd64 	bl	8005610 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	f003 020f 	and.w	r2, r3, #15
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d901      	bls.n	8002b70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e050      	b.n	8002c12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	da0f      	bge.n	8002b98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	f003 020f 	and.w	r2, r3, #15
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	3338      	adds	r3, #56	; 0x38
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	705a      	strb	r2, [r3, #1]
 8002b96:	e00d      	b.n	8002bb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	3304      	adds	r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_PCD_EP_SetStall+0x82>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e01e      	b.n	8002c12 <HAL_PCD_EP_SetStall+0xc0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 f9f4 	bl	8005fd0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	b2d9      	uxtb	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c02:	461a      	mov	r2, r3
 8002c04:	f003 fbe4 	bl	80063d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 020f 	and.w	r2, r3, #15
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d901      	bls.n	8002c38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e042      	b.n	8002cbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	da0f      	bge.n	8002c60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	f003 020f 	and.w	r2, r3, #15
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	3338      	adds	r3, #56	; 0x38
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	3304      	adds	r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	705a      	strb	r2, [r3, #1]
 8002c5e:	e00f      	b.n	8002c80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	f003 020f 	and.w	r2, r3, #15
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	3304      	adds	r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_PCD_EP_ClrStall+0x86>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e00e      	b.n	8002cbe <HAL_PCD_EP_ClrStall+0xa4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68f9      	ldr	r1, [r7, #12]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f003 f9fc 	bl	80060ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da0c      	bge.n	8002cf4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 020f 	and.w	r2, r3, #15
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	3338      	adds	r3, #56	; 0x38
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	3304      	adds	r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	e00c      	b.n	8002d0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68f9      	ldr	r1, [r7, #12]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 f81b 	bl	8005d50 <USB_EPStopXfer>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_PCD_EP_Flush+0x1a>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e01b      	b.n	8002d7a <HAL_PCD_EP_Flush+0x52>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8002d4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	da09      	bge.n	8002d66 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4610      	mov	r0, r2
 8002d60:	f002 fa50 	bl	8005204 <USB_FlushTxFifo>
 8002d64:	e004      	b.n	8002d70 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 fa7e 	bl	800526c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b08a      	sub	sp, #40	; 0x28
 8002d86:	af02      	add	r7, sp, #8
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	3338      	adds	r3, #56	; 0x38
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d901      	bls.n	8002dba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e06c      	b.n	8002e94 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d902      	bls.n	8002dd6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3303      	adds	r3, #3
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dde:	e02b      	b.n	8002e38 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d902      	bls.n	8002dfc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	3303      	adds	r3, #3
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6919      	ldr	r1, [r3, #16]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	4603      	mov	r3, r0
 8002e1a:	6978      	ldr	r0, [r7, #20]
 8002e1c:	f003 f842 	bl	8005ea4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	441a      	add	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a1a      	ldr	r2, [r3, #32]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	441a      	add	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d809      	bhi.n	8002e62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a1a      	ldr	r2, [r3, #32]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d203      	bcs.n	8002e62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1be      	bne.n	8002de0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d811      	bhi.n	8002e92 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	2201      	movs	r2, #1
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	6939      	ldr	r1, [r7, #16]
 8002e8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e8e:	4013      	ands	r3, r2
 8002e90:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	333c      	adds	r3, #60	; 0x3c
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d17b      	bne.n	8002fca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d015      	beq.n	8002f08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	4a61      	ldr	r2, [pc, #388]	; (8003064 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	f240 80b9 	bls.w	8003058 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80b3 	beq.w	8003058 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efe:	461a      	mov	r2, r3
 8002f00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f04:	6093      	str	r3, [r2, #8]
 8002f06:	e0a7      	b.n	8003058 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2320      	movs	r3, #32
 8002f22:	6093      	str	r3, [r2, #8]
 8002f24:	e098      	b.n	8003058 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 8093 	bne.w	8003058 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	4a4b      	ldr	r2, [pc, #300]	; (8003064 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d90f      	bls.n	8002f5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f50:	461a      	mov	r2, r3
 8002f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f56:	6093      	str	r3, [r2, #8]
 8002f58:	e07e      	b.n	8003058 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	0159      	lsls	r1, r3, #5
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f86:	1ad2      	subs	r2, r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d114      	bne.n	8002fbc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	f003 fa12 	bl	80063d0 <USB_EP0_OutStart>
 8002fac:	e006      	b.n	8002fbc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	441a      	add	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f009 fcec 	bl	800c9a0 <HAL_PCD_DataOutStageCallback>
 8002fc8:	e046      	b.n	8003058 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	4a26      	ldr	r2, [pc, #152]	; (8003068 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d124      	bne.n	800301c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fee:	6093      	str	r3, [r2, #8]
 8002ff0:	e032      	b.n	8003058 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003008:	461a      	mov	r2, r3
 800300a:	2320      	movs	r3, #32
 800300c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	4619      	mov	r1, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f009 fcc3 	bl	800c9a0 <HAL_PCD_DataOutStageCallback>
 800301a:	e01d      	b.n	8003058 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d114      	bne.n	800304c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d108      	bne.n	800304c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003044:	461a      	mov	r2, r3
 8003046:	2100      	movs	r1, #0
 8003048:	f003 f9c2 	bl	80063d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	4619      	mov	r1, r3
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f009 fca4 	bl	800c9a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	4f54300a 	.word	0x4f54300a
 8003068:	4f54310a 	.word	0x4f54310a

0800306c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	333c      	adds	r3, #60	; 0x3c
 8003084:	3304      	adds	r3, #4
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4413      	add	r3, r2
 8003092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4a15      	ldr	r2, [pc, #84]	; (80030f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d90e      	bls.n	80030c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d009      	beq.n	80030c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b8:	461a      	mov	r2, r3
 80030ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f009 fc5b 	bl	800c97c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d90c      	bls.n	80030e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d108      	bne.n	80030e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030e0:	461a      	mov	r2, r3
 80030e2:	2101      	movs	r1, #1
 80030e4:	f003 f974 	bl	80063d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	4f54300a 	.word	0x4f54300a

080030f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	70fb      	strb	r3, [r7, #3]
 8003104:	4613      	mov	r3, r2
 8003106:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d107      	bne.n	8003126 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003116:	883b      	ldrh	r3, [r7, #0]
 8003118:	0419      	lsls	r1, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	430a      	orrs	r2, r1
 8003122:	629a      	str	r2, [r3, #40]	; 0x28
 8003124:	e028      	b.n	8003178 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	4413      	add	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	e00d      	b.n	8003156 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	3340      	adds	r3, #64	; 0x40
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	0c1b      	lsrs	r3, r3, #16
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	4413      	add	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	3301      	adds	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	3b01      	subs	r3, #1
 800315c:	429a      	cmp	r2, r3
 800315e:	d3ec      	bcc.n	800313a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003160:	883b      	ldrh	r3, [r7, #0]
 8003162:	0418      	lsls	r0, r3, #16
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6819      	ldr	r1, [r3, #0]
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	3b01      	subs	r3, #1
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	4302      	orrs	r2, r0
 8003170:	3340      	adds	r3, #64	; 0x40
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e267      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d075      	beq.n	80032ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031de:	4b88      	ldr	r3, [pc, #544]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d00c      	beq.n	8003204 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ea:	4b85      	ldr	r3, [pc, #532]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d112      	bne.n	800321c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f6:	4b82      	ldr	r3, [pc, #520]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003202:	d10b      	bne.n	800321c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	4b7e      	ldr	r3, [pc, #504]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d05b      	beq.n	80032c8 <HAL_RCC_OscConfig+0x108>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d157      	bne.n	80032c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e242      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d106      	bne.n	8003234 <HAL_RCC_OscConfig+0x74>
 8003226:	4b76      	ldr	r3, [pc, #472]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a75      	ldr	r2, [pc, #468]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e01d      	b.n	8003270 <HAL_RCC_OscConfig+0xb0>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0x98>
 800323e:	4b70      	ldr	r3, [pc, #448]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6f      	ldr	r2, [pc, #444]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 8003244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b6d      	ldr	r3, [pc, #436]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6c      	ldr	r2, [pc, #432]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0xb0>
 8003258:	4b69      	ldr	r3, [pc, #420]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a68      	ldr	r2, [pc, #416]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 800325e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b66      	ldr	r3, [pc, #408]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a65      	ldr	r2, [pc, #404]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 800326a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d013      	beq.n	80032a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fe f8e8 	bl	800144c <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003280:	f7fe f8e4 	bl	800144c <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e207      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b5b      	ldr	r3, [pc, #364]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0xc0>
 800329e:	e014      	b.n	80032ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7fe f8d4 	bl	800144c <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a8:	f7fe f8d0 	bl	800144c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e1f3      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ba:	4b51      	ldr	r3, [pc, #324]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0xe8>
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d063      	beq.n	800339e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d6:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e2:	4b47      	ldr	r3, [pc, #284]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d11c      	bne.n	8003328 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ee:	4b44      	ldr	r3, [pc, #272]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d116      	bne.n	8003328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fa:	4b41      	ldr	r3, [pc, #260]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_RCC_OscConfig+0x152>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e1c7      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4937      	ldr	r1, [pc, #220]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	e03a      	b.n	800339e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003330:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_RCC_OscConfig+0x244>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fe f889 	bl	800144c <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333e:	f7fe f885 	bl	800144c <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1a8      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003350:	4b2b      	ldr	r3, [pc, #172]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335c:	4b28      	ldr	r3, [pc, #160]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4925      	ldr	r1, [pc, #148]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]
 8003370:	e015      	b.n	800339e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_OscConfig+0x244>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe f868 	bl	800144c <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003380:	f7fe f864 	bl	800144c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e187      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d036      	beq.n	8003418 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d016      	beq.n	80033e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b2:	4b15      	ldr	r3, [pc, #84]	; (8003408 <HAL_RCC_OscConfig+0x248>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fe f848 	bl	800144c <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fe f844 	bl	800144c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e167      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_OscConfig+0x240>)
 80033d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x200>
 80033de:	e01b      	b.n	8003418 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_OscConfig+0x248>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e6:	f7fe f831 	bl	800144c <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ec:	e00e      	b.n	800340c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ee:	f7fe f82d 	bl	800144c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d907      	bls.n	800340c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e150      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
 8003400:	40023800 	.word	0x40023800
 8003404:	42470000 	.word	0x42470000
 8003408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	4b88      	ldr	r3, [pc, #544]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 800340e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1ea      	bne.n	80033ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8097 	beq.w	8003554 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342a:	4b81      	ldr	r3, [pc, #516]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	4b7d      	ldr	r3, [pc, #500]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	4a7c      	ldr	r2, [pc, #496]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 8003440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003444:	6413      	str	r3, [r2, #64]	; 0x40
 8003446:	4b7a      	ldr	r3, [pc, #488]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b77      	ldr	r3, [pc, #476]	; (8003634 <HAL_RCC_OscConfig+0x474>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d118      	bne.n	8003494 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003462:	4b74      	ldr	r3, [pc, #464]	; (8003634 <HAL_RCC_OscConfig+0x474>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a73      	ldr	r2, [pc, #460]	; (8003634 <HAL_RCC_OscConfig+0x474>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346e:	f7fd ffed 	bl	800144c <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003476:	f7fd ffe9 	bl	800144c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e10c      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <HAL_RCC_OscConfig+0x474>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d106      	bne.n	80034aa <HAL_RCC_OscConfig+0x2ea>
 800349c:	4b64      	ldr	r3, [pc, #400]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a0:	4a63      	ldr	r2, [pc, #396]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6713      	str	r3, [r2, #112]	; 0x70
 80034a8:	e01c      	b.n	80034e4 <HAL_RCC_OscConfig+0x324>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x30c>
 80034b2:	4b5f      	ldr	r3, [pc, #380]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a5e      	ldr	r2, [pc, #376]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
 80034be:	4b5c      	ldr	r3, [pc, #368]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4a5b      	ldr	r2, [pc, #364]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0x324>
 80034cc:	4b58      	ldr	r3, [pc, #352]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	4a57      	ldr	r2, [pc, #348]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	6713      	str	r3, [r2, #112]	; 0x70
 80034d8:	4b55      	ldr	r3, [pc, #340]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a54      	ldr	r2, [pc, #336]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 80034de:	f023 0304 	bic.w	r3, r3, #4
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d015      	beq.n	8003518 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ec:	f7fd ffae 	bl	800144c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f2:	e00a      	b.n	800350a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f4:	f7fd ffaa 	bl	800144c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e0cb      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350a:	4b49      	ldr	r3, [pc, #292]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0ee      	beq.n	80034f4 <HAL_RCC_OscConfig+0x334>
 8003516:	e014      	b.n	8003542 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003518:	f7fd ff98 	bl	800144c <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351e:	e00a      	b.n	8003536 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7fd ff94 	bl	800144c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0b5      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003536:	4b3e      	ldr	r3, [pc, #248]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1ee      	bne.n	8003520 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003548:	4b39      	ldr	r3, [pc, #228]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	4a38      	ldr	r2, [pc, #224]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 800354e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80a1 	beq.w	80036a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800355e:	4b34      	ldr	r3, [pc, #208]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b08      	cmp	r3, #8
 8003568:	d05c      	beq.n	8003624 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d141      	bne.n	80035f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	4b31      	ldr	r3, [pc, #196]	; (8003638 <HAL_RCC_OscConfig+0x478>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fd ff68 	bl	800144c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003580:	f7fd ff64 	bl	800144c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e087      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	4b27      	ldr	r3, [pc, #156]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69da      	ldr	r2, [r3, #28]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	019b      	lsls	r3, r3, #6
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	3b01      	subs	r3, #1
 80035b8:	041b      	lsls	r3, r3, #16
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	061b      	lsls	r3, r3, #24
 80035c2:	491b      	ldr	r1, [pc, #108]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c8:	4b1b      	ldr	r3, [pc, #108]	; (8003638 <HAL_RCC_OscConfig+0x478>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ce:	f7fd ff3d 	bl	800144c <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fd ff39 	bl	800144c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e05c      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e8:	4b11      	ldr	r3, [pc, #68]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x416>
 80035f4:	e054      	b.n	80036a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f6:	4b10      	ldr	r3, [pc, #64]	; (8003638 <HAL_RCC_OscConfig+0x478>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fd ff26 	bl	800144c <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003604:	f7fd ff22 	bl	800144c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e045      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <HAL_RCC_OscConfig+0x470>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x444>
 8003622:	e03d      	b.n	80036a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d107      	bne.n	800363c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e038      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
 8003630:	40023800 	.word	0x40023800
 8003634:	40007000 	.word	0x40007000
 8003638:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <HAL_RCC_OscConfig+0x4ec>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d028      	beq.n	800369c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d121      	bne.n	800369c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d11a      	bne.n	800369c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800366c:	4013      	ands	r3, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003672:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003674:	4293      	cmp	r3, r2
 8003676:	d111      	bne.n	800369c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	3b01      	subs	r3, #1
 8003686:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d107      	bne.n	800369c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800

080036b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0cc      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c4:	4b68      	ldr	r3, [pc, #416]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d90c      	bls.n	80036ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b65      	ldr	r3, [pc, #404]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b63      	ldr	r3, [pc, #396]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0b8      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d020      	beq.n	800373a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003704:	4b59      	ldr	r3, [pc, #356]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a58      	ldr	r2, [pc, #352]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800370e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800371c:	4b53      	ldr	r3, [pc, #332]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4a52      	ldr	r2, [pc, #328]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003728:	4b50      	ldr	r3, [pc, #320]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	494d      	ldr	r1, [pc, #308]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d044      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b47      	ldr	r3, [pc, #284]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d119      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e07f      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d003      	beq.n	800376e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800376a:	2b03      	cmp	r3, #3
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376e:	4b3f      	ldr	r3, [pc, #252]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e06f      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377e:	4b3b      	ldr	r3, [pc, #236]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e067      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378e:	4b37      	ldr	r3, [pc, #220]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4934      	ldr	r1, [pc, #208]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	4313      	orrs	r3, r2
 800379e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a0:	f7fd fe54 	bl	800144c <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	e00a      	b.n	80037be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a8:	f7fd fe50 	bl	800144c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e04f      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	4b2b      	ldr	r3, [pc, #172]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 020c 	and.w	r2, r3, #12
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d1eb      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037d0:	4b25      	ldr	r3, [pc, #148]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d20c      	bcs.n	80037f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b22      	ldr	r3, [pc, #136]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b20      	ldr	r3, [pc, #128]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e032      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4916      	ldr	r1, [pc, #88]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	490e      	ldr	r1, [pc, #56]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003836:	f000 f821 	bl	800387c <HAL_RCC_GetSysClockFreq>
 800383a:	4602      	mov	r2, r0
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	490a      	ldr	r1, [pc, #40]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	5ccb      	ldrb	r3, [r1, r3]
 800384a:	fa22 f303 	lsr.w	r3, r2, r3
 800384e:	4a09      	ldr	r2, [pc, #36]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_RCC_ClockConfig+0x1c8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fd fb8a 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40023c00 	.word	0x40023c00
 800386c:	40023800 	.word	0x40023800
 8003870:	0800f394 	.word	0x0800f394
 8003874:	20000010 	.word	0x20000010
 8003878:	20000014 	.word	0x20000014

0800387c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800387c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003880:	b090      	sub	sp, #64	; 0x40
 8003882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
 8003888:	2300      	movs	r3, #0
 800388a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800388c:	2300      	movs	r3, #0
 800388e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b08      	cmp	r3, #8
 800389e:	d00d      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0x40>
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	f200 80a1 	bhi.w	80039e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x34>
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ae:	e09b      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038b0:	4b53      	ldr	r3, [pc, #332]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x184>)
 80038b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80038b4:	e09b      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038b6:	4b53      	ldr	r3, [pc, #332]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80038b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038ba:	e098      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038bc:	4b4f      	ldr	r3, [pc, #316]	; (80039fc <HAL_RCC_GetSysClockFreq+0x180>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038c6:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <HAL_RCC_GetSysClockFreq+0x180>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d028      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d2:	4b4a      	ldr	r3, [pc, #296]	; (80039fc <HAL_RCC_GetSysClockFreq+0x180>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	099b      	lsrs	r3, r3, #6
 80038d8:	2200      	movs	r2, #0
 80038da:	623b      	str	r3, [r7, #32]
 80038dc:	627a      	str	r2, [r7, #36]	; 0x24
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038e4:	2100      	movs	r1, #0
 80038e6:	4b47      	ldr	r3, [pc, #284]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80038e8:	fb03 f201 	mul.w	r2, r3, r1
 80038ec:	2300      	movs	r3, #0
 80038ee:	fb00 f303 	mul.w	r3, r0, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	4a43      	ldr	r2, [pc, #268]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80038f6:	fba0 1202 	umull	r1, r2, r0, r2
 80038fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038fc:	460a      	mov	r2, r1
 80038fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003902:	4413      	add	r3, r2
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	2200      	movs	r2, #0
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	61fa      	str	r2, [r7, #28]
 800390e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003912:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003916:	f7fc fc63 	bl	80001e0 <__aeabi_uldivmod>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4613      	mov	r3, r2
 8003920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003922:	e053      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003924:	4b35      	ldr	r3, [pc, #212]	; (80039fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	099b      	lsrs	r3, r3, #6
 800392a:	2200      	movs	r2, #0
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	617a      	str	r2, [r7, #20]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003936:	f04f 0b00 	mov.w	fp, #0
 800393a:	4652      	mov	r2, sl
 800393c:	465b      	mov	r3, fp
 800393e:	f04f 0000 	mov.w	r0, #0
 8003942:	f04f 0100 	mov.w	r1, #0
 8003946:	0159      	lsls	r1, r3, #5
 8003948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800394c:	0150      	lsls	r0, r2, #5
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	ebb2 080a 	subs.w	r8, r2, sl
 8003956:	eb63 090b 	sbc.w	r9, r3, fp
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003966:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800396a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800396e:	ebb2 0408 	subs.w	r4, r2, r8
 8003972:	eb63 0509 	sbc.w	r5, r3, r9
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	00eb      	lsls	r3, r5, #3
 8003980:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003984:	00e2      	lsls	r2, r4, #3
 8003986:	4614      	mov	r4, r2
 8003988:	461d      	mov	r5, r3
 800398a:	eb14 030a 	adds.w	r3, r4, sl
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	eb45 030b 	adc.w	r3, r5, fp
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039a2:	4629      	mov	r1, r5
 80039a4:	028b      	lsls	r3, r1, #10
 80039a6:	4621      	mov	r1, r4
 80039a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ac:	4621      	mov	r1, r4
 80039ae:	028a      	lsls	r2, r1, #10
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b6:	2200      	movs	r2, #0
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	60fa      	str	r2, [r7, #12]
 80039bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039c0:	f7fc fc0e 	bl	80001e0 <__aeabi_uldivmod>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4613      	mov	r3, r2
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_GetSysClockFreq+0x180>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	3301      	adds	r3, #1
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039e6:	e002      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x184>)
 80039ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3740      	adds	r7, #64	; 0x40
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	017d7840 	.word	0x017d7840

08003a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000010 	.word	0x20000010

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a9b      	lsrs	r3, r3, #10
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4903      	ldr	r1, [pc, #12]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	0800f3a4 	.word	0x0800f3a4

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a4c:	f7ff ffdc 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	0b5b      	lsrs	r3, r3, #13
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4903      	ldr	r1, [pc, #12]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	0800f3a4 	.word	0x0800f3a4

08003a70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	220f      	movs	r2, #15
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a80:	4b12      	ldr	r3, [pc, #72]	; (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0203 	and.w	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a98:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	08db      	lsrs	r3, r3, #3
 8003aaa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <HAL_RCC_GetClockConfig+0x60>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0207 	and.w	r2, r3, #7
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	601a      	str	r2, [r3, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40023c00 	.word	0x40023c00

08003ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e07b      	b.n	8003bde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d108      	bne.n	8003b00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af6:	d009      	beq.n	8003b0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	61da      	str	r2, [r3, #28]
 8003afe:	e005      	b.n	8003b0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fc ff58 	bl	80009dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b90:	ea42 0103 	orr.w	r1, r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	0c1b      	lsrs	r3, r3, #16
 8003baa:	f003 0104 	and.w	r1, r3, #4
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f003 0210 	and.w	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69da      	ldr	r2, [r3, #28]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b088      	sub	sp, #32
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_SPI_Transmit+0x22>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e126      	b.n	8003e56 <HAL_SPI_Transmit+0x270>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c10:	f7fd fc1c 	bl	800144c <HAL_GetTick>
 8003c14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d002      	beq.n	8003c2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
 8003c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c2a:	e10b      	b.n	8003e44 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_SPI_Transmit+0x52>
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c3c:	e102      	b.n	8003e44 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2203      	movs	r2, #3
 8003c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	88fa      	ldrh	r2, [r7, #6]
 8003c56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c84:	d10f      	bne.n	8003ca6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ca4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d007      	beq.n	8003cc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ccc:	d14b      	bne.n	8003d66 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_SPI_Transmit+0xf6>
 8003cd6:	8afb      	ldrh	r3, [r7, #22]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d13e      	bne.n	8003d5a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	881a      	ldrh	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	1c9a      	adds	r2, r3, #2
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d00:	e02b      	b.n	8003d5a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d112      	bne.n	8003d36 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	881a      	ldrh	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	1c9a      	adds	r2, r3, #2
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d34:	e011      	b.n	8003d5a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d36:	f7fd fb89 	bl	800144c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d803      	bhi.n	8003d4e <HAL_SPI_Transmit+0x168>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d102      	bne.n	8003d54 <HAL_SPI_Transmit+0x16e>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d58:	e074      	b.n	8003e44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ce      	bne.n	8003d02 <HAL_SPI_Transmit+0x11c>
 8003d64:	e04c      	b.n	8003e00 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_SPI_Transmit+0x18e>
 8003d6e:	8afb      	ldrh	r3, [r7, #22]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d140      	bne.n	8003df6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	7812      	ldrb	r2, [r2, #0]
 8003d80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d9a:	e02c      	b.n	8003df6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d113      	bne.n	8003dd2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	330c      	adds	r3, #12
 8003db4:	7812      	ldrb	r2, [r2, #0]
 8003db6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dd0:	e011      	b.n	8003df6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd2:	f7fd fb3b 	bl	800144c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d803      	bhi.n	8003dea <HAL_SPI_Transmit+0x204>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d102      	bne.n	8003df0 <HAL_SPI_Transmit+0x20a>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003df4:	e026      	b.n	8003e44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1cd      	bne.n	8003d9c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	6839      	ldr	r1, [r7, #0]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f8b3 	bl	8003f70 <SPI_EndRxTxTransaction>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	77fb      	strb	r3, [r7, #31]
 8003e40:	e000      	b.n	8003e44 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e70:	f7fd faec 	bl	800144c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e80:	f7fd fae4 	bl	800144c <HAL_GetTick>
 8003e84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e86:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	015b      	lsls	r3, r3, #5
 8003e8c:	0d1b      	lsrs	r3, r3, #20
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e96:	e054      	b.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9e:	d050      	beq.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ea0:	f7fd fad4 	bl	800144c <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d902      	bls.n	8003eb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d13d      	bne.n	8003f32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ec4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ece:	d111      	bne.n	8003ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed8:	d004      	beq.n	8003ee4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee2:	d107      	bne.n	8003ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efc:	d10f      	bne.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e017      	b.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	bf0c      	ite	eq
 8003f52:	2301      	moveq	r3, #1
 8003f54:	2300      	movne	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d19b      	bne.n	8003e98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000010 	.word	0x20000010

08003f70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <SPI_EndRxTxTransaction+0x7c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1b      	ldr	r2, [pc, #108]	; (8003ff0 <SPI_EndRxTxTransaction+0x80>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	0d5b      	lsrs	r3, r3, #21
 8003f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f8c:	fb02 f303 	mul.w	r3, r2, r3
 8003f90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f9a:	d112      	bne.n	8003fc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2180      	movs	r1, #128	; 0x80
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7ff ff5a 	bl	8003e60 <SPI_WaitFlagStateUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	f043 0220 	orr.w	r2, r3, #32
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e00f      	b.n	8003fe2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d0f2      	beq.n	8003fc2 <SPI_EndRxTxTransaction+0x52>
 8003fdc:	e000      	b.n	8003fe0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003fde:	bf00      	nop
  }

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000010 	.word	0x20000010
 8003ff0:	165e9f81 	.word	0x165e9f81

08003ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e041      	b.n	800408a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f839 	bl	8004092 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f000 fb82 	bl	800473c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d001      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e044      	b.n	800414a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1e      	ldr	r2, [pc, #120]	; (8004158 <HAL_TIM_Base_Start_IT+0xb0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d018      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x6c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ea:	d013      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x6c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1a      	ldr	r2, [pc, #104]	; (800415c <HAL_TIM_Base_Start_IT+0xb4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00e      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x6c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a19      	ldr	r2, [pc, #100]	; (8004160 <HAL_TIM_Base_Start_IT+0xb8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d009      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x6c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a17      	ldr	r2, [pc, #92]	; (8004164 <HAL_TIM_Base_Start_IT+0xbc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x6c>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a16      	ldr	r2, [pc, #88]	; (8004168 <HAL_TIM_Base_Start_IT+0xc0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d111      	bne.n	8004138 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b06      	cmp	r3, #6
 8004124:	d010      	beq.n	8004148 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0201 	orr.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004136:	e007      	b.n	8004148 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40010000 	.word	0x40010000
 800415c:	40000400 	.word	0x40000400
 8004160:	40000800 	.word	0x40000800
 8004164:	40000c00 	.word	0x40000c00
 8004168:	40014000 	.word	0x40014000

0800416c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e041      	b.n	8004202 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fd f89e 	bl	80012d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f000 fac6 	bl	800473c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b086      	sub	sp, #24
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e097      	b.n	800434e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fc ffe6 	bl	8001204 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800424e:	f023 0307 	bic.w	r3, r3, #7
 8004252:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f000 fa6c 	bl	800473c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428c:	f023 0303 	bic.w	r3, r3, #3
 8004290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	4313      	orrs	r3, r2
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80042aa:	f023 030c 	bic.w	r3, r3, #12
 80042ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	4313      	orrs	r3, r2
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	011a      	lsls	r2, r3, #4
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	031b      	lsls	r3, r3, #12
 80042da:	4313      	orrs	r3, r2
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042e8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042f0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	4313      	orrs	r3, r2
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b02      	cmp	r3, #2
 800436a:	d122      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d11b      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f06f 0202 	mvn.w	r2, #2
 8004382:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f9b1 	bl	8004700 <HAL_TIM_IC_CaptureCallback>
 800439e:	e005      	b.n	80043ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f9a3 	bl	80046ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f9b4 	bl	8004714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d122      	bne.n	8004406 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d11b      	bne.n	8004406 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f06f 0204 	mvn.w	r2, #4
 80043d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f987 	bl	8004700 <HAL_TIM_IC_CaptureCallback>
 80043f2:	e005      	b.n	8004400 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f979 	bl	80046ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f98a 	bl	8004714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b08      	cmp	r3, #8
 8004412:	d122      	bne.n	800445a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b08      	cmp	r3, #8
 8004420:	d11b      	bne.n	800445a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f06f 0208 	mvn.w	r2, #8
 800442a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2204      	movs	r2, #4
 8004430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f95d 	bl	8004700 <HAL_TIM_IC_CaptureCallback>
 8004446:	e005      	b.n	8004454 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f94f 	bl	80046ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f960 	bl	8004714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b10      	cmp	r3, #16
 8004466:	d122      	bne.n	80044ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b10      	cmp	r3, #16
 8004474:	d11b      	bne.n	80044ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f06f 0210 	mvn.w	r2, #16
 800447e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2208      	movs	r2, #8
 8004484:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f933 	bl	8004700 <HAL_TIM_IC_CaptureCallback>
 800449a:	e005      	b.n	80044a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f925 	bl	80046ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f936 	bl	8004714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d10e      	bne.n	80044da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d107      	bne.n	80044da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f06f 0201 	mvn.w	r2, #1
 80044d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7fc fa33 	bl	8000940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e4:	2b80      	cmp	r3, #128	; 0x80
 80044e6:	d10e      	bne.n	8004506 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f2:	2b80      	cmp	r3, #128	; 0x80
 80044f4:	d107      	bne.n	8004506 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fb9f 	bl	8004c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	d10e      	bne.n	8004532 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	d107      	bne.n	8004532 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800452a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f8fb 	bl	8004728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b20      	cmp	r3, #32
 800453e:	d10e      	bne.n	800455e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b20      	cmp	r3, #32
 800454c:	d107      	bne.n	800455e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f06f 0220 	mvn.w	r2, #32
 8004556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fb69 	bl	8004c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004582:	2302      	movs	r3, #2
 8004584:	e0ae      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b0c      	cmp	r3, #12
 8004592:	f200 809f 	bhi.w	80046d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004596:	a201      	add	r2, pc, #4	; (adr r2, 800459c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045d1 	.word	0x080045d1
 80045a0:	080046d5 	.word	0x080046d5
 80045a4:	080046d5 	.word	0x080046d5
 80045a8:	080046d5 	.word	0x080046d5
 80045ac:	08004611 	.word	0x08004611
 80045b0:	080046d5 	.word	0x080046d5
 80045b4:	080046d5 	.word	0x080046d5
 80045b8:	080046d5 	.word	0x080046d5
 80045bc:	08004653 	.word	0x08004653
 80045c0:	080046d5 	.word	0x080046d5
 80045c4:	080046d5 	.word	0x080046d5
 80045c8:	080046d5 	.word	0x080046d5
 80045cc:	08004693 	.word	0x08004693
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f930 	bl	800483c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0208 	orr.w	r2, r2, #8
 80045ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0204 	bic.w	r2, r2, #4
 80045fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6999      	ldr	r1, [r3, #24]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	619a      	str	r2, [r3, #24]
      break;
 800460e:	e064      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f976 	bl	8004908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800462a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6999      	ldr	r1, [r3, #24]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	021a      	lsls	r2, r3, #8
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	619a      	str	r2, [r3, #24]
      break;
 8004650:	e043      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68b9      	ldr	r1, [r7, #8]
 8004658:	4618      	mov	r0, r3
 800465a:	f000 f9c1 	bl	80049e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0208 	orr.w	r2, r2, #8
 800466c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0204 	bic.w	r2, r2, #4
 800467c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69d9      	ldr	r1, [r3, #28]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	61da      	str	r2, [r3, #28]
      break;
 8004690:	e023      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fa0b 	bl	8004ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69da      	ldr	r2, [r3, #28]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69d9      	ldr	r1, [r3, #28]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	021a      	lsls	r2, r3, #8
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	61da      	str	r2, [r3, #28]
      break;
 80046d2:	e002      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
      break;
 80046d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a34      	ldr	r2, [pc, #208]	; (8004820 <TIM_Base_SetConfig+0xe4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00f      	beq.n	8004774 <TIM_Base_SetConfig+0x38>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475a:	d00b      	beq.n	8004774 <TIM_Base_SetConfig+0x38>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a31      	ldr	r2, [pc, #196]	; (8004824 <TIM_Base_SetConfig+0xe8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d007      	beq.n	8004774 <TIM_Base_SetConfig+0x38>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a30      	ldr	r2, [pc, #192]	; (8004828 <TIM_Base_SetConfig+0xec>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d003      	beq.n	8004774 <TIM_Base_SetConfig+0x38>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a2f      	ldr	r2, [pc, #188]	; (800482c <TIM_Base_SetConfig+0xf0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d108      	bne.n	8004786 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a25      	ldr	r2, [pc, #148]	; (8004820 <TIM_Base_SetConfig+0xe4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01b      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004794:	d017      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a22      	ldr	r2, [pc, #136]	; (8004824 <TIM_Base_SetConfig+0xe8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d013      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a21      	ldr	r2, [pc, #132]	; (8004828 <TIM_Base_SetConfig+0xec>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00f      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a20      	ldr	r2, [pc, #128]	; (800482c <TIM_Base_SetConfig+0xf0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00b      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <TIM_Base_SetConfig+0xf4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d007      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <TIM_Base_SetConfig+0xf8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d003      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a1d      	ldr	r2, [pc, #116]	; (8004838 <TIM_Base_SetConfig+0xfc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d108      	bne.n	80047d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a08      	ldr	r2, [pc, #32]	; (8004820 <TIM_Base_SetConfig+0xe4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d103      	bne.n	800480c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	615a      	str	r2, [r3, #20]
}
 8004812:	bf00      	nop
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40010000 	.word	0x40010000
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40014000 	.word	0x40014000
 8004834:	40014400 	.word	0x40014400
 8004838:	40014800 	.word	0x40014800

0800483c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f023 0201 	bic.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0303 	bic.w	r3, r3, #3
 8004872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f023 0302 	bic.w	r3, r3, #2
 8004884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a1c      	ldr	r2, [pc, #112]	; (8004904 <TIM_OC1_SetConfig+0xc8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d10c      	bne.n	80048b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 0308 	bic.w	r3, r3, #8
 800489e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f023 0304 	bic.w	r3, r3, #4
 80048b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a13      	ldr	r2, [pc, #76]	; (8004904 <TIM_OC1_SetConfig+0xc8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d111      	bne.n	80048de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	621a      	str	r2, [r3, #32]
}
 80048f8:	bf00      	nop
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	40010000 	.word	0x40010000

08004908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	f023 0210 	bic.w	r2, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f023 0320 	bic.w	r3, r3, #32
 8004952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a1e      	ldr	r2, [pc, #120]	; (80049dc <TIM_OC2_SetConfig+0xd4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d10d      	bne.n	8004984 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800496e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004982:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a15      	ldr	r2, [pc, #84]	; (80049dc <TIM_OC2_SetConfig+0xd4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d113      	bne.n	80049b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800499a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40010000 	.word	0x40010000

080049e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0303 	bic.w	r3, r3, #3
 8004a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a1d      	ldr	r2, [pc, #116]	; (8004ab0 <TIM_OC3_SetConfig+0xd0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d10d      	bne.n	8004a5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <TIM_OC3_SetConfig+0xd0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d113      	bne.n	8004a8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	621a      	str	r2, [r3, #32]
}
 8004aa4:	bf00      	nop
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	40010000 	.word	0x40010000

08004ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	031b      	lsls	r3, r3, #12
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a10      	ldr	r2, [pc, #64]	; (8004b50 <TIM_OC4_SetConfig+0x9c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d109      	bne.n	8004b28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	019b      	lsls	r3, r3, #6
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40010000 	.word	0x40010000

08004b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e050      	b.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d018      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb8:	d013      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a18      	ldr	r2, [pc, #96]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00e      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a16      	ldr	r2, [pc, #88]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a15      	ldr	r2, [pc, #84]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a13      	ldr	r2, [pc, #76]	; (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10c      	bne.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40010000 	.word	0x40010000
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40000800 	.word	0x40000800
 8004c28:	40000c00 	.word	0x40000c00
 8004c2c:	40014000 	.word	0x40014000

08004c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c58:	b084      	sub	sp, #16
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	f107 001c 	add.w	r0, r7, #28
 8004c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d122      	bne.n	8004cb6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d105      	bne.n	8004caa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f001 fbee 	bl	800648c <USB_CoreReset>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	73fb      	strb	r3, [r7, #15]
 8004cb4:	e01a      	b.n	8004cec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 fbe2 	bl	800648c <USB_CoreReset>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8004cde:	e005      	b.n	8004cec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d10b      	bne.n	8004d0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f043 0206 	orr.w	r2, r3, #6
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f043 0220 	orr.w	r2, r3, #32
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d16:	b004      	add	sp, #16
 8004d18:	4770      	bx	lr
	...

08004d1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	4613      	mov	r3, r2
 8004d28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d165      	bne.n	8004dfc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4a41      	ldr	r2, [pc, #260]	; (8004e38 <USB_SetTurnaroundTime+0x11c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d906      	bls.n	8004d46 <USB_SetTurnaroundTime+0x2a>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4a40      	ldr	r2, [pc, #256]	; (8004e3c <USB_SetTurnaroundTime+0x120>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d202      	bcs.n	8004d46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d40:	230f      	movs	r3, #15
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	e062      	b.n	8004e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4a3c      	ldr	r2, [pc, #240]	; (8004e3c <USB_SetTurnaroundTime+0x120>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d306      	bcc.n	8004d5c <USB_SetTurnaroundTime+0x40>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	4a3b      	ldr	r2, [pc, #236]	; (8004e40 <USB_SetTurnaroundTime+0x124>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d202      	bcs.n	8004d5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d56:	230e      	movs	r3, #14
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	e057      	b.n	8004e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4a38      	ldr	r2, [pc, #224]	; (8004e40 <USB_SetTurnaroundTime+0x124>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d306      	bcc.n	8004d72 <USB_SetTurnaroundTime+0x56>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4a37      	ldr	r2, [pc, #220]	; (8004e44 <USB_SetTurnaroundTime+0x128>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d202      	bcs.n	8004d72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d6c:	230d      	movs	r3, #13
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	e04c      	b.n	8004e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4a33      	ldr	r2, [pc, #204]	; (8004e44 <USB_SetTurnaroundTime+0x128>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d306      	bcc.n	8004d88 <USB_SetTurnaroundTime+0x6c>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4a32      	ldr	r2, [pc, #200]	; (8004e48 <USB_SetTurnaroundTime+0x12c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d802      	bhi.n	8004d88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d82:	230c      	movs	r3, #12
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e041      	b.n	8004e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4a2f      	ldr	r2, [pc, #188]	; (8004e48 <USB_SetTurnaroundTime+0x12c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d906      	bls.n	8004d9e <USB_SetTurnaroundTime+0x82>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4a2e      	ldr	r2, [pc, #184]	; (8004e4c <USB_SetTurnaroundTime+0x130>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d802      	bhi.n	8004d9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d98:	230b      	movs	r3, #11
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	e036      	b.n	8004e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4a2a      	ldr	r2, [pc, #168]	; (8004e4c <USB_SetTurnaroundTime+0x130>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d906      	bls.n	8004db4 <USB_SetTurnaroundTime+0x98>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	4a29      	ldr	r2, [pc, #164]	; (8004e50 <USB_SetTurnaroundTime+0x134>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d802      	bhi.n	8004db4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004dae:	230a      	movs	r3, #10
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	e02b      	b.n	8004e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4a26      	ldr	r2, [pc, #152]	; (8004e50 <USB_SetTurnaroundTime+0x134>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d906      	bls.n	8004dca <USB_SetTurnaroundTime+0xae>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4a25      	ldr	r2, [pc, #148]	; (8004e54 <USB_SetTurnaroundTime+0x138>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d202      	bcs.n	8004dca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004dc4:	2309      	movs	r3, #9
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	e020      	b.n	8004e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4a21      	ldr	r2, [pc, #132]	; (8004e54 <USB_SetTurnaroundTime+0x138>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d306      	bcc.n	8004de0 <USB_SetTurnaroundTime+0xc4>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4a20      	ldr	r2, [pc, #128]	; (8004e58 <USB_SetTurnaroundTime+0x13c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d802      	bhi.n	8004de0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004dda:	2308      	movs	r3, #8
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	e015      	b.n	8004e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <USB_SetTurnaroundTime+0x13c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d906      	bls.n	8004df6 <USB_SetTurnaroundTime+0xda>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <USB_SetTurnaroundTime+0x140>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d202      	bcs.n	8004df6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004df0:	2307      	movs	r3, #7
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	e00a      	b.n	8004e0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004df6:	2306      	movs	r3, #6
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e007      	b.n	8004e0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d102      	bne.n	8004e08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e02:	2309      	movs	r3, #9
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	e001      	b.n	8004e0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e08:	2309      	movs	r3, #9
 8004e0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	029b      	lsls	r3, r3, #10
 8004e20:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e24:	431a      	orrs	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	00d8acbf 	.word	0x00d8acbf
 8004e3c:	00e4e1c0 	.word	0x00e4e1c0
 8004e40:	00f42400 	.word	0x00f42400
 8004e44:	01067380 	.word	0x01067380
 8004e48:	011a499f 	.word	0x011a499f
 8004e4c:	01312cff 	.word	0x01312cff
 8004e50:	014ca43f 	.word	0x014ca43f
 8004e54:	016e3600 	.word	0x016e3600
 8004e58:	01a6ab1f 	.word	0x01a6ab1f
 8004e5c:	01e84800 	.word	0x01e84800

08004e60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f043 0201 	orr.w	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f023 0201 	bic.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d115      	bne.n	8004ef2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ed2:	2001      	movs	r0, #1
 8004ed4:	f7fc fac6 	bl	8001464 <HAL_Delay>
      ms++;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f001 fa45 	bl	800636e <USB_GetMode>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d01e      	beq.n	8004f28 <USB_SetCurrentMode+0x84>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b31      	cmp	r3, #49	; 0x31
 8004eee:	d9f0      	bls.n	8004ed2 <USB_SetCurrentMode+0x2e>
 8004ef0:	e01a      	b.n	8004f28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d115      	bne.n	8004f24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f04:	2001      	movs	r0, #1
 8004f06:	f7fc faad 	bl	8001464 <HAL_Delay>
      ms++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 fa2c 	bl	800636e <USB_GetMode>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <USB_SetCurrentMode+0x84>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b31      	cmp	r3, #49	; 0x31
 8004f20:	d9f0      	bls.n	8004f04 <USB_SetCurrentMode+0x60>
 8004f22:	e001      	b.n	8004f28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e005      	b.n	8004f34 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b32      	cmp	r3, #50	; 0x32
 8004f2c:	d101      	bne.n	8004f32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b086      	sub	sp, #24
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f56:	2300      	movs	r3, #0
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	e009      	b.n	8004f70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	3340      	adds	r3, #64	; 0x40
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	2200      	movs	r2, #0
 8004f68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b0e      	cmp	r3, #14
 8004f74:	d9f2      	bls.n	8004f5c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d11c      	bne.n	8004fb6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f8a:	f043 0302 	orr.w	r3, r3, #2
 8004f8e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
 8004fb4:	e00b      	b.n	8004fce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe8:	461a      	mov	r2, r3
 8004fea:	680b      	ldr	r3, [r1, #0]
 8004fec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d10c      	bne.n	800500e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d104      	bne.n	8005004 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f965 	bl	80052cc <USB_SetDevSpeed>
 8005002:	e008      	b.n	8005016 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005004:	2101      	movs	r1, #1
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f960 	bl	80052cc <USB_SetDevSpeed>
 800500c:	e003      	b.n	8005016 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800500e:	2103      	movs	r1, #3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f95b 	bl	80052cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005016:	2110      	movs	r1, #16
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f8f3 	bl	8005204 <USB_FlushTxFifo>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f91f 	bl	800526c <USB_FlushRxFifo>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503e:	461a      	mov	r2, r3
 8005040:	2300      	movs	r3, #0
 8005042:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504a:	461a      	mov	r2, r3
 800504c:	2300      	movs	r3, #0
 800504e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	461a      	mov	r2, r3
 8005058:	2300      	movs	r3, #0
 800505a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800505c:	2300      	movs	r3, #0
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	e043      	b.n	80050ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005078:	d118      	bne.n	80050ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508c:	461a      	mov	r2, r3
 800508e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	e013      	b.n	80050be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a2:	461a      	mov	r2, r3
 80050a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e008      	b.n	80050be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	461a      	mov	r2, r3
 80050ba:	2300      	movs	r3, #0
 80050bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ca:	461a      	mov	r2, r3
 80050cc:	2300      	movs	r3, #0
 80050ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	461a      	mov	r2, r3
 80050de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	3301      	adds	r3, #1
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d3b7      	bcc.n	8005062 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	e043      	b.n	8005180 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800510a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800510e:	d118      	bne.n	8005142 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005122:	461a      	mov	r2, r3
 8005124:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	e013      	b.n	8005154 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	461a      	mov	r2, r3
 800513a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	e008      	b.n	8005154 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514e:	461a      	mov	r2, r3
 8005150:	2300      	movs	r3, #0
 8005152:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005160:	461a      	mov	r2, r3
 8005162:	2300      	movs	r3, #0
 8005164:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	461a      	mov	r2, r3
 8005174:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005178:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	3301      	adds	r3, #1
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	429a      	cmp	r2, r3
 8005186:	d3b7      	bcc.n	80050f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005196:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800519a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d105      	bne.n	80051bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	f043 0210 	orr.w	r2, r3, #16
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699a      	ldr	r2, [r3, #24]
 80051c0:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <USB_DevInit+0x2c4>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f043 0208 	orr.w	r2, r3, #8
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d107      	bne.n	80051f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051e8:	f043 0304 	orr.w	r3, r3, #4
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051fc:	b004      	add	sp, #16
 80051fe:	4770      	bx	lr
 8005200:	803c3800 	.word	0x803c3800

08005204 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a13      	ldr	r2, [pc, #76]	; (8005268 <USB_FlushTxFifo+0x64>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e01b      	b.n	800525c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	daf2      	bge.n	8005212 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	019b      	lsls	r3, r3, #6
 8005234:	f043 0220 	orr.w	r2, r3, #32
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3301      	adds	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4a08      	ldr	r2, [pc, #32]	; (8005268 <USB_FlushTxFifo+0x64>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d901      	bls.n	800524e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e006      	b.n	800525c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b20      	cmp	r3, #32
 8005258:	d0f0      	beq.n	800523c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	00030d40 	.word	0x00030d40

0800526c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4a11      	ldr	r2, [pc, #68]	; (80052c8 <USB_FlushRxFifo+0x5c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e018      	b.n	80052bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	daf2      	bge.n	8005278 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2210      	movs	r2, #16
 800529a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <USB_FlushRxFifo+0x5c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d901      	bls.n	80052ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e006      	b.n	80052bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d0f0      	beq.n	800529c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	00030d40 	.word	0x00030d40

080052cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	68f9      	ldr	r1, [r7, #12]
 80052e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ec:	4313      	orrs	r3, r2
 80052ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052fe:	b480      	push	{r7}
 8005300:	b087      	sub	sp, #28
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 0306 	and.w	r3, r3, #6
 8005316:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d102      	bne.n	8005324 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800531e:	2300      	movs	r3, #0
 8005320:	75fb      	strb	r3, [r7, #23]
 8005322:	e00a      	b.n	800533a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d002      	beq.n	8005330 <USB_GetDevSpeed+0x32>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b06      	cmp	r3, #6
 800532e:	d102      	bne.n	8005336 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005330:	2302      	movs	r3, #2
 8005332:	75fb      	strb	r3, [r7, #23]
 8005334:	e001      	b.n	800533a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005336:	230f      	movs	r3, #15
 8005338:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800533a:	7dfb      	ldrb	r3, [r7, #23]
}
 800533c:	4618      	mov	r0, r3
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	785b      	ldrb	r3, [r3, #1]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d13a      	bne.n	80053da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	f003 030f 	and.w	r3, r3, #15
 8005374:	2101      	movs	r1, #1
 8005376:	fa01 f303 	lsl.w	r3, r1, r3
 800537a:	b29b      	uxth	r3, r3
 800537c:	68f9      	ldr	r1, [r7, #12]
 800537e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005382:	4313      	orrs	r3, r2
 8005384:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d155      	bne.n	8005448 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	791b      	ldrb	r3, [r3, #4]
 80053b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	059b      	lsls	r3, r3, #22
 80053be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053c0:	4313      	orrs	r3, r2
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	0151      	lsls	r1, r2, #5
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	440a      	add	r2, r1
 80053ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	e036      	b.n	8005448 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	2101      	movs	r1, #1
 80053ec:	fa01 f303 	lsl.w	r3, r1, r3
 80053f0:	041b      	lsls	r3, r3, #16
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053f8:	4313      	orrs	r3, r2
 80053fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d11a      	bne.n	8005448 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	791b      	ldrb	r3, [r3, #4]
 800542c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800542e:	430b      	orrs	r3, r1
 8005430:	4313      	orrs	r3, r2
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005446:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d161      	bne.n	8005538 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800548a:	d11f      	bne.n	80054cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	2101      	movs	r1, #1
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	68f9      	ldr	r1, [r7, #12]
 80054e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ec:	4013      	ands	r3, r2
 80054ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	2101      	movs	r1, #1
 8005502:	fa01 f303 	lsl.w	r3, r1, r3
 8005506:	b29b      	uxth	r3, r3
 8005508:	43db      	mvns	r3, r3
 800550a:	68f9      	ldr	r1, [r7, #12]
 800550c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005510:	4013      	ands	r3, r2
 8005512:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	0159      	lsls	r1, r3, #5
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	440b      	add	r3, r1
 800552a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552e:	4619      	mov	r1, r3
 8005530:	4b35      	ldr	r3, [pc, #212]	; (8005608 <USB_DeactivateEndpoint+0x1b0>)
 8005532:	4013      	ands	r3, r2
 8005534:	600b      	str	r3, [r1, #0]
 8005536:	e060      	b.n	80055fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800554a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800554e:	d11f      	bne.n	8005590 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	440a      	add	r2, r1
 8005566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800556e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	440a      	add	r2, r1
 8005586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800558a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800558e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	2101      	movs	r1, #1
 80055a2:	fa01 f303 	lsl.w	r3, r1, r3
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	43db      	mvns	r3, r3
 80055aa:	68f9      	ldr	r1, [r7, #12]
 80055ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b0:	4013      	ands	r3, r2
 80055b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	2101      	movs	r1, #1
 80055c6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	43db      	mvns	r3, r3
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d4:	4013      	ands	r3, r2
 80055d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	0159      	lsls	r1, r3, #5
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	440b      	add	r3, r1
 80055ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f2:	4619      	mov	r1, r3
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <USB_DeactivateEndpoint+0x1b4>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	ec337800 	.word	0xec337800
 800560c:	eff37800 	.word	0xeff37800

08005610 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08a      	sub	sp, #40	; 0x28
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	2b01      	cmp	r3, #1
 800562e:	f040 815c 	bne.w	80058ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d132      	bne.n	80056a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005654:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005658:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800565c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	440a      	add	r2, r1
 8005674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005678:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800567c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	0151      	lsls	r1, r2, #5
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	440a      	add	r2, r1
 8005694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005698:	0cdb      	lsrs	r3, r3, #19
 800569a:	04db      	lsls	r3, r3, #19
 800569c:	6113      	str	r3, [r2, #16]
 800569e:	e074      	b.n	800578a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ba:	0cdb      	lsrs	r3, r3, #19
 80056bc:	04db      	lsls	r3, r3, #19
 80056be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6999      	ldr	r1, [r3, #24]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	440b      	add	r3, r1
 80056fc:	1e59      	subs	r1, r3, #1
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	fbb1 f3f3 	udiv	r3, r1, r3
 8005706:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005708:	4b9d      	ldr	r3, [pc, #628]	; (8005980 <USB_EPStartXfer+0x370>)
 800570a:	400b      	ands	r3, r1
 800570c:	69b9      	ldr	r1, [r7, #24]
 800570e:	0148      	lsls	r0, r1, #5
 8005710:	69f9      	ldr	r1, [r7, #28]
 8005712:	4401      	add	r1, r0
 8005714:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005718:	4313      	orrs	r3, r2
 800571a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005728:	691a      	ldr	r2, [r3, #16]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005732:	69b9      	ldr	r1, [r7, #24]
 8005734:	0148      	lsls	r0, r1, #5
 8005736:	69f9      	ldr	r1, [r7, #28]
 8005738:	4401      	add	r1, r0
 800573a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800573e:	4313      	orrs	r3, r2
 8005740:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	791b      	ldrb	r3, [r3, #4]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d11f      	bne.n	800578a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	0151      	lsls	r1, r2, #5
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	440a      	add	r2, r1
 8005760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005764:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005768:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	69fa      	ldr	r2, [r7, #28]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005784:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005788:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d14b      	bne.n	8005828 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d009      	beq.n	80057ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	461a      	mov	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	791b      	ldrb	r3, [r3, #4]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d128      	bne.n	8005806 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d110      	bne.n	80057e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	e00f      	b.n	8005806 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005804:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	440a      	add	r2, r1
 800581c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005820:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	e133      	b.n	8005a90 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	440a      	add	r2, r1
 800583e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005842:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005846:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	791b      	ldrb	r3, [r3, #4]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d015      	beq.n	800587c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 811b 	beq.w	8005a90 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	2101      	movs	r1, #1
 800586c:	fa01 f303 	lsl.w	r3, r1, r3
 8005870:	69f9      	ldr	r1, [r7, #28]
 8005872:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005876:	4313      	orrs	r3, r2
 8005878:	634b      	str	r3, [r1, #52]	; 0x34
 800587a:	e109      	b.n	8005a90 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d110      	bne.n	80058ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	e00f      	b.n	80058ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6919      	ldr	r1, [r3, #16]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	781a      	ldrb	r2, [r3, #0]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	b298      	uxth	r0, r3
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	4603      	mov	r3, r0
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 fade 	bl	8005ea4 <USB_WritePacket>
 80058e8:	e0d2      	b.n	8005a90 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005904:	0cdb      	lsrs	r3, r3, #19
 8005906:	04db      	lsls	r3, r3, #19
 8005908:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	440a      	add	r2, r1
 8005920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005924:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005928:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800592c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d126      	bne.n	8005984 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800594c:	69b9      	ldr	r1, [r7, #24]
 800594e:	0148      	lsls	r0, r1, #5
 8005950:	69f9      	ldr	r1, [r7, #28]
 8005952:	4401      	add	r1, r0
 8005954:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005958:	4313      	orrs	r3, r2
 800595a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	440a      	add	r2, r1
 8005972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005976:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800597a:	6113      	str	r3, [r2, #16]
 800597c:	e03a      	b.n	80059f4 <USB_EPStartXfer+0x3e4>
 800597e:	bf00      	nop
 8005980:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	4413      	add	r3, r2
 800598e:	1e5a      	subs	r2, r3, #1
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	fbb2 f3f3 	udiv	r3, r2, r3
 8005998:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	8afa      	ldrh	r2, [r7, #22]
 80059a0:	fb03 f202 	mul.w	r2, r3, r2
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	8afb      	ldrh	r3, [r7, #22]
 80059b8:	04d9      	lsls	r1, r3, #19
 80059ba:	4b38      	ldr	r3, [pc, #224]	; (8005a9c <USB_EPStartXfer+0x48c>)
 80059bc:	400b      	ands	r3, r1
 80059be:	69b9      	ldr	r1, [r7, #24]
 80059c0:	0148      	lsls	r0, r1, #5
 80059c2:	69f9      	ldr	r1, [r7, #28]
 80059c4:	4401      	add	r1, r0
 80059c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059ca:	4313      	orrs	r3, r2
 80059cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e4:	69b9      	ldr	r1, [r7, #24]
 80059e6:	0148      	lsls	r0, r1, #5
 80059e8:	69f9      	ldr	r1, [r7, #28]
 80059ea:	4401      	add	r1, r0
 80059ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059f0:	4313      	orrs	r3, r2
 80059f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d10d      	bne.n	8005a16 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	6919      	ldr	r1, [r3, #16]
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	460a      	mov	r2, r1
 8005a14:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	791b      	ldrb	r3, [r3, #4]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d128      	bne.n	8005a70 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d110      	bne.n	8005a50 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	e00f      	b.n	8005a70 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3720      	adds	r7, #32
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	1ff80000 	.word	0x1ff80000

08005aa0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	f040 80ce 	bne.w	8005c5e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d132      	bne.n	8005b30 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ae8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b28:	0cdb      	lsrs	r3, r3, #19
 8005b2a:	04db      	lsls	r3, r3, #19
 8005b2c:	6113      	str	r3, [r2, #16]
 8005b2e:	e04e      	b.n	8005bce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4a:	0cdb      	lsrs	r3, r3, #19
 8005b4c:	04db      	lsls	r3, r3, #19
 8005b4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b72:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	699a      	ldr	r2, [r3, #24]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d903      	bls.n	8005b88 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ba6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bbe:	6939      	ldr	r1, [r7, #16]
 8005bc0:	0148      	lsls	r0, r1, #5
 8005bc2:	6979      	ldr	r1, [r7, #20]
 8005bc4:	4401      	add	r1, r0
 8005bc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005bce:	79fb      	ldrb	r3, [r7, #7]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d11e      	bne.n	8005c12 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d009      	beq.n	8005bf0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be8:	461a      	mov	r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	e097      	b.n	8005d42 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c30:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 8083 	beq.w	8005d42 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	f003 030f 	and.w	r3, r3, #15
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c52:	6979      	ldr	r1, [r7, #20]
 8005c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	634b      	str	r3, [r1, #52]	; 0x34
 8005c5c:	e071      	b.n	8005d42 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c78:	0cdb      	lsrs	r3, r3, #19
 8005c7a:	04db      	lsls	r3, r3, #19
 8005c7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ca0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cf0:	6939      	ldr	r1, [r7, #16]
 8005cf2:	0148      	lsls	r0, r1, #5
 8005cf4:	6979      	ldr	r1, [r7, #20]
 8005cf6:	4401      	add	r1, r0
 8005cf8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d00:	79fb      	ldrb	r3, [r7, #7]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d10d      	bne.n	8005d22 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	6919      	ldr	r1, [r3, #16]
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	460a      	mov	r2, r1
 8005d20:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d14a      	bne.n	8005e04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d86:	f040 8086 	bne.w	8005e96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	7812      	ldrb	r2, [r2, #0]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f242 7210 	movw	r2, #10000	; 0x2710
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d902      	bls.n	8005de8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	75fb      	strb	r3, [r7, #23]
          break;
 8005de6:	e056      	b.n	8005e96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e00:	d0e7      	beq.n	8005dd2 <USB_EPStopXfer+0x82>
 8005e02:	e048      	b.n	8005e96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e1c:	d13b      	bne.n	8005e96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d902      	bls.n	8005e7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	75fb      	strb	r3, [r7, #23]
          break;
 8005e7a:	e00c      	b.n	8005e96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e94:	d0e7      	beq.n	8005e66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b089      	sub	sp, #36	; 0x24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	4611      	mov	r1, r2
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	71fb      	strb	r3, [r7, #7]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ec2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d123      	bne.n	8005f12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005eca:	88bb      	ldrh	r3, [r7, #4]
 8005ecc:	3303      	adds	r3, #3
 8005ece:	089b      	lsrs	r3, r3, #2
 8005ed0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	e018      	b.n	8005f0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ed8:	79fb      	ldrb	r3, [r7, #7]
 8005eda:	031a      	lsls	r2, r3, #12
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	3301      	adds	r3, #1
 8005efc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3301      	adds	r3, #1
 8005f02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	3301      	adds	r3, #1
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d3e2      	bcc.n	8005ed8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3724      	adds	r7, #36	; 0x24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b08b      	sub	sp, #44	; 0x2c
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	089b      	lsrs	r3, r3, #2
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	f003 0303 	and.w	r3, r3, #3
 8005f44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f46:	2300      	movs	r3, #0
 8005f48:	623b      	str	r3, [r7, #32]
 8005f4a:	e014      	b.n	8005f76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	3301      	adds	r3, #1
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	3301      	adds	r3, #1
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	3301      	adds	r3, #1
 8005f74:	623b      	str	r3, [r7, #32]
 8005f76:	6a3a      	ldr	r2, [r7, #32]
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d3e6      	bcc.n	8005f4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f7e:	8bfb      	ldrh	r3, [r7, #30]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01e      	beq.n	8005fc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f107 0310 	add.w	r3, r7, #16
 8005f94:	6812      	ldr	r2, [r2, #0]
 8005f96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	701a      	strb	r2, [r3, #0]
      i++;
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	3301      	adds	r3, #1
 8005fae:	623b      	str	r3, [r7, #32]
      pDest++;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005fb6:	8bfb      	ldrh	r3, [r7, #30]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005fbc:	8bfb      	ldrh	r3, [r7, #30]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1ea      	bne.n	8005f98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	372c      	adds	r7, #44	; 0x2c
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d12c      	bne.n	8006046 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	db12      	blt.n	8006024 <USB_EPSetStall+0x54>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00f      	beq.n	8006024 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006022:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	0151      	lsls	r1, r2, #5
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	440a      	add	r2, r1
 800603a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	e02b      	b.n	800609e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	db12      	blt.n	800607e <USB_EPSetStall+0xae>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00f      	beq.n	800607e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	440a      	add	r2, r1
 8006074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006078:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800607c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	0151      	lsls	r1, r2, #5
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	440a      	add	r2, r1
 8006094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006098:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800609c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d128      	bne.n	800611a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	791b      	ldrb	r3, [r3, #4]
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d003      	beq.n	80060f8 <USB_EPClearStall+0x4c>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	791b      	ldrb	r3, [r3, #4]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d138      	bne.n	800616a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	0151      	lsls	r1, r2, #5
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	440a      	add	r2, r1
 800610e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	e027      	b.n	800616a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	0151      	lsls	r1, r2, #5
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	440a      	add	r2, r1
 8006130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006134:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006138:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	791b      	ldrb	r3, [r3, #4]
 800613e:	2b03      	cmp	r3, #3
 8006140:	d003      	beq.n	800614a <USB_EPClearStall+0x9e>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	791b      	ldrb	r3, [r3, #4]
 8006146:	2b02      	cmp	r3, #2
 8006148:	d10f      	bne.n	800616a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	440a      	add	r2, r1
 8006160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006168:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006196:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800619a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80061ac:	68f9      	ldr	r1, [r7, #12]
 80061ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061b2:	4313      	orrs	r3, r2
 80061b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061de:	f023 0303 	bic.w	r3, r3, #3
 80061e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061f2:	f023 0302 	bic.w	r3, r3, #2
 80061f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006206:	b480      	push	{r7}
 8006208:	b085      	sub	sp, #20
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006220:	f023 0303 	bic.w	r3, r3, #3
 8006224:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006234:	f043 0302 	orr.w	r3, r3, #2
 8006238:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4013      	ands	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006260:	68fb      	ldr	r3, [r7, #12]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	4013      	ands	r3, r2
 8006290:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	0c1b      	lsrs	r3, r3, #16
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b085      	sub	sp, #20
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	4013      	ands	r3, r2
 80062c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	b29b      	uxth	r3, r3
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	460b      	mov	r3, r1
 80062e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	4013      	ands	r3, r2
 8006302:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006304:	68bb      	ldr	r3, [r7, #8]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006312:	b480      	push	{r7}
 8006314:	b087      	sub	sp, #28
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006334:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006336:	78fb      	ldrb	r3, [r7, #3]
 8006338:	f003 030f 	and.w	r3, r3, #15
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	fa22 f303 	lsr.w	r3, r2, r3
 8006342:	01db      	lsls	r3, r3, #7
 8006344:	b2db      	uxtb	r3, r3
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4013      	ands	r3, r2
 800635e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006360:	68bb      	ldr	r3, [r7, #8]
}
 8006362:	4618      	mov	r0, r3
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	f003 0301 	and.w	r3, r3, #1
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063a8:	f023 0307 	bic.w	r3, r3, #7
 80063ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	460b      	mov	r3, r1
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	333c      	adds	r3, #60	; 0x3c
 80063e6:	3304      	adds	r3, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	4a26      	ldr	r2, [pc, #152]	; (8006488 <USB_EP0_OutStart+0xb8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d90a      	bls.n	800640a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006404:	d101      	bne.n	800640a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	e037      	b.n	800647a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006410:	461a      	mov	r2, r3
 8006412:	2300      	movs	r3, #0
 8006414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006428:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006438:	f043 0318 	orr.w	r3, r3, #24
 800643c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800644c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006450:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006452:	7afb      	ldrb	r3, [r7, #11]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d10f      	bne.n	8006478 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645e:	461a      	mov	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006472:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006476:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	4f54300a 	.word	0x4f54300a

0800648c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4a13      	ldr	r2, [pc, #76]	; (80064f0 <USB_CoreReset+0x64>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d901      	bls.n	80064aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e01b      	b.n	80064e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	daf2      	bge.n	8006498 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f043 0201 	orr.w	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3301      	adds	r3, #1
 80064c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4a09      	ldr	r2, [pc, #36]	; (80064f0 <USB_CoreReset+0x64>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d901      	bls.n	80064d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e006      	b.n	80064e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d0f0      	beq.n	80064c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	00030d40 	.word	0x00030d40

080064f4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006500:	f44f 701d 	mov.w	r0, #628	; 0x274
 8006504:	f006 fccc 	bl	800cea0 <USBD_static_malloc>
 8006508:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d109      	bne.n	8006524 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	32b0      	adds	r2, #176	; 0xb0
 800651a:	2100      	movs	r1, #0
 800651c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006520:	2302      	movs	r3, #2
 8006522:	e06e      	b.n	8006602 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	32b0      	adds	r2, #176	; 0xb0
 800652e:	68f9      	ldr	r1, [r7, #12]
 8006530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	32b0      	adds	r2, #176	; 0xb0
 800653e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	7c1b      	ldrb	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d12b      	bne.n	80065a8 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006550:	4b2e      	ldr	r3, [pc, #184]	; (800660c <USBD_MSC_Init+0x118>)
 8006552:	7819      	ldrb	r1, [r3, #0]
 8006554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006558:	2202      	movs	r2, #2
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f006 fb5d 	bl	800cc1a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8006560:	4b2a      	ldr	r3, [pc, #168]	; (800660c <USBD_MSC_Init+0x118>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f003 020f 	and.w	r2, r3, #15
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	440b      	add	r3, r1
 8006574:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006578:	2201      	movs	r2, #1
 800657a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800657c:	4b24      	ldr	r3, [pc, #144]	; (8006610 <USBD_MSC_Init+0x11c>)
 800657e:	7819      	ldrb	r1, [r3, #0]
 8006580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006584:	2202      	movs	r2, #2
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f006 fb47 	bl	800cc1a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800658c:	4b20      	ldr	r3, [pc, #128]	; (8006610 <USBD_MSC_Init+0x11c>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	f003 020f 	and.w	r2, r3, #15
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	440b      	add	r3, r1
 80065a0:	3324      	adds	r3, #36	; 0x24
 80065a2:	2201      	movs	r2, #1
 80065a4:	801a      	strh	r2, [r3, #0]
 80065a6:	e028      	b.n	80065fa <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80065a8:	4b18      	ldr	r3, [pc, #96]	; (800660c <USBD_MSC_Init+0x118>)
 80065aa:	7819      	ldrb	r1, [r3, #0]
 80065ac:	2340      	movs	r3, #64	; 0x40
 80065ae:	2202      	movs	r2, #2
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f006 fb32 	bl	800cc1a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80065b6:	4b15      	ldr	r3, [pc, #84]	; (800660c <USBD_MSC_Init+0x118>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f003 020f 	and.w	r2, r3, #15
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065ce:	2201      	movs	r2, #1
 80065d0:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80065d2:	4b0f      	ldr	r3, [pc, #60]	; (8006610 <USBD_MSC_Init+0x11c>)
 80065d4:	7819      	ldrb	r1, [r3, #0]
 80065d6:	2340      	movs	r3, #64	; 0x40
 80065d8:	2202      	movs	r2, #2
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f006 fb1d 	bl	800cc1a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <USBD_MSC_Init+0x11c>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	f003 020f 	and.w	r2, r3, #15
 80065e8:	6879      	ldr	r1, [r7, #4]
 80065ea:	4613      	mov	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	440b      	add	r3, r1
 80065f4:	3324      	adds	r3, #36	; 0x24
 80065f6:	2201      	movs	r2, #1
 80065f8:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa2c 	bl	8006a58 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	2000007f 	.word	0x2000007f
 8006610:	2000007e 	.word	0x2000007e

08006614 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8006620:	4b26      	ldr	r3, [pc, #152]	; (80066bc <USBD_MSC_DeInit+0xa8>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f006 fb1d 	bl	800cc66 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800662c:	4b23      	ldr	r3, [pc, #140]	; (80066bc <USBD_MSC_DeInit+0xa8>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f003 020f 	and.w	r2, r3, #15
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	4613      	mov	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006644:	2200      	movs	r2, #0
 8006646:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8006648:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <USBD_MSC_DeInit+0xac>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f006 fb09 	bl	800cc66 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8006654:	4b1a      	ldr	r3, [pc, #104]	; (80066c0 <USBD_MSC_DeInit+0xac>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	f003 020f 	and.w	r2, r3, #15
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	3324      	adds	r3, #36	; 0x24
 800666a:	2200      	movs	r2, #0
 800666c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	32b0      	adds	r2, #176	; 0xb0
 8006678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d018      	beq.n	80066b2 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fa67 	bl	8006b54 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	32b0      	adds	r2, #176	; 0xb0
 8006690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006694:	4618      	mov	r0, r3
 8006696:	f006 fc11 	bl	800cebc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	32b0      	adds	r2, #176	; 0xb0
 80066a4:	2100      	movs	r1, #0
 80066a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	2000007f 	.word	0x2000007f
 80066c0:	2000007e 	.word	0x2000007e

080066c4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	32b0      	adds	r2, #176	; 0xb0
 80066d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066dc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e0e1      	b.n	80068b4 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d053      	beq.n	80067a4 <USBD_MSC_Setup+0xe0>
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	f040 80d1 	bne.w	80068a4 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	2bfe      	cmp	r3, #254	; 0xfe
 8006708:	d002      	beq.n	8006710 <USBD_MSC_Setup+0x4c>
 800670a:	2bff      	cmp	r3, #255	; 0xff
 800670c:	d02a      	beq.n	8006764 <USBD_MSC_Setup+0xa0>
 800670e:	e041      	b.n	8006794 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	885b      	ldrh	r3, [r3, #2]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11e      	bne.n	8006756 <USBD_MSC_Setup+0x92>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	88db      	ldrh	r3, [r3, #6]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d11a      	bne.n	8006756 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006726:	2b00      	cmp	r3, #0
 8006728:	da15      	bge.n	8006756 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	33b0      	adds	r3, #176	; 0xb0
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	4798      	blx	r3
 800673e:	4603      	mov	r3, r0
 8006740:	461a      	mov	r2, r3
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2201      	movs	r2, #1
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f003 f8f9 	bl	8009944 <USBD_CtlSendData>
 8006752:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006754:	e025      	b.n	80067a2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f003 f882 	bl	8009862 <USBD_CtlError>
            ret = USBD_FAIL;
 800675e:	2303      	movs	r3, #3
 8006760:	75fb      	strb	r3, [r7, #23]
          break;
 8006762:	e01e      	b.n	80067a2 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	885b      	ldrh	r3, [r3, #2]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10c      	bne.n	8006786 <USBD_MSC_Setup+0xc2>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	88db      	ldrh	r3, [r3, #6]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d108      	bne.n	8006786 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800677a:	2b00      	cmp	r3, #0
 800677c:	db03      	blt.n	8006786 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f9b4 	bl	8006aec <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006784:	e00d      	b.n	80067a2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f003 f86a 	bl	8009862 <USBD_CtlError>
            ret = USBD_FAIL;
 800678e:	2303      	movs	r3, #3
 8006790:	75fb      	strb	r3, [r7, #23]
          break;
 8006792:	e006      	b.n	80067a2 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f003 f863 	bl	8009862 <USBD_CtlError>
          ret = USBD_FAIL;
 800679c:	2303      	movs	r3, #3
 800679e:	75fb      	strb	r3, [r7, #23]
          break;
 80067a0:	bf00      	nop
      }
      break;
 80067a2:	e086      	b.n	80068b2 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	785b      	ldrb	r3, [r3, #1]
 80067a8:	2b0b      	cmp	r3, #11
 80067aa:	d872      	bhi.n	8006892 <USBD_MSC_Setup+0x1ce>
 80067ac:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <USBD_MSC_Setup+0xf0>)
 80067ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b2:	bf00      	nop
 80067b4:	080067e5 	.word	0x080067e5
 80067b8:	08006861 	.word	0x08006861
 80067bc:	08006893 	.word	0x08006893
 80067c0:	08006893 	.word	0x08006893
 80067c4:	08006893 	.word	0x08006893
 80067c8:	08006893 	.word	0x08006893
 80067cc:	08006893 	.word	0x08006893
 80067d0:	08006893 	.word	0x08006893
 80067d4:	08006893 	.word	0x08006893
 80067d8:	08006893 	.word	0x08006893
 80067dc:	0800680f 	.word	0x0800680f
 80067e0:	08006839 	.word	0x08006839
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d107      	bne.n	8006800 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80067f0:	f107 030e 	add.w	r3, r7, #14
 80067f4:	2202      	movs	r2, #2
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f003 f8a3 	bl	8009944 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067fe:	e050      	b.n	80068a2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f003 f82d 	bl	8009862 <USBD_CtlError>
            ret = USBD_FAIL;
 8006808:	2303      	movs	r3, #3
 800680a:	75fb      	strb	r3, [r7, #23]
          break;
 800680c:	e049      	b.n	80068a2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b03      	cmp	r3, #3
 8006818:	d107      	bne.n	800682a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	3304      	adds	r3, #4
 800681e:	2201      	movs	r2, #1
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f003 f88e 	bl	8009944 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006828:	e03b      	b.n	80068a2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f003 f818 	bl	8009862 <USBD_CtlError>
            ret = USBD_FAIL;
 8006832:	2303      	movs	r3, #3
 8006834:	75fb      	strb	r3, [r7, #23]
          break;
 8006836:	e034      	b.n	80068a2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b03      	cmp	r3, #3
 8006842:	d106      	bne.n	8006852 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	885b      	ldrh	r3, [r3, #2]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006850:	e027      	b.n	80068a2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f003 f804 	bl	8009862 <USBD_CtlError>
            ret = USBD_FAIL;
 800685a:	2303      	movs	r3, #3
 800685c:	75fb      	strb	r3, [r7, #23]
          break;
 800685e:	e020      	b.n	80068a2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b03      	cmp	r3, #3
 800686a:	d119      	bne.n	80068a0 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	885b      	ldrh	r3, [r3, #2]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d115      	bne.n	80068a0 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	889b      	ldrh	r3, [r3, #4]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f006 fa11 	bl	800cca4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	889b      	ldrh	r3, [r3, #4]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fb2e 	bl	8006eec <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8006890:	e006      	b.n	80068a0 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f002 ffe4 	bl	8009862 <USBD_CtlError>
          ret = USBD_FAIL;
 800689a:	2303      	movs	r3, #3
 800689c:	75fb      	strb	r3, [r7, #23]
          break;
 800689e:	e000      	b.n	80068a2 <USBD_MSC_Setup+0x1de>
          break;
 80068a0:	bf00      	nop
      }
      break;
 80068a2:	e006      	b.n	80068b2 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f002 ffdb 	bl	8009862 <USBD_CtlError>
      ret = USBD_FAIL;
 80068ac:	2303      	movs	r3, #3
 80068ae:	75fb      	strb	r3, [r7, #23]
      break;
 80068b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f959 	bl	8006b84 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f983 	bl	8006bf8 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006904:	2181      	movs	r1, #129	; 0x81
 8006906:	4812      	ldr	r0, [pc, #72]	; (8006950 <USBD_MSC_GetHSCfgDesc+0x54>)
 8006908:	f002 f972 	bl	8008bf0 <USBD_GetEpDesc>
 800690c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800690e:	2101      	movs	r1, #1
 8006910:	480f      	ldr	r0, [pc, #60]	; (8006950 <USBD_MSC_GetHSCfgDesc+0x54>)
 8006912:	f002 f96d 	bl	8008bf0 <USBD_GetEpDesc>
 8006916:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d006      	beq.n	800692c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	711a      	strb	r2, [r3, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f042 0202 	orr.w	r2, r2, #2
 800692a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d006      	beq.n	8006940 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2200      	movs	r2, #0
 8006936:	711a      	strb	r2, [r3, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f042 0202 	orr.w	r2, r2, #2
 800693e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006946:	4b02      	ldr	r3, [pc, #8]	; (8006950 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20000054 	.word	0x20000054

08006954 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800695c:	2181      	movs	r1, #129	; 0x81
 800695e:	4812      	ldr	r0, [pc, #72]	; (80069a8 <USBD_MSC_GetFSCfgDesc+0x54>)
 8006960:	f002 f946 	bl	8008bf0 <USBD_GetEpDesc>
 8006964:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006966:	2101      	movs	r1, #1
 8006968:	480f      	ldr	r0, [pc, #60]	; (80069a8 <USBD_MSC_GetFSCfgDesc+0x54>)
 800696a:	f002 f941 	bl	8008bf0 <USBD_GetEpDesc>
 800696e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d006      	beq.n	8006984 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800697e:	711a      	strb	r2, [r3, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d006      	beq.n	8006998 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2200      	movs	r2, #0
 800698e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006992:	711a      	strb	r2, [r3, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800699e:	4b02      	ldr	r3, [pc, #8]	; (80069a8 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20000054 	.word	0x20000054

080069ac <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80069b4:	2181      	movs	r1, #129	; 0x81
 80069b6:	4812      	ldr	r0, [pc, #72]	; (8006a00 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80069b8:	f002 f91a 	bl	8008bf0 <USBD_GetEpDesc>
 80069bc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80069be:	2101      	movs	r1, #1
 80069c0:	480f      	ldr	r0, [pc, #60]	; (8006a00 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80069c2:	f002 f915 	bl	8008bf0 <USBD_GetEpDesc>
 80069c6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d006      	beq.n	80069dc <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069d6:	711a      	strb	r2, [r3, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d006      	beq.n	80069f0 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ea:	711a      	strb	r2, [r3, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80069f6:	4b02      	ldr	r3, [pc, #8]	; (8006a00 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20000054 	.word	0x20000054

08006a04 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	220a      	movs	r2, #10
 8006a10:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006a12:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	20000074 	.word	0x20000074

08006a24 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e009      	b.n	8006a4c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	33b0      	adds	r3, #176	; 0xb0
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	32b0      	adds	r2, #176	; 0xb0
 8006a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d032      	beq.n	8006adc <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	33b0      	adds	r3, #176	; 0xb0
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2000      	movs	r0, #0
 8006aae:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8006ab0:	4b0c      	ldr	r3, [pc, #48]	; (8006ae4 <MSC_BOT_Init+0x8c>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f006 f8f4 	bl	800cca4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8006abc:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <MSC_BOT_Init+0x90>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f006 f8ee 	bl	800cca4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8006ac8:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <MSC_BOT_Init+0x8c>)
 8006aca:	7819      	ldrb	r1, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006ad2:	231f      	movs	r3, #31
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f006 f9ae 	bl	800ce36 <USBD_LL_PrepareReceive>
 8006ada:	e000      	b.n	8006ade <MSC_BOT_Init+0x86>
    return;
 8006adc:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	2000007f 	.word	0x2000007f
 8006ae8:	2000007e 	.word	0x2000007e

08006aec <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	32b0      	adds	r2, #176	; 0xb0
 8006afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b02:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d01b      	beq.n	8006b42 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8006b16:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <MSC_BOT_Reset+0x60>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f006 f8ff 	bl	800cd20 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8006b22:	4b0b      	ldr	r3, [pc, #44]	; (8006b50 <MSC_BOT_Reset+0x64>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f006 f8f9 	bl	800cd20 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8006b2e:	4b08      	ldr	r3, [pc, #32]	; (8006b50 <MSC_BOT_Reset+0x64>)
 8006b30:	7819      	ldrb	r1, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006b38:	231f      	movs	r3, #31
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f006 f97b 	bl	800ce36 <USBD_LL_PrepareReceive>
 8006b40:	e000      	b.n	8006b44 <MSC_BOT_Reset+0x58>
    return;
 8006b42:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	2000007e 	.word	0x2000007e
 8006b50:	2000007f 	.word	0x2000007f

08006b54 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	32b0      	adds	r2, #176	; 0xb0
 8006b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	721a      	strb	r2, [r3, #8]
  }
}
 8006b78:	bf00      	nop
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	32b0      	adds	r2, #176	; 0xb0
 8006b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d020      	beq.n	8006be8 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	7a1b      	ldrb	r3, [r3, #8]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d005      	beq.n	8006bba <MSC_BOT_DataIn+0x36>
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	db1c      	blt.n	8006bec <MSC_BOT_DataIn+0x68>
 8006bb2:	3b03      	subs	r3, #3
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d819      	bhi.n	8006bec <MSC_BOT_DataIn+0x68>
 8006bb8:	e011      	b.n	8006bde <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f9c9 	bl	8006f60 <SCSI_ProcessCmd>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	da0d      	bge.n	8006bf0 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f90c 	bl	8006df4 <MSC_BOT_SendCSW>
      }
      break;
 8006bdc:	e008      	b.n	8006bf0 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006bde:	2100      	movs	r1, #0
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f907 	bl	8006df4 <MSC_BOT_SendCSW>
      break;
 8006be6:	e004      	b.n	8006bf2 <MSC_BOT_DataIn+0x6e>
    return;
 8006be8:	bf00      	nop
 8006bea:	e002      	b.n	8006bf2 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8006bec:	bf00      	nop
 8006bee:	e000      	b.n	8006bf2 <MSC_BOT_DataIn+0x6e>
      break;
 8006bf0:	bf00      	nop
  }
}
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	32b0      	adds	r2, #176	; 0xb0
 8006c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c12:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d01c      	beq.n	8006c54 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	7a1b      	ldrb	r3, [r3, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <MSC_BOT_DataOut+0x30>
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d004      	beq.n	8006c30 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006c26:	e018      	b.n	8006c5a <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f819 	bl	8006c60 <MSC_BOT_CBW_Decode>
      break;
 8006c2e:	e014      	b.n	8006c5a <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f98e 	bl	8006f60 <SCSI_ProcessCmd>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	da06      	bge.n	8006c58 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f8d1 	bl	8006df4 <MSC_BOT_SendCSW>
      break;
 8006c52:	e001      	b.n	8006c58 <MSC_BOT_DataOut+0x60>
    return;
 8006c54:	bf00      	nop
 8006c56:	e000      	b.n	8006c5a <MSC_BOT_DataOut+0x62>
      break;
 8006c58:	bf00      	nop
  }
}
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	32b0      	adds	r2, #176	; 0xb0
 8006c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c76:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d079      	beq.n	8006d72 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8006c96:	4b3a      	ldr	r3, [pc, #232]	; (8006d80 <MSC_BOT_CBW_Decode+0x120>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f006 f8eb 	bl	800ce78 <USBD_LL_GetRxDataSize>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b1f      	cmp	r3, #31
 8006ca6:	d114      	bne.n	8006cd2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8006cae:	4a35      	ldr	r2, [pc, #212]	; (8006d84 <MSC_BOT_CBW_Decode+0x124>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d10e      	bne.n	8006cd2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d809      	bhi.n	8006cd2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d004      	beq.n	8006cd2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006cce:	2b10      	cmp	r3, #16
 8006cd0:	d90e      	bls.n	8006cf0 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006cd8:	2320      	movs	r3, #32
 8006cda:	2205      	movs	r2, #5
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fe28 	bl	8007932 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f8bd 	bl	8006e68 <MSC_BOT_Abort>
 8006cee:	e043      	b.n	8006d78 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f92e 	bl	8006f60 <SCSI_ProcessCmd>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da0c      	bge.n	8006d24 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	7a1b      	ldrb	r3, [r3, #8]
 8006d0e:	2b05      	cmp	r3, #5
 8006d10:	d104      	bne.n	8006d1c <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006d12:	2101      	movs	r1, #1
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f86d 	bl	8006df4 <MSC_BOT_SendCSW>
 8006d1a:	e02d      	b.n	8006d78 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f8a3 	bl	8006e68 <MSC_BOT_Abort>
 8006d22:	e029      	b.n	8006d78 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	7a1b      	ldrb	r3, [r3, #8]
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d024      	beq.n	8006d76 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d020      	beq.n	8006d76 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d01c      	beq.n	8006d76 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d009      	beq.n	8006d58 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f103 0110 	add.w	r1, r3, #16
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f819 	bl	8006d88 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006d56:	e00f      	b.n	8006d78 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d104      	bne.n	8006d6a <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006d60:	2100      	movs	r1, #0
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f846 	bl	8006df4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006d68:	e006      	b.n	8006d78 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f87c 	bl	8006e68 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006d70:	e002      	b.n	8006d78 <MSC_BOT_CBW_Decode+0x118>
    return;
 8006d72:	bf00      	nop
 8006d74:	e000      	b.n	8006d78 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8006d76:	bf00      	nop
    }
  }
}
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	2000007f 	.word	0x2000007f
 8006d84:	43425355 	.word	0x43425355

08006d88 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	32b0      	adds	r2, #176	; 0xb0
 8006d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da2:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d01e      	beq.n	8006de8 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	4293      	cmp	r3, r2
 8006db4:	bf28      	it	cs
 8006db6:	4613      	movcs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	1ad2      	subs	r2, r2, r3
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8006dd8:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <MSC_BOT_SendData+0x68>)
 8006dda:	7819      	ldrb	r1, [r3, #0]
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f006 f807 	bl	800cdf4 <USBD_LL_Transmit>
 8006de6:	e000      	b.n	8006dea <MSC_BOT_SendData+0x62>
    return;
 8006de8:	bf00      	nop
}
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	2000007e 	.word	0x2000007e

08006df4 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	32b0      	adds	r2, #176	; 0xb0
 8006e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d01d      	beq.n	8006e52 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4a10      	ldr	r2, [pc, #64]	; (8006e5c <MSC_BOT_SendCSW+0x68>)
 8006e1a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	78fa      	ldrb	r2, [r7, #3]
 8006e22:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <MSC_BOT_SendCSW+0x6c>)
 8006e2e:	7819      	ldrb	r1, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8006e36:	230d      	movs	r3, #13
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f005 ffdb 	bl	800cdf4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8006e3e:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <MSC_BOT_SendCSW+0x70>)
 8006e40:	7819      	ldrb	r1, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006e48:	231f      	movs	r3, #31
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f005 fff3 	bl	800ce36 <USBD_LL_PrepareReceive>
 8006e50:	e000      	b.n	8006e54 <MSC_BOT_SendCSW+0x60>
    return;
 8006e52:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	53425355 	.word	0x53425355
 8006e60:	2000007e 	.word	0x2000007e
 8006e64:	2000007f 	.word	0x2000007f

08006e68 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	32b0      	adds	r2, #176	; 0xb0
 8006e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d02a      	beq.n	8006edc <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10e      	bne.n	8006eae <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d009      	beq.n	8006eae <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d105      	bne.n	8006eae <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8006ea2:	4b10      	ldr	r3, [pc, #64]	; (8006ee4 <MSC_BOT_Abort+0x7c>)
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f005 ff1a 	bl	800cce2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8006eae:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <MSC_BOT_Abort+0x80>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f005 ff14 	bl	800cce2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	7a5b      	ldrb	r3, [r3, #9]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d10d      	bne.n	8006ede <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8006ec2:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <MSC_BOT_Abort+0x80>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f005 ff0a 	bl	800cce2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8006ece:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <MSC_BOT_Abort+0x7c>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f005 ff04 	bl	800cce2 <USBD_LL_StallEP>
 8006eda:	e000      	b.n	8006ede <MSC_BOT_Abort+0x76>
    return;
 8006edc:	bf00      	nop
  }
}
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	2000007f 	.word	0x2000007f
 8006ee8:	2000007e 	.word	0x2000007e

08006eec <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	32b0      	adds	r2, #176	; 0xb0
 8006f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f06:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d01d      	beq.n	8006f4a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	7a5b      	ldrb	r3, [r3, #9]
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d10c      	bne.n	8006f30 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8006f16:	4b10      	ldr	r3, [pc, #64]	; (8006f58 <MSC_BOT_CplClrFeature+0x6c>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f005 fee0 	bl	800cce2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8006f22:	4b0e      	ldr	r3, [pc, #56]	; (8006f5c <MSC_BOT_CplClrFeature+0x70>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f005 feda 	bl	800cce2 <USBD_LL_StallEP>
 8006f2e:	e00f      	b.n	8006f50 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	da0a      	bge.n	8006f4e <MSC_BOT_CplClrFeature+0x62>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	7a5b      	ldrb	r3, [r3, #9]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d006      	beq.n	8006f4e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006f40:	2101      	movs	r1, #1
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff ff56 	bl	8006df4 <MSC_BOT_SendCSW>
 8006f48:	e002      	b.n	8006f50 <MSC_BOT_CplClrFeature+0x64>
    return;
 8006f4a:	bf00      	nop
 8006f4c:	e000      	b.n	8006f50 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8006f4e:	bf00      	nop
  }
}
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	2000007e 	.word	0x2000007e
 8006f5c:	2000007f 	.word	0x2000007f

08006f60 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	32b0      	adds	r2, #176	; 0xb0
 8006f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d102      	bne.n	8006f8a <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8006f84:	f04f 33ff 	mov.w	r3, #4294967295
 8006f88:	e168      	b.n	800725c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2baa      	cmp	r3, #170	; 0xaa
 8006f90:	f000 8144 	beq.w	800721c <SCSI_ProcessCmd+0x2bc>
 8006f94:	2baa      	cmp	r3, #170	; 0xaa
 8006f96:	f300 8153 	bgt.w	8007240 <SCSI_ProcessCmd+0x2e0>
 8006f9a:	2ba8      	cmp	r3, #168	; 0xa8
 8006f9c:	f000 812c 	beq.w	80071f8 <SCSI_ProcessCmd+0x298>
 8006fa0:	2ba8      	cmp	r3, #168	; 0xa8
 8006fa2:	f300 814d 	bgt.w	8007240 <SCSI_ProcessCmd+0x2e0>
 8006fa6:	2b5a      	cmp	r3, #90	; 0x5a
 8006fa8:	f300 80c0 	bgt.w	800712c <SCSI_ProcessCmd+0x1cc>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f2c0 8147 	blt.w	8007240 <SCSI_ProcessCmd+0x2e0>
 8006fb2:	2b5a      	cmp	r3, #90	; 0x5a
 8006fb4:	f200 8144 	bhi.w	8007240 <SCSI_ProcessCmd+0x2e0>
 8006fb8:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <SCSI_ProcessCmd+0x60>)
 8006fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbe:	bf00      	nop
 8006fc0:	08007133 	.word	0x08007133
 8006fc4:	08007241 	.word	0x08007241
 8006fc8:	08007241 	.word	0x08007241
 8006fcc:	08007145 	.word	0x08007145
 8006fd0:	08007241 	.word	0x08007241
 8006fd4:	08007241 	.word	0x08007241
 8006fd8:	08007241 	.word	0x08007241
 8006fdc:	08007241 	.word	0x08007241
 8006fe0:	08007241 	.word	0x08007241
 8006fe4:	08007241 	.word	0x08007241
 8006fe8:	08007241 	.word	0x08007241
 8006fec:	08007241 	.word	0x08007241
 8006ff0:	08007241 	.word	0x08007241
 8006ff4:	08007241 	.word	0x08007241
 8006ff8:	08007241 	.word	0x08007241
 8006ffc:	08007241 	.word	0x08007241
 8007000:	08007241 	.word	0x08007241
 8007004:	08007241 	.word	0x08007241
 8007008:	08007157 	.word	0x08007157
 800700c:	08007241 	.word	0x08007241
 8007010:	08007241 	.word	0x08007241
 8007014:	08007241 	.word	0x08007241
 8007018:	08007241 	.word	0x08007241
 800701c:	08007241 	.word	0x08007241
 8007020:	08007241 	.word	0x08007241
 8007024:	08007241 	.word	0x08007241
 8007028:	0800718d 	.word	0x0800718d
 800702c:	08007169 	.word	0x08007169
 8007030:	08007241 	.word	0x08007241
 8007034:	08007241 	.word	0x08007241
 8007038:	0800717b 	.word	0x0800717b
 800703c:	08007241 	.word	0x08007241
 8007040:	08007241 	.word	0x08007241
 8007044:	08007241 	.word	0x08007241
 8007048:	08007241 	.word	0x08007241
 800704c:	080071b1 	.word	0x080071b1
 8007050:	08007241 	.word	0x08007241
 8007054:	080071c3 	.word	0x080071c3
 8007058:	08007241 	.word	0x08007241
 800705c:	08007241 	.word	0x08007241
 8007060:	080071e7 	.word	0x080071e7
 8007064:	08007241 	.word	0x08007241
 8007068:	0800720b 	.word	0x0800720b
 800706c:	08007241 	.word	0x08007241
 8007070:	08007241 	.word	0x08007241
 8007074:	08007241 	.word	0x08007241
 8007078:	08007241 	.word	0x08007241
 800707c:	0800722f 	.word	0x0800722f
 8007080:	08007241 	.word	0x08007241
 8007084:	08007241 	.word	0x08007241
 8007088:	08007241 	.word	0x08007241
 800708c:	08007241 	.word	0x08007241
 8007090:	08007241 	.word	0x08007241
 8007094:	08007241 	.word	0x08007241
 8007098:	08007241 	.word	0x08007241
 800709c:	08007241 	.word	0x08007241
 80070a0:	08007241 	.word	0x08007241
 80070a4:	08007241 	.word	0x08007241
 80070a8:	08007241 	.word	0x08007241
 80070ac:	08007241 	.word	0x08007241
 80070b0:	08007241 	.word	0x08007241
 80070b4:	08007241 	.word	0x08007241
 80070b8:	08007241 	.word	0x08007241
 80070bc:	08007241 	.word	0x08007241
 80070c0:	08007241 	.word	0x08007241
 80070c4:	08007241 	.word	0x08007241
 80070c8:	08007241 	.word	0x08007241
 80070cc:	08007241 	.word	0x08007241
 80070d0:	08007241 	.word	0x08007241
 80070d4:	08007241 	.word	0x08007241
 80070d8:	08007241 	.word	0x08007241
 80070dc:	08007241 	.word	0x08007241
 80070e0:	08007241 	.word	0x08007241
 80070e4:	08007241 	.word	0x08007241
 80070e8:	08007241 	.word	0x08007241
 80070ec:	08007241 	.word	0x08007241
 80070f0:	08007241 	.word	0x08007241
 80070f4:	08007241 	.word	0x08007241
 80070f8:	08007241 	.word	0x08007241
 80070fc:	08007241 	.word	0x08007241
 8007100:	08007241 	.word	0x08007241
 8007104:	08007241 	.word	0x08007241
 8007108:	08007241 	.word	0x08007241
 800710c:	08007241 	.word	0x08007241
 8007110:	08007241 	.word	0x08007241
 8007114:	08007241 	.word	0x08007241
 8007118:	08007241 	.word	0x08007241
 800711c:	08007241 	.word	0x08007241
 8007120:	08007241 	.word	0x08007241
 8007124:	08007241 	.word	0x08007241
 8007128:	0800719f 	.word	0x0800719f
 800712c:	2b9e      	cmp	r3, #158	; 0x9e
 800712e:	d051      	beq.n	80071d4 <SCSI_ProcessCmd+0x274>
 8007130:	e086      	b.n	8007240 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	4619      	mov	r1, r3
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 f893 	bl	8007264 <SCSI_TestUnitReady>
 800713e:	4603      	mov	r3, r0
 8007140:	75fb      	strb	r3, [r7, #23]
      break;
 8007142:	e089      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8007144:	7afb      	ldrb	r3, [r7, #11]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	4619      	mov	r1, r3
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fb6e 	bl	800782c <SCSI_RequestSense>
 8007150:	4603      	mov	r3, r0
 8007152:	75fb      	strb	r3, [r7, #23]
      break;
 8007154:	e080      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8007156:	7afb      	ldrb	r3, [r7, #11]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	4619      	mov	r1, r3
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f8db 	bl	8007318 <SCSI_Inquiry>
 8007162:	4603      	mov	r3, r0
 8007164:	75fb      	strb	r3, [r7, #23]
      break;
 8007166:	e077      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8007168:	7afb      	ldrb	r3, [r7, #11]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	4619      	mov	r1, r3
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 fc2a 	bl	80079c8 <SCSI_StartStopUnit>
 8007174:	4603      	mov	r3, r0
 8007176:	75fb      	strb	r3, [r7, #23]
      break;
 8007178:	e06e      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800717a:	7afb      	ldrb	r3, [r7, #11]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	4619      	mov	r1, r3
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 fc76 	bl	8007a72 <SCSI_AllowPreventRemovable>
 8007186:	4603      	mov	r3, r0
 8007188:	75fb      	strb	r3, [r7, #23]
      break;
 800718a:	e065      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	4619      	mov	r1, r3
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 faea 	bl	800776c <SCSI_ModeSense6>
 8007198:	4603      	mov	r3, r0
 800719a:	75fb      	strb	r3, [r7, #23]
      break;
 800719c:	e05c      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800719e:	7afb      	ldrb	r3, [r7, #11]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	4619      	mov	r1, r3
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 fb11 	bl	80077cc <SCSI_ModeSense10>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75fb      	strb	r3, [r7, #23]
      break;
 80071ae:	e053      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	4619      	mov	r1, r3
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 fa5d 	bl	8007676 <SCSI_ReadFormatCapacity>
 80071bc:	4603      	mov	r3, r0
 80071be:	75fb      	strb	r3, [r7, #23]
      break;
 80071c0:	e04a      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80071c2:	7afb      	ldrb	r3, [r7, #11]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	4619      	mov	r1, r3
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 f923 	bl	8007414 <SCSI_ReadCapacity10>
 80071ce:	4603      	mov	r3, r0
 80071d0:	75fb      	strb	r3, [r7, #23]
      break;
 80071d2:	e041      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	4619      	mov	r1, r3
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f998 	bl	8007510 <SCSI_ReadCapacity16>
 80071e0:	4603      	mov	r3, r0
 80071e2:	75fb      	strb	r3, [r7, #23]
      break;
 80071e4:	e038      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80071e6:	7afb      	ldrb	r3, [r7, #11]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	4619      	mov	r1, r3
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fc6d 	bl	8007acc <SCSI_Read10>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]
      break;
 80071f6:	e02f      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80071f8:	7afb      	ldrb	r3, [r7, #11]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	4619      	mov	r1, r3
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 fd0e 	bl	8007c20 <SCSI_Read12>
 8007204:	4603      	mov	r3, r0
 8007206:	75fb      	strb	r3, [r7, #23]
      break;
 8007208:	e026      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800720a:	7afb      	ldrb	r3, [r7, #11]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	4619      	mov	r1, r3
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 fdb9 	bl	8007d88 <SCSI_Write10>
 8007216:	4603      	mov	r3, r0
 8007218:	75fb      	strb	r3, [r7, #23]
      break;
 800721a:	e01d      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4619      	mov	r1, r3
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 fe86 	bl	8007f34 <SCSI_Write12>
 8007228:	4603      	mov	r3, r0
 800722a:	75fb      	strb	r3, [r7, #23]
      break;
 800722c:	e014      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800722e:	7afb      	ldrb	r3, [r7, #11]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	4619      	mov	r1, r3
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 ff63 	bl	8008100 <SCSI_Verify10>
 800723a:	4603      	mov	r3, r0
 800723c:	75fb      	strb	r3, [r7, #23]
      break;
 800723e:	e00b      	b.n	8007258 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007240:	7af9      	ldrb	r1, [r7, #11]
 8007242:	2320      	movs	r3, #32
 8007244:	2205      	movs	r2, #5
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 fb73 	bl	8007932 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2202      	movs	r2, #2
 8007250:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8007252:	23ff      	movs	r3, #255	; 0xff
 8007254:	75fb      	strb	r3, [r7, #23]
      break;
 8007256:	bf00      	nop
  }

  return ret;
 8007258:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	460b      	mov	r3, r1
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	32b0      	adds	r2, #176	; 0xb0
 800727c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007280:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d102      	bne.n	800728e <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8007288:	f04f 33ff 	mov.w	r3, #4294967295
 800728c:	e03f      	b.n	800730e <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800729e:	2320      	movs	r3, #32
 80072a0:	2205      	movs	r2, #5
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 fb45 	bl	8007932 <SCSI_SenseCode>

    return -1;
 80072a8:	f04f 33ff 	mov.w	r3, #4294967295
 80072ac:	e02f      	b.n	800730e <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d10b      	bne.n	80072d0 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80072b8:	7af9      	ldrb	r1, [r7, #11]
 80072ba:	233a      	movs	r3, #58	; 0x3a
 80072bc:	2202      	movs	r2, #2
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fb37 	bl	8007932 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2205      	movs	r2, #5
 80072c8:	721a      	strb	r2, [r3, #8]
    return -1;
 80072ca:	f04f 33ff 	mov.w	r3, #4294967295
 80072ce:	e01e      	b.n	800730e <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	33b0      	adds	r3, #176	; 0xb0
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	7afa      	ldrb	r2, [r7, #11]
 80072e4:	4610      	mov	r0, r2
 80072e6:	4798      	blx	r3
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00b      	beq.n	8007306 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80072ee:	7af9      	ldrb	r1, [r7, #11]
 80072f0:	233a      	movs	r3, #58	; 0x3a
 80072f2:	2202      	movs	r2, #2
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 fb1c 	bl	8007932 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2205      	movs	r2, #5
 80072fe:	721a      	strb	r2, [r3, #8]

    return -1;
 8007300:	f04f 33ff 	mov.w	r3, #4294967295
 8007304:	e003      	b.n	800730e <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2200      	movs	r2, #0
 800730a:	60da      	str	r2, [r3, #12]

  return 0;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b088      	sub	sp, #32
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	460b      	mov	r3, r1
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	32b0      	adds	r2, #176	; 0xb0
 8007330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007334:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <SCSI_Inquiry+0x2a>
  {
    return -1;
 800733c:	f04f 33ff 	mov.w	r3, #4294967295
 8007340:	e05f      	b.n	8007402 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007352:	2320      	movs	r3, #32
 8007354:	2205      	movs	r2, #5
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 faeb 	bl	8007932 <SCSI_SenseCode>
    return -1;
 800735c:	f04f 33ff 	mov.w	r3, #4294967295
 8007360:	e04f      	b.n	8007402 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3301      	adds	r3, #1
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d020      	beq.n	80073b2 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3302      	adds	r3, #2
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d105      	bne.n	8007386 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800737a:	2206      	movs	r2, #6
 800737c:	4923      	ldr	r1, [pc, #140]	; (800740c <SCSI_Inquiry+0xf4>)
 800737e:	69b8      	ldr	r0, [r7, #24]
 8007380:	f001 f844 	bl	800840c <SCSI_UpdateBotData>
 8007384:	e03c      	b.n	8007400 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3302      	adds	r3, #2
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2b80      	cmp	r3, #128	; 0x80
 800738e:	d105      	bne.n	800739c <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8007390:	2208      	movs	r2, #8
 8007392:	491f      	ldr	r1, [pc, #124]	; (8007410 <SCSI_Inquiry+0xf8>)
 8007394:	69b8      	ldr	r0, [r7, #24]
 8007396:	f001 f839 	bl	800840c <SCSI_UpdateBotData>
 800739a:	e031      	b.n	8007400 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80073a2:	2324      	movs	r3, #36	; 0x24
 80073a4:	2205      	movs	r2, #5
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fac3 	bl	8007932 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80073ac:	f04f 33ff 	mov.w	r3, #4294967295
 80073b0:	e027      	b.n	8007402 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	33b0      	adds	r3, #176	; 0xb0
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	69d9      	ldr	r1, [r3, #28]
 80073c4:	7afa      	ldrb	r2, [r7, #11]
 80073c6:	4613      	mov	r3, r2
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	440b      	add	r3, r1
 80073d0:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	3304      	adds	r3, #4
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	3305      	adds	r3, #5
 80073dc:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3304      	adds	r3, #4
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	8bfa      	ldrh	r2, [r7, #30]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d303      	bcc.n	80073f4 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3304      	adds	r3, #4
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80073f4:	8bfb      	ldrh	r3, [r7, #30]
 80073f6:	461a      	mov	r2, r3
 80073f8:	6979      	ldr	r1, [r7, #20]
 80073fa:	69b8      	ldr	r0, [r7, #24]
 80073fc:	f001 f806 	bl	800840c <SCSI_UpdateBotData>
  }

  return 0;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20000080 	.word	0x20000080
 8007410:	20000088 	.word	0x20000088

08007414 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	460b      	mov	r3, r1
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	32b0      	adds	r2, #176	; 0xb0
 800742c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007430:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8007438:	f04f 33ff 	mov.w	r3, #4294967295
 800743c:	e064      	b.n	8007508 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	33b0      	adds	r3, #176	; 0xb0
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800745c:	7af8      	ldrb	r0, [r7, #11]
 800745e:	4798      	blx	r3
 8007460:	4603      	mov	r3, r0
 8007462:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007464:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d104      	bne.n	8007476 <SCSI_ReadCapacity10+0x62>
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007472:	2b02      	cmp	r3, #2
 8007474:	d108      	bne.n	8007488 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007476:	7af9      	ldrb	r1, [r7, #11]
 8007478:	233a      	movs	r3, #58	; 0x3a
 800747a:	2202      	movs	r2, #2
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 fa58 	bl	8007932 <SCSI_SenseCode>
    return -1;
 8007482:	f04f 33ff 	mov.w	r3, #4294967295
 8007486:	e03f      	b.n	8007508 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800748e:	3b01      	subs	r3, #1
 8007490:	0e1b      	lsrs	r3, r3, #24
 8007492:	b2da      	uxtb	r2, r3
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800749e:	3b01      	subs	r3, #1
 80074a0:	0c1b      	lsrs	r3, r3, #16
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80074ae:	3b01      	subs	r3, #1
 80074b0:	0a1b      	lsrs	r3, r3, #8
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80074ce:	161b      	asrs	r3, r3, #24
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80074dc:	141b      	asrs	r3, r3, #16
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80074ea:	0a1b      	lsrs	r3, r3, #8
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2208      	movs	r2, #8
 8007504:	60da      	str	r2, [r3, #12]

  return 0;
 8007506:	2300      	movs	r3, #0

}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	460b      	mov	r3, r1
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	32b0      	adds	r2, #176	; 0xb0
 8007528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d102      	bne.n	800753a <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8007534:	f04f 33ff 	mov.w	r3, #4294967295
 8007538:	e099      	b.n	800766e <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	33b0      	adds	r3, #176	; 0xb0
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8007558:	7af8      	ldrb	r0, [r7, #11]
 800755a:	4798      	blx	r3
 800755c:	4603      	mov	r3, r0
 800755e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d104      	bne.n	8007572 <SCSI_ReadCapacity16+0x62>
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800756e:	2b02      	cmp	r3, #2
 8007570:	d108      	bne.n	8007584 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007572:	7af9      	ldrb	r1, [r7, #11]
 8007574:	233a      	movs	r3, #58	; 0x3a
 8007576:	2202      	movs	r2, #2
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f9da 	bl	8007932 <SCSI_SenseCode>
    return -1;
 800757e:	f04f 33ff 	mov.w	r3, #4294967295
 8007582:	e074      	b.n	800766e <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	330a      	adds	r3, #10
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	330b      	adds	r3, #11
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007594:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	330c      	adds	r3, #12
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800759e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	320d      	adds	r2, #13
 80075a4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80075a6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80075ac:	2300      	movs	r3, #0
 80075ae:	77fb      	strb	r3, [r7, #31]
 80075b0:	e007      	b.n	80075c2 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 80075b2:	7ffb      	ldrb	r3, [r7, #31]
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	4413      	add	r3, r2
 80075b8:	2200      	movs	r2, #0
 80075ba:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80075bc:	7ffb      	ldrb	r3, [r7, #31]
 80075be:	3301      	adds	r3, #1
 80075c0:	77fb      	strb	r3, [r7, #31]
 80075c2:	7ffa      	ldrb	r2, [r7, #31]
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d3f2      	bcc.n	80075b2 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80075d2:	3b01      	subs	r3, #1
 80075d4:	0e1b      	lsrs	r3, r3, #24
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80075e2:	3b01      	subs	r3, #1
 80075e4:	0c1b      	lsrs	r3, r3, #16
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80075f2:	3b01      	subs	r3, #1
 80075f4:	0a1b      	lsrs	r3, r3, #8
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007602:	b2db      	uxtb	r3, r3
 8007604:	3b01      	subs	r3, #1
 8007606:	b2da      	uxtb	r2, r3
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007612:	161b      	asrs	r3, r3, #24
 8007614:	b2da      	uxtb	r2, r3
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007620:	141b      	asrs	r3, r3, #16
 8007622:	b2da      	uxtb	r2, r3
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800762e:	0a1b      	lsrs	r3, r3, #8
 8007630:	b29b      	uxth	r3, r3
 8007632:	b2da      	uxtb	r2, r3
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800763e:	b2da      	uxtb	r2, r3
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	330a      	adds	r3, #10
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	330b      	adds	r3, #11
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007654:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	330c      	adds	r3, #12
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800765e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	320d      	adds	r2, #13
 8007664:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007666:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	60da      	str	r2, [r3, #12]

  return 0;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3720      	adds	r7, #32
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b088      	sub	sp, #32
 800767a:	af00      	add	r7, sp, #0
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	460b      	mov	r3, r1
 8007680:	607a      	str	r2, [r7, #4]
 8007682:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	32b0      	adds	r2, #176	; 0xb0
 800768e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007692:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800769a:	f04f 33ff 	mov.w	r3, #4294967295
 800769e:	e061      	b.n	8007764 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	33b0      	adds	r3, #176	; 0xb0
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f107 0214 	add.w	r2, r7, #20
 80076b6:	f107 0110 	add.w	r1, r7, #16
 80076ba:	7af8      	ldrb	r0, [r7, #11]
 80076bc:	4798      	blx	r3
 80076be:	4603      	mov	r3, r0
 80076c0:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80076c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <SCSI_ReadFormatCapacity+0x5e>
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d108      	bne.n	80076e6 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80076d4:	7af9      	ldrb	r1, [r7, #11]
 80076d6:	233a      	movs	r3, #58	; 0x3a
 80076d8:	2202      	movs	r2, #2
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f929 	bl	8007932 <SCSI_SenseCode>
    return -1;
 80076e0:	f04f 33ff 	mov.w	r3, #4294967295
 80076e4:	e03e      	b.n	8007764 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 80076e6:	2300      	movs	r3, #0
 80076e8:	83fb      	strh	r3, [r7, #30]
 80076ea:	e007      	b.n	80076fc <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 80076ec:	8bfb      	ldrh	r3, [r7, #30]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	4413      	add	r3, r2
 80076f2:	2200      	movs	r2, #0
 80076f4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80076f6:	8bfb      	ldrh	r3, [r7, #30]
 80076f8:	3301      	adds	r3, #1
 80076fa:	83fb      	strh	r3, [r7, #30]
 80076fc:	8bfb      	ldrh	r3, [r7, #30]
 80076fe:	2b0b      	cmp	r3, #11
 8007700:	d9f4      	bls.n	80076ec <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2208      	movs	r2, #8
 8007706:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	3b01      	subs	r3, #1
 800770c:	0e1b      	lsrs	r3, r3, #24
 800770e:	b2da      	uxtb	r2, r3
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	3b01      	subs	r3, #1
 8007718:	0c1b      	lsrs	r3, r3, #16
 800771a:	b2da      	uxtb	r2, r3
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	3b01      	subs	r3, #1
 8007724:	0a1b      	lsrs	r3, r3, #8
 8007726:	b2da      	uxtb	r2, r3
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b2da      	uxtb	r2, r3
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2202      	movs	r2, #2
 800773c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800773e:	8abb      	ldrh	r3, [r7, #20]
 8007740:	141b      	asrs	r3, r3, #16
 8007742:	b2da      	uxtb	r2, r3
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007748:	8abb      	ldrh	r3, [r7, #20]
 800774a:	0a1b      	lsrs	r3, r3, #8
 800774c:	b29b      	uxth	r3, r3
 800774e:	b2da      	uxtb	r2, r3
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007754:	8abb      	ldrh	r3, [r7, #20]
 8007756:	b2da      	uxtb	r2, r3
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	220c      	movs	r2, #12
 8007760:	60da      	str	r2, [r3, #12]

  return 0;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3720      	adds	r7, #32
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	460b      	mov	r3, r1
 8007776:	607a      	str	r2, [r7, #4]
 8007778:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	32b0      	adds	r2, #176	; 0xb0
 8007784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007788:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800778a:	2317      	movs	r3, #23
 800778c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8007794:	f04f 33ff 	mov.w	r3, #4294967295
 8007798:	e011      	b.n	80077be <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3304      	adds	r3, #4
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	8afa      	ldrh	r2, [r7, #22]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d303      	bcc.n	80077b0 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3304      	adds	r3, #4
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80077b0:	8afb      	ldrh	r3, [r7, #22]
 80077b2:	461a      	mov	r2, r3
 80077b4:	4904      	ldr	r1, [pc, #16]	; (80077c8 <SCSI_ModeSense6+0x5c>)
 80077b6:	6938      	ldr	r0, [r7, #16]
 80077b8:	f000 fe28 	bl	800840c <SCSI_UpdateBotData>

  return 0;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20000090 	.word	0x20000090

080077cc <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	460b      	mov	r3, r1
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	32b0      	adds	r2, #176	; 0xb0
 80077e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80077ea:	231b      	movs	r3, #27
 80077ec:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d102      	bne.n	80077fa <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80077f4:	f04f 33ff 	mov.w	r3, #4294967295
 80077f8:	e011      	b.n	800781e <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3308      	adds	r3, #8
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	8afa      	ldrh	r2, [r7, #22]
 8007804:	429a      	cmp	r2, r3
 8007806:	d303      	bcc.n	8007810 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3308      	adds	r3, #8
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8007810:	8afb      	ldrh	r3, [r7, #22]
 8007812:	461a      	mov	r2, r3
 8007814:	4904      	ldr	r1, [pc, #16]	; (8007828 <SCSI_ModeSense10+0x5c>)
 8007816:	6938      	ldr	r0, [r7, #16]
 8007818:	f000 fdf8 	bl	800840c <SCSI_UpdateBotData>

  return 0;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	200000a8 	.word	0x200000a8

0800782c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	460b      	mov	r3, r1
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	32b0      	adds	r2, #176	; 0xb0
 8007844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007848:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <SCSI_RequestSense+0x2a>
  {
    return -1;
 8007850:	f04f 33ff 	mov.w	r3, #4294967295
 8007854:	e069      	b.n	800792a <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007866:	2320      	movs	r3, #32
 8007868:	2205      	movs	r2, #5
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 f861 	bl	8007932 <SCSI_SenseCode>
    return -1;
 8007870:	f04f 33ff 	mov.w	r3, #4294967295
 8007874:	e059      	b.n	800792a <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007876:	2300      	movs	r3, #0
 8007878:	75fb      	strb	r3, [r7, #23]
 800787a:	e007      	b.n	800788c <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	4413      	add	r3, r2
 8007882:	2200      	movs	r2, #0
 8007884:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007886:	7dfb      	ldrb	r3, [r7, #23]
 8007888:	3301      	adds	r3, #1
 800788a:	75fb      	strb	r3, [r7, #23]
 800788c:	7dfb      	ldrb	r3, [r7, #23]
 800788e:	2b11      	cmp	r3, #17
 8007890:	d9f4      	bls.n	800787c <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2270      	movs	r2, #112	; 0x70
 8007896:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	220c      	movs	r2, #12
 800789c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d02e      	beq.n	800790c <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80078b4:	461a      	mov	r2, r3
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	3248      	adds	r2, #72	; 0x48
 80078ba:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	3348      	adds	r3, #72	; 0x48
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	4413      	add	r3, r2
 80078d0:	791a      	ldrb	r2, [r3, #4]
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	3348      	adds	r3, #72	; 0x48
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	4413      	add	r3, r2
 80078e4:	795a      	ldrb	r2, [r3, #5]
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80078f0:	3301      	adds	r3, #1
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007900:	2b04      	cmp	r3, #4
 8007902:	d103      	bne.n	800790c <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	2212      	movs	r2, #18
 8007910:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3304      	adds	r3, #4
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b12      	cmp	r3, #18
 800791a:	d805      	bhi.n	8007928 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3304      	adds	r3, #4
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007932:	b480      	push	{r7}
 8007934:	b085      	sub	sp, #20
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	4608      	mov	r0, r1
 800793c:	4611      	mov	r1, r2
 800793e:	461a      	mov	r2, r3
 8007940:	4603      	mov	r3, r0
 8007942:	70fb      	strb	r3, [r7, #3]
 8007944:	460b      	mov	r3, r1
 8007946:	70bb      	strb	r3, [r7, #2]
 8007948:	4613      	mov	r3, r2
 800794a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	32b0      	adds	r2, #176	; 0xb0
 8007956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d02c      	beq.n	80079bc <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007968:	461a      	mov	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3248      	adds	r2, #72	; 0x48
 800796e:	78b9      	ldrb	r1, [r7, #2]
 8007970:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	3348      	adds	r3, #72	; 0x48
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	4413      	add	r3, r2
 8007982:	787a      	ldrb	r2, [r7, #1]
 8007984:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	3348      	adds	r3, #72	; 0x48
 8007990:	00db      	lsls	r3, r3, #3
 8007992:	4413      	add	r3, r2
 8007994:	2200      	movs	r2, #0
 8007996:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800799e:	3301      	adds	r3, #1
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d105      	bne.n	80079be <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 80079ba:	e000      	b.n	80079be <SCSI_SenseCode+0x8c>
    return;
 80079bc:	bf00      	nop
  }
}
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	460b      	mov	r3, r1
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	32b0      	adds	r2, #176	; 0xb0
 80079e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d102      	bne.n	80079f2 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80079ec:	f04f 33ff 	mov.w	r3, #4294967295
 80079f0:	e03b      	b.n	8007a6a <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d10f      	bne.n	8007a1c <SCSI_StartStopUnit+0x54>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3304      	adds	r3, #4
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d108      	bne.n	8007a1c <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007a0a:	7af9      	ldrb	r1, [r7, #11]
 8007a0c:	2324      	movs	r3, #36	; 0x24
 8007a0e:	2205      	movs	r2, #5
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7ff ff8e 	bl	8007932 <SCSI_SenseCode>

    return -1;
 8007a16:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1a:	e026      	b.n	8007a6a <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d104      	bne.n	8007a34 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007a32:	e016      	b.n	8007a62 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3304      	adds	r3, #4
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d104      	bne.n	8007a4c <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2202      	movs	r2, #2
 8007a46:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007a4a:	e00a      	b.n	8007a62 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d103      	bne.n	8007a62 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2200      	movs	r2, #0
 8007a66:	60da      	str	r2, [r3, #12]

  return 0;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b087      	sub	sp, #28
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	607a      	str	r2, [r7, #4]
 8007a7e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	32b0      	adds	r2, #176	; 0xb0
 8007a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d102      	bne.n	8007a9c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8007a96:	f04f 33ff 	mov.w	r3, #4294967295
 8007a9a:	e011      	b.n	8007ac0 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d104      	bne.n	8007ab0 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007aae:	e003      	b.n	8007ab8 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2200      	movs	r2, #0
 8007abc:	60da      	str	r2, [r3, #12]

  return 0;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	371c      	adds	r7, #28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	32b0      	adds	r2, #176	; 0xb0
 8007ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d102      	bne.n	8007af6 <SCSI_Read10+0x2a>
  {
    return -1;
 8007af0:	f04f 33ff 	mov.w	r3, #4294967295
 8007af4:	e090      	b.n	8007c18 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	7a1b      	ldrb	r3, [r3, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f040 8082 	bne.w	8007c04 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007b06:	b25b      	sxtb	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	db0a      	blt.n	8007b22 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007b12:	2320      	movs	r3, #32
 8007b14:	2205      	movs	r2, #5
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f7ff ff0b 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b20:	e07a      	b.n	8007c18 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d108      	bne.n	8007b3e <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b2c:	7af9      	ldrb	r1, [r7, #11]
 8007b2e:	233a      	movs	r3, #58	; 0x3a
 8007b30:	2202      	movs	r2, #2
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f7ff fefd 	bl	8007932 <SCSI_SenseCode>

      return -1;
 8007b38:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3c:	e06c      	b.n	8007c18 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	33b0      	adds	r3, #176	; 0xb0
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	7afa      	ldrb	r2, [r7, #11]
 8007b52:	4610      	mov	r0, r2
 8007b54:	4798      	blx	r3
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d008      	beq.n	8007b6e <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b5c:	7af9      	ldrb	r1, [r7, #11]
 8007b5e:	233a      	movs	r3, #58	; 0x3a
 8007b60:	2202      	movs	r2, #2
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f7ff fee5 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007b68:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6c:	e054      	b.n	8007c18 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3302      	adds	r3, #2
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	3303      	adds	r3, #3
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b7e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3304      	adds	r3, #4
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007b88:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	3205      	adds	r2, #5
 8007b8e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007b90:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3307      	adds	r3, #7
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	3208      	adds	r2, #8
 8007ba4:	7812      	ldrb	r2, [r2, #0]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007bba:	7af9      	ldrb	r1, [r7, #11]
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 fadc 	bl	800817a <SCSI_CheckAddressRange>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	da02      	bge.n	8007bce <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bcc:	e024      	b.n	8007c18 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007bda:	6979      	ldr	r1, [r7, #20]
 8007bdc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007be0:	fb01 f303 	mul.w	r3, r1, r3
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d00a      	beq.n	8007bfe <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007bee:	2320      	movs	r3, #32
 8007bf0:	2205      	movs	r2, #5
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f7ff fe9d 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfc:	e00c      	b.n	8007c18 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2202      	movs	r2, #2
 8007c02:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c0a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 fadf 	bl	80081d4 <SCSI_ProcessRead>
 8007c16:	4603      	mov	r3, r0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	32b0      	adds	r2, #176	; 0xb0
 8007c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <SCSI_Read12+0x2a>
  {
    return -1;
 8007c44:	f04f 33ff 	mov.w	r3, #4294967295
 8007c48:	e09a      	b.n	8007d80 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	7a1b      	ldrb	r3, [r3, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f040 808c 	bne.w	8007d6c <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007c5a:	b25b      	sxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	db0a      	blt.n	8007c76 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007c66:	2320      	movs	r3, #32
 8007c68:	2205      	movs	r2, #5
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f7ff fe61 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007c70:	f04f 33ff 	mov.w	r3, #4294967295
 8007c74:	e084      	b.n	8007d80 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d108      	bne.n	8007c92 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c80:	7af9      	ldrb	r1, [r7, #11]
 8007c82:	233a      	movs	r3, #58	; 0x3a
 8007c84:	2202      	movs	r2, #2
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7ff fe53 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c90:	e076      	b.n	8007d80 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	33b0      	adds	r3, #176	; 0xb0
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	7afa      	ldrb	r2, [r7, #11]
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	4798      	blx	r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d008      	beq.n	8007cc2 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007cb0:	7af9      	ldrb	r1, [r7, #11]
 8007cb2:	233a      	movs	r3, #58	; 0x3a
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f7ff fe3b 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc0:	e05e      	b.n	8007d80 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3302      	adds	r3, #2
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	3303      	adds	r3, #3
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007cd2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007cdc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	3205      	adds	r2, #5
 8007ce2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007ce4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3306      	adds	r3, #6
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3307      	adds	r3, #7
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007cfc:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3308      	adds	r3, #8
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007d06:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	3209      	adds	r2, #9
 8007d0c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007d0e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007d22:	7af9      	ldrb	r1, [r7, #11]
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 fa28 	bl	800817a <SCSI_CheckAddressRange>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	da02      	bge.n	8007d36 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295
 8007d34:	e024      	b.n	8007d80 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007d42:	6979      	ldr	r1, [r7, #20]
 8007d44:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007d48:	fb01 f303 	mul.w	r3, r1, r3
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d00a      	beq.n	8007d66 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007d56:	2320      	movs	r3, #32
 8007d58:	2205      	movs	r2, #5
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f7ff fde9 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007d60:	f04f 33ff 	mov.w	r3, #4294967295
 8007d64:	e00c      	b.n	8007d80 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d72:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007d74:	7afb      	ldrb	r3, [r7, #11]
 8007d76:	4619      	mov	r1, r3
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 fa2b 	bl	80081d4 <SCSI_ProcessRead>
 8007d7e:	4603      	mov	r3, r0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	460b      	mov	r3, r1
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	32b0      	adds	r2, #176	; 0xb0
 8007da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d102      	bne.n	8007db2 <SCSI_Write10+0x2a>
  {
    return -1;
 8007dac:	f04f 33ff 	mov.w	r3, #4294967295
 8007db0:	e0ba      	b.n	8007f28 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	7a1b      	ldrb	r3, [r3, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f040 80b0 	bne.w	8007f1c <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10a      	bne.n	8007ddc <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007dcc:	2320      	movs	r3, #32
 8007dce:	2205      	movs	r2, #5
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f7ff fdae 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dda:	e0a5      	b.n	8007f28 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007de2:	b25b      	sxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	da0a      	bge.n	8007dfe <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007dee:	2320      	movs	r3, #32
 8007df0:	2205      	movs	r2, #5
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f7ff fd9d 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007df8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfc:	e094      	b.n	8007f28 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	33b0      	adds	r3, #176	; 0xb0
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	7afa      	ldrb	r2, [r7, #11]
 8007e12:	4610      	mov	r0, r2
 8007e14:	4798      	blx	r3
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d008      	beq.n	8007e2e <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007e1c:	7af9      	ldrb	r1, [r7, #11]
 8007e1e:	233a      	movs	r3, #58	; 0x3a
 8007e20:	2202      	movs	r2, #2
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f7ff fd85 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007e28:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2c:	e07c      	b.n	8007f28 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	33b0      	adds	r3, #176	; 0xb0
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	7afa      	ldrb	r2, [r7, #11]
 8007e42:	4610      	mov	r0, r2
 8007e44:	4798      	blx	r3
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d008      	beq.n	8007e5e <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007e4c:	7af9      	ldrb	r1, [r7, #11]
 8007e4e:	2327      	movs	r3, #39	; 0x27
 8007e50:	2202      	movs	r2, #2
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff fd6d 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007e58:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5c:	e064      	b.n	8007f28 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3302      	adds	r3, #2
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3303      	adds	r3, #3
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007e6e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3304      	adds	r3, #4
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007e78:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	3205      	adds	r2, #5
 8007e7e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007e80:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3307      	adds	r3, #7
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	3208      	adds	r2, #8
 8007e94:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007e96:	431a      	orrs	r2, r3
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007eaa:	7af9      	ldrb	r1, [r7, #11]
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f964 	bl	800817a <SCSI_CheckAddressRange>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	da02      	bge.n	8007ebe <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ebc:	e034      	b.n	8007f28 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007eca:	fb02 f303 	mul.w	r3, r2, r3
 8007ece:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d00a      	beq.n	8007ef2 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007ee2:	2320      	movs	r3, #32
 8007ee4:	2205      	movs	r2, #5
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f7ff fd23 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007eec:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef0:	e01a      	b.n	8007f28 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef8:	bf28      	it	cs
 8007efa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007efe:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2201      	movs	r2, #1
 8007f04:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8007f06:	4b0a      	ldr	r3, [pc, #40]	; (8007f30 <SCSI_Write10+0x1a8>)
 8007f08:	7819      	ldrb	r1, [r3, #0]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f103 0210 	add.w	r2, r3, #16
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f004 ff8f 	bl	800ce36 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	e005      	b.n	8007f28 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8007f1c:	7afb      	ldrb	r3, [r7, #11]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f9dd 	bl	80082e0 <SCSI_ProcessWrite>
 8007f26:	4603      	mov	r3, r0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	2000007f 	.word	0x2000007f

08007f34 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	32b0      	adds	r2, #176	; 0xb0
 8007f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f50:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <SCSI_Write12+0x2a>
  {
    return -1;
 8007f58:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5c:	e0ca      	b.n	80080f4 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	7a1b      	ldrb	r3, [r3, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f040 80c0 	bne.w	80080e8 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10a      	bne.n	8007f88 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007f78:	2320      	movs	r3, #32
 8007f7a:	2205      	movs	r2, #5
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f7ff fcd8 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007f82:	f04f 33ff 	mov.w	r3, #4294967295
 8007f86:	e0b5      	b.n	80080f4 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007f8e:	b25b      	sxtb	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	da0a      	bge.n	8007faa <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007f9a:	2320      	movs	r3, #32
 8007f9c:	2205      	movs	r2, #5
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f7ff fcc7 	bl	8007932 <SCSI_SenseCode>
      return -1;
 8007fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa8:	e0a4      	b.n	80080f4 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	33b0      	adds	r3, #176	; 0xb0
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	7afa      	ldrb	r2, [r7, #11]
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	4798      	blx	r3
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00b      	beq.n	8007fe0 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007fc8:	7af9      	ldrb	r1, [r7, #11]
 8007fca:	233a      	movs	r3, #58	; 0x3a
 8007fcc:	2202      	movs	r2, #2
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f7ff fcaf 	bl	8007932 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	2205      	movs	r2, #5
 8007fd8:	721a      	strb	r2, [r3, #8]
      return -1;
 8007fda:	f04f 33ff 	mov.w	r3, #4294967295
 8007fde:	e089      	b.n	80080f4 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	33b0      	adds	r3, #176	; 0xb0
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	7afa      	ldrb	r2, [r7, #11]
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	4798      	blx	r3
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00b      	beq.n	8008016 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007ffe:	7af9      	ldrb	r1, [r7, #11]
 8008000:	2327      	movs	r3, #39	; 0x27
 8008002:	2202      	movs	r2, #2
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff fc94 	bl	8007932 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2205      	movs	r2, #5
 800800e:	721a      	strb	r2, [r3, #8]
      return -1;
 8008010:	f04f 33ff 	mov.w	r3, #4294967295
 8008014:	e06e      	b.n	80080f4 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	3302      	adds	r3, #2
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3303      	adds	r3, #3
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008026:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3304      	adds	r3, #4
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008030:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	3205      	adds	r2, #5
 8008036:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008038:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3306      	adds	r3, #6
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3307      	adds	r3, #7
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008050:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3308      	adds	r3, #8
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800805a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	3209      	adds	r2, #9
 8008060:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8008062:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008076:	7af9      	ldrb	r1, [r7, #11]
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f87e 	bl	800817a <SCSI_CheckAddressRange>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	da02      	bge.n	800808a <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008084:	f04f 33ff 	mov.w	r3, #4294967295
 8008088:	e034      	b.n	80080f4 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008096:	fb02 f303 	mul.w	r3, r2, r3
 800809a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d00a      	beq.n	80080be <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80080ae:	2320      	movs	r3, #32
 80080b0:	2205      	movs	r2, #5
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f7ff fc3d 	bl	8007932 <SCSI_SenseCode>
      return -1;
 80080b8:	f04f 33ff 	mov.w	r3, #4294967295
 80080bc:	e01a      	b.n	80080f4 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080c4:	bf28      	it	cs
 80080c6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80080ca:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2201      	movs	r2, #1
 80080d0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80080d2:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <SCSI_Write12+0x1c8>)
 80080d4:	7819      	ldrb	r1, [r3, #0]
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f103 0210 	add.w	r2, r3, #16
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f004 fea9 	bl	800ce36 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	e005      	b.n	80080f4 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 80080e8:	7afb      	ldrb	r3, [r7, #11]
 80080ea:	4619      	mov	r1, r3
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 f8f7 	bl	80082e0 <SCSI_ProcessWrite>
 80080f2:	4603      	mov	r3, r0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	2000007f 	.word	0x2000007f

08008100 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	460b      	mov	r3, r1
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	32b0      	adds	r2, #176	; 0xb0
 8008118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d102      	bne.n	800812a <SCSI_Verify10+0x2a>
  {
    return -1;
 8008124:	f04f 33ff 	mov.w	r3, #4294967295
 8008128:	e023      	b.n	8008172 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	3301      	adds	r3, #1
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	f003 0302 	and.w	r3, r3, #2
 8008134:	2b00      	cmp	r3, #0
 8008136:	d008      	beq.n	800814a <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8008138:	7af9      	ldrb	r1, [r7, #11]
 800813a:	2324      	movs	r3, #36	; 0x24
 800813c:	2205      	movs	r2, #5
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f7ff fbf7 	bl	8007932 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8008144:	f04f 33ff 	mov.w	r3, #4294967295
 8008148:	e013      	b.n	8008172 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008156:	7af9      	ldrb	r1, [r7, #11]
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f000 f80e 	bl	800817a <SCSI_CheckAddressRange>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	da02      	bge.n	800816a <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8008164:	f04f 33ff 	mov.w	r3, #4294967295
 8008168:	e003      	b.n	8008172 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2200      	movs	r2, #0
 800816e:	60da      	str	r2, [r3, #12]

  return 0;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b086      	sub	sp, #24
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
 8008186:	460b      	mov	r3, r1
 8008188:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	32b0      	adds	r2, #176	; 0xb0
 8008194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008198:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d102      	bne.n	80081a6 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 80081a0:	f04f 33ff 	mov.w	r3, #4294967295
 80081a4:	e011      	b.n	80081ca <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	441a      	add	r2, r3
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d908      	bls.n	80081c8 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80081b6:	7af9      	ldrb	r1, [r7, #11]
 80081b8:	2321      	movs	r3, #33	; 0x21
 80081ba:	2205      	movs	r2, #5
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f7ff fbb8 	bl	8007932 <SCSI_SenseCode>
    return -1;
 80081c2:	f04f 33ff 	mov.w	r3, #4294967295
 80081c6:	e000      	b.n	80081ca <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80081d4:	b590      	push	{r4, r7, lr}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	32b0      	adds	r2, #176	; 0xb0
 80081ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ee:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d102      	bne.n	80081fc <SCSI_ProcessRead+0x28>
  {
    return -1;
 80081f6:	f04f 33ff 	mov.w	r3, #4294967295
 80081fa:	e06a      	b.n	80082d2 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008208:	fb02 f303 	mul.w	r3, r2, r3
 800820c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008214:	bf28      	it	cs
 8008216:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800821a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	33b0      	adds	r3, #176	; 0xb0
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	691c      	ldr	r4, [r3, #16]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f103 0110 	add.w	r1, r3, #16
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008240:	4618      	mov	r0, r3
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8008248:	b29b      	uxth	r3, r3
 800824a:	78f8      	ldrb	r0, [r7, #3]
 800824c:	47a0      	blx	r4
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	da08      	bge.n	8008266 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008254:	78f9      	ldrb	r1, [r7, #3]
 8008256:	2311      	movs	r3, #17
 8008258:	2204      	movs	r2, #4
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7ff fb69 	bl	8007932 <SCSI_SenseCode>
    return -1;
 8008260:	f04f 33ff 	mov.w	r3, #4294967295
 8008264:	e035      	b.n	80082d2 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8008266:	4b1d      	ldr	r3, [pc, #116]	; (80082dc <SCSI_ProcessRead+0x108>)
 8008268:	7819      	ldrb	r1, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f103 0210 	add.w	r2, r3, #16
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f004 fdbe 	bl	800cdf4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008284:	4619      	mov	r1, r3
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	fbb3 f3f1 	udiv	r3, r3, r1
 800828c:	441a      	add	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80082a0:	4619      	mov	r1, r3
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80082a8:	1ad2      	subs	r2, r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	1ad2      	subs	r2, r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d102      	bne.n	80082d0 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2203      	movs	r2, #3
 80082ce:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd90      	pop	{r4, r7, pc}
 80082da:	bf00      	nop
 80082dc:	2000007e 	.word	0x2000007e

080082e0 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80082e0:	b590      	push	{r4, r7, lr}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	32b0      	adds	r2, #176	; 0xb0
 80082f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fa:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d102      	bne.n	8008308 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8008302:	f04f 33ff 	mov.w	r3, #4294967295
 8008306:	e07a      	b.n	80083fe <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008314:	fb02 f303 	mul.w	r3, r2, r3
 8008318:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008320:	bf28      	it	cs
 8008322:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008326:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	33b0      	adds	r3, #176	; 0xb0
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	695c      	ldr	r4, [r3, #20]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f103 0110 	add.w	r1, r3, #16
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800834c:	4618      	mov	r0, r3
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8008354:	b29b      	uxth	r3, r3
 8008356:	78f8      	ldrb	r0, [r7, #3]
 8008358:	47a0      	blx	r4
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	da08      	bge.n	8008372 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008360:	78f9      	ldrb	r1, [r7, #3]
 8008362:	2303      	movs	r3, #3
 8008364:	2204      	movs	r2, #4
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff fae3 	bl	8007932 <SCSI_SenseCode>
    return -1;
 800836c:	f04f 33ff 	mov.w	r3, #4294967295
 8008370:	e045      	b.n	80083fe <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800837e:	4619      	mov	r1, r3
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	fbb3 f3f1 	udiv	r3, r3, r1
 8008386:	441a      	add	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800839a:	4619      	mov	r1, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	fbb3 f3f1 	udiv	r3, r3, r1
 80083a2:	1ad2      	subs	r2, r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	1ad2      	subs	r2, r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d104      	bne.n	80083ce <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80083c4:	2100      	movs	r1, #0
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7fe fd14 	bl	8006df4 <MSC_BOT_SendCSW>
 80083cc:	e016      	b.n	80083fc <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80083da:	fb02 f303 	mul.w	r3, r2, r3
 80083de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083e2:	bf28      	it	cs
 80083e4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80083e8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80083ea:	4b07      	ldr	r3, [pc, #28]	; (8008408 <SCSI_ProcessWrite+0x128>)
 80083ec:	7819      	ldrb	r1, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f103 0210 	add.w	r2, r3, #16
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f004 fd1d 	bl	800ce36 <USBD_LL_PrepareReceive>
  }

  return 0;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	bd90      	pop	{r4, r7, pc}
 8008406:	bf00      	nop
 8008408:	2000007f 	.word	0x2000007f

0800840c <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800841a:	88fb      	ldrh	r3, [r7, #6]
 800841c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8008424:	f04f 33ff 	mov.w	r3, #4294967295
 8008428:	e013      	b.n	8008452 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800842a:	8afa      	ldrh	r2, [r7, #22]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8008430:	e00b      	b.n	800844a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8008432:	8afb      	ldrh	r3, [r7, #22]
 8008434:	3b01      	subs	r3, #1
 8008436:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8008438:	8afb      	ldrh	r3, [r7, #22]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	441a      	add	r2, r3
 800843e:	8afb      	ldrh	r3, [r7, #22]
 8008440:	7811      	ldrb	r1, [r2, #0]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	4413      	add	r3, r2
 8008446:	460a      	mov	r2, r1
 8008448:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800844a:	8afb      	ldrh	r3, [r7, #22]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1f0      	bne.n	8008432 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b086      	sub	sp, #24
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	4613      	mov	r3, r2
 800846a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008472:	2303      	movs	r3, #3
 8008474:	e01f      	b.n	80084b6 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	79fa      	ldrb	r2, [r7, #7]
 80084a8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f004 fb4e 	bl	800cb4c <USBD_LL_Init>
 80084b0:	4603      	mov	r3, r0
 80084b2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e025      	b.n	8008522 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	32ae      	adds	r2, #174	; 0xae
 80084e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00f      	beq.n	8008512 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	32ae      	adds	r2, #174	; 0xae
 80084fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008502:	f107 020e 	add.w	r2, r7, #14
 8008506:	4610      	mov	r0, r2
 8008508:	4798      	blx	r3
 800850a:	4602      	mov	r2, r0
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f004 fb56 	bl	800cbe4 <USBD_LL_Start>
 8008538:	4603      	mov	r3, r0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008542:	b480      	push	{r7}
 8008544:	b083      	sub	sp, #12
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800854a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	460b      	mov	r3, r1
 8008562:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d009      	beq.n	8008586 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	78fa      	ldrb	r2, [r7, #3]
 800857c:	4611      	mov	r1, r2
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	4798      	blx	r3
 8008582:	4603      	mov	r3, r0
 8008584:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008586:	7bfb      	ldrb	r3, [r7, #15]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	78fa      	ldrb	r2, [r7, #3]
 80085aa:	4611      	mov	r1, r2
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085b6:	2303      	movs	r3, #3
 80085b8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 f909 	bl	80097ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80085ea:	461a      	mov	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085f8:	f003 031f 	and.w	r3, r3, #31
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d01a      	beq.n	8008636 <USBD_LL_SetupStage+0x72>
 8008600:	2b02      	cmp	r3, #2
 8008602:	d822      	bhi.n	800864a <USBD_LL_SetupStage+0x86>
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <USBD_LL_SetupStage+0x4a>
 8008608:	2b01      	cmp	r3, #1
 800860a:	d00a      	beq.n	8008622 <USBD_LL_SetupStage+0x5e>
 800860c:	e01d      	b.n	800864a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fb60 	bl	8008cdc <USBD_StdDevReq>
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
      break;
 8008620:	e020      	b.n	8008664 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fbc8 	bl	8008dc0 <USBD_StdItfReq>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]
      break;
 8008634:	e016      	b.n	8008664 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fc2a 	bl	8008e98 <USBD_StdEPReq>
 8008644:	4603      	mov	r3, r0
 8008646:	73fb      	strb	r3, [r7, #15]
      break;
 8008648:	e00c      	b.n	8008664 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008650:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008654:	b2db      	uxtb	r3, r3
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f004 fb42 	bl	800cce2 <USBD_LL_StallEP>
 800865e:	4603      	mov	r3, r0
 8008660:	73fb      	strb	r3, [r7, #15]
      break;
 8008662:	bf00      	nop
  }

  return ret;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b086      	sub	sp, #24
 8008672:	af00      	add	r7, sp, #0
 8008674:	60f8      	str	r0, [r7, #12]
 8008676:	460b      	mov	r3, r1
 8008678:	607a      	str	r2, [r7, #4]
 800867a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d16e      	bne.n	8008764 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800868c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008694:	2b03      	cmp	r3, #3
 8008696:	f040 8098 	bne.w	80087ca <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	689a      	ldr	r2, [r3, #8]
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d913      	bls.n	80086ce <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	1ad2      	subs	r2, r2, r3
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	4293      	cmp	r3, r2
 80086be:	bf28      	it	cs
 80086c0:	4613      	movcs	r3, r2
 80086c2:	461a      	mov	r2, r3
 80086c4:	6879      	ldr	r1, [r7, #4]
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f001 f968 	bl	800999c <USBD_CtlContinueRx>
 80086cc:	e07d      	b.n	80087ca <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086d4:	f003 031f 	and.w	r3, r3, #31
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d014      	beq.n	8008706 <USBD_LL_DataOutStage+0x98>
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d81d      	bhi.n	800871c <USBD_LL_DataOutStage+0xae>
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <USBD_LL_DataOutStage+0x7c>
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d003      	beq.n	80086f0 <USBD_LL_DataOutStage+0x82>
 80086e8:	e018      	b.n	800871c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	75bb      	strb	r3, [r7, #22]
            break;
 80086ee:	e018      	b.n	8008722 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	4619      	mov	r1, r3
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fa5e 	bl	8008bbc <USBD_CoreFindIF>
 8008700:	4603      	mov	r3, r0
 8008702:	75bb      	strb	r3, [r7, #22]
            break;
 8008704:	e00d      	b.n	8008722 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800870c:	b2db      	uxtb	r3, r3
 800870e:	4619      	mov	r1, r3
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 fa60 	bl	8008bd6 <USBD_CoreFindEP>
 8008716:	4603      	mov	r3, r0
 8008718:	75bb      	strb	r3, [r7, #22]
            break;
 800871a:	e002      	b.n	8008722 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	75bb      	strb	r3, [r7, #22]
            break;
 8008720:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008722:	7dbb      	ldrb	r3, [r7, #22]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d119      	bne.n	800875c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b03      	cmp	r3, #3
 8008732:	d113      	bne.n	800875c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008734:	7dba      	ldrb	r2, [r7, #22]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	32ae      	adds	r2, #174	; 0xae
 800873a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00b      	beq.n	800875c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008744:	7dba      	ldrb	r2, [r7, #22]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800874c:	7dba      	ldrb	r2, [r7, #22]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	32ae      	adds	r2, #174	; 0xae
 8008752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f001 f92e 	bl	80099be <USBD_CtlSendStatus>
 8008762:	e032      	b.n	80087ca <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008764:	7afb      	ldrb	r3, [r7, #11]
 8008766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876a:	b2db      	uxtb	r3, r3
 800876c:	4619      	mov	r1, r3
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 fa31 	bl	8008bd6 <USBD_CoreFindEP>
 8008774:	4603      	mov	r3, r0
 8008776:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008778:	7dbb      	ldrb	r3, [r7, #22]
 800877a:	2bff      	cmp	r3, #255	; 0xff
 800877c:	d025      	beq.n	80087ca <USBD_LL_DataOutStage+0x15c>
 800877e:	7dbb      	ldrb	r3, [r7, #22]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d122      	bne.n	80087ca <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b03      	cmp	r3, #3
 800878e:	d117      	bne.n	80087c0 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008790:	7dba      	ldrb	r2, [r7, #22]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	32ae      	adds	r2, #174	; 0xae
 8008796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00f      	beq.n	80087c0 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087a0:	7dba      	ldrb	r2, [r7, #22]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087a8:	7dba      	ldrb	r2, [r7, #22]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	32ae      	adds	r2, #174	; 0xae
 80087ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	7afa      	ldrb	r2, [r7, #11]
 80087b6:	4611      	mov	r1, r2
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	4798      	blx	r3
 80087bc:	4603      	mov	r3, r0
 80087be:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	e000      	b.n	80087cc <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	460b      	mov	r3, r1
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80087e2:	7afb      	ldrb	r3, [r7, #11]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d16f      	bne.n	80088c8 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3314      	adds	r3, #20
 80087ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d15a      	bne.n	80088ae <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	429a      	cmp	r2, r3
 8008802:	d914      	bls.n	800882e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	1ad2      	subs	r2, r2, r3
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	461a      	mov	r2, r3
 8008818:	6879      	ldr	r1, [r7, #4]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f001 f8ad 	bl	800997a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008820:	2300      	movs	r3, #0
 8008822:	2200      	movs	r2, #0
 8008824:	2100      	movs	r1, #0
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f004 fb05 	bl	800ce36 <USBD_LL_PrepareReceive>
 800882c:	e03f      	b.n	80088ae <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	429a      	cmp	r2, r3
 8008838:	d11c      	bne.n	8008874 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008842:	429a      	cmp	r2, r3
 8008844:	d316      	bcc.n	8008874 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008850:	429a      	cmp	r2, r3
 8008852:	d20f      	bcs.n	8008874 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008854:	2200      	movs	r2, #0
 8008856:	2100      	movs	r1, #0
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f001 f88e 	bl	800997a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008866:	2300      	movs	r3, #0
 8008868:	2200      	movs	r2, #0
 800886a:	2100      	movs	r1, #0
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f004 fae2 	bl	800ce36 <USBD_LL_PrepareReceive>
 8008872:	e01c      	b.n	80088ae <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b03      	cmp	r3, #3
 800887e:	d10f      	bne.n	80088a0 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d009      	beq.n	80088a0 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088a0:	2180      	movs	r1, #128	; 0x80
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f004 fa1d 	bl	800cce2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f001 f89b 	bl	80099e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d03a      	beq.n	800892e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f7ff fe42 	bl	8008542 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088c6:	e032      	b.n	800892e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088c8:	7afb      	ldrb	r3, [r7, #11]
 80088ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	4619      	mov	r1, r3
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 f97f 	bl	8008bd6 <USBD_CoreFindEP>
 80088d8:	4603      	mov	r3, r0
 80088da:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	2bff      	cmp	r3, #255	; 0xff
 80088e0:	d025      	beq.n	800892e <USBD_LL_DataInStage+0x15a>
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d122      	bne.n	800892e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d11c      	bne.n	800892e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80088f4:	7dfa      	ldrb	r2, [r7, #23]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	32ae      	adds	r2, #174	; 0xae
 80088fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d014      	beq.n	800892e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008904:	7dfa      	ldrb	r2, [r7, #23]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800890c:	7dfa      	ldrb	r2, [r7, #23]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	32ae      	adds	r2, #174	; 0xae
 8008912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	7afa      	ldrb	r2, [r7, #11]
 800891a:	4611      	mov	r1, r2
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	4798      	blx	r3
 8008920:	4603      	mov	r3, r0
 8008922:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008924:	7dbb      	ldrb	r3, [r7, #22]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800892a:	7dbb      	ldrb	r3, [r7, #22]
 800892c:	e000      	b.n	8008930 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008970:	2b00      	cmp	r3, #0
 8008972:	d014      	beq.n	800899e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00e      	beq.n	800899e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	6852      	ldr	r2, [r2, #4]
 800898c:	b2d2      	uxtb	r2, r2
 800898e:	4611      	mov	r1, r2
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	4798      	blx	r3
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800899a:	2303      	movs	r3, #3
 800899c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800899e:	2340      	movs	r3, #64	; 0x40
 80089a0:	2200      	movs	r2, #0
 80089a2:	2100      	movs	r1, #0
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f004 f938 	bl	800cc1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2240      	movs	r2, #64	; 0x40
 80089b6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089ba:	2340      	movs	r3, #64	; 0x40
 80089bc:	2200      	movs	r2, #0
 80089be:	2180      	movs	r1, #128	; 0x80
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f004 f92a 	bl	800cc1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2240      	movs	r2, #64	; 0x40
 80089d0:	621a      	str	r2, [r3, #32]

  return ret;
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	78fa      	ldrb	r2, [r7, #3]
 80089ec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2204      	movs	r2, #4
 8008a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d106      	bne.n	8008a4a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d110      	bne.n	8008a8e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00b      	beq.n	8008a8e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d005      	beq.n	8008a8e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	32ae      	adds	r2, #174	; 0xae
 8008aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e01c      	b.n	8008af4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d115      	bne.n	8008af2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	32ae      	adds	r2, #174	; 0xae
 8008ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00b      	beq.n	8008af2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	32ae      	adds	r2, #174	; 0xae
 8008ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	78fa      	ldrb	r2, [r7, #3]
 8008aec:	4611      	mov	r1, r2
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	32ae      	adds	r2, #174	; 0xae
 8008b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e01c      	b.n	8008b58 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d115      	bne.n	8008b56 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	32ae      	adds	r2, #174	; 0xae
 8008b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00b      	beq.n	8008b56 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	32ae      	adds	r2, #174	; 0xae
 8008b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	78fa      	ldrb	r2, [r7, #3]
 8008b50:	4611      	mov	r1, r2
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00e      	beq.n	8008bb2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	6852      	ldr	r2, [r2, #4]
 8008ba0:	b2d2      	uxtb	r2, r2
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	4798      	blx	r3
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b083      	sub	sp, #12
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	460b      	mov	r3, r1
 8008be0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008be2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	885b      	ldrh	r3, [r3, #2]
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d920      	bls.n	8008c5a <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c20:	e013      	b.n	8008c4a <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c22:	f107 030a 	add.w	r3, r7, #10
 8008c26:	4619      	mov	r1, r3
 8008c28:	6978      	ldr	r0, [r7, #20]
 8008c2a:	f000 f81b 	bl	8008c64 <USBD_GetNextDesc>
 8008c2e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	785b      	ldrb	r3, [r3, #1]
 8008c34:	2b05      	cmp	r3, #5
 8008c36:	d108      	bne.n	8008c4a <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	789b      	ldrb	r3, [r3, #2]
 8008c40:	78fa      	ldrb	r2, [r7, #3]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d008      	beq.n	8008c58 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	885b      	ldrh	r3, [r3, #2]
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	897b      	ldrh	r3, [r7, #10]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d8e5      	bhi.n	8008c22 <USBD_GetEpDesc+0x32>
 8008c56:	e000      	b.n	8008c5a <USBD_GetEpDesc+0x6a>
          break;
 8008c58:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c5a:	693b      	ldr	r3, [r7, #16]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	881a      	ldrh	r2, [r3, #0]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	4413      	add	r3, r2
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c90:	68fb      	ldr	r3, [r7, #12]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b087      	sub	sp, #28
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cbc:	8a3b      	ldrh	r3, [r7, #16]
 8008cbe:	021b      	lsls	r3, r3, #8
 8008cc0:	b21a      	sxth	r2, r3
 8008cc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	b21b      	sxth	r3, r3
 8008cca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ccc:	89fb      	ldrh	r3, [r7, #14]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	371c      	adds	r7, #28
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
	...

08008cdc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cf2:	2b40      	cmp	r3, #64	; 0x40
 8008cf4:	d005      	beq.n	8008d02 <USBD_StdDevReq+0x26>
 8008cf6:	2b40      	cmp	r3, #64	; 0x40
 8008cf8:	d857      	bhi.n	8008daa <USBD_StdDevReq+0xce>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00f      	beq.n	8008d1e <USBD_StdDevReq+0x42>
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d153      	bne.n	8008daa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	32ae      	adds	r2, #174	; 0xae
 8008d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	4798      	blx	r3
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d1c:	e04a      	b.n	8008db4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	785b      	ldrb	r3, [r3, #1]
 8008d22:	2b09      	cmp	r3, #9
 8008d24:	d83b      	bhi.n	8008d9e <USBD_StdDevReq+0xc2>
 8008d26:	a201      	add	r2, pc, #4	; (adr r2, 8008d2c <USBD_StdDevReq+0x50>)
 8008d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2c:	08008d81 	.word	0x08008d81
 8008d30:	08008d95 	.word	0x08008d95
 8008d34:	08008d9f 	.word	0x08008d9f
 8008d38:	08008d8b 	.word	0x08008d8b
 8008d3c:	08008d9f 	.word	0x08008d9f
 8008d40:	08008d5f 	.word	0x08008d5f
 8008d44:	08008d55 	.word	0x08008d55
 8008d48:	08008d9f 	.word	0x08008d9f
 8008d4c:	08008d77 	.word	0x08008d77
 8008d50:	08008d69 	.word	0x08008d69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa3c 	bl	80091d4 <USBD_GetDescriptor>
          break;
 8008d5c:	e024      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fba1 	bl	80094a8 <USBD_SetAddress>
          break;
 8008d66:	e01f      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fbe0 	bl	8009530 <USBD_SetConfig>
 8008d70:	4603      	mov	r3, r0
 8008d72:	73fb      	strb	r3, [r7, #15]
          break;
 8008d74:	e018      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fc83 	bl	8009684 <USBD_GetConfig>
          break;
 8008d7e:	e013      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fcb4 	bl	80096f0 <USBD_GetStatus>
          break;
 8008d88:	e00e      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fce3 	bl	8009758 <USBD_SetFeature>
          break;
 8008d92:	e009      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fd07 	bl	80097aa <USBD_ClrFeature>
          break;
 8008d9c:	e004      	b.n	8008da8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fd5e 	bl	8009862 <USBD_CtlError>
          break;
 8008da6:	bf00      	nop
      }
      break;
 8008da8:	e004      	b.n	8008db4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fd58 	bl	8009862 <USBD_CtlError>
      break;
 8008db2:	bf00      	nop
  }

  return ret;
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop

08008dc0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dd6:	2b40      	cmp	r3, #64	; 0x40
 8008dd8:	d005      	beq.n	8008de6 <USBD_StdItfReq+0x26>
 8008dda:	2b40      	cmp	r3, #64	; 0x40
 8008ddc:	d852      	bhi.n	8008e84 <USBD_StdItfReq+0xc4>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <USBD_StdItfReq+0x26>
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d14e      	bne.n	8008e84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	3b01      	subs	r3, #1
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d840      	bhi.n	8008e76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	889b      	ldrh	r3, [r3, #4]
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d836      	bhi.n	8008e6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	889b      	ldrh	r3, [r3, #4]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff fed8 	bl	8008bbc <USBD_CoreFindIF>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	2bff      	cmp	r3, #255	; 0xff
 8008e14:	d01d      	beq.n	8008e52 <USBD_StdItfReq+0x92>
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d11a      	bne.n	8008e52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e1c:	7bba      	ldrb	r2, [r7, #14]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	32ae      	adds	r2, #174	; 0xae
 8008e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00f      	beq.n	8008e4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e2c:	7bba      	ldrb	r2, [r7, #14]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e34:	7bba      	ldrb	r2, [r7, #14]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	32ae      	adds	r2, #174	; 0xae
 8008e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
 8008e46:	4603      	mov	r3, r0
 8008e48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e4a:	e004      	b.n	8008e56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e50:	e001      	b.n	8008e56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e52:	2303      	movs	r3, #3
 8008e54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	88db      	ldrh	r3, [r3, #6]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d110      	bne.n	8008e80 <USBD_StdItfReq+0xc0>
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10d      	bne.n	8008e80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fdaa 	bl	80099be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e6a:	e009      	b.n	8008e80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fcf7 	bl	8009862 <USBD_CtlError>
          break;
 8008e74:	e004      	b.n	8008e80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fcf2 	bl	8009862 <USBD_CtlError>
          break;
 8008e7e:	e000      	b.n	8008e82 <USBD_StdItfReq+0xc2>
          break;
 8008e80:	bf00      	nop
      }
      break;
 8008e82:	e004      	b.n	8008e8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fceb 	bl	8009862 <USBD_CtlError>
      break;
 8008e8c:	bf00      	nop
  }

  return ret;
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	889b      	ldrh	r3, [r3, #4]
 8008eaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eb4:	2b40      	cmp	r3, #64	; 0x40
 8008eb6:	d007      	beq.n	8008ec8 <USBD_StdEPReq+0x30>
 8008eb8:	2b40      	cmp	r3, #64	; 0x40
 8008eba:	f200 817f 	bhi.w	80091bc <USBD_StdEPReq+0x324>
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d02a      	beq.n	8008f18 <USBD_StdEPReq+0x80>
 8008ec2:	2b20      	cmp	r3, #32
 8008ec4:	f040 817a 	bne.w	80091bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff fe82 	bl	8008bd6 <USBD_CoreFindEP>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ed6:	7b7b      	ldrb	r3, [r7, #13]
 8008ed8:	2bff      	cmp	r3, #255	; 0xff
 8008eda:	f000 8174 	beq.w	80091c6 <USBD_StdEPReq+0x32e>
 8008ede:	7b7b      	ldrb	r3, [r7, #13]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f040 8170 	bne.w	80091c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008ee6:	7b7a      	ldrb	r2, [r7, #13]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008eee:	7b7a      	ldrb	r2, [r7, #13]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	32ae      	adds	r2, #174	; 0xae
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 8163 	beq.w	80091c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f00:	7b7a      	ldrb	r2, [r7, #13]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	32ae      	adds	r2, #174	; 0xae
 8008f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
 8008f12:	4603      	mov	r3, r0
 8008f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f16:	e156      	b.n	80091c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	785b      	ldrb	r3, [r3, #1]
 8008f1c:	2b03      	cmp	r3, #3
 8008f1e:	d008      	beq.n	8008f32 <USBD_StdEPReq+0x9a>
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	f300 8145 	bgt.w	80091b0 <USBD_StdEPReq+0x318>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 809b 	beq.w	8009062 <USBD_StdEPReq+0x1ca>
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d03c      	beq.n	8008faa <USBD_StdEPReq+0x112>
 8008f30:	e13e      	b.n	80091b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d002      	beq.n	8008f44 <USBD_StdEPReq+0xac>
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d016      	beq.n	8008f70 <USBD_StdEPReq+0xd8>
 8008f42:	e02c      	b.n	8008f9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00d      	beq.n	8008f66 <USBD_StdEPReq+0xce>
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	2b80      	cmp	r3, #128	; 0x80
 8008f4e:	d00a      	beq.n	8008f66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f50:	7bbb      	ldrb	r3, [r7, #14]
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f003 fec4 	bl	800cce2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f5a:	2180      	movs	r1, #128	; 0x80
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f003 fec0 	bl	800cce2 <USBD_LL_StallEP>
 8008f62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f64:	e020      	b.n	8008fa8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fc7a 	bl	8009862 <USBD_CtlError>
              break;
 8008f6e:	e01b      	b.n	8008fa8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	885b      	ldrh	r3, [r3, #2]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10e      	bne.n	8008f96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00b      	beq.n	8008f96 <USBD_StdEPReq+0xfe>
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	2b80      	cmp	r3, #128	; 0x80
 8008f82:	d008      	beq.n	8008f96 <USBD_StdEPReq+0xfe>
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	88db      	ldrh	r3, [r3, #6]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d104      	bne.n	8008f96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f003 fea6 	bl	800cce2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fd11 	bl	80099be <USBD_CtlSendStatus>

              break;
 8008f9c:	e004      	b.n	8008fa8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fc5e 	bl	8009862 <USBD_CtlError>
              break;
 8008fa6:	bf00      	nop
          }
          break;
 8008fa8:	e107      	b.n	80091ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d002      	beq.n	8008fbc <USBD_StdEPReq+0x124>
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d016      	beq.n	8008fe8 <USBD_StdEPReq+0x150>
 8008fba:	e04b      	b.n	8009054 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00d      	beq.n	8008fde <USBD_StdEPReq+0x146>
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	2b80      	cmp	r3, #128	; 0x80
 8008fc6:	d00a      	beq.n	8008fde <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f003 fe88 	bl	800cce2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fd2:	2180      	movs	r1, #128	; 0x80
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f003 fe84 	bl	800cce2 <USBD_LL_StallEP>
 8008fda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fdc:	e040      	b.n	8009060 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fc3e 	bl	8009862 <USBD_CtlError>
              break;
 8008fe6:	e03b      	b.n	8009060 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	885b      	ldrh	r3, [r3, #2]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d136      	bne.n	800905e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d004      	beq.n	8009004 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f003 fe8e 	bl	800cd20 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fcda 	bl	80099be <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800900a:	7bbb      	ldrb	r3, [r7, #14]
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff fde1 	bl	8008bd6 <USBD_CoreFindEP>
 8009014:	4603      	mov	r3, r0
 8009016:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009018:	7b7b      	ldrb	r3, [r7, #13]
 800901a:	2bff      	cmp	r3, #255	; 0xff
 800901c:	d01f      	beq.n	800905e <USBD_StdEPReq+0x1c6>
 800901e:	7b7b      	ldrb	r3, [r7, #13]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d11c      	bne.n	800905e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009024:	7b7a      	ldrb	r2, [r7, #13]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800902c:	7b7a      	ldrb	r2, [r7, #13]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	32ae      	adds	r2, #174	; 0xae
 8009032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d010      	beq.n	800905e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800903c:	7b7a      	ldrb	r2, [r7, #13]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	32ae      	adds	r2, #174	; 0xae
 8009042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	4798      	blx	r3
 800904e:	4603      	mov	r3, r0
 8009050:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009052:	e004      	b.n	800905e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fc03 	bl	8009862 <USBD_CtlError>
              break;
 800905c:	e000      	b.n	8009060 <USBD_StdEPReq+0x1c8>
              break;
 800905e:	bf00      	nop
          }
          break;
 8009060:	e0ab      	b.n	80091ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b02      	cmp	r3, #2
 800906c:	d002      	beq.n	8009074 <USBD_StdEPReq+0x1dc>
 800906e:	2b03      	cmp	r3, #3
 8009070:	d032      	beq.n	80090d8 <USBD_StdEPReq+0x240>
 8009072:	e097      	b.n	80091a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d007      	beq.n	800908a <USBD_StdEPReq+0x1f2>
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	2b80      	cmp	r3, #128	; 0x80
 800907e:	d004      	beq.n	800908a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fbed 	bl	8009862 <USBD_CtlError>
                break;
 8009088:	e091      	b.n	80091ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800908a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800908e:	2b00      	cmp	r3, #0
 8009090:	da0b      	bge.n	80090aa <USBD_StdEPReq+0x212>
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	3310      	adds	r3, #16
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	4413      	add	r3, r2
 80090a6:	3304      	adds	r3, #4
 80090a8:	e00b      	b.n	80090c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	4413      	add	r3, r2
 80090c0:	3304      	adds	r3, #4
 80090c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2200      	movs	r2, #0
 80090c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2202      	movs	r2, #2
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fc37 	bl	8009944 <USBD_CtlSendData>
              break;
 80090d6:	e06a      	b.n	80091ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	da11      	bge.n	8009104 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
 80090e2:	f003 020f 	and.w	r2, r3, #15
 80090e6:	6879      	ldr	r1, [r7, #4]
 80090e8:	4613      	mov	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	440b      	add	r3, r1
 80090f2:	3324      	adds	r3, #36	; 0x24
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d117      	bne.n	800912a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fbb0 	bl	8009862 <USBD_CtlError>
                  break;
 8009102:	e054      	b.n	80091ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	f003 020f 	and.w	r2, r3, #15
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	4613      	mov	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d104      	bne.n	800912a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fb9d 	bl	8009862 <USBD_CtlError>
                  break;
 8009128:	e041      	b.n	80091ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800912a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800912e:	2b00      	cmp	r3, #0
 8009130:	da0b      	bge.n	800914a <USBD_StdEPReq+0x2b2>
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009138:	4613      	mov	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	3310      	adds	r3, #16
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	4413      	add	r3, r2
 8009146:	3304      	adds	r3, #4
 8009148:	e00b      	b.n	8009162 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	4413      	add	r3, r2
 8009160:	3304      	adds	r3, #4
 8009162:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <USBD_StdEPReq+0x2d8>
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	2b80      	cmp	r3, #128	; 0x80
 800916e:	d103      	bne.n	8009178 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	e00e      	b.n	8009196 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f003 fdee 	bl	800cd5e <USBD_LL_IsStallEP>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2201      	movs	r2, #1
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	e002      	b.n	8009196 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2202      	movs	r2, #2
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fbd1 	bl	8009944 <USBD_CtlSendData>
              break;
 80091a2:	e004      	b.n	80091ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fb5b 	bl	8009862 <USBD_CtlError>
              break;
 80091ac:	bf00      	nop
          }
          break;
 80091ae:	e004      	b.n	80091ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fb55 	bl	8009862 <USBD_CtlError>
          break;
 80091b8:	bf00      	nop
      }
      break;
 80091ba:	e005      	b.n	80091c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fb4f 	bl	8009862 <USBD_CtlError>
      break;
 80091c4:	e000      	b.n	80091c8 <USBD_StdEPReq+0x330>
      break;
 80091c6:	bf00      	nop
  }

  return ret;
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	885b      	ldrh	r3, [r3, #2]
 80091ee:	0a1b      	lsrs	r3, r3, #8
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	3b01      	subs	r3, #1
 80091f4:	2b06      	cmp	r3, #6
 80091f6:	f200 8128 	bhi.w	800944a <USBD_GetDescriptor+0x276>
 80091fa:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <USBD_GetDescriptor+0x2c>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	0800921d 	.word	0x0800921d
 8009204:	08009235 	.word	0x08009235
 8009208:	08009275 	.word	0x08009275
 800920c:	0800944b 	.word	0x0800944b
 8009210:	0800944b 	.word	0x0800944b
 8009214:	080093eb 	.word	0x080093eb
 8009218:	08009417 	.word	0x08009417
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	7c12      	ldrb	r2, [r2, #16]
 8009228:	f107 0108 	add.w	r1, r7, #8
 800922c:	4610      	mov	r0, r2
 800922e:	4798      	blx	r3
 8009230:	60f8      	str	r0, [r7, #12]
      break;
 8009232:	e112      	b.n	800945a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	7c1b      	ldrb	r3, [r3, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10d      	bne.n	8009258 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	f107 0208 	add.w	r2, r7, #8
 8009248:	4610      	mov	r0, r2
 800924a:	4798      	blx	r3
 800924c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3301      	adds	r3, #1
 8009252:	2202      	movs	r2, #2
 8009254:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009256:	e100      	b.n	800945a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	f107 0208 	add.w	r2, r7, #8
 8009264:	4610      	mov	r0, r2
 8009266:	4798      	blx	r3
 8009268:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3301      	adds	r3, #1
 800926e:	2202      	movs	r2, #2
 8009270:	701a      	strb	r2, [r3, #0]
      break;
 8009272:	e0f2      	b.n	800945a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	885b      	ldrh	r3, [r3, #2]
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b05      	cmp	r3, #5
 800927c:	f200 80ac 	bhi.w	80093d8 <USBD_GetDescriptor+0x204>
 8009280:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <USBD_GetDescriptor+0xb4>)
 8009282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009286:	bf00      	nop
 8009288:	080092a1 	.word	0x080092a1
 800928c:	080092d5 	.word	0x080092d5
 8009290:	08009309 	.word	0x08009309
 8009294:	0800933d 	.word	0x0800933d
 8009298:	08009371 	.word	0x08009371
 800929c:	080093a5 	.word	0x080093a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	7c12      	ldrb	r2, [r2, #16]
 80092b8:	f107 0108 	add.w	r1, r7, #8
 80092bc:	4610      	mov	r0, r2
 80092be:	4798      	blx	r3
 80092c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092c2:	e091      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 facb 	bl	8009862 <USBD_CtlError>
            err++;
 80092cc:	7afb      	ldrb	r3, [r7, #11]
 80092ce:	3301      	adds	r3, #1
 80092d0:	72fb      	strb	r3, [r7, #11]
          break;
 80092d2:	e089      	b.n	80093e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00b      	beq.n	80092f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	7c12      	ldrb	r2, [r2, #16]
 80092ec:	f107 0108 	add.w	r1, r7, #8
 80092f0:	4610      	mov	r0, r2
 80092f2:	4798      	blx	r3
 80092f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092f6:	e077      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fab1 	bl	8009862 <USBD_CtlError>
            err++;
 8009300:	7afb      	ldrb	r3, [r7, #11]
 8009302:	3301      	adds	r3, #1
 8009304:	72fb      	strb	r3, [r7, #11]
          break;
 8009306:	e06f      	b.n	80093e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00b      	beq.n	800932c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	7c12      	ldrb	r2, [r2, #16]
 8009320:	f107 0108 	add.w	r1, r7, #8
 8009324:	4610      	mov	r0, r2
 8009326:	4798      	blx	r3
 8009328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800932a:	e05d      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fa97 	bl	8009862 <USBD_CtlError>
            err++;
 8009334:	7afb      	ldrb	r3, [r7, #11]
 8009336:	3301      	adds	r3, #1
 8009338:	72fb      	strb	r3, [r7, #11]
          break;
 800933a:	e055      	b.n	80093e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00b      	beq.n	8009360 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	7c12      	ldrb	r2, [r2, #16]
 8009354:	f107 0108 	add.w	r1, r7, #8
 8009358:	4610      	mov	r0, r2
 800935a:	4798      	blx	r3
 800935c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800935e:	e043      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fa7d 	bl	8009862 <USBD_CtlError>
            err++;
 8009368:	7afb      	ldrb	r3, [r7, #11]
 800936a:	3301      	adds	r3, #1
 800936c:	72fb      	strb	r3, [r7, #11]
          break;
 800936e:	e03b      	b.n	80093e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00b      	beq.n	8009394 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	7c12      	ldrb	r2, [r2, #16]
 8009388:	f107 0108 	add.w	r1, r7, #8
 800938c:	4610      	mov	r0, r2
 800938e:	4798      	blx	r3
 8009390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009392:	e029      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fa63 	bl	8009862 <USBD_CtlError>
            err++;
 800939c:	7afb      	ldrb	r3, [r7, #11]
 800939e:	3301      	adds	r3, #1
 80093a0:	72fb      	strb	r3, [r7, #11]
          break;
 80093a2:	e021      	b.n	80093e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00b      	beq.n	80093c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	7c12      	ldrb	r2, [r2, #16]
 80093bc:	f107 0108 	add.w	r1, r7, #8
 80093c0:	4610      	mov	r0, r2
 80093c2:	4798      	blx	r3
 80093c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093c6:	e00f      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fa49 	bl	8009862 <USBD_CtlError>
            err++;
 80093d0:	7afb      	ldrb	r3, [r7, #11]
 80093d2:	3301      	adds	r3, #1
 80093d4:	72fb      	strb	r3, [r7, #11]
          break;
 80093d6:	e007      	b.n	80093e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fa41 	bl	8009862 <USBD_CtlError>
          err++;
 80093e0:	7afb      	ldrb	r3, [r7, #11]
 80093e2:	3301      	adds	r3, #1
 80093e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80093e6:	bf00      	nop
      }
      break;
 80093e8:	e037      	b.n	800945a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7c1b      	ldrb	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d109      	bne.n	8009406 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fa:	f107 0208 	add.w	r2, r7, #8
 80093fe:	4610      	mov	r0, r2
 8009400:	4798      	blx	r3
 8009402:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009404:	e029      	b.n	800945a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fa2a 	bl	8009862 <USBD_CtlError>
        err++;
 800940e:	7afb      	ldrb	r3, [r7, #11]
 8009410:	3301      	adds	r3, #1
 8009412:	72fb      	strb	r3, [r7, #11]
      break;
 8009414:	e021      	b.n	800945a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	7c1b      	ldrb	r3, [r3, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10d      	bne.n	800943a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009426:	f107 0208 	add.w	r2, r7, #8
 800942a:	4610      	mov	r0, r2
 800942c:	4798      	blx	r3
 800942e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3301      	adds	r3, #1
 8009434:	2207      	movs	r2, #7
 8009436:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009438:	e00f      	b.n	800945a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fa10 	bl	8009862 <USBD_CtlError>
        err++;
 8009442:	7afb      	ldrb	r3, [r7, #11]
 8009444:	3301      	adds	r3, #1
 8009446:	72fb      	strb	r3, [r7, #11]
      break;
 8009448:	e007      	b.n	800945a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fa08 	bl	8009862 <USBD_CtlError>
      err++;
 8009452:	7afb      	ldrb	r3, [r7, #11]
 8009454:	3301      	adds	r3, #1
 8009456:	72fb      	strb	r3, [r7, #11]
      break;
 8009458:	bf00      	nop
  }

  if (err != 0U)
 800945a:	7afb      	ldrb	r3, [r7, #11]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d11e      	bne.n	800949e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	88db      	ldrh	r3, [r3, #6]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d016      	beq.n	8009496 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009468:	893b      	ldrh	r3, [r7, #8]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00e      	beq.n	800948c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	88da      	ldrh	r2, [r3, #6]
 8009472:	893b      	ldrh	r3, [r7, #8]
 8009474:	4293      	cmp	r3, r2
 8009476:	bf28      	it	cs
 8009478:	4613      	movcs	r3, r2
 800947a:	b29b      	uxth	r3, r3
 800947c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800947e:	893b      	ldrh	r3, [r7, #8]
 8009480:	461a      	mov	r2, r3
 8009482:	68f9      	ldr	r1, [r7, #12]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fa5d 	bl	8009944 <USBD_CtlSendData>
 800948a:	e009      	b.n	80094a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f9e7 	bl	8009862 <USBD_CtlError>
 8009494:	e004      	b.n	80094a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fa91 	bl	80099be <USBD_CtlSendStatus>
 800949c:	e000      	b.n	80094a0 <USBD_GetDescriptor+0x2cc>
    return;
 800949e:	bf00      	nop
  }
}
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop

080094a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	889b      	ldrh	r3, [r3, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d131      	bne.n	800951e <USBD_SetAddress+0x76>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	88db      	ldrh	r3, [r3, #6]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d12d      	bne.n	800951e <USBD_SetAddress+0x76>
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	885b      	ldrh	r3, [r3, #2]
 80094c6:	2b7f      	cmp	r3, #127	; 0x7f
 80094c8:	d829      	bhi.n	800951e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	885b      	ldrh	r3, [r3, #2]
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d104      	bne.n	80094ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f9bc 	bl	8009862 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ea:	e01d      	b.n	8009528 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	7bfa      	ldrb	r2, [r7, #15]
 80094f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f003 fc5c 	bl	800cdb6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fa5d 	bl	80099be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d004      	beq.n	8009514 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2202      	movs	r2, #2
 800950e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009512:	e009      	b.n	8009528 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951c:	e004      	b.n	8009528 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f99e 	bl	8009862 <USBD_CtlError>
  }
}
 8009526:	bf00      	nop
 8009528:	bf00      	nop
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	885b      	ldrh	r3, [r3, #2]
 8009542:	b2da      	uxtb	r2, r3
 8009544:	4b4e      	ldr	r3, [pc, #312]	; (8009680 <USBD_SetConfig+0x150>)
 8009546:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009548:	4b4d      	ldr	r3, [pc, #308]	; (8009680 <USBD_SetConfig+0x150>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d905      	bls.n	800955c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009550:	6839      	ldr	r1, [r7, #0]
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f985 	bl	8009862 <USBD_CtlError>
    return USBD_FAIL;
 8009558:	2303      	movs	r3, #3
 800955a:	e08c      	b.n	8009676 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009562:	b2db      	uxtb	r3, r3
 8009564:	2b02      	cmp	r3, #2
 8009566:	d002      	beq.n	800956e <USBD_SetConfig+0x3e>
 8009568:	2b03      	cmp	r3, #3
 800956a:	d029      	beq.n	80095c0 <USBD_SetConfig+0x90>
 800956c:	e075      	b.n	800965a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800956e:	4b44      	ldr	r3, [pc, #272]	; (8009680 <USBD_SetConfig+0x150>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d020      	beq.n	80095b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009576:	4b42      	ldr	r3, [pc, #264]	; (8009680 <USBD_SetConfig+0x150>)
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009580:	4b3f      	ldr	r3, [pc, #252]	; (8009680 <USBD_SetConfig+0x150>)
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7fe ffe6 	bl	8008558 <USBD_SetClassConfig>
 800958c:	4603      	mov	r3, r0
 800958e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d008      	beq.n	80095a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f962 	bl	8009862 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2202      	movs	r2, #2
 80095a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095a6:	e065      	b.n	8009674 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fa08 	bl	80099be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2203      	movs	r2, #3
 80095b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095b6:	e05d      	b.n	8009674 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fa00 	bl	80099be <USBD_CtlSendStatus>
      break;
 80095be:	e059      	b.n	8009674 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095c0:	4b2f      	ldr	r3, [pc, #188]	; (8009680 <USBD_SetConfig+0x150>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d112      	bne.n	80095ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2202      	movs	r2, #2
 80095cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80095d0:	4b2b      	ldr	r3, [pc, #172]	; (8009680 <USBD_SetConfig+0x150>)
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095da:	4b29      	ldr	r3, [pc, #164]	; (8009680 <USBD_SetConfig+0x150>)
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7fe ffd5 	bl	8008590 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f9e9 	bl	80099be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095ec:	e042      	b.n	8009674 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80095ee:	4b24      	ldr	r3, [pc, #144]	; (8009680 <USBD_SetConfig+0x150>)
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d02a      	beq.n	8009652 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	b2db      	uxtb	r3, r3
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7fe ffc3 	bl	8008590 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800960a:	4b1d      	ldr	r3, [pc, #116]	; (8009680 <USBD_SetConfig+0x150>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009614:	4b1a      	ldr	r3, [pc, #104]	; (8009680 <USBD_SetConfig+0x150>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7fe ff9c 	bl	8008558 <USBD_SetClassConfig>
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00f      	beq.n	800964a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f918 	bl	8009862 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	b2db      	uxtb	r3, r3
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7fe ffa8 	bl	8008590 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2202      	movs	r2, #2
 8009644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009648:	e014      	b.n	8009674 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f9b7 	bl	80099be <USBD_CtlSendStatus>
      break;
 8009650:	e010      	b.n	8009674 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f9b3 	bl	80099be <USBD_CtlSendStatus>
      break;
 8009658:	e00c      	b.n	8009674 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f900 	bl	8009862 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009662:	4b07      	ldr	r3, [pc, #28]	; (8009680 <USBD_SetConfig+0x150>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7fe ff91 	bl	8008590 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800966e:	2303      	movs	r3, #3
 8009670:	73fb      	strb	r3, [r7, #15]
      break;
 8009672:	bf00      	nop
  }

  return ret;
 8009674:	7bfb      	ldrb	r3, [r7, #15]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	20000358 	.word	0x20000358

08009684 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	88db      	ldrh	r3, [r3, #6]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d004      	beq.n	80096a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f8e2 	bl	8009862 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800969e:	e023      	b.n	80096e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	dc02      	bgt.n	80096b2 <USBD_GetConfig+0x2e>
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	dc03      	bgt.n	80096b8 <USBD_GetConfig+0x34>
 80096b0:	e015      	b.n	80096de <USBD_GetConfig+0x5a>
 80096b2:	2b03      	cmp	r3, #3
 80096b4:	d00b      	beq.n	80096ce <USBD_GetConfig+0x4a>
 80096b6:	e012      	b.n	80096de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3308      	adds	r3, #8
 80096c2:	2201      	movs	r2, #1
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f93c 	bl	8009944 <USBD_CtlSendData>
        break;
 80096cc:	e00c      	b.n	80096e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	3304      	adds	r3, #4
 80096d2:	2201      	movs	r2, #1
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f934 	bl	8009944 <USBD_CtlSendData>
        break;
 80096dc:	e004      	b.n	80096e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f8be 	bl	8009862 <USBD_CtlError>
        break;
 80096e6:	bf00      	nop
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009700:	b2db      	uxtb	r3, r3
 8009702:	3b01      	subs	r3, #1
 8009704:	2b02      	cmp	r3, #2
 8009706:	d81e      	bhi.n	8009746 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	88db      	ldrh	r3, [r3, #6]
 800970c:	2b02      	cmp	r3, #2
 800970e:	d004      	beq.n	800971a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f8a5 	bl	8009862 <USBD_CtlError>
        break;
 8009718:	e01a      	b.n	8009750 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009726:	2b00      	cmp	r3, #0
 8009728:	d005      	beq.n	8009736 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	f043 0202 	orr.w	r2, r3, #2
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	330c      	adds	r3, #12
 800973a:	2202      	movs	r2, #2
 800973c:	4619      	mov	r1, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f900 	bl	8009944 <USBD_CtlSendData>
      break;
 8009744:	e004      	b.n	8009750 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f88a 	bl	8009862 <USBD_CtlError>
      break;
 800974e:	bf00      	nop
  }
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	885b      	ldrh	r3, [r3, #2]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d107      	bne.n	800977a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2201      	movs	r2, #1
 800976e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f923 	bl	80099be <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009778:	e013      	b.n	80097a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	885b      	ldrh	r3, [r3, #2]
 800977e:	2b02      	cmp	r3, #2
 8009780:	d10b      	bne.n	800979a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	889b      	ldrh	r3, [r3, #4]
 8009786:	0a1b      	lsrs	r3, r3, #8
 8009788:	b29b      	uxth	r3, r3
 800978a:	b2da      	uxtb	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f913 	bl	80099be <USBD_CtlSendStatus>
}
 8009798:	e003      	b.n	80097a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f860 	bl	8009862 <USBD_CtlError>
}
 80097a2:	bf00      	nop
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b082      	sub	sp, #8
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	3b01      	subs	r3, #1
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d80b      	bhi.n	80097da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	885b      	ldrh	r3, [r3, #2]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d10c      	bne.n	80097e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f8f3 	bl	80099be <USBD_CtlSendStatus>
      }
      break;
 80097d8:	e004      	b.n	80097e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f840 	bl	8009862 <USBD_CtlError>
      break;
 80097e2:	e000      	b.n	80097e6 <USBD_ClrFeature+0x3c>
      break;
 80097e4:	bf00      	nop
  }
}
 80097e6:	bf00      	nop
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	781a      	ldrb	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	3301      	adds	r3, #1
 8009808:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	781a      	ldrb	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3301      	adds	r3, #1
 8009816:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f7ff fa40 	bl	8008c9e <SWAPBYTE>
 800981e:	4603      	mov	r3, r0
 8009820:	461a      	mov	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3301      	adds	r3, #1
 800982a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	3301      	adds	r3, #1
 8009830:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f7ff fa33 	bl	8008c9e <SWAPBYTE>
 8009838:	4603      	mov	r3, r0
 800983a:	461a      	mov	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3301      	adds	r3, #1
 8009844:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3301      	adds	r3, #1
 800984a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f7ff fa26 	bl	8008c9e <SWAPBYTE>
 8009852:	4603      	mov	r3, r0
 8009854:	461a      	mov	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	80da      	strh	r2, [r3, #6]
}
 800985a:	bf00      	nop
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800986c:	2180      	movs	r1, #128	; 0x80
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f003 fa37 	bl	800cce2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009874:	2100      	movs	r1, #0
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f003 fa33 	bl	800cce2 <USBD_LL_StallEP>
}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009890:	2300      	movs	r3, #0
 8009892:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d036      	beq.n	8009908 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800989e:	6938      	ldr	r0, [r7, #16]
 80098a0:	f000 f836 	bl	8009910 <USBD_GetLen>
 80098a4:	4603      	mov	r3, r0
 80098a6:	3301      	adds	r3, #1
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	005b      	lsls	r3, r3, #1
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	4413      	add	r3, r2
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	7812      	ldrb	r2, [r2, #0]
 80098bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	3301      	adds	r3, #1
 80098c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	4413      	add	r3, r2
 80098ca:	2203      	movs	r2, #3
 80098cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
 80098d0:	3301      	adds	r3, #1
 80098d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098d4:	e013      	b.n	80098fe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098d6:	7dfb      	ldrb	r3, [r7, #23]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	4413      	add	r3, r2
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	7812      	ldrb	r2, [r2, #0]
 80098e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	3301      	adds	r3, #1
 80098e6:	613b      	str	r3, [r7, #16]
    idx++;
 80098e8:	7dfb      	ldrb	r3, [r7, #23]
 80098ea:	3301      	adds	r3, #1
 80098ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	4413      	add	r3, r2
 80098f4:	2200      	movs	r2, #0
 80098f6:	701a      	strb	r2, [r3, #0]
    idx++;
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	3301      	adds	r3, #1
 80098fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1e7      	bne.n	80098d6 <USBD_GetString+0x52>
 8009906:	e000      	b.n	800990a <USBD_GetString+0x86>
    return;
 8009908:	bf00      	nop
  }
}
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009918:	2300      	movs	r3, #0
 800991a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009920:	e005      	b.n	800992e <USBD_GetLen+0x1e>
  {
    len++;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	3301      	adds	r3, #1
 8009926:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	3301      	adds	r3, #1
 800992c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f5      	bne.n	8009922 <USBD_GetLen+0x12>
  }

  return len;
 8009936:	7bfb      	ldrb	r3, [r7, #15]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2202      	movs	r2, #2
 8009954:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	2100      	movs	r1, #0
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f003 fa42 	bl	800cdf4 <USBD_LL_Transmit>

  return USBD_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	2100      	movs	r1, #0
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f003 fa31 	bl	800cdf4 <USBD_LL_Transmit>

  return USBD_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	2100      	movs	r1, #0
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f003 fa41 	bl	800ce36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b082      	sub	sp, #8
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2204      	movs	r2, #4
 80099ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099ce:	2300      	movs	r3, #0
 80099d0:	2200      	movs	r2, #0
 80099d2:	2100      	movs	r1, #0
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f003 fa0d 	bl	800cdf4 <USBD_LL_Transmit>

  return USBD_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2205      	movs	r2, #5
 80099f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099f4:	2300      	movs	r3, #0
 80099f6:	2200      	movs	r2, #0
 80099f8:	2100      	movs	r1, #0
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f003 fa1b 	bl	800ce36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <__NVIC_SetPriority>:
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	4603      	mov	r3, r0
 8009a14:	6039      	str	r1, [r7, #0]
 8009a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	db0a      	blt.n	8009a36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	490c      	ldr	r1, [pc, #48]	; (8009a58 <__NVIC_SetPriority+0x4c>)
 8009a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a2a:	0112      	lsls	r2, r2, #4
 8009a2c:	b2d2      	uxtb	r2, r2
 8009a2e:	440b      	add	r3, r1
 8009a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a34:	e00a      	b.n	8009a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	4908      	ldr	r1, [pc, #32]	; (8009a5c <__NVIC_SetPriority+0x50>)
 8009a3c:	79fb      	ldrb	r3, [r7, #7]
 8009a3e:	f003 030f 	and.w	r3, r3, #15
 8009a42:	3b04      	subs	r3, #4
 8009a44:	0112      	lsls	r2, r2, #4
 8009a46:	b2d2      	uxtb	r2, r2
 8009a48:	440b      	add	r3, r1
 8009a4a:	761a      	strb	r2, [r3, #24]
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	e000e100 	.word	0xe000e100
 8009a5c:	e000ed00 	.word	0xe000ed00

08009a60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a64:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <SysTick_Handler+0x1c>)
 8009a66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a68:	f001 fd28 	bl	800b4bc <xTaskGetSchedulerState>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d001      	beq.n	8009a76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a72:	f002 fb11 	bl	800c098 <xPortSysTickHandler>
  }
}
 8009a76:	bf00      	nop
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	e000e010 	.word	0xe000e010

08009a80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a80:	b580      	push	{r7, lr}
 8009a82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a84:	2100      	movs	r1, #0
 8009a86:	f06f 0004 	mvn.w	r0, #4
 8009a8a:	f7ff ffbf 	bl	8009a0c <__NVIC_SetPriority>
#endif
}
 8009a8e:	bf00      	nop
 8009a90:	bd80      	pop	{r7, pc}
	...

08009a94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a9a:	f3ef 8305 	mrs	r3, IPSR
 8009a9e:	603b      	str	r3, [r7, #0]
  return(result);
 8009aa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d003      	beq.n	8009aae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009aa6:	f06f 0305 	mvn.w	r3, #5
 8009aaa:	607b      	str	r3, [r7, #4]
 8009aac:	e00c      	b.n	8009ac8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009aae:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <osKernelInitialize+0x44>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d105      	bne.n	8009ac2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009ab6:	4b08      	ldr	r3, [pc, #32]	; (8009ad8 <osKernelInitialize+0x44>)
 8009ab8:	2201      	movs	r2, #1
 8009aba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	607b      	str	r3, [r7, #4]
 8009ac0:	e002      	b.n	8009ac8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ac8:	687b      	ldr	r3, [r7, #4]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	2000035c 	.word	0x2000035c

08009adc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ae2:	f3ef 8305 	mrs	r3, IPSR
 8009ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8009ae8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009aee:	f06f 0305 	mvn.w	r3, #5
 8009af2:	607b      	str	r3, [r7, #4]
 8009af4:	e010      	b.n	8009b18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009af6:	4b0b      	ldr	r3, [pc, #44]	; (8009b24 <osKernelStart+0x48>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d109      	bne.n	8009b12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009afe:	f7ff ffbf 	bl	8009a80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b02:	4b08      	ldr	r3, [pc, #32]	; (8009b24 <osKernelStart+0x48>)
 8009b04:	2202      	movs	r2, #2
 8009b06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b08:	f001 f87c 	bl	800ac04 <vTaskStartScheduler>
      stat = osOK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	607b      	str	r3, [r7, #4]
 8009b10:	e002      	b.n	8009b18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b12:	f04f 33ff 	mov.w	r3, #4294967295
 8009b16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b18:	687b      	ldr	r3, [r7, #4]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	2000035c 	.word	0x2000035c

08009b28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b08e      	sub	sp, #56	; 0x38
 8009b2c:	af04      	add	r7, sp, #16
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b34:	2300      	movs	r3, #0
 8009b36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b38:	f3ef 8305 	mrs	r3, IPSR
 8009b3c:	617b      	str	r3, [r7, #20]
  return(result);
 8009b3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d17e      	bne.n	8009c42 <osThreadNew+0x11a>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d07b      	beq.n	8009c42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b4a:	2380      	movs	r3, #128	; 0x80
 8009b4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b4e:	2318      	movs	r3, #24
 8009b50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b52:	2300      	movs	r3, #0
 8009b54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009b56:	f04f 33ff 	mov.w	r3, #4294967295
 8009b5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d045      	beq.n	8009bee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d002      	beq.n	8009b70 <osThreadNew+0x48>
        name = attr->name;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d008      	beq.n	8009b96 <osThreadNew+0x6e>
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	2b38      	cmp	r3, #56	; 0x38
 8009b88:	d805      	bhi.n	8009b96 <osThreadNew+0x6e>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <osThreadNew+0x72>
        return (NULL);
 8009b96:	2300      	movs	r3, #0
 8009b98:	e054      	b.n	8009c44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	089b      	lsrs	r3, r3, #2
 8009ba8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00e      	beq.n	8009bd0 <osThreadNew+0xa8>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	2bbb      	cmp	r3, #187	; 0xbb
 8009bb8:	d90a      	bls.n	8009bd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d006      	beq.n	8009bd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <osThreadNew+0xa8>
        mem = 1;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	61bb      	str	r3, [r7, #24]
 8009bce:	e010      	b.n	8009bf2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10c      	bne.n	8009bf2 <osThreadNew+0xca>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d108      	bne.n	8009bf2 <osThreadNew+0xca>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d104      	bne.n	8009bf2 <osThreadNew+0xca>
          mem = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	61bb      	str	r3, [r7, #24]
 8009bec:	e001      	b.n	8009bf2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d110      	bne.n	8009c1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c00:	9202      	str	r2, [sp, #8]
 8009c02:	9301      	str	r3, [sp, #4]
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	6a3a      	ldr	r2, [r7, #32]
 8009c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f000 fe0c 	bl	800a82c <xTaskCreateStatic>
 8009c14:	4603      	mov	r3, r0
 8009c16:	613b      	str	r3, [r7, #16]
 8009c18:	e013      	b.n	8009c42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d110      	bne.n	8009c42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	f107 0310 	add.w	r3, r7, #16
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 fe57 	bl	800a8e6 <xTaskCreate>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d001      	beq.n	8009c42 <osThreadNew+0x11a>
            hTask = NULL;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c42:	693b      	ldr	r3, [r7, #16]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3728      	adds	r7, #40	; 0x28
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c54:	f3ef 8305 	mrs	r3, IPSR
 8009c58:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d003      	beq.n	8009c68 <osDelay+0x1c>
    stat = osErrorISR;
 8009c60:	f06f 0305 	mvn.w	r3, #5
 8009c64:	60fb      	str	r3, [r7, #12]
 8009c66:	e007      	b.n	8009c78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 ff92 	bl	800ab9c <vTaskDelay>
    }
  }

  return (stat);
 8009c78:	68fb      	ldr	r3, [r7, #12]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
	...

08009c84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4a07      	ldr	r2, [pc, #28]	; (8009cb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009c94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	4a06      	ldr	r2, [pc, #24]	; (8009cb4 <vApplicationGetIdleTaskMemory+0x30>)
 8009c9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2280      	movs	r2, #128	; 0x80
 8009ca0:	601a      	str	r2, [r3, #0]
}
 8009ca2:	bf00      	nop
 8009ca4:	3714      	adds	r7, #20
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	20000360 	.word	0x20000360
 8009cb4:	2000041c 	.word	0x2000041c

08009cb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4a07      	ldr	r2, [pc, #28]	; (8009ce4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009cc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	4a06      	ldr	r2, [pc, #24]	; (8009ce8 <vApplicationGetTimerTaskMemory+0x30>)
 8009cce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cd6:	601a      	str	r2, [r3, #0]
}
 8009cd8:	bf00      	nop
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	2000061c 	.word	0x2000061c
 8009ce8:	200006d8 	.word	0x200006d8

08009cec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f103 0208 	add.w	r2, r3, #8
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f04f 32ff 	mov.w	r2, #4294967295
 8009d04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f103 0208 	add.w	r2, r3, #8
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f103 0208 	add.w	r2, r3, #8
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d3a:	bf00      	nop
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d46:	b480      	push	{r7}
 8009d48:	b085      	sub	sp, #20
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	689a      	ldr	r2, [r3, #8]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	601a      	str	r2, [r3, #0]
}
 8009d82:	bf00      	nop
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b085      	sub	sp, #20
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da4:	d103      	bne.n	8009dae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	60fb      	str	r3, [r7, #12]
 8009dac:	e00c      	b.n	8009dc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	3308      	adds	r3, #8
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	e002      	b.n	8009dbc <vListInsert+0x2e>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d2f6      	bcs.n	8009db6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	601a      	str	r2, [r3, #0]
}
 8009df4:	bf00      	nop
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	6892      	ldr	r2, [r2, #8]
 8009e16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	6852      	ldr	r2, [r2, #4]
 8009e20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d103      	bne.n	8009e34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	689a      	ldr	r2, [r3, #8]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	1e5a      	subs	r2, r3, #1
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e7a:	bf00      	nop
 8009e7c:	e7fe      	b.n	8009e7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e7e:	f002 f879 	bl	800bf74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e8a:	68f9      	ldr	r1, [r7, #12]
 8009e8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e8e:	fb01 f303 	mul.w	r3, r1, r3
 8009e92:	441a      	add	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	68f9      	ldr	r1, [r7, #12]
 8009eb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009eb4:	fb01 f303 	mul.w	r3, r1, r3
 8009eb8:	441a      	add	r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	22ff      	movs	r2, #255	; 0xff
 8009ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	22ff      	movs	r2, #255	; 0xff
 8009eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d114      	bne.n	8009efe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d01a      	beq.n	8009f12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	3310      	adds	r3, #16
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f001 f929 	bl	800b138 <xTaskRemoveFromEventList>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d012      	beq.n	8009f12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009eec:	4b0c      	ldr	r3, [pc, #48]	; (8009f20 <xQueueGenericReset+0xcc>)
 8009eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	e009      	b.n	8009f12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3310      	adds	r3, #16
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7ff fef2 	bl	8009cec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3324      	adds	r3, #36	; 0x24
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7ff feed 	bl	8009cec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f12:	f002 f85f 	bl	800bfd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f16:	2301      	movs	r3, #1
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	e000ed04 	.word	0xe000ed04

08009f24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b08e      	sub	sp, #56	; 0x38
 8009f28:	af02      	add	r7, sp, #8
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10a      	bne.n	8009f4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f4a:	bf00      	nop
 8009f4c:	e7fe      	b.n	8009f4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10a      	bne.n	8009f6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f66:	bf00      	nop
 8009f68:	e7fe      	b.n	8009f68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d002      	beq.n	8009f76 <xQueueGenericCreateStatic+0x52>
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <xQueueGenericCreateStatic+0x56>
 8009f76:	2301      	movs	r3, #1
 8009f78:	e000      	b.n	8009f7c <xQueueGenericCreateStatic+0x58>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10a      	bne.n	8009f96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	623b      	str	r3, [r7, #32]
}
 8009f92:	bf00      	nop
 8009f94:	e7fe      	b.n	8009f94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d102      	bne.n	8009fa2 <xQueueGenericCreateStatic+0x7e>
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <xQueueGenericCreateStatic+0x82>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e000      	b.n	8009fa8 <xQueueGenericCreateStatic+0x84>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10a      	bne.n	8009fc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	61fb      	str	r3, [r7, #28]
}
 8009fbe:	bf00      	nop
 8009fc0:	e7fe      	b.n	8009fc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009fc2:	2350      	movs	r3, #80	; 0x50
 8009fc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b50      	cmp	r3, #80	; 0x50
 8009fca:	d00a      	beq.n	8009fe2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	61bb      	str	r3, [r7, #24]
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009fe2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00d      	beq.n	800a00a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ff6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	4613      	mov	r3, r2
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	68b9      	ldr	r1, [r7, #8]
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 f805 	bl	800a014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3730      	adds	r7, #48	; 0x30
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
 800a020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d103      	bne.n	800a030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	69ba      	ldr	r2, [r7, #24]
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	e002      	b.n	800a036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a042:	2101      	movs	r1, #1
 800a044:	69b8      	ldr	r0, [r7, #24]
 800a046:	f7ff ff05 	bl	8009e54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	78fa      	ldrb	r2, [r7, #3]
 800a04e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a052:	bf00      	nop
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08e      	sub	sp, #56	; 0x38
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a06a:	2300      	movs	r3, #0
 800a06c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10a      	bne.n	800a08e <xQueueGenericSend+0x32>
	__asm volatile
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a08a:	bf00      	nop
 800a08c:	e7fe      	b.n	800a08c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d103      	bne.n	800a09c <xQueueGenericSend+0x40>
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <xQueueGenericSend+0x44>
 800a09c:	2301      	movs	r3, #1
 800a09e:	e000      	b.n	800a0a2 <xQueueGenericSend+0x46>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10a      	bne.n	800a0bc <xQueueGenericSend+0x60>
	__asm volatile
 800a0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0b8:	bf00      	nop
 800a0ba:	e7fe      	b.n	800a0ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d103      	bne.n	800a0ca <xQueueGenericSend+0x6e>
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d101      	bne.n	800a0ce <xQueueGenericSend+0x72>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e000      	b.n	800a0d0 <xQueueGenericSend+0x74>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10a      	bne.n	800a0ea <xQueueGenericSend+0x8e>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	623b      	str	r3, [r7, #32]
}
 800a0e6:	bf00      	nop
 800a0e8:	e7fe      	b.n	800a0e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0ea:	f001 f9e7 	bl	800b4bc <xTaskGetSchedulerState>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d102      	bne.n	800a0fa <xQueueGenericSend+0x9e>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d101      	bne.n	800a0fe <xQueueGenericSend+0xa2>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e000      	b.n	800a100 <xQueueGenericSend+0xa4>
 800a0fe:	2300      	movs	r3, #0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10a      	bne.n	800a11a <xQueueGenericSend+0xbe>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	61fb      	str	r3, [r7, #28]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a11a:	f001 ff2b 	bl	800bf74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a126:	429a      	cmp	r2, r3
 800a128:	d302      	bcc.n	800a130 <xQueueGenericSend+0xd4>
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d129      	bne.n	800a184 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a130:	683a      	ldr	r2, [r7, #0]
 800a132:	68b9      	ldr	r1, [r7, #8]
 800a134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a136:	f000 fa0b 	bl	800a550 <prvCopyDataToQueue>
 800a13a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	2b00      	cmp	r3, #0
 800a142:	d010      	beq.n	800a166 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a146:	3324      	adds	r3, #36	; 0x24
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 fff5 	bl	800b138 <xTaskRemoveFromEventList>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d013      	beq.n	800a17c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a154:	4b3f      	ldr	r3, [pc, #252]	; (800a254 <xQueueGenericSend+0x1f8>)
 800a156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a15a:	601a      	str	r2, [r3, #0]
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	e00a      	b.n	800a17c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d007      	beq.n	800a17c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a16c:	4b39      	ldr	r3, [pc, #228]	; (800a254 <xQueueGenericSend+0x1f8>)
 800a16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a17c:	f001 ff2a 	bl	800bfd4 <vPortExitCritical>
				return pdPASS;
 800a180:	2301      	movs	r3, #1
 800a182:	e063      	b.n	800a24c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d103      	bne.n	800a192 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a18a:	f001 ff23 	bl	800bfd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a18e:	2300      	movs	r3, #0
 800a190:	e05c      	b.n	800a24c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a194:	2b00      	cmp	r3, #0
 800a196:	d106      	bne.n	800a1a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a198:	f107 0314 	add.w	r3, r7, #20
 800a19c:	4618      	mov	r0, r3
 800a19e:	f001 f82f 	bl	800b200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1a6:	f001 ff15 	bl	800bfd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1aa:	f000 fd9b 	bl	800ace4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1ae:	f001 fee1 	bl	800bf74 <vPortEnterCritical>
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1b8:	b25b      	sxtb	r3, r3
 800a1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1be:	d103      	bne.n	800a1c8 <xQueueGenericSend+0x16c>
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1ce:	b25b      	sxtb	r3, r3
 800a1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d4:	d103      	bne.n	800a1de <xQueueGenericSend+0x182>
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1de:	f001 fef9 	bl	800bfd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1e2:	1d3a      	adds	r2, r7, #4
 800a1e4:	f107 0314 	add.w	r3, r7, #20
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f001 f81e 	bl	800b22c <xTaskCheckForTimeOut>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d124      	bne.n	800a240 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a1f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1f8:	f000 faa2 	bl	800a740 <prvIsQueueFull>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d018      	beq.n	800a234 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a204:	3310      	adds	r3, #16
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	4611      	mov	r1, r2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f000 ff44 	bl	800b098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a212:	f000 fa2d 	bl	800a670 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a216:	f000 fd73 	bl	800ad00 <xTaskResumeAll>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f47f af7c 	bne.w	800a11a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a222:	4b0c      	ldr	r3, [pc, #48]	; (800a254 <xQueueGenericSend+0x1f8>)
 800a224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	e772      	b.n	800a11a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a236:	f000 fa1b 	bl	800a670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a23a:	f000 fd61 	bl	800ad00 <xTaskResumeAll>
 800a23e:	e76c      	b.n	800a11a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a242:	f000 fa15 	bl	800a670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a246:	f000 fd5b 	bl	800ad00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a24a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3738      	adds	r7, #56	; 0x38
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	e000ed04 	.word	0xe000ed04

0800a258 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b090      	sub	sp, #64	; 0x40
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
 800a264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10a      	bne.n	800a286 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a274:	f383 8811 	msr	BASEPRI, r3
 800a278:	f3bf 8f6f 	isb	sy
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a282:	bf00      	nop
 800a284:	e7fe      	b.n	800a284 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d103      	bne.n	800a294 <xQueueGenericSendFromISR+0x3c>
 800a28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a290:	2b00      	cmp	r3, #0
 800a292:	d101      	bne.n	800a298 <xQueueGenericSendFromISR+0x40>
 800a294:	2301      	movs	r3, #1
 800a296:	e000      	b.n	800a29a <xQueueGenericSendFromISR+0x42>
 800a298:	2300      	movs	r3, #0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10a      	bne.n	800a2b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2b0:	bf00      	nop
 800a2b2:	e7fe      	b.n	800a2b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d103      	bne.n	800a2c2 <xQueueGenericSendFromISR+0x6a>
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d101      	bne.n	800a2c6 <xQueueGenericSendFromISR+0x6e>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e000      	b.n	800a2c8 <xQueueGenericSendFromISR+0x70>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10a      	bne.n	800a2e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	623b      	str	r3, [r7, #32]
}
 800a2de:	bf00      	nop
 800a2e0:	e7fe      	b.n	800a2e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2e2:	f001 ff29 	bl	800c138 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a2e6:	f3ef 8211 	mrs	r2, BASEPRI
 800a2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ee:	f383 8811 	msr	BASEPRI, r3
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	61fa      	str	r2, [r7, #28]
 800a2fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a2fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a300:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d302      	bcc.n	800a314 <xQueueGenericSendFromISR+0xbc>
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	2b02      	cmp	r3, #2
 800a312:	d12f      	bne.n	800a374 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a322:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a324:	683a      	ldr	r2, [r7, #0]
 800a326:	68b9      	ldr	r1, [r7, #8]
 800a328:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a32a:	f000 f911 	bl	800a550 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a32e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a336:	d112      	bne.n	800a35e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d016      	beq.n	800a36e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a342:	3324      	adds	r3, #36	; 0x24
 800a344:	4618      	mov	r0, r3
 800a346:	f000 fef7 	bl	800b138 <xTaskRemoveFromEventList>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00e      	beq.n	800a36e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00b      	beq.n	800a36e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	601a      	str	r2, [r3, #0]
 800a35c:	e007      	b.n	800a36e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a35e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a362:	3301      	adds	r3, #1
 800a364:	b2db      	uxtb	r3, r3
 800a366:	b25a      	sxtb	r2, r3
 800a368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a36e:	2301      	movs	r3, #1
 800a370:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a372:	e001      	b.n	800a378 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a374:	2300      	movs	r3, #0
 800a376:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a382:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a386:	4618      	mov	r0, r3
 800a388:	3740      	adds	r7, #64	; 0x40
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
	...

0800a390 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08c      	sub	sp, #48	; 0x30
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a39c:	2300      	movs	r3, #0
 800a39e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10a      	bne.n	800a3c0 <xQueueReceive+0x30>
	__asm volatile
 800a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ae:	f383 8811 	msr	BASEPRI, r3
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	623b      	str	r3, [r7, #32]
}
 800a3bc:	bf00      	nop
 800a3be:	e7fe      	b.n	800a3be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d103      	bne.n	800a3ce <xQueueReceive+0x3e>
 800a3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d101      	bne.n	800a3d2 <xQueueReceive+0x42>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e000      	b.n	800a3d4 <xQueueReceive+0x44>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d10a      	bne.n	800a3ee <xQueueReceive+0x5e>
	__asm volatile
 800a3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3dc:	f383 8811 	msr	BASEPRI, r3
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	61fb      	str	r3, [r7, #28]
}
 800a3ea:	bf00      	nop
 800a3ec:	e7fe      	b.n	800a3ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3ee:	f001 f865 	bl	800b4bc <xTaskGetSchedulerState>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d102      	bne.n	800a3fe <xQueueReceive+0x6e>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <xQueueReceive+0x72>
 800a3fe:	2301      	movs	r3, #1
 800a400:	e000      	b.n	800a404 <xQueueReceive+0x74>
 800a402:	2300      	movs	r3, #0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10a      	bne.n	800a41e <xQueueReceive+0x8e>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	61bb      	str	r3, [r7, #24]
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a41e:	f001 fda9 	bl	800bf74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a426:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d01f      	beq.n	800a46e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a42e:	68b9      	ldr	r1, [r7, #8]
 800a430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a432:	f000 f8f7 	bl	800a624 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	1e5a      	subs	r2, r3, #1
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00f      	beq.n	800a466 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a448:	3310      	adds	r3, #16
 800a44a:	4618      	mov	r0, r3
 800a44c:	f000 fe74 	bl	800b138 <xTaskRemoveFromEventList>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d007      	beq.n	800a466 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a456:	4b3d      	ldr	r3, [pc, #244]	; (800a54c <xQueueReceive+0x1bc>)
 800a458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a466:	f001 fdb5 	bl	800bfd4 <vPortExitCritical>
				return pdPASS;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e069      	b.n	800a542 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d103      	bne.n	800a47c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a474:	f001 fdae 	bl	800bfd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a478:	2300      	movs	r3, #0
 800a47a:	e062      	b.n	800a542 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d106      	bne.n	800a490 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a482:	f107 0310 	add.w	r3, r7, #16
 800a486:	4618      	mov	r0, r3
 800a488:	f000 feba 	bl	800b200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a48c:	2301      	movs	r3, #1
 800a48e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a490:	f001 fda0 	bl	800bfd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a494:	f000 fc26 	bl	800ace4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a498:	f001 fd6c 	bl	800bf74 <vPortEnterCritical>
 800a49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4a2:	b25b      	sxtb	r3, r3
 800a4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a8:	d103      	bne.n	800a4b2 <xQueueReceive+0x122>
 800a4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4b8:	b25b      	sxtb	r3, r3
 800a4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4be:	d103      	bne.n	800a4c8 <xQueueReceive+0x138>
 800a4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4c8:	f001 fd84 	bl	800bfd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4cc:	1d3a      	adds	r2, r7, #4
 800a4ce:	f107 0310 	add.w	r3, r7, #16
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 fea9 	bl	800b22c <xTaskCheckForTimeOut>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d123      	bne.n	800a528 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4e2:	f000 f917 	bl	800a714 <prvIsQueueEmpty>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d017      	beq.n	800a51c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ee:	3324      	adds	r3, #36	; 0x24
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	4611      	mov	r1, r2
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 fdcf 	bl	800b098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a4fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4fc:	f000 f8b8 	bl	800a670 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a500:	f000 fbfe 	bl	800ad00 <xTaskResumeAll>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d189      	bne.n	800a41e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a50a:	4b10      	ldr	r3, [pc, #64]	; (800a54c <xQueueReceive+0x1bc>)
 800a50c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	e780      	b.n	800a41e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a51c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a51e:	f000 f8a7 	bl	800a670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a522:	f000 fbed 	bl	800ad00 <xTaskResumeAll>
 800a526:	e77a      	b.n	800a41e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a52a:	f000 f8a1 	bl	800a670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a52e:	f000 fbe7 	bl	800ad00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a534:	f000 f8ee 	bl	800a714 <prvIsQueueEmpty>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f43f af6f 	beq.w	800a41e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a542:	4618      	mov	r0, r3
 800a544:	3730      	adds	r7, #48	; 0x30
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	e000ed04 	.word	0xe000ed04

0800a550 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a55c:	2300      	movs	r3, #0
 800a55e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a564:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10d      	bne.n	800a58a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d14d      	bne.n	800a612 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 ffbc 	bl	800b4f8 <xTaskPriorityDisinherit>
 800a580:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	609a      	str	r2, [r3, #8]
 800a588:	e043      	b.n	800a612 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d119      	bne.n	800a5c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6858      	ldr	r0, [r3, #4]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a598:	461a      	mov	r2, r3
 800a59a:	68b9      	ldr	r1, [r7, #8]
 800a59c:	f002 fcea 	bl	800cf74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a8:	441a      	add	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	685a      	ldr	r2, [r3, #4]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d32b      	bcc.n	800a612 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	605a      	str	r2, [r3, #4]
 800a5c2:	e026      	b.n	800a612 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	68d8      	ldr	r0, [r3, #12]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	68b9      	ldr	r1, [r7, #8]
 800a5d0:	f002 fcd0 	bl	800cf74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	68da      	ldr	r2, [r3, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5dc:	425b      	negs	r3, r3
 800a5de:	441a      	add	r2, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	68da      	ldr	r2, [r3, #12]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d207      	bcs.n	800a600 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	689a      	ldr	r2, [r3, #8]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f8:	425b      	negs	r3, r3
 800a5fa:	441a      	add	r2, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b02      	cmp	r3, #2
 800a604:	d105      	bne.n	800a612 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	3b01      	subs	r3, #1
 800a610:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a61a:	697b      	ldr	r3, [r7, #20]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3718      	adds	r7, #24
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a632:	2b00      	cmp	r3, #0
 800a634:	d018      	beq.n	800a668 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	68da      	ldr	r2, [r3, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63e:	441a      	add	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	68da      	ldr	r2, [r3, #12]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d303      	bcc.n	800a658 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	68d9      	ldr	r1, [r3, #12]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a660:	461a      	mov	r2, r3
 800a662:	6838      	ldr	r0, [r7, #0]
 800a664:	f002 fc86 	bl	800cf74 <memcpy>
	}
}
 800a668:	bf00      	nop
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a678:	f001 fc7c 	bl	800bf74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a682:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a684:	e011      	b.n	800a6aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d012      	beq.n	800a6b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	3324      	adds	r3, #36	; 0x24
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fd50 	bl	800b138 <xTaskRemoveFromEventList>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a69e:	f000 fe27 	bl	800b2f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	dce9      	bgt.n	800a686 <prvUnlockQueue+0x16>
 800a6b2:	e000      	b.n	800a6b6 <prvUnlockQueue+0x46>
					break;
 800a6b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	22ff      	movs	r2, #255	; 0xff
 800a6ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6be:	f001 fc89 	bl	800bfd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6c2:	f001 fc57 	bl	800bf74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6ce:	e011      	b.n	800a6f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d012      	beq.n	800a6fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	3310      	adds	r3, #16
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 fd2b 	bl	800b138 <xTaskRemoveFromEventList>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6e8:	f000 fe02 	bl	800b2f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6ec:	7bbb      	ldrb	r3, [r7, #14]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	dce9      	bgt.n	800a6d0 <prvUnlockQueue+0x60>
 800a6fc:	e000      	b.n	800a700 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a6fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	22ff      	movs	r2, #255	; 0xff
 800a704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a708:	f001 fc64 	bl	800bfd4 <vPortExitCritical>
}
 800a70c:	bf00      	nop
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a71c:	f001 fc2a 	bl	800bf74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a724:	2b00      	cmp	r3, #0
 800a726:	d102      	bne.n	800a72e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a728:	2301      	movs	r3, #1
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	e001      	b.n	800a732 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a72e:	2300      	movs	r3, #0
 800a730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a732:	f001 fc4f 	bl	800bfd4 <vPortExitCritical>

	return xReturn;
 800a736:	68fb      	ldr	r3, [r7, #12]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a748:	f001 fc14 	bl	800bf74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a754:	429a      	cmp	r2, r3
 800a756:	d102      	bne.n	800a75e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a758:	2301      	movs	r3, #1
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	e001      	b.n	800a762 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a75e:	2300      	movs	r3, #0
 800a760:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a762:	f001 fc37 	bl	800bfd4 <vPortExitCritical>

	return xReturn;
 800a766:	68fb      	ldr	r3, [r7, #12]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a77a:	2300      	movs	r3, #0
 800a77c:	60fb      	str	r3, [r7, #12]
 800a77e:	e014      	b.n	800a7aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a780:	4a0f      	ldr	r2, [pc, #60]	; (800a7c0 <vQueueAddToRegistry+0x50>)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10b      	bne.n	800a7a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a78c:	490c      	ldr	r1, [pc, #48]	; (800a7c0 <vQueueAddToRegistry+0x50>)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a796:	4a0a      	ldr	r2, [pc, #40]	; (800a7c0 <vQueueAddToRegistry+0x50>)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	00db      	lsls	r3, r3, #3
 800a79c:	4413      	add	r3, r2
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a7a2:	e006      	b.n	800a7b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	60fb      	str	r3, [r7, #12]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b07      	cmp	r3, #7
 800a7ae:	d9e7      	bls.n	800a780 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7b0:	bf00      	nop
 800a7b2:	bf00      	nop
 800a7b4:	3714      	adds	r7, #20
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	20000ad8 	.word	0x20000ad8

0800a7c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a7d4:	f001 fbce 	bl	800bf74 <vPortEnterCritical>
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7de:	b25b      	sxtb	r3, r3
 800a7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e4:	d103      	bne.n	800a7ee <vQueueWaitForMessageRestricted+0x2a>
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7f4:	b25b      	sxtb	r3, r3
 800a7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fa:	d103      	bne.n	800a804 <vQueueWaitForMessageRestricted+0x40>
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a804:	f001 fbe6 	bl	800bfd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d106      	bne.n	800a81e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	3324      	adds	r3, #36	; 0x24
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fc61 	bl	800b0e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a81e:	6978      	ldr	r0, [r7, #20]
 800a820:	f7ff ff26 	bl	800a670 <prvUnlockQueue>
	}
 800a824:	bf00      	nop
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b08e      	sub	sp, #56	; 0x38
 800a830:	af04      	add	r7, sp, #16
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
 800a838:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10a      	bne.n	800a856 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a844:	f383 8811 	msr	BASEPRI, r3
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	623b      	str	r3, [r7, #32]
}
 800a852:	bf00      	nop
 800a854:	e7fe      	b.n	800a854 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d10a      	bne.n	800a872 <xTaskCreateStatic+0x46>
	__asm volatile
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	61fb      	str	r3, [r7, #28]
}
 800a86e:	bf00      	nop
 800a870:	e7fe      	b.n	800a870 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a872:	23bc      	movs	r3, #188	; 0xbc
 800a874:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	2bbc      	cmp	r3, #188	; 0xbc
 800a87a:	d00a      	beq.n	800a892 <xTaskCreateStatic+0x66>
	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	61bb      	str	r3, [r7, #24]
}
 800a88e:	bf00      	nop
 800a890:	e7fe      	b.n	800a890 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a892:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a896:	2b00      	cmp	r3, #0
 800a898:	d01e      	beq.n	800a8d8 <xTaskCreateStatic+0xac>
 800a89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d01b      	beq.n	800a8d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	9303      	str	r3, [sp, #12]
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b8:	9302      	str	r3, [sp, #8]
 800a8ba:	f107 0314 	add.w	r3, r7, #20
 800a8be:	9301      	str	r3, [sp, #4]
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	68b9      	ldr	r1, [r7, #8]
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f000 f850 	bl	800a970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8d2:	f000 f8f3 	bl	800aabc <prvAddNewTaskToReadyList>
 800a8d6:	e001      	b.n	800a8dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a8dc:	697b      	ldr	r3, [r7, #20]
	}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3728      	adds	r7, #40	; 0x28
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b08c      	sub	sp, #48	; 0x30
 800a8ea:	af04      	add	r7, sp, #16
 800a8ec:	60f8      	str	r0, [r7, #12]
 800a8ee:	60b9      	str	r1, [r7, #8]
 800a8f0:	603b      	str	r3, [r7, #0]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a8f6:	88fb      	ldrh	r3, [r7, #6]
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f001 fc5c 	bl	800c1b8 <pvPortMalloc>
 800a900:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00e      	beq.n	800a926 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a908:	20bc      	movs	r0, #188	; 0xbc
 800a90a:	f001 fc55 	bl	800c1b8 <pvPortMalloc>
 800a90e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d003      	beq.n	800a91e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	631a      	str	r2, [r3, #48]	; 0x30
 800a91c:	e005      	b.n	800a92a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a91e:	6978      	ldr	r0, [r7, #20]
 800a920:	f001 fd16 	bl	800c350 <vPortFree>
 800a924:	e001      	b.n	800a92a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a926:	2300      	movs	r3, #0
 800a928:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d017      	beq.n	800a960 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a938:	88fa      	ldrh	r2, [r7, #6]
 800a93a:	2300      	movs	r3, #0
 800a93c:	9303      	str	r3, [sp, #12]
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	9302      	str	r3, [sp, #8]
 800a942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	68b9      	ldr	r1, [r7, #8]
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f000 f80e 	bl	800a970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a954:	69f8      	ldr	r0, [r7, #28]
 800a956:	f000 f8b1 	bl	800aabc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a95a:	2301      	movs	r3, #1
 800a95c:	61bb      	str	r3, [r7, #24]
 800a95e:	e002      	b.n	800a966 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a960:	f04f 33ff 	mov.w	r3, #4294967295
 800a964:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a966:	69bb      	ldr	r3, [r7, #24]
	}
 800a968:	4618      	mov	r0, r3
 800a96a:	3720      	adds	r7, #32
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a980:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	461a      	mov	r2, r3
 800a988:	21a5      	movs	r1, #165	; 0xa5
 800a98a:	f002 fb01 	bl	800cf90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a998:	3b01      	subs	r3, #1
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4413      	add	r3, r2
 800a99e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	f023 0307 	bic.w	r3, r3, #7
 800a9a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	f003 0307 	and.w	r3, r3, #7
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00a      	beq.n	800a9c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	617b      	str	r3, [r7, #20]
}
 800a9c4:	bf00      	nop
 800a9c6:	e7fe      	b.n	800a9c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d01f      	beq.n	800aa0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	61fb      	str	r3, [r7, #28]
 800a9d2:	e012      	b.n	800a9fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	4413      	add	r3, r2
 800a9da:	7819      	ldrb	r1, [r3, #0]
 800a9dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	3334      	adds	r3, #52	; 0x34
 800a9e4:	460a      	mov	r2, r1
 800a9e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d006      	beq.n	800aa02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	61fb      	str	r3, [r7, #28]
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	2b0f      	cmp	r3, #15
 800a9fe:	d9e9      	bls.n	800a9d4 <prvInitialiseNewTask+0x64>
 800aa00:	e000      	b.n	800aa04 <prvInitialiseNewTask+0x94>
			{
				break;
 800aa02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa0c:	e003      	b.n	800aa16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa18:	2b37      	cmp	r3, #55	; 0x37
 800aa1a:	d901      	bls.n	800aa20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa1c:	2337      	movs	r3, #55	; 0x37
 800aa1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2e:	2200      	movs	r2, #0
 800aa30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	3304      	adds	r3, #4
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7ff f978 	bl	8009d2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3e:	3318      	adds	r3, #24
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7ff f973 	bl	8009d2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	3354      	adds	r3, #84	; 0x54
 800aa70:	2260      	movs	r2, #96	; 0x60
 800aa72:	2100      	movs	r1, #0
 800aa74:	4618      	mov	r0, r3
 800aa76:	f002 fa8b 	bl	800cf90 <memset>
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7c:	4a0c      	ldr	r2, [pc, #48]	; (800aab0 <prvInitialiseNewTask+0x140>)
 800aa7e:	659a      	str	r2, [r3, #88]	; 0x58
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	4a0c      	ldr	r2, [pc, #48]	; (800aab4 <prvInitialiseNewTask+0x144>)
 800aa84:	65da      	str	r2, [r3, #92]	; 0x5c
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	4a0b      	ldr	r2, [pc, #44]	; (800aab8 <prvInitialiseNewTask+0x148>)
 800aa8a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	68f9      	ldr	r1, [r7, #12]
 800aa90:	69b8      	ldr	r0, [r7, #24]
 800aa92:	f001 f941 	bl	800bd18 <pxPortInitialiseStack>
 800aa96:	4602      	mov	r2, r0
 800aa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d002      	beq.n	800aaa8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaa6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaa8:	bf00      	nop
 800aaaa:	3720      	adds	r7, #32
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	0800f3f0 	.word	0x0800f3f0
 800aab4:	0800f410 	.word	0x0800f410
 800aab8:	0800f3d0 	.word	0x0800f3d0

0800aabc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aac4:	f001 fa56 	bl	800bf74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aac8:	4b2d      	ldr	r3, [pc, #180]	; (800ab80 <prvAddNewTaskToReadyList+0xc4>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3301      	adds	r3, #1
 800aace:	4a2c      	ldr	r2, [pc, #176]	; (800ab80 <prvAddNewTaskToReadyList+0xc4>)
 800aad0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aad2:	4b2c      	ldr	r3, [pc, #176]	; (800ab84 <prvAddNewTaskToReadyList+0xc8>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d109      	bne.n	800aaee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aada:	4a2a      	ldr	r2, [pc, #168]	; (800ab84 <prvAddNewTaskToReadyList+0xc8>)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aae0:	4b27      	ldr	r3, [pc, #156]	; (800ab80 <prvAddNewTaskToReadyList+0xc4>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d110      	bne.n	800ab0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aae8:	f000 fc26 	bl	800b338 <prvInitialiseTaskLists>
 800aaec:	e00d      	b.n	800ab0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aaee:	4b26      	ldr	r3, [pc, #152]	; (800ab88 <prvAddNewTaskToReadyList+0xcc>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d109      	bne.n	800ab0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aaf6:	4b23      	ldr	r3, [pc, #140]	; (800ab84 <prvAddNewTaskToReadyList+0xc8>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d802      	bhi.n	800ab0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab04:	4a1f      	ldr	r2, [pc, #124]	; (800ab84 <prvAddNewTaskToReadyList+0xc8>)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab0a:	4b20      	ldr	r3, [pc, #128]	; (800ab8c <prvAddNewTaskToReadyList+0xd0>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	4a1e      	ldr	r2, [pc, #120]	; (800ab8c <prvAddNewTaskToReadyList+0xd0>)
 800ab12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab14:	4b1d      	ldr	r3, [pc, #116]	; (800ab8c <prvAddNewTaskToReadyList+0xd0>)
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab20:	4b1b      	ldr	r3, [pc, #108]	; (800ab90 <prvAddNewTaskToReadyList+0xd4>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d903      	bls.n	800ab30 <prvAddNewTaskToReadyList+0x74>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2c:	4a18      	ldr	r2, [pc, #96]	; (800ab90 <prvAddNewTaskToReadyList+0xd4>)
 800ab2e:	6013      	str	r3, [r2, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab34:	4613      	mov	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4a15      	ldr	r2, [pc, #84]	; (800ab94 <prvAddNewTaskToReadyList+0xd8>)
 800ab3e:	441a      	add	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	3304      	adds	r3, #4
 800ab44:	4619      	mov	r1, r3
 800ab46:	4610      	mov	r0, r2
 800ab48:	f7ff f8fd 	bl	8009d46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab4c:	f001 fa42 	bl	800bfd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab50:	4b0d      	ldr	r3, [pc, #52]	; (800ab88 <prvAddNewTaskToReadyList+0xcc>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00e      	beq.n	800ab76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab58:	4b0a      	ldr	r3, [pc, #40]	; (800ab84 <prvAddNewTaskToReadyList+0xc8>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d207      	bcs.n	800ab76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab66:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <prvAddNewTaskToReadyList+0xdc>)
 800ab68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab6c:	601a      	str	r2, [r3, #0]
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab76:	bf00      	nop
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	20000fec 	.word	0x20000fec
 800ab84:	20000b18 	.word	0x20000b18
 800ab88:	20000ff8 	.word	0x20000ff8
 800ab8c:	20001008 	.word	0x20001008
 800ab90:	20000ff4 	.word	0x20000ff4
 800ab94:	20000b1c 	.word	0x20000b1c
 800ab98:	e000ed04 	.word	0xe000ed04

0800ab9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aba4:	2300      	movs	r3, #0
 800aba6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d017      	beq.n	800abde <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800abae:	4b13      	ldr	r3, [pc, #76]	; (800abfc <vTaskDelay+0x60>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00a      	beq.n	800abcc <vTaskDelay+0x30>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	60bb      	str	r3, [r7, #8]
}
 800abc8:	bf00      	nop
 800abca:	e7fe      	b.n	800abca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800abcc:	f000 f88a 	bl	800ace4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800abd0:	2100      	movs	r1, #0
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fcfe 	bl	800b5d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800abd8:	f000 f892 	bl	800ad00 <xTaskResumeAll>
 800abdc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d107      	bne.n	800abf4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800abe4:	4b06      	ldr	r3, [pc, #24]	; (800ac00 <vTaskDelay+0x64>)
 800abe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800abf4:	bf00      	nop
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	20001014 	.word	0x20001014
 800ac00:	e000ed04 	.word	0xe000ed04

0800ac04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b08a      	sub	sp, #40	; 0x28
 800ac08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac12:	463a      	mov	r2, r7
 800ac14:	1d39      	adds	r1, r7, #4
 800ac16:	f107 0308 	add.w	r3, r7, #8
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff f832 	bl	8009c84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac20:	6839      	ldr	r1, [r7, #0]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	9202      	str	r2, [sp, #8]
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	9300      	str	r3, [sp, #0]
 800ac2e:	2300      	movs	r3, #0
 800ac30:	460a      	mov	r2, r1
 800ac32:	4924      	ldr	r1, [pc, #144]	; (800acc4 <vTaskStartScheduler+0xc0>)
 800ac34:	4824      	ldr	r0, [pc, #144]	; (800acc8 <vTaskStartScheduler+0xc4>)
 800ac36:	f7ff fdf9 	bl	800a82c <xTaskCreateStatic>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	4a23      	ldr	r2, [pc, #140]	; (800accc <vTaskStartScheduler+0xc8>)
 800ac3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac40:	4b22      	ldr	r3, [pc, #136]	; (800accc <vTaskStartScheduler+0xc8>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d002      	beq.n	800ac4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	617b      	str	r3, [r7, #20]
 800ac4c:	e001      	b.n	800ac52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d102      	bne.n	800ac5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac58:	f000 fd10 	bl	800b67c <xTimerCreateTimerTask>
 800ac5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d11b      	bne.n	800ac9c <vTaskStartScheduler+0x98>
	__asm volatile
 800ac64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac68:	f383 8811 	msr	BASEPRI, r3
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	613b      	str	r3, [r7, #16]
}
 800ac76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac78:	4b15      	ldr	r3, [pc, #84]	; (800acd0 <vTaskStartScheduler+0xcc>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3354      	adds	r3, #84	; 0x54
 800ac7e:	4a15      	ldr	r2, [pc, #84]	; (800acd4 <vTaskStartScheduler+0xd0>)
 800ac80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac82:	4b15      	ldr	r3, [pc, #84]	; (800acd8 <vTaskStartScheduler+0xd4>)
 800ac84:	f04f 32ff 	mov.w	r2, #4294967295
 800ac88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac8a:	4b14      	ldr	r3, [pc, #80]	; (800acdc <vTaskStartScheduler+0xd8>)
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac90:	4b13      	ldr	r3, [pc, #76]	; (800ace0 <vTaskStartScheduler+0xdc>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac96:	f001 f8cb 	bl	800be30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac9a:	e00e      	b.n	800acba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca2:	d10a      	bne.n	800acba <vTaskStartScheduler+0xb6>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	60fb      	str	r3, [r7, #12]
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <vTaskStartScheduler+0xb4>
}
 800acba:	bf00      	nop
 800acbc:	3718      	adds	r7, #24
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	0800d188 	.word	0x0800d188
 800acc8:	0800b309 	.word	0x0800b309
 800accc:	20001010 	.word	0x20001010
 800acd0:	20000b18 	.word	0x20000b18
 800acd4:	20000138 	.word	0x20000138
 800acd8:	2000100c 	.word	0x2000100c
 800acdc:	20000ff8 	.word	0x20000ff8
 800ace0:	20000ff0 	.word	0x20000ff0

0800ace4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ace4:	b480      	push	{r7}
 800ace6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ace8:	4b04      	ldr	r3, [pc, #16]	; (800acfc <vTaskSuspendAll+0x18>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	3301      	adds	r3, #1
 800acee:	4a03      	ldr	r2, [pc, #12]	; (800acfc <vTaskSuspendAll+0x18>)
 800acf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800acf2:	bf00      	nop
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr
 800acfc:	20001014 	.word	0x20001014

0800ad00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad0e:	4b42      	ldr	r3, [pc, #264]	; (800ae18 <xTaskResumeAll+0x118>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10a      	bne.n	800ad2c <xTaskResumeAll+0x2c>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	603b      	str	r3, [r7, #0]
}
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad2c:	f001 f922 	bl	800bf74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad30:	4b39      	ldr	r3, [pc, #228]	; (800ae18 <xTaskResumeAll+0x118>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	3b01      	subs	r3, #1
 800ad36:	4a38      	ldr	r2, [pc, #224]	; (800ae18 <xTaskResumeAll+0x118>)
 800ad38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad3a:	4b37      	ldr	r3, [pc, #220]	; (800ae18 <xTaskResumeAll+0x118>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d162      	bne.n	800ae08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad42:	4b36      	ldr	r3, [pc, #216]	; (800ae1c <xTaskResumeAll+0x11c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d05e      	beq.n	800ae08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad4a:	e02f      	b.n	800adac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad4c:	4b34      	ldr	r3, [pc, #208]	; (800ae20 <xTaskResumeAll+0x120>)
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3318      	adds	r3, #24
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff f851 	bl	8009e00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	3304      	adds	r3, #4
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7ff f84c 	bl	8009e00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6c:	4b2d      	ldr	r3, [pc, #180]	; (800ae24 <xTaskResumeAll+0x124>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d903      	bls.n	800ad7c <xTaskResumeAll+0x7c>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad78:	4a2a      	ldr	r2, [pc, #168]	; (800ae24 <xTaskResumeAll+0x124>)
 800ad7a:	6013      	str	r3, [r2, #0]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad80:	4613      	mov	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4413      	add	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4a27      	ldr	r2, [pc, #156]	; (800ae28 <xTaskResumeAll+0x128>)
 800ad8a:	441a      	add	r2, r3
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	4619      	mov	r1, r3
 800ad92:	4610      	mov	r0, r2
 800ad94:	f7fe ffd7 	bl	8009d46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad9c:	4b23      	ldr	r3, [pc, #140]	; (800ae2c <xTaskResumeAll+0x12c>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d302      	bcc.n	800adac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ada6:	4b22      	ldr	r3, [pc, #136]	; (800ae30 <xTaskResumeAll+0x130>)
 800ada8:	2201      	movs	r2, #1
 800adaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adac:	4b1c      	ldr	r3, [pc, #112]	; (800ae20 <xTaskResumeAll+0x120>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1cb      	bne.n	800ad4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800adba:	f000 fb5f 	bl	800b47c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800adbe:	4b1d      	ldr	r3, [pc, #116]	; (800ae34 <xTaskResumeAll+0x134>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d010      	beq.n	800adec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800adca:	f000 f847 	bl	800ae5c <xTaskIncrementTick>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800add4:	4b16      	ldr	r3, [pc, #88]	; (800ae30 <xTaskResumeAll+0x130>)
 800add6:	2201      	movs	r2, #1
 800add8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	3b01      	subs	r3, #1
 800adde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1f1      	bne.n	800adca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ade6:	4b13      	ldr	r3, [pc, #76]	; (800ae34 <xTaskResumeAll+0x134>)
 800ade8:	2200      	movs	r2, #0
 800adea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800adec:	4b10      	ldr	r3, [pc, #64]	; (800ae30 <xTaskResumeAll+0x130>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d009      	beq.n	800ae08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800adf4:	2301      	movs	r3, #1
 800adf6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800adf8:	4b0f      	ldr	r3, [pc, #60]	; (800ae38 <xTaskResumeAll+0x138>)
 800adfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae08:	f001 f8e4 	bl	800bfd4 <vPortExitCritical>

	return xAlreadyYielded;
 800ae0c:	68bb      	ldr	r3, [r7, #8]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20001014 	.word	0x20001014
 800ae1c:	20000fec 	.word	0x20000fec
 800ae20:	20000fac 	.word	0x20000fac
 800ae24:	20000ff4 	.word	0x20000ff4
 800ae28:	20000b1c 	.word	0x20000b1c
 800ae2c:	20000b18 	.word	0x20000b18
 800ae30:	20001000 	.word	0x20001000
 800ae34:	20000ffc 	.word	0x20000ffc
 800ae38:	e000ed04 	.word	0xe000ed04

0800ae3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae42:	4b05      	ldr	r3, [pc, #20]	; (800ae58 <xTaskGetTickCount+0x1c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae48:	687b      	ldr	r3, [r7, #4]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	370c      	adds	r7, #12
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	20000ff0 	.word	0x20000ff0

0800ae5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae62:	2300      	movs	r3, #0
 800ae64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae66:	4b4f      	ldr	r3, [pc, #316]	; (800afa4 <xTaskIncrementTick+0x148>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f040 808f 	bne.w	800af8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae70:	4b4d      	ldr	r3, [pc, #308]	; (800afa8 <xTaskIncrementTick+0x14c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3301      	adds	r3, #1
 800ae76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae78:	4a4b      	ldr	r2, [pc, #300]	; (800afa8 <xTaskIncrementTick+0x14c>)
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d120      	bne.n	800aec6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae84:	4b49      	ldr	r3, [pc, #292]	; (800afac <xTaskIncrementTick+0x150>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00a      	beq.n	800aea4 <xTaskIncrementTick+0x48>
	__asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	603b      	str	r3, [r7, #0]
}
 800aea0:	bf00      	nop
 800aea2:	e7fe      	b.n	800aea2 <xTaskIncrementTick+0x46>
 800aea4:	4b41      	ldr	r3, [pc, #260]	; (800afac <xTaskIncrementTick+0x150>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	4b41      	ldr	r3, [pc, #260]	; (800afb0 <xTaskIncrementTick+0x154>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a3f      	ldr	r2, [pc, #252]	; (800afac <xTaskIncrementTick+0x150>)
 800aeb0:	6013      	str	r3, [r2, #0]
 800aeb2:	4a3f      	ldr	r2, [pc, #252]	; (800afb0 <xTaskIncrementTick+0x154>)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6013      	str	r3, [r2, #0]
 800aeb8:	4b3e      	ldr	r3, [pc, #248]	; (800afb4 <xTaskIncrementTick+0x158>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3301      	adds	r3, #1
 800aebe:	4a3d      	ldr	r2, [pc, #244]	; (800afb4 <xTaskIncrementTick+0x158>)
 800aec0:	6013      	str	r3, [r2, #0]
 800aec2:	f000 fadb 	bl	800b47c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aec6:	4b3c      	ldr	r3, [pc, #240]	; (800afb8 <xTaskIncrementTick+0x15c>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d349      	bcc.n	800af64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aed0:	4b36      	ldr	r3, [pc, #216]	; (800afac <xTaskIncrementTick+0x150>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d104      	bne.n	800aee4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeda:	4b37      	ldr	r3, [pc, #220]	; (800afb8 <xTaskIncrementTick+0x15c>)
 800aedc:	f04f 32ff 	mov.w	r2, #4294967295
 800aee0:	601a      	str	r2, [r3, #0]
					break;
 800aee2:	e03f      	b.n	800af64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aee4:	4b31      	ldr	r3, [pc, #196]	; (800afac <xTaskIncrementTick+0x150>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d203      	bcs.n	800af04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aefc:	4a2e      	ldr	r2, [pc, #184]	; (800afb8 <xTaskIncrementTick+0x15c>)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af02:	e02f      	b.n	800af64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	3304      	adds	r3, #4
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fe ff79 	bl	8009e00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af12:	2b00      	cmp	r3, #0
 800af14:	d004      	beq.n	800af20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	3318      	adds	r3, #24
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe ff70 	bl	8009e00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af24:	4b25      	ldr	r3, [pc, #148]	; (800afbc <xTaskIncrementTick+0x160>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d903      	bls.n	800af34 <xTaskIncrementTick+0xd8>
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af30:	4a22      	ldr	r2, [pc, #136]	; (800afbc <xTaskIncrementTick+0x160>)
 800af32:	6013      	str	r3, [r2, #0]
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af38:	4613      	mov	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4a1f      	ldr	r2, [pc, #124]	; (800afc0 <xTaskIncrementTick+0x164>)
 800af42:	441a      	add	r2, r3
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	3304      	adds	r3, #4
 800af48:	4619      	mov	r1, r3
 800af4a:	4610      	mov	r0, r2
 800af4c:	f7fe fefb 	bl	8009d46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af54:	4b1b      	ldr	r3, [pc, #108]	; (800afc4 <xTaskIncrementTick+0x168>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d3b8      	bcc.n	800aed0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800af5e:	2301      	movs	r3, #1
 800af60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af62:	e7b5      	b.n	800aed0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af64:	4b17      	ldr	r3, [pc, #92]	; (800afc4 <xTaskIncrementTick+0x168>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6a:	4915      	ldr	r1, [pc, #84]	; (800afc0 <xTaskIncrementTick+0x164>)
 800af6c:	4613      	mov	r3, r2
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	4413      	add	r3, r2
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	440b      	add	r3, r1
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d901      	bls.n	800af80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800af7c:	2301      	movs	r3, #1
 800af7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af80:	4b11      	ldr	r3, [pc, #68]	; (800afc8 <xTaskIncrementTick+0x16c>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d007      	beq.n	800af98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800af88:	2301      	movs	r3, #1
 800af8a:	617b      	str	r3, [r7, #20]
 800af8c:	e004      	b.n	800af98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af8e:	4b0f      	ldr	r3, [pc, #60]	; (800afcc <xTaskIncrementTick+0x170>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3301      	adds	r3, #1
 800af94:	4a0d      	ldr	r2, [pc, #52]	; (800afcc <xTaskIncrementTick+0x170>)
 800af96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af98:	697b      	ldr	r3, [r7, #20]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3718      	adds	r7, #24
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	20001014 	.word	0x20001014
 800afa8:	20000ff0 	.word	0x20000ff0
 800afac:	20000fa4 	.word	0x20000fa4
 800afb0:	20000fa8 	.word	0x20000fa8
 800afb4:	20001004 	.word	0x20001004
 800afb8:	2000100c 	.word	0x2000100c
 800afbc:	20000ff4 	.word	0x20000ff4
 800afc0:	20000b1c 	.word	0x20000b1c
 800afc4:	20000b18 	.word	0x20000b18
 800afc8:	20001000 	.word	0x20001000
 800afcc:	20000ffc 	.word	0x20000ffc

0800afd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800afd6:	4b2a      	ldr	r3, [pc, #168]	; (800b080 <vTaskSwitchContext+0xb0>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d003      	beq.n	800afe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800afde:	4b29      	ldr	r3, [pc, #164]	; (800b084 <vTaskSwitchContext+0xb4>)
 800afe0:	2201      	movs	r2, #1
 800afe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800afe4:	e046      	b.n	800b074 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800afe6:	4b27      	ldr	r3, [pc, #156]	; (800b084 <vTaskSwitchContext+0xb4>)
 800afe8:	2200      	movs	r2, #0
 800afea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afec:	4b26      	ldr	r3, [pc, #152]	; (800b088 <vTaskSwitchContext+0xb8>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	60fb      	str	r3, [r7, #12]
 800aff2:	e010      	b.n	800b016 <vTaskSwitchContext+0x46>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10a      	bne.n	800b010 <vTaskSwitchContext+0x40>
	__asm volatile
 800affa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	607b      	str	r3, [r7, #4]
}
 800b00c:	bf00      	nop
 800b00e:	e7fe      	b.n	800b00e <vTaskSwitchContext+0x3e>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	3b01      	subs	r3, #1
 800b014:	60fb      	str	r3, [r7, #12]
 800b016:	491d      	ldr	r1, [pc, #116]	; (800b08c <vTaskSwitchContext+0xbc>)
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	4613      	mov	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	440b      	add	r3, r1
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d0e4      	beq.n	800aff4 <vTaskSwitchContext+0x24>
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	4613      	mov	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4413      	add	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4a15      	ldr	r2, [pc, #84]	; (800b08c <vTaskSwitchContext+0xbc>)
 800b036:	4413      	add	r3, r2
 800b038:	60bb      	str	r3, [r7, #8]
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	685a      	ldr	r2, [r3, #4]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	605a      	str	r2, [r3, #4]
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	685a      	ldr	r2, [r3, #4]
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	3308      	adds	r3, #8
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d104      	bne.n	800b05a <vTaskSwitchContext+0x8a>
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	685a      	ldr	r2, [r3, #4]
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	605a      	str	r2, [r3, #4]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	4a0b      	ldr	r2, [pc, #44]	; (800b090 <vTaskSwitchContext+0xc0>)
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	4a08      	ldr	r2, [pc, #32]	; (800b088 <vTaskSwitchContext+0xb8>)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b06a:	4b09      	ldr	r3, [pc, #36]	; (800b090 <vTaskSwitchContext+0xc0>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3354      	adds	r3, #84	; 0x54
 800b070:	4a08      	ldr	r2, [pc, #32]	; (800b094 <vTaskSwitchContext+0xc4>)
 800b072:	6013      	str	r3, [r2, #0]
}
 800b074:	bf00      	nop
 800b076:	3714      	adds	r7, #20
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr
 800b080:	20001014 	.word	0x20001014
 800b084:	20001000 	.word	0x20001000
 800b088:	20000ff4 	.word	0x20000ff4
 800b08c:	20000b1c 	.word	0x20000b1c
 800b090:	20000b18 	.word	0x20000b18
 800b094:	20000138 	.word	0x20000138

0800b098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10a      	bne.n	800b0be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ac:	f383 8811 	msr	BASEPRI, r3
 800b0b0:	f3bf 8f6f 	isb	sy
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	60fb      	str	r3, [r7, #12]
}
 800b0ba:	bf00      	nop
 800b0bc:	e7fe      	b.n	800b0bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0be:	4b07      	ldr	r3, [pc, #28]	; (800b0dc <vTaskPlaceOnEventList+0x44>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3318      	adds	r3, #24
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7fe fe61 	bl	8009d8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0cc:	2101      	movs	r1, #1
 800b0ce:	6838      	ldr	r0, [r7, #0]
 800b0d0:	f000 fa80 	bl	800b5d4 <prvAddCurrentTaskToDelayedList>
}
 800b0d4:	bf00      	nop
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	20000b18 	.word	0x20000b18

0800b0e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10a      	bne.n	800b108 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	617b      	str	r3, [r7, #20]
}
 800b104:	bf00      	nop
 800b106:	e7fe      	b.n	800b106 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b108:	4b0a      	ldr	r3, [pc, #40]	; (800b134 <vTaskPlaceOnEventListRestricted+0x54>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	3318      	adds	r3, #24
 800b10e:	4619      	mov	r1, r3
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f7fe fe18 	bl	8009d46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d002      	beq.n	800b122 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b11c:	f04f 33ff 	mov.w	r3, #4294967295
 800b120:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b122:	6879      	ldr	r1, [r7, #4]
 800b124:	68b8      	ldr	r0, [r7, #8]
 800b126:	f000 fa55 	bl	800b5d4 <prvAddCurrentTaskToDelayedList>
	}
 800b12a:	bf00      	nop
 800b12c:	3718      	adds	r7, #24
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	20000b18 	.word	0x20000b18

0800b138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10a      	bne.n	800b164 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	60fb      	str	r3, [r7, #12]
}
 800b160:	bf00      	nop
 800b162:	e7fe      	b.n	800b162 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	3318      	adds	r3, #24
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fe fe49 	bl	8009e00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b16e:	4b1e      	ldr	r3, [pc, #120]	; (800b1e8 <xTaskRemoveFromEventList+0xb0>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d11d      	bne.n	800b1b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	3304      	adds	r3, #4
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe fe40 	bl	8009e00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b184:	4b19      	ldr	r3, [pc, #100]	; (800b1ec <xTaskRemoveFromEventList+0xb4>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d903      	bls.n	800b194 <xTaskRemoveFromEventList+0x5c>
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b190:	4a16      	ldr	r2, [pc, #88]	; (800b1ec <xTaskRemoveFromEventList+0xb4>)
 800b192:	6013      	str	r3, [r2, #0]
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b198:	4613      	mov	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4a13      	ldr	r2, [pc, #76]	; (800b1f0 <xTaskRemoveFromEventList+0xb8>)
 800b1a2:	441a      	add	r2, r3
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	4610      	mov	r0, r2
 800b1ac:	f7fe fdcb 	bl	8009d46 <vListInsertEnd>
 800b1b0:	e005      	b.n	800b1be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	3318      	adds	r3, #24
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	480e      	ldr	r0, [pc, #56]	; (800b1f4 <xTaskRemoveFromEventList+0xbc>)
 800b1ba:	f7fe fdc4 	bl	8009d46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c2:	4b0d      	ldr	r3, [pc, #52]	; (800b1f8 <xTaskRemoveFromEventList+0xc0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d905      	bls.n	800b1d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b1d0:	4b0a      	ldr	r3, [pc, #40]	; (800b1fc <xTaskRemoveFromEventList+0xc4>)
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	e001      	b.n	800b1dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b1dc:	697b      	ldr	r3, [r7, #20]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3718      	adds	r7, #24
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	20001014 	.word	0x20001014
 800b1ec:	20000ff4 	.word	0x20000ff4
 800b1f0:	20000b1c 	.word	0x20000b1c
 800b1f4:	20000fac 	.word	0x20000fac
 800b1f8:	20000b18 	.word	0x20000b18
 800b1fc:	20001000 	.word	0x20001000

0800b200 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b208:	4b06      	ldr	r3, [pc, #24]	; (800b224 <vTaskInternalSetTimeOutState+0x24>)
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b210:	4b05      	ldr	r3, [pc, #20]	; (800b228 <vTaskInternalSetTimeOutState+0x28>)
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	605a      	str	r2, [r3, #4]
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr
 800b224:	20001004 	.word	0x20001004
 800b228:	20000ff0 	.word	0x20000ff0

0800b22c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b088      	sub	sp, #32
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d10a      	bne.n	800b252 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	613b      	str	r3, [r7, #16]
}
 800b24e:	bf00      	nop
 800b250:	e7fe      	b.n	800b250 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10a      	bne.n	800b26e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	60fb      	str	r3, [r7, #12]
}
 800b26a:	bf00      	nop
 800b26c:	e7fe      	b.n	800b26c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b26e:	f000 fe81 	bl	800bf74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b272:	4b1d      	ldr	r3, [pc, #116]	; (800b2e8 <xTaskCheckForTimeOut+0xbc>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	69ba      	ldr	r2, [r7, #24]
 800b27e:	1ad3      	subs	r3, r2, r3
 800b280:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28a:	d102      	bne.n	800b292 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b28c:	2300      	movs	r3, #0
 800b28e:	61fb      	str	r3, [r7, #28]
 800b290:	e023      	b.n	800b2da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	4b15      	ldr	r3, [pc, #84]	; (800b2ec <xTaskCheckForTimeOut+0xc0>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d007      	beq.n	800b2ae <xTaskCheckForTimeOut+0x82>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	69ba      	ldr	r2, [r7, #24]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d302      	bcc.n	800b2ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	61fb      	str	r3, [r7, #28]
 800b2ac:	e015      	b.n	800b2da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	697a      	ldr	r2, [r7, #20]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d20b      	bcs.n	800b2d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	1ad2      	subs	r2, r2, r3
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff ff9b 	bl	800b200 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	61fb      	str	r3, [r7, #28]
 800b2ce:	e004      	b.n	800b2da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b2da:	f000 fe7b 	bl	800bfd4 <vPortExitCritical>

	return xReturn;
 800b2de:	69fb      	ldr	r3, [r7, #28]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3720      	adds	r7, #32
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	20000ff0 	.word	0x20000ff0
 800b2ec:	20001004 	.word	0x20001004

0800b2f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b2f4:	4b03      	ldr	r3, [pc, #12]	; (800b304 <vTaskMissedYield+0x14>)
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]
}
 800b2fa:	bf00      	nop
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr
 800b304:	20001000 	.word	0x20001000

0800b308 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b310:	f000 f852 	bl	800b3b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b314:	4b06      	ldr	r3, [pc, #24]	; (800b330 <prvIdleTask+0x28>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d9f9      	bls.n	800b310 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b31c:	4b05      	ldr	r3, [pc, #20]	; (800b334 <prvIdleTask+0x2c>)
 800b31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b32c:	e7f0      	b.n	800b310 <prvIdleTask+0x8>
 800b32e:	bf00      	nop
 800b330:	20000b1c 	.word	0x20000b1c
 800b334:	e000ed04 	.word	0xe000ed04

0800b338 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b33e:	2300      	movs	r3, #0
 800b340:	607b      	str	r3, [r7, #4]
 800b342:	e00c      	b.n	800b35e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	4613      	mov	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4413      	add	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4a12      	ldr	r2, [pc, #72]	; (800b398 <prvInitialiseTaskLists+0x60>)
 800b350:	4413      	add	r3, r2
 800b352:	4618      	mov	r0, r3
 800b354:	f7fe fcca 	bl	8009cec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	3301      	adds	r3, #1
 800b35c:	607b      	str	r3, [r7, #4]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b37      	cmp	r3, #55	; 0x37
 800b362:	d9ef      	bls.n	800b344 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b364:	480d      	ldr	r0, [pc, #52]	; (800b39c <prvInitialiseTaskLists+0x64>)
 800b366:	f7fe fcc1 	bl	8009cec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b36a:	480d      	ldr	r0, [pc, #52]	; (800b3a0 <prvInitialiseTaskLists+0x68>)
 800b36c:	f7fe fcbe 	bl	8009cec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b370:	480c      	ldr	r0, [pc, #48]	; (800b3a4 <prvInitialiseTaskLists+0x6c>)
 800b372:	f7fe fcbb 	bl	8009cec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b376:	480c      	ldr	r0, [pc, #48]	; (800b3a8 <prvInitialiseTaskLists+0x70>)
 800b378:	f7fe fcb8 	bl	8009cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b37c:	480b      	ldr	r0, [pc, #44]	; (800b3ac <prvInitialiseTaskLists+0x74>)
 800b37e:	f7fe fcb5 	bl	8009cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b382:	4b0b      	ldr	r3, [pc, #44]	; (800b3b0 <prvInitialiseTaskLists+0x78>)
 800b384:	4a05      	ldr	r2, [pc, #20]	; (800b39c <prvInitialiseTaskLists+0x64>)
 800b386:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b388:	4b0a      	ldr	r3, [pc, #40]	; (800b3b4 <prvInitialiseTaskLists+0x7c>)
 800b38a:	4a05      	ldr	r2, [pc, #20]	; (800b3a0 <prvInitialiseTaskLists+0x68>)
 800b38c:	601a      	str	r2, [r3, #0]
}
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20000b1c 	.word	0x20000b1c
 800b39c:	20000f7c 	.word	0x20000f7c
 800b3a0:	20000f90 	.word	0x20000f90
 800b3a4:	20000fac 	.word	0x20000fac
 800b3a8:	20000fc0 	.word	0x20000fc0
 800b3ac:	20000fd8 	.word	0x20000fd8
 800b3b0:	20000fa4 	.word	0x20000fa4
 800b3b4:	20000fa8 	.word	0x20000fa8

0800b3b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3be:	e019      	b.n	800b3f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b3c0:	f000 fdd8 	bl	800bf74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3c4:	4b10      	ldr	r3, [pc, #64]	; (800b408 <prvCheckTasksWaitingTermination+0x50>)
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	3304      	adds	r3, #4
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7fe fd15 	bl	8009e00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b3d6:	4b0d      	ldr	r3, [pc, #52]	; (800b40c <prvCheckTasksWaitingTermination+0x54>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	4a0b      	ldr	r2, [pc, #44]	; (800b40c <prvCheckTasksWaitingTermination+0x54>)
 800b3de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b3e0:	4b0b      	ldr	r3, [pc, #44]	; (800b410 <prvCheckTasksWaitingTermination+0x58>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	4a0a      	ldr	r2, [pc, #40]	; (800b410 <prvCheckTasksWaitingTermination+0x58>)
 800b3e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b3ea:	f000 fdf3 	bl	800bfd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f810 	bl	800b414 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3f4:	4b06      	ldr	r3, [pc, #24]	; (800b410 <prvCheckTasksWaitingTermination+0x58>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1e1      	bne.n	800b3c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b3fc:	bf00      	nop
 800b3fe:	bf00      	nop
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	20000fc0 	.word	0x20000fc0
 800b40c:	20000fec 	.word	0x20000fec
 800b410:	20000fd4 	.word	0x20000fd4

0800b414 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3354      	adds	r3, #84	; 0x54
 800b420:	4618      	mov	r0, r3
 800b422:	f001 fe17 	bl	800d054 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d108      	bne.n	800b442 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b434:	4618      	mov	r0, r3
 800b436:	f000 ff8b 	bl	800c350 <vPortFree>
				vPortFree( pxTCB );
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 ff88 	bl	800c350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b440:	e018      	b.n	800b474 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d103      	bne.n	800b454 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 ff7f 	bl	800c350 <vPortFree>
	}
 800b452:	e00f      	b.n	800b474 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d00a      	beq.n	800b474 <prvDeleteTCB+0x60>
	__asm volatile
 800b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	60fb      	str	r3, [r7, #12]
}
 800b470:	bf00      	nop
 800b472:	e7fe      	b.n	800b472 <prvDeleteTCB+0x5e>
	}
 800b474:	bf00      	nop
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b482:	4b0c      	ldr	r3, [pc, #48]	; (800b4b4 <prvResetNextTaskUnblockTime+0x38>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d104      	bne.n	800b496 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b48c:	4b0a      	ldr	r3, [pc, #40]	; (800b4b8 <prvResetNextTaskUnblockTime+0x3c>)
 800b48e:	f04f 32ff 	mov.w	r2, #4294967295
 800b492:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b494:	e008      	b.n	800b4a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b496:	4b07      	ldr	r3, [pc, #28]	; (800b4b4 <prvResetNextTaskUnblockTime+0x38>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	4a04      	ldr	r2, [pc, #16]	; (800b4b8 <prvResetNextTaskUnblockTime+0x3c>)
 800b4a6:	6013      	str	r3, [r2, #0]
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr
 800b4b4:	20000fa4 	.word	0x20000fa4
 800b4b8:	2000100c 	.word	0x2000100c

0800b4bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b4c2:	4b0b      	ldr	r3, [pc, #44]	; (800b4f0 <xTaskGetSchedulerState+0x34>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d102      	bne.n	800b4d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	607b      	str	r3, [r7, #4]
 800b4ce:	e008      	b.n	800b4e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4d0:	4b08      	ldr	r3, [pc, #32]	; (800b4f4 <xTaskGetSchedulerState+0x38>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d102      	bne.n	800b4de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b4d8:	2302      	movs	r3, #2
 800b4da:	607b      	str	r3, [r7, #4]
 800b4dc:	e001      	b.n	800b4e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b4e2:	687b      	ldr	r3, [r7, #4]
	}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	20000ff8 	.word	0x20000ff8
 800b4f4:	20001014 	.word	0x20001014

0800b4f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b504:	2300      	movs	r3, #0
 800b506:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d056      	beq.n	800b5bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b50e:	4b2e      	ldr	r3, [pc, #184]	; (800b5c8 <xTaskPriorityDisinherit+0xd0>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	693a      	ldr	r2, [r7, #16]
 800b514:	429a      	cmp	r2, r3
 800b516:	d00a      	beq.n	800b52e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51c:	f383 8811 	msr	BASEPRI, r3
 800b520:	f3bf 8f6f 	isb	sy
 800b524:	f3bf 8f4f 	dsb	sy
 800b528:	60fb      	str	r3, [r7, #12]
}
 800b52a:	bf00      	nop
 800b52c:	e7fe      	b.n	800b52c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10a      	bne.n	800b54c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53a:	f383 8811 	msr	BASEPRI, r3
 800b53e:	f3bf 8f6f 	isb	sy
 800b542:	f3bf 8f4f 	dsb	sy
 800b546:	60bb      	str	r3, [r7, #8]
}
 800b548:	bf00      	nop
 800b54a:	e7fe      	b.n	800b54a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b550:	1e5a      	subs	r2, r3, #1
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b55e:	429a      	cmp	r2, r3
 800b560:	d02c      	beq.n	800b5bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b566:	2b00      	cmp	r3, #0
 800b568:	d128      	bne.n	800b5bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	3304      	adds	r3, #4
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fe fc46 	bl	8009e00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b580:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b58c:	4b0f      	ldr	r3, [pc, #60]	; (800b5cc <xTaskPriorityDisinherit+0xd4>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	429a      	cmp	r2, r3
 800b592:	d903      	bls.n	800b59c <xTaskPriorityDisinherit+0xa4>
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b598:	4a0c      	ldr	r2, [pc, #48]	; (800b5cc <xTaskPriorityDisinherit+0xd4>)
 800b59a:	6013      	str	r3, [r2, #0]
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	4413      	add	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4a09      	ldr	r2, [pc, #36]	; (800b5d0 <xTaskPriorityDisinherit+0xd8>)
 800b5aa:	441a      	add	r2, r3
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	3304      	adds	r3, #4
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	4610      	mov	r0, r2
 800b5b4:	f7fe fbc7 	bl	8009d46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b5bc:	697b      	ldr	r3, [r7, #20]
	}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3718      	adds	r7, #24
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20000b18 	.word	0x20000b18
 800b5cc:	20000ff4 	.word	0x20000ff4
 800b5d0:	20000b1c 	.word	0x20000b1c

0800b5d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b5de:	4b21      	ldr	r3, [pc, #132]	; (800b664 <prvAddCurrentTaskToDelayedList+0x90>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5e4:	4b20      	ldr	r3, [pc, #128]	; (800b668 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fc08 	bl	8009e00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f6:	d10a      	bne.n	800b60e <prvAddCurrentTaskToDelayedList+0x3a>
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d007      	beq.n	800b60e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5fe:	4b1a      	ldr	r3, [pc, #104]	; (800b668 <prvAddCurrentTaskToDelayedList+0x94>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3304      	adds	r3, #4
 800b604:	4619      	mov	r1, r3
 800b606:	4819      	ldr	r0, [pc, #100]	; (800b66c <prvAddCurrentTaskToDelayedList+0x98>)
 800b608:	f7fe fb9d 	bl	8009d46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b60c:	e026      	b.n	800b65c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4413      	add	r3, r2
 800b614:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b616:	4b14      	ldr	r3, [pc, #80]	; (800b668 <prvAddCurrentTaskToDelayedList+0x94>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b61e:	68ba      	ldr	r2, [r7, #8]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	429a      	cmp	r2, r3
 800b624:	d209      	bcs.n	800b63a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b626:	4b12      	ldr	r3, [pc, #72]	; (800b670 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	4b0f      	ldr	r3, [pc, #60]	; (800b668 <prvAddCurrentTaskToDelayedList+0x94>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	3304      	adds	r3, #4
 800b630:	4619      	mov	r1, r3
 800b632:	4610      	mov	r0, r2
 800b634:	f7fe fbab 	bl	8009d8e <vListInsert>
}
 800b638:	e010      	b.n	800b65c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b63a:	4b0e      	ldr	r3, [pc, #56]	; (800b674 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	4b0a      	ldr	r3, [pc, #40]	; (800b668 <prvAddCurrentTaskToDelayedList+0x94>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	3304      	adds	r3, #4
 800b644:	4619      	mov	r1, r3
 800b646:	4610      	mov	r0, r2
 800b648:	f7fe fba1 	bl	8009d8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b64c:	4b0a      	ldr	r3, [pc, #40]	; (800b678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	429a      	cmp	r2, r3
 800b654:	d202      	bcs.n	800b65c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b656:	4a08      	ldr	r2, [pc, #32]	; (800b678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	6013      	str	r3, [r2, #0]
}
 800b65c:	bf00      	nop
 800b65e:	3710      	adds	r7, #16
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	20000ff0 	.word	0x20000ff0
 800b668:	20000b18 	.word	0x20000b18
 800b66c:	20000fd8 	.word	0x20000fd8
 800b670:	20000fa8 	.word	0x20000fa8
 800b674:	20000fa4 	.word	0x20000fa4
 800b678:	2000100c 	.word	0x2000100c

0800b67c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b08a      	sub	sp, #40	; 0x28
 800b680:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b682:	2300      	movs	r3, #0
 800b684:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b686:	f000 fb07 	bl	800bc98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b68a:	4b1c      	ldr	r3, [pc, #112]	; (800b6fc <xTimerCreateTimerTask+0x80>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d021      	beq.n	800b6d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b692:	2300      	movs	r3, #0
 800b694:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b696:	2300      	movs	r3, #0
 800b698:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b69a:	1d3a      	adds	r2, r7, #4
 800b69c:	f107 0108 	add.w	r1, r7, #8
 800b6a0:	f107 030c 	add.w	r3, r7, #12
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fe fb07 	bl	8009cb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b6aa:	6879      	ldr	r1, [r7, #4]
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	9202      	str	r2, [sp, #8]
 800b6b2:	9301      	str	r3, [sp, #4]
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	460a      	mov	r2, r1
 800b6bc:	4910      	ldr	r1, [pc, #64]	; (800b700 <xTimerCreateTimerTask+0x84>)
 800b6be:	4811      	ldr	r0, [pc, #68]	; (800b704 <xTimerCreateTimerTask+0x88>)
 800b6c0:	f7ff f8b4 	bl	800a82c <xTaskCreateStatic>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	4a10      	ldr	r2, [pc, #64]	; (800b708 <xTimerCreateTimerTask+0x8c>)
 800b6c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b6ca:	4b0f      	ldr	r3, [pc, #60]	; (800b708 <xTimerCreateTimerTask+0x8c>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10a      	bne.n	800b6f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e0:	f383 8811 	msr	BASEPRI, r3
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	613b      	str	r3, [r7, #16]
}
 800b6ee:	bf00      	nop
 800b6f0:	e7fe      	b.n	800b6f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b6f2:	697b      	ldr	r3, [r7, #20]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3718      	adds	r7, #24
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	20001048 	.word	0x20001048
 800b700:	0800d190 	.word	0x0800d190
 800b704:	0800b841 	.word	0x0800b841
 800b708:	2000104c 	.word	0x2000104c

0800b70c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08a      	sub	sp, #40	; 0x28
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
 800b718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b71a:	2300      	movs	r3, #0
 800b71c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10a      	bne.n	800b73a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	623b      	str	r3, [r7, #32]
}
 800b736:	bf00      	nop
 800b738:	e7fe      	b.n	800b738 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b73a:	4b1a      	ldr	r3, [pc, #104]	; (800b7a4 <xTimerGenericCommand+0x98>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d02a      	beq.n	800b798 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2b05      	cmp	r3, #5
 800b752:	dc18      	bgt.n	800b786 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b754:	f7ff feb2 	bl	800b4bc <xTaskGetSchedulerState>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	d109      	bne.n	800b772 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b75e:	4b11      	ldr	r3, [pc, #68]	; (800b7a4 <xTimerGenericCommand+0x98>)
 800b760:	6818      	ldr	r0, [r3, #0]
 800b762:	f107 0110 	add.w	r1, r7, #16
 800b766:	2300      	movs	r3, #0
 800b768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b76a:	f7fe fc77 	bl	800a05c <xQueueGenericSend>
 800b76e:	6278      	str	r0, [r7, #36]	; 0x24
 800b770:	e012      	b.n	800b798 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b772:	4b0c      	ldr	r3, [pc, #48]	; (800b7a4 <xTimerGenericCommand+0x98>)
 800b774:	6818      	ldr	r0, [r3, #0]
 800b776:	f107 0110 	add.w	r1, r7, #16
 800b77a:	2300      	movs	r3, #0
 800b77c:	2200      	movs	r2, #0
 800b77e:	f7fe fc6d 	bl	800a05c <xQueueGenericSend>
 800b782:	6278      	str	r0, [r7, #36]	; 0x24
 800b784:	e008      	b.n	800b798 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b786:	4b07      	ldr	r3, [pc, #28]	; (800b7a4 <xTimerGenericCommand+0x98>)
 800b788:	6818      	ldr	r0, [r3, #0]
 800b78a:	f107 0110 	add.w	r1, r7, #16
 800b78e:	2300      	movs	r3, #0
 800b790:	683a      	ldr	r2, [r7, #0]
 800b792:	f7fe fd61 	bl	800a258 <xQueueGenericSendFromISR>
 800b796:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3728      	adds	r7, #40	; 0x28
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20001048 	.word	0x20001048

0800b7a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7b2:	4b22      	ldr	r3, [pc, #136]	; (800b83c <prvProcessExpiredTimer+0x94>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fe fb1d 	bl	8009e00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7cc:	f003 0304 	and.w	r3, r3, #4
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d022      	beq.n	800b81a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	699a      	ldr	r2, [r3, #24]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	18d1      	adds	r1, r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	6978      	ldr	r0, [r7, #20]
 800b7e2:	f000 f8d1 	bl	800b988 <prvInsertTimerInActiveList>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d01f      	beq.n	800b82c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	6978      	ldr	r0, [r7, #20]
 800b7f8:	f7ff ff88 	bl	800b70c <xTimerGenericCommand>
 800b7fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d113      	bne.n	800b82c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	60fb      	str	r3, [r7, #12]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b820:	f023 0301 	bic.w	r3, r3, #1
 800b824:	b2da      	uxtb	r2, r3
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	6a1b      	ldr	r3, [r3, #32]
 800b830:	6978      	ldr	r0, [r7, #20]
 800b832:	4798      	blx	r3
}
 800b834:	bf00      	nop
 800b836:	3718      	adds	r7, #24
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	20001040 	.word	0x20001040

0800b840 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b848:	f107 0308 	add.w	r3, r7, #8
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 f857 	bl	800b900 <prvGetNextExpireTime>
 800b852:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	4619      	mov	r1, r3
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f000 f803 	bl	800b864 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b85e:	f000 f8d5 	bl	800ba0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b862:	e7f1      	b.n	800b848 <prvTimerTask+0x8>

0800b864 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b86e:	f7ff fa39 	bl	800ace4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b872:	f107 0308 	add.w	r3, r7, #8
 800b876:	4618      	mov	r0, r3
 800b878:	f000 f866 	bl	800b948 <prvSampleTimeNow>
 800b87c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d130      	bne.n	800b8e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10a      	bne.n	800b8a0 <prvProcessTimerOrBlockTask+0x3c>
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d806      	bhi.n	800b8a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b892:	f7ff fa35 	bl	800ad00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b896:	68f9      	ldr	r1, [r7, #12]
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f7ff ff85 	bl	800b7a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b89e:	e024      	b.n	800b8ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d008      	beq.n	800b8b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b8a6:	4b13      	ldr	r3, [pc, #76]	; (800b8f4 <prvProcessTimerOrBlockTask+0x90>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <prvProcessTimerOrBlockTask+0x50>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e000      	b.n	800b8b6 <prvProcessTimerOrBlockTask+0x52>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b8b8:	4b0f      	ldr	r3, [pc, #60]	; (800b8f8 <prvProcessTimerOrBlockTask+0x94>)
 800b8ba:	6818      	ldr	r0, [r3, #0]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	683a      	ldr	r2, [r7, #0]
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	f7fe ff7d 	bl	800a7c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b8ca:	f7ff fa19 	bl	800ad00 <xTaskResumeAll>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10a      	bne.n	800b8ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b8d4:	4b09      	ldr	r3, [pc, #36]	; (800b8fc <prvProcessTimerOrBlockTask+0x98>)
 800b8d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8da:	601a      	str	r2, [r3, #0]
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	f3bf 8f6f 	isb	sy
}
 800b8e4:	e001      	b.n	800b8ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b8e6:	f7ff fa0b 	bl	800ad00 <xTaskResumeAll>
}
 800b8ea:	bf00      	nop
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	20001044 	.word	0x20001044
 800b8f8:	20001048 	.word	0x20001048
 800b8fc:	e000ed04 	.word	0xe000ed04

0800b900 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b900:	b480      	push	{r7}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b908:	4b0e      	ldr	r3, [pc, #56]	; (800b944 <prvGetNextExpireTime+0x44>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <prvGetNextExpireTime+0x16>
 800b912:	2201      	movs	r2, #1
 800b914:	e000      	b.n	800b918 <prvGetNextExpireTime+0x18>
 800b916:	2200      	movs	r2, #0
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d105      	bne.n	800b930 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b924:	4b07      	ldr	r3, [pc, #28]	; (800b944 <prvGetNextExpireTime+0x44>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	60fb      	str	r3, [r7, #12]
 800b92e:	e001      	b.n	800b934 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b930:	2300      	movs	r3, #0
 800b932:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b934:	68fb      	ldr	r3, [r7, #12]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	20001040 	.word	0x20001040

0800b948 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b950:	f7ff fa74 	bl	800ae3c <xTaskGetTickCount>
 800b954:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b956:	4b0b      	ldr	r3, [pc, #44]	; (800b984 <prvSampleTimeNow+0x3c>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d205      	bcs.n	800b96c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b960:	f000 f936 	bl	800bbd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	601a      	str	r2, [r3, #0]
 800b96a:	e002      	b.n	800b972 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b972:	4a04      	ldr	r2, [pc, #16]	; (800b984 <prvSampleTimeNow+0x3c>)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b978:	68fb      	ldr	r3, [r7, #12]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	20001050 	.word	0x20001050

0800b988 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	607a      	str	r2, [r7, #4]
 800b994:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b996:	2300      	movs	r3, #0
 800b998:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d812      	bhi.n	800b9d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	1ad2      	subs	r2, r2, r3
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	699b      	ldr	r3, [r3, #24]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d302      	bcc.n	800b9c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	617b      	str	r3, [r7, #20]
 800b9c0:	e01b      	b.n	800b9fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b9c2:	4b10      	ldr	r3, [pc, #64]	; (800ba04 <prvInsertTimerInActiveList+0x7c>)
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	f7fe f9de 	bl	8009d8e <vListInsert>
 800b9d2:	e012      	b.n	800b9fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d206      	bcs.n	800b9ea <prvInsertTimerInActiveList+0x62>
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d302      	bcc.n	800b9ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	617b      	str	r3, [r7, #20]
 800b9e8:	e007      	b.n	800b9fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9ea:	4b07      	ldr	r3, [pc, #28]	; (800ba08 <prvInsertTimerInActiveList+0x80>)
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	f7fe f9ca 	bl	8009d8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b9fa:	697b      	ldr	r3, [r7, #20]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	20001044 	.word	0x20001044
 800ba08:	20001040 	.word	0x20001040

0800ba0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b08e      	sub	sp, #56	; 0x38
 800ba10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba12:	e0ca      	b.n	800bbaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	da18      	bge.n	800ba4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba1a:	1d3b      	adds	r3, r7, #4
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10a      	bne.n	800ba3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	61fb      	str	r3, [r7, #28]
}
 800ba38:	bf00      	nop
 800ba3a:	e7fe      	b.n	800ba3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ba3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba42:	6850      	ldr	r0, [r2, #4]
 800ba44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba46:	6892      	ldr	r2, [r2, #8]
 800ba48:	4611      	mov	r1, r2
 800ba4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f2c0 80aa 	blt.w	800bba8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ba58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d004      	beq.n	800ba6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba62:	3304      	adds	r3, #4
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fe f9cb 	bl	8009e00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba6a:	463b      	mov	r3, r7
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7ff ff6b 	bl	800b948 <prvSampleTimeNow>
 800ba72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b09      	cmp	r3, #9
 800ba78:	f200 8097 	bhi.w	800bbaa <prvProcessReceivedCommands+0x19e>
 800ba7c:	a201      	add	r2, pc, #4	; (adr r2, 800ba84 <prvProcessReceivedCommands+0x78>)
 800ba7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba82:	bf00      	nop
 800ba84:	0800baad 	.word	0x0800baad
 800ba88:	0800baad 	.word	0x0800baad
 800ba8c:	0800baad 	.word	0x0800baad
 800ba90:	0800bb21 	.word	0x0800bb21
 800ba94:	0800bb35 	.word	0x0800bb35
 800ba98:	0800bb7f 	.word	0x0800bb7f
 800ba9c:	0800baad 	.word	0x0800baad
 800baa0:	0800baad 	.word	0x0800baad
 800baa4:	0800bb21 	.word	0x0800bb21
 800baa8:	0800bb35 	.word	0x0800bb35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800baac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bab2:	f043 0301 	orr.w	r3, r3, #1
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac2:	699b      	ldr	r3, [r3, #24]
 800bac4:	18d1      	adds	r1, r2, r3
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bacc:	f7ff ff5c 	bl	800b988 <prvInsertTimerInActiveList>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d069      	beq.n	800bbaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800badc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bae4:	f003 0304 	and.w	r3, r3, #4
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d05e      	beq.n	800bbaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf0:	699b      	ldr	r3, [r3, #24]
 800baf2:	441a      	add	r2, r3
 800baf4:	2300      	movs	r3, #0
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	2300      	movs	r3, #0
 800bafa:	2100      	movs	r1, #0
 800bafc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bafe:	f7ff fe05 	bl	800b70c <xTimerGenericCommand>
 800bb02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb04:	6a3b      	ldr	r3, [r7, #32]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d14f      	bne.n	800bbaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0e:	f383 8811 	msr	BASEPRI, r3
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	61bb      	str	r3, [r7, #24]
}
 800bb1c:	bf00      	nop
 800bb1e:	e7fe      	b.n	800bb1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb26:	f023 0301 	bic.w	r3, r3, #1
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bb32:	e03a      	b.n	800bbaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb3a:	f043 0301 	orr.w	r3, r3, #1
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10a      	bne.n	800bb6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	617b      	str	r3, [r7, #20]
}
 800bb66:	bf00      	nop
 800bb68:	e7fe      	b.n	800bb68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6c:	699a      	ldr	r2, [r3, #24]
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb70:	18d1      	adds	r1, r2, r3
 800bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb78:	f7ff ff06 	bl	800b988 <prvInsertTimerInActiveList>
					break;
 800bb7c:	e015      	b.n	800bbaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb84:	f003 0302 	and.w	r3, r3, #2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d103      	bne.n	800bb94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bb8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb8e:	f000 fbdf 	bl	800c350 <vPortFree>
 800bb92:	e00a      	b.n	800bbaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb9a:	f023 0301 	bic.w	r3, r3, #1
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bba6:	e000      	b.n	800bbaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bba8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbaa:	4b08      	ldr	r3, [pc, #32]	; (800bbcc <prvProcessReceivedCommands+0x1c0>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	1d39      	adds	r1, r7, #4
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fe fbec 	bl	800a390 <xQueueReceive>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f47f af2a 	bne.w	800ba14 <prvProcessReceivedCommands+0x8>
	}
}
 800bbc0:	bf00      	nop
 800bbc2:	bf00      	nop
 800bbc4:	3730      	adds	r7, #48	; 0x30
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	20001048 	.word	0x20001048

0800bbd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b088      	sub	sp, #32
 800bbd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbd6:	e048      	b.n	800bc6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbd8:	4b2d      	ldr	r3, [pc, #180]	; (800bc90 <prvSwitchTimerLists+0xc0>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbe2:	4b2b      	ldr	r3, [pc, #172]	; (800bc90 <prvSwitchTimerLists+0xc0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	68db      	ldr	r3, [r3, #12]
 800bbea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7fe f905 	bl	8009e00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6a1b      	ldr	r3, [r3, #32]
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc04:	f003 0304 	and.w	r3, r3, #4
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d02e      	beq.n	800bc6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	699b      	ldr	r3, [r3, #24]
 800bc10:	693a      	ldr	r2, [r7, #16]
 800bc12:	4413      	add	r3, r2
 800bc14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d90e      	bls.n	800bc3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc2a:	4b19      	ldr	r3, [pc, #100]	; (800bc90 <prvSwitchTimerLists+0xc0>)
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	3304      	adds	r3, #4
 800bc32:	4619      	mov	r1, r3
 800bc34:	4610      	mov	r0, r2
 800bc36:	f7fe f8aa 	bl	8009d8e <vListInsert>
 800bc3a:	e016      	b.n	800bc6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	2300      	movs	r3, #0
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	2100      	movs	r1, #0
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f7ff fd60 	bl	800b70c <xTimerGenericCommand>
 800bc4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10a      	bne.n	800bc6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	603b      	str	r3, [r7, #0]
}
 800bc66:	bf00      	nop
 800bc68:	e7fe      	b.n	800bc68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc6a:	4b09      	ldr	r3, [pc, #36]	; (800bc90 <prvSwitchTimerLists+0xc0>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1b1      	bne.n	800bbd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bc74:	4b06      	ldr	r3, [pc, #24]	; (800bc90 <prvSwitchTimerLists+0xc0>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bc7a:	4b06      	ldr	r3, [pc, #24]	; (800bc94 <prvSwitchTimerLists+0xc4>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a04      	ldr	r2, [pc, #16]	; (800bc90 <prvSwitchTimerLists+0xc0>)
 800bc80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bc82:	4a04      	ldr	r2, [pc, #16]	; (800bc94 <prvSwitchTimerLists+0xc4>)
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	6013      	str	r3, [r2, #0]
}
 800bc88:	bf00      	nop
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	20001040 	.word	0x20001040
 800bc94:	20001044 	.word	0x20001044

0800bc98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bc9e:	f000 f969 	bl	800bf74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bca2:	4b15      	ldr	r3, [pc, #84]	; (800bcf8 <prvCheckForValidListAndQueue+0x60>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d120      	bne.n	800bcec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bcaa:	4814      	ldr	r0, [pc, #80]	; (800bcfc <prvCheckForValidListAndQueue+0x64>)
 800bcac:	f7fe f81e 	bl	8009cec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bcb0:	4813      	ldr	r0, [pc, #76]	; (800bd00 <prvCheckForValidListAndQueue+0x68>)
 800bcb2:	f7fe f81b 	bl	8009cec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bcb6:	4b13      	ldr	r3, [pc, #76]	; (800bd04 <prvCheckForValidListAndQueue+0x6c>)
 800bcb8:	4a10      	ldr	r2, [pc, #64]	; (800bcfc <prvCheckForValidListAndQueue+0x64>)
 800bcba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bcbc:	4b12      	ldr	r3, [pc, #72]	; (800bd08 <prvCheckForValidListAndQueue+0x70>)
 800bcbe:	4a10      	ldr	r2, [pc, #64]	; (800bd00 <prvCheckForValidListAndQueue+0x68>)
 800bcc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	4b11      	ldr	r3, [pc, #68]	; (800bd0c <prvCheckForValidListAndQueue+0x74>)
 800bcc8:	4a11      	ldr	r2, [pc, #68]	; (800bd10 <prvCheckForValidListAndQueue+0x78>)
 800bcca:	2110      	movs	r1, #16
 800bccc:	200a      	movs	r0, #10
 800bcce:	f7fe f929 	bl	8009f24 <xQueueGenericCreateStatic>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	4a08      	ldr	r2, [pc, #32]	; (800bcf8 <prvCheckForValidListAndQueue+0x60>)
 800bcd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bcd8:	4b07      	ldr	r3, [pc, #28]	; (800bcf8 <prvCheckForValidListAndQueue+0x60>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d005      	beq.n	800bcec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bce0:	4b05      	ldr	r3, [pc, #20]	; (800bcf8 <prvCheckForValidListAndQueue+0x60>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	490b      	ldr	r1, [pc, #44]	; (800bd14 <prvCheckForValidListAndQueue+0x7c>)
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fe fd42 	bl	800a770 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bcec:	f000 f972 	bl	800bfd4 <vPortExitCritical>
}
 800bcf0:	bf00      	nop
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	20001048 	.word	0x20001048
 800bcfc:	20001018 	.word	0x20001018
 800bd00:	2000102c 	.word	0x2000102c
 800bd04:	20001040 	.word	0x20001040
 800bd08:	20001044 	.word	0x20001044
 800bd0c:	200010f4 	.word	0x200010f4
 800bd10:	20001054 	.word	0x20001054
 800bd14:	0800d198 	.word	0x0800d198

0800bd18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3b04      	subs	r3, #4
 800bd28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bd30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	3b04      	subs	r3, #4
 800bd36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	f023 0201 	bic.w	r2, r3, #1
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	3b04      	subs	r3, #4
 800bd46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bd48:	4a0c      	ldr	r2, [pc, #48]	; (800bd7c <pxPortInitialiseStack+0x64>)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	3b14      	subs	r3, #20
 800bd52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	3b04      	subs	r3, #4
 800bd5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f06f 0202 	mvn.w	r2, #2
 800bd66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	3b20      	subs	r3, #32
 800bd6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	0800bd81 	.word	0x0800bd81

0800bd80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd80:	b480      	push	{r7}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bd86:	2300      	movs	r3, #0
 800bd88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd8a:	4b12      	ldr	r3, [pc, #72]	; (800bdd4 <prvTaskExitError+0x54>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd92:	d00a      	beq.n	800bdaa <prvTaskExitError+0x2a>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	60fb      	str	r3, [r7, #12]
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <prvTaskExitError+0x28>
	__asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	60bb      	str	r3, [r7, #8]
}
 800bdbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bdbe:	bf00      	nop
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d0fc      	beq.n	800bdc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bdc6:	bf00      	nop
 800bdc8:	bf00      	nop
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	200000c4 	.word	0x200000c4
	...

0800bde0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bde0:	4b07      	ldr	r3, [pc, #28]	; (800be00 <pxCurrentTCBConst2>)
 800bde2:	6819      	ldr	r1, [r3, #0]
 800bde4:	6808      	ldr	r0, [r1, #0]
 800bde6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdea:	f380 8809 	msr	PSP, r0
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f04f 0000 	mov.w	r0, #0
 800bdf6:	f380 8811 	msr	BASEPRI, r0
 800bdfa:	4770      	bx	lr
 800bdfc:	f3af 8000 	nop.w

0800be00 <pxCurrentTCBConst2>:
 800be00:	20000b18 	.word	0x20000b18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be04:	bf00      	nop
 800be06:	bf00      	nop

0800be08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be08:	4808      	ldr	r0, [pc, #32]	; (800be2c <prvPortStartFirstTask+0x24>)
 800be0a:	6800      	ldr	r0, [r0, #0]
 800be0c:	6800      	ldr	r0, [r0, #0]
 800be0e:	f380 8808 	msr	MSP, r0
 800be12:	f04f 0000 	mov.w	r0, #0
 800be16:	f380 8814 	msr	CONTROL, r0
 800be1a:	b662      	cpsie	i
 800be1c:	b661      	cpsie	f
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	f3bf 8f6f 	isb	sy
 800be26:	df00      	svc	0
 800be28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be2a:	bf00      	nop
 800be2c:	e000ed08 	.word	0xe000ed08

0800be30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800be36:	4b46      	ldr	r3, [pc, #280]	; (800bf50 <xPortStartScheduler+0x120>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a46      	ldr	r2, [pc, #280]	; (800bf54 <xPortStartScheduler+0x124>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d10a      	bne.n	800be56 <xPortStartScheduler+0x26>
	__asm volatile
 800be40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	613b      	str	r3, [r7, #16]
}
 800be52:	bf00      	nop
 800be54:	e7fe      	b.n	800be54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800be56:	4b3e      	ldr	r3, [pc, #248]	; (800bf50 <xPortStartScheduler+0x120>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a3f      	ldr	r2, [pc, #252]	; (800bf58 <xPortStartScheduler+0x128>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d10a      	bne.n	800be76 <xPortStartScheduler+0x46>
	__asm volatile
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	60fb      	str	r3, [r7, #12]
}
 800be72:	bf00      	nop
 800be74:	e7fe      	b.n	800be74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be76:	4b39      	ldr	r3, [pc, #228]	; (800bf5c <xPortStartScheduler+0x12c>)
 800be78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	22ff      	movs	r2, #255	; 0xff
 800be86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be90:	78fb      	ldrb	r3, [r7, #3]
 800be92:	b2db      	uxtb	r3, r3
 800be94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be98:	b2da      	uxtb	r2, r3
 800be9a:	4b31      	ldr	r3, [pc, #196]	; (800bf60 <xPortStartScheduler+0x130>)
 800be9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be9e:	4b31      	ldr	r3, [pc, #196]	; (800bf64 <xPortStartScheduler+0x134>)
 800bea0:	2207      	movs	r2, #7
 800bea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bea4:	e009      	b.n	800beba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bea6:	4b2f      	ldr	r3, [pc, #188]	; (800bf64 <xPortStartScheduler+0x134>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	3b01      	subs	r3, #1
 800beac:	4a2d      	ldr	r2, [pc, #180]	; (800bf64 <xPortStartScheduler+0x134>)
 800beae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800beb0:	78fb      	ldrb	r3, [r7, #3]
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	005b      	lsls	r3, r3, #1
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800beba:	78fb      	ldrb	r3, [r7, #3]
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bec2:	2b80      	cmp	r3, #128	; 0x80
 800bec4:	d0ef      	beq.n	800bea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bec6:	4b27      	ldr	r3, [pc, #156]	; (800bf64 <xPortStartScheduler+0x134>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f1c3 0307 	rsb	r3, r3, #7
 800bece:	2b04      	cmp	r3, #4
 800bed0:	d00a      	beq.n	800bee8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	60bb      	str	r3, [r7, #8]
}
 800bee4:	bf00      	nop
 800bee6:	e7fe      	b.n	800bee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bee8:	4b1e      	ldr	r3, [pc, #120]	; (800bf64 <xPortStartScheduler+0x134>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	021b      	lsls	r3, r3, #8
 800beee:	4a1d      	ldr	r2, [pc, #116]	; (800bf64 <xPortStartScheduler+0x134>)
 800bef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bef2:	4b1c      	ldr	r3, [pc, #112]	; (800bf64 <xPortStartScheduler+0x134>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800befa:	4a1a      	ldr	r2, [pc, #104]	; (800bf64 <xPortStartScheduler+0x134>)
 800befc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	b2da      	uxtb	r2, r3
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf06:	4b18      	ldr	r3, [pc, #96]	; (800bf68 <xPortStartScheduler+0x138>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a17      	ldr	r2, [pc, #92]	; (800bf68 <xPortStartScheduler+0x138>)
 800bf0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bf10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf12:	4b15      	ldr	r3, [pc, #84]	; (800bf68 <xPortStartScheduler+0x138>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a14      	ldr	r2, [pc, #80]	; (800bf68 <xPortStartScheduler+0x138>)
 800bf18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bf1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf1e:	f000 f8dd 	bl	800c0dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf22:	4b12      	ldr	r3, [pc, #72]	; (800bf6c <xPortStartScheduler+0x13c>)
 800bf24:	2200      	movs	r2, #0
 800bf26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf28:	f000 f8fc 	bl	800c124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf2c:	4b10      	ldr	r3, [pc, #64]	; (800bf70 <xPortStartScheduler+0x140>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a0f      	ldr	r2, [pc, #60]	; (800bf70 <xPortStartScheduler+0x140>)
 800bf32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bf36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf38:	f7ff ff66 	bl	800be08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bf3c:	f7ff f848 	bl	800afd0 <vTaskSwitchContext>
	prvTaskExitError();
 800bf40:	f7ff ff1e 	bl	800bd80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3718      	adds	r7, #24
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	e000ed00 	.word	0xe000ed00
 800bf54:	410fc271 	.word	0x410fc271
 800bf58:	410fc270 	.word	0x410fc270
 800bf5c:	e000e400 	.word	0xe000e400
 800bf60:	20001144 	.word	0x20001144
 800bf64:	20001148 	.word	0x20001148
 800bf68:	e000ed20 	.word	0xe000ed20
 800bf6c:	200000c4 	.word	0x200000c4
 800bf70:	e000ef34 	.word	0xe000ef34

0800bf74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
	__asm volatile
 800bf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7e:	f383 8811 	msr	BASEPRI, r3
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	607b      	str	r3, [r7, #4]
}
 800bf8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf8e:	4b0f      	ldr	r3, [pc, #60]	; (800bfcc <vPortEnterCritical+0x58>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	3301      	adds	r3, #1
 800bf94:	4a0d      	ldr	r2, [pc, #52]	; (800bfcc <vPortEnterCritical+0x58>)
 800bf96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf98:	4b0c      	ldr	r3, [pc, #48]	; (800bfcc <vPortEnterCritical+0x58>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d10f      	bne.n	800bfc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bfa0:	4b0b      	ldr	r3, [pc, #44]	; (800bfd0 <vPortEnterCritical+0x5c>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00a      	beq.n	800bfc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	603b      	str	r3, [r7, #0]
}
 800bfbc:	bf00      	nop
 800bfbe:	e7fe      	b.n	800bfbe <vPortEnterCritical+0x4a>
	}
}
 800bfc0:	bf00      	nop
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr
 800bfcc:	200000c4 	.word	0x200000c4
 800bfd0:	e000ed04 	.word	0xe000ed04

0800bfd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bfda:	4b12      	ldr	r3, [pc, #72]	; (800c024 <vPortExitCritical+0x50>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d10a      	bne.n	800bff8 <vPortExitCritical+0x24>
	__asm volatile
 800bfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	607b      	str	r3, [r7, #4]
}
 800bff4:	bf00      	nop
 800bff6:	e7fe      	b.n	800bff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bff8:	4b0a      	ldr	r3, [pc, #40]	; (800c024 <vPortExitCritical+0x50>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3b01      	subs	r3, #1
 800bffe:	4a09      	ldr	r2, [pc, #36]	; (800c024 <vPortExitCritical+0x50>)
 800c000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c002:	4b08      	ldr	r3, [pc, #32]	; (800c024 <vPortExitCritical+0x50>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d105      	bne.n	800c016 <vPortExitCritical+0x42>
 800c00a:	2300      	movs	r3, #0
 800c00c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	f383 8811 	msr	BASEPRI, r3
}
 800c014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c016:	bf00      	nop
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr
 800c022:	bf00      	nop
 800c024:	200000c4 	.word	0x200000c4
	...

0800c030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c030:	f3ef 8009 	mrs	r0, PSP
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	4b15      	ldr	r3, [pc, #84]	; (800c090 <pxCurrentTCBConst>)
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	f01e 0f10 	tst.w	lr, #16
 800c040:	bf08      	it	eq
 800c042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04a:	6010      	str	r0, [r2, #0]
 800c04c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c050:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c054:	f380 8811 	msr	BASEPRI, r0
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	f3bf 8f6f 	isb	sy
 800c060:	f7fe ffb6 	bl	800afd0 <vTaskSwitchContext>
 800c064:	f04f 0000 	mov.w	r0, #0
 800c068:	f380 8811 	msr	BASEPRI, r0
 800c06c:	bc09      	pop	{r0, r3}
 800c06e:	6819      	ldr	r1, [r3, #0]
 800c070:	6808      	ldr	r0, [r1, #0]
 800c072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c076:	f01e 0f10 	tst.w	lr, #16
 800c07a:	bf08      	it	eq
 800c07c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c080:	f380 8809 	msr	PSP, r0
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	f3af 8000 	nop.w

0800c090 <pxCurrentTCBConst>:
 800c090:	20000b18 	.word	0x20000b18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c094:	bf00      	nop
 800c096:	bf00      	nop

0800c098 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
	__asm volatile
 800c09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	607b      	str	r3, [r7, #4]
}
 800c0b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c0b2:	f7fe fed3 	bl	800ae5c <xTaskIncrementTick>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d003      	beq.n	800c0c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c0bc:	4b06      	ldr	r3, [pc, #24]	; (800c0d8 <xPortSysTickHandler+0x40>)
 800c0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0c2:	601a      	str	r2, [r3, #0]
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	f383 8811 	msr	BASEPRI, r3
}
 800c0ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c0d0:	bf00      	nop
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	e000ed04 	.word	0xe000ed04

0800c0dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c0dc:	b480      	push	{r7}
 800c0de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c0e0:	4b0b      	ldr	r3, [pc, #44]	; (800c110 <vPortSetupTimerInterrupt+0x34>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c0e6:	4b0b      	ldr	r3, [pc, #44]	; (800c114 <vPortSetupTimerInterrupt+0x38>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c0ec:	4b0a      	ldr	r3, [pc, #40]	; (800c118 <vPortSetupTimerInterrupt+0x3c>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a0a      	ldr	r2, [pc, #40]	; (800c11c <vPortSetupTimerInterrupt+0x40>)
 800c0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0f6:	099b      	lsrs	r3, r3, #6
 800c0f8:	4a09      	ldr	r2, [pc, #36]	; (800c120 <vPortSetupTimerInterrupt+0x44>)
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c0fe:	4b04      	ldr	r3, [pc, #16]	; (800c110 <vPortSetupTimerInterrupt+0x34>)
 800c100:	2207      	movs	r2, #7
 800c102:	601a      	str	r2, [r3, #0]
}
 800c104:	bf00      	nop
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	e000e010 	.word	0xe000e010
 800c114:	e000e018 	.word	0xe000e018
 800c118:	20000010 	.word	0x20000010
 800c11c:	10624dd3 	.word	0x10624dd3
 800c120:	e000e014 	.word	0xe000e014

0800c124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c134 <vPortEnableVFP+0x10>
 800c128:	6801      	ldr	r1, [r0, #0]
 800c12a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c12e:	6001      	str	r1, [r0, #0]
 800c130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c132:	bf00      	nop
 800c134:	e000ed88 	.word	0xe000ed88

0800c138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c13e:	f3ef 8305 	mrs	r3, IPSR
 800c142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b0f      	cmp	r3, #15
 800c148:	d914      	bls.n	800c174 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c14a:	4a17      	ldr	r2, [pc, #92]	; (800c1a8 <vPortValidateInterruptPriority+0x70>)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	4413      	add	r3, r2
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c154:	4b15      	ldr	r3, [pc, #84]	; (800c1ac <vPortValidateInterruptPriority+0x74>)
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	7afa      	ldrb	r2, [r7, #11]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d20a      	bcs.n	800c174 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	607b      	str	r3, [r7, #4]
}
 800c170:	bf00      	nop
 800c172:	e7fe      	b.n	800c172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c174:	4b0e      	ldr	r3, [pc, #56]	; (800c1b0 <vPortValidateInterruptPriority+0x78>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c17c:	4b0d      	ldr	r3, [pc, #52]	; (800c1b4 <vPortValidateInterruptPriority+0x7c>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	429a      	cmp	r2, r3
 800c182:	d90a      	bls.n	800c19a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c188:	f383 8811 	msr	BASEPRI, r3
 800c18c:	f3bf 8f6f 	isb	sy
 800c190:	f3bf 8f4f 	dsb	sy
 800c194:	603b      	str	r3, [r7, #0]
}
 800c196:	bf00      	nop
 800c198:	e7fe      	b.n	800c198 <vPortValidateInterruptPriority+0x60>
	}
 800c19a:	bf00      	nop
 800c19c:	3714      	adds	r7, #20
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	e000e3f0 	.word	0xe000e3f0
 800c1ac:	20001144 	.word	0x20001144
 800c1b0:	e000ed0c 	.word	0xe000ed0c
 800c1b4:	20001148 	.word	0x20001148

0800c1b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08a      	sub	sp, #40	; 0x28
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c1c4:	f7fe fd8e 	bl	800ace4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c1c8:	4b5b      	ldr	r3, [pc, #364]	; (800c338 <pvPortMalloc+0x180>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d101      	bne.n	800c1d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c1d0:	f000 f920 	bl	800c414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c1d4:	4b59      	ldr	r3, [pc, #356]	; (800c33c <pvPortMalloc+0x184>)
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4013      	ands	r3, r2
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f040 8093 	bne.w	800c308 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d01d      	beq.n	800c224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c1e8:	2208      	movs	r2, #8
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f003 0307 	and.w	r3, r3, #7
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d014      	beq.n	800c224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f023 0307 	bic.w	r3, r3, #7
 800c200:	3308      	adds	r3, #8
 800c202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f003 0307 	and.w	r3, r3, #7
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00a      	beq.n	800c224 <pvPortMalloc+0x6c>
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	617b      	str	r3, [r7, #20]
}
 800c220:	bf00      	nop
 800c222:	e7fe      	b.n	800c222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d06e      	beq.n	800c308 <pvPortMalloc+0x150>
 800c22a:	4b45      	ldr	r3, [pc, #276]	; (800c340 <pvPortMalloc+0x188>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	429a      	cmp	r2, r3
 800c232:	d869      	bhi.n	800c308 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c234:	4b43      	ldr	r3, [pc, #268]	; (800c344 <pvPortMalloc+0x18c>)
 800c236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c238:	4b42      	ldr	r3, [pc, #264]	; (800c344 <pvPortMalloc+0x18c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c23e:	e004      	b.n	800c24a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	429a      	cmp	r2, r3
 800c252:	d903      	bls.n	800c25c <pvPortMalloc+0xa4>
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1f1      	bne.n	800c240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c25c:	4b36      	ldr	r3, [pc, #216]	; (800c338 <pvPortMalloc+0x180>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c262:	429a      	cmp	r2, r3
 800c264:	d050      	beq.n	800c308 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c266:	6a3b      	ldr	r3, [r7, #32]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2208      	movs	r2, #8
 800c26c:	4413      	add	r3, r2
 800c26e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	6a3b      	ldr	r3, [r7, #32]
 800c276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	1ad2      	subs	r2, r2, r3
 800c280:	2308      	movs	r3, #8
 800c282:	005b      	lsls	r3, r3, #1
 800c284:	429a      	cmp	r2, r3
 800c286:	d91f      	bls.n	800c2c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4413      	add	r3, r2
 800c28e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	f003 0307 	and.w	r3, r3, #7
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00a      	beq.n	800c2b0 <pvPortMalloc+0xf8>
	__asm volatile
 800c29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	613b      	str	r3, [r7, #16]
}
 800c2ac:	bf00      	nop
 800c2ae:	e7fe      	b.n	800c2ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b2:	685a      	ldr	r2, [r3, #4]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	1ad2      	subs	r2, r2, r3
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c2c2:	69b8      	ldr	r0, [r7, #24]
 800c2c4:	f000 f908 	bl	800c4d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c2c8:	4b1d      	ldr	r3, [pc, #116]	; (800c340 <pvPortMalloc+0x188>)
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	4a1b      	ldr	r2, [pc, #108]	; (800c340 <pvPortMalloc+0x188>)
 800c2d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c2d6:	4b1a      	ldr	r3, [pc, #104]	; (800c340 <pvPortMalloc+0x188>)
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	4b1b      	ldr	r3, [pc, #108]	; (800c348 <pvPortMalloc+0x190>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d203      	bcs.n	800c2ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c2e2:	4b17      	ldr	r3, [pc, #92]	; (800c340 <pvPortMalloc+0x188>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a18      	ldr	r2, [pc, #96]	; (800c348 <pvPortMalloc+0x190>)
 800c2e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ec:	685a      	ldr	r2, [r3, #4]
 800c2ee:	4b13      	ldr	r3, [pc, #76]	; (800c33c <pvPortMalloc+0x184>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	431a      	orrs	r2, r3
 800c2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c2fe:	4b13      	ldr	r3, [pc, #76]	; (800c34c <pvPortMalloc+0x194>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	3301      	adds	r3, #1
 800c304:	4a11      	ldr	r2, [pc, #68]	; (800c34c <pvPortMalloc+0x194>)
 800c306:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c308:	f7fe fcfa 	bl	800ad00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	f003 0307 	and.w	r3, r3, #7
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00a      	beq.n	800c32c <pvPortMalloc+0x174>
	__asm volatile
 800c316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31a:	f383 8811 	msr	BASEPRI, r3
 800c31e:	f3bf 8f6f 	isb	sy
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	60fb      	str	r3, [r7, #12]
}
 800c328:	bf00      	nop
 800c32a:	e7fe      	b.n	800c32a <pvPortMalloc+0x172>
	return pvReturn;
 800c32c:	69fb      	ldr	r3, [r7, #28]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3728      	adds	r7, #40	; 0x28
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	20004d54 	.word	0x20004d54
 800c33c:	20004d68 	.word	0x20004d68
 800c340:	20004d58 	.word	0x20004d58
 800c344:	20004d4c 	.word	0x20004d4c
 800c348:	20004d5c 	.word	0x20004d5c
 800c34c:	20004d60 	.word	0x20004d60

0800c350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d04d      	beq.n	800c3fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c362:	2308      	movs	r3, #8
 800c364:	425b      	negs	r3, r3
 800c366:	697a      	ldr	r2, [r7, #20]
 800c368:	4413      	add	r3, r2
 800c36a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	685a      	ldr	r2, [r3, #4]
 800c374:	4b24      	ldr	r3, [pc, #144]	; (800c408 <vPortFree+0xb8>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4013      	ands	r3, r2
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10a      	bne.n	800c394 <vPortFree+0x44>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	60fb      	str	r3, [r7, #12]
}
 800c390:	bf00      	nop
 800c392:	e7fe      	b.n	800c392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00a      	beq.n	800c3b2 <vPortFree+0x62>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	60bb      	str	r3, [r7, #8]
}
 800c3ae:	bf00      	nop
 800c3b0:	e7fe      	b.n	800c3b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	685a      	ldr	r2, [r3, #4]
 800c3b6:	4b14      	ldr	r3, [pc, #80]	; (800c408 <vPortFree+0xb8>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d01e      	beq.n	800c3fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d11a      	bne.n	800c3fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	4b0e      	ldr	r3, [pc, #56]	; (800c408 <vPortFree+0xb8>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	43db      	mvns	r3, r3
 800c3d2:	401a      	ands	r2, r3
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c3d8:	f7fe fc84 	bl	800ace4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	685a      	ldr	r2, [r3, #4]
 800c3e0:	4b0a      	ldr	r3, [pc, #40]	; (800c40c <vPortFree+0xbc>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	4a09      	ldr	r2, [pc, #36]	; (800c40c <vPortFree+0xbc>)
 800c3e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3ea:	6938      	ldr	r0, [r7, #16]
 800c3ec:	f000 f874 	bl	800c4d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c3f0:	4b07      	ldr	r3, [pc, #28]	; (800c410 <vPortFree+0xc0>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	4a06      	ldr	r2, [pc, #24]	; (800c410 <vPortFree+0xc0>)
 800c3f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c3fa:	f7fe fc81 	bl	800ad00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c3fe:	bf00      	nop
 800c400:	3718      	adds	r7, #24
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	20004d68 	.word	0x20004d68
 800c40c:	20004d58 	.word	0x20004d58
 800c410:	20004d64 	.word	0x20004d64

0800c414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c41a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c41e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c420:	4b27      	ldr	r3, [pc, #156]	; (800c4c0 <prvHeapInit+0xac>)
 800c422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00c      	beq.n	800c448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	3307      	adds	r3, #7
 800c432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f023 0307 	bic.w	r3, r3, #7
 800c43a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c43c:	68ba      	ldr	r2, [r7, #8]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	4a1f      	ldr	r2, [pc, #124]	; (800c4c0 <prvHeapInit+0xac>)
 800c444:	4413      	add	r3, r2
 800c446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c44c:	4a1d      	ldr	r2, [pc, #116]	; (800c4c4 <prvHeapInit+0xb0>)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c452:	4b1c      	ldr	r3, [pc, #112]	; (800c4c4 <prvHeapInit+0xb0>)
 800c454:	2200      	movs	r2, #0
 800c456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	4413      	add	r3, r2
 800c45e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c460:	2208      	movs	r2, #8
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	1a9b      	subs	r3, r3, r2
 800c466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f023 0307 	bic.w	r3, r3, #7
 800c46e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	4a15      	ldr	r2, [pc, #84]	; (800c4c8 <prvHeapInit+0xb4>)
 800c474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c476:	4b14      	ldr	r3, [pc, #80]	; (800c4c8 <prvHeapInit+0xb4>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2200      	movs	r2, #0
 800c47c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c47e:	4b12      	ldr	r3, [pc, #72]	; (800c4c8 <prvHeapInit+0xb4>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	1ad2      	subs	r2, r2, r3
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c494:	4b0c      	ldr	r3, [pc, #48]	; (800c4c8 <prvHeapInit+0xb4>)
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	4a0a      	ldr	r2, [pc, #40]	; (800c4cc <prvHeapInit+0xb8>)
 800c4a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	4a09      	ldr	r2, [pc, #36]	; (800c4d0 <prvHeapInit+0xbc>)
 800c4aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c4ac:	4b09      	ldr	r3, [pc, #36]	; (800c4d4 <prvHeapInit+0xc0>)
 800c4ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c4b2:	601a      	str	r2, [r3, #0]
}
 800c4b4:	bf00      	nop
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr
 800c4c0:	2000114c 	.word	0x2000114c
 800c4c4:	20004d4c 	.word	0x20004d4c
 800c4c8:	20004d54 	.word	0x20004d54
 800c4cc:	20004d5c 	.word	0x20004d5c
 800c4d0:	20004d58 	.word	0x20004d58
 800c4d4:	20004d68 	.word	0x20004d68

0800c4d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4e0:	4b28      	ldr	r3, [pc, #160]	; (800c584 <prvInsertBlockIntoFreeList+0xac>)
 800c4e2:	60fb      	str	r3, [r7, #12]
 800c4e4:	e002      	b.n	800c4ec <prvInsertBlockIntoFreeList+0x14>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d8f7      	bhi.n	800c4e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	4413      	add	r3, r2
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	429a      	cmp	r2, r3
 800c506:	d108      	bne.n	800c51a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	441a      	add	r2, r3
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	68ba      	ldr	r2, [r7, #8]
 800c524:	441a      	add	r2, r3
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d118      	bne.n	800c560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	4b15      	ldr	r3, [pc, #84]	; (800c588 <prvInsertBlockIntoFreeList+0xb0>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	429a      	cmp	r2, r3
 800c538:	d00d      	beq.n	800c556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	441a      	add	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	e008      	b.n	800c568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c556:	4b0c      	ldr	r3, [pc, #48]	; (800c588 <prvInsertBlockIntoFreeList+0xb0>)
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	601a      	str	r2, [r3, #0]
 800c55e:	e003      	b.n	800c568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d002      	beq.n	800c576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c576:	bf00      	nop
 800c578:	3714      	adds	r7, #20
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	20004d4c 	.word	0x20004d4c
 800c588:	20004d54 	.word	0x20004d54

0800c58c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c590:	2200      	movs	r2, #0
 800c592:	4912      	ldr	r1, [pc, #72]	; (800c5dc <MX_USB_DEVICE_Init+0x50>)
 800c594:	4812      	ldr	r0, [pc, #72]	; (800c5e0 <MX_USB_DEVICE_Init+0x54>)
 800c596:	f7fb ff62 	bl	800845e <USBD_Init>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d001      	beq.n	800c5a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c5a0:	f7f4 f9e0 	bl	8000964 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800c5a4:	490f      	ldr	r1, [pc, #60]	; (800c5e4 <MX_USB_DEVICE_Init+0x58>)
 800c5a6:	480e      	ldr	r0, [pc, #56]	; (800c5e0 <MX_USB_DEVICE_Init+0x54>)
 800c5a8:	f7fb ff89 	bl	80084be <USBD_RegisterClass>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d001      	beq.n	800c5b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c5b2:	f7f4 f9d7 	bl	8000964 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c5b6:	490c      	ldr	r1, [pc, #48]	; (800c5e8 <MX_USB_DEVICE_Init+0x5c>)
 800c5b8:	4809      	ldr	r0, [pc, #36]	; (800c5e0 <MX_USB_DEVICE_Init+0x54>)
 800c5ba:	f7fa fa33 	bl	8006a24 <USBD_MSC_RegisterStorage>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d001      	beq.n	800c5c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c5c4:	f7f4 f9ce 	bl	8000964 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c5c8:	4805      	ldr	r0, [pc, #20]	; (800c5e0 <MX_USB_DEVICE_Init+0x54>)
 800c5ca:	f7fb ffae 	bl	800852a <USBD_Start>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d001      	beq.n	800c5d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c5d4:	f7f4 f9c6 	bl	8000964 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c5d8:	bf00      	nop
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	200000c8 	.word	0x200000c8
 800c5e0:	20004d6c 	.word	0x20004d6c
 800c5e4:	2000001c 	.word	0x2000001c
 800c5e8:	20000118 	.word	0x20000118

0800c5ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	6039      	str	r1, [r7, #0]
 800c5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2212      	movs	r2, #18
 800c5fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c5fe:	4b03      	ldr	r3, [pc, #12]	; (800c60c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c600:	4618      	mov	r0, r3
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	200000e4 	.word	0x200000e4

0800c610 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	6039      	str	r1, [r7, #0]
 800c61a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	2204      	movs	r2, #4
 800c620:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c622:	4b03      	ldr	r3, [pc, #12]	; (800c630 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c624:	4618      	mov	r0, r3
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr
 800c630:	200000f8 	.word	0x200000f8

0800c634 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	4603      	mov	r3, r0
 800c63c:	6039      	str	r1, [r7, #0]
 800c63e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c640:	79fb      	ldrb	r3, [r7, #7]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d105      	bne.n	800c652 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c646:	683a      	ldr	r2, [r7, #0]
 800c648:	4907      	ldr	r1, [pc, #28]	; (800c668 <USBD_FS_ProductStrDescriptor+0x34>)
 800c64a:	4808      	ldr	r0, [pc, #32]	; (800c66c <USBD_FS_ProductStrDescriptor+0x38>)
 800c64c:	f7fd f91a 	bl	8009884 <USBD_GetString>
 800c650:	e004      	b.n	800c65c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c652:	683a      	ldr	r2, [r7, #0]
 800c654:	4904      	ldr	r1, [pc, #16]	; (800c668 <USBD_FS_ProductStrDescriptor+0x34>)
 800c656:	4805      	ldr	r0, [pc, #20]	; (800c66c <USBD_FS_ProductStrDescriptor+0x38>)
 800c658:	f7fd f914 	bl	8009884 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c65c:	4b02      	ldr	r3, [pc, #8]	; (800c668 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	20005048 	.word	0x20005048
 800c66c:	0800d1a0 	.word	0x0800d1a0

0800c670 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	4603      	mov	r3, r0
 800c678:	6039      	str	r1, [r7, #0]
 800c67a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	4904      	ldr	r1, [pc, #16]	; (800c690 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c680:	4804      	ldr	r0, [pc, #16]	; (800c694 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c682:	f7fd f8ff 	bl	8009884 <USBD_GetString>
  return USBD_StrDesc;
 800c686:	4b02      	ldr	r3, [pc, #8]	; (800c690 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	20005048 	.word	0x20005048
 800c694:	0800d1b4 	.word	0x0800d1b4

0800c698 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	4603      	mov	r3, r0
 800c6a0:	6039      	str	r1, [r7, #0]
 800c6a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	221a      	movs	r2, #26
 800c6a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c6aa:	f000 f843 	bl	800c734 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c6ae:	4b02      	ldr	r3, [pc, #8]	; (800c6b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	200000fc 	.word	0x200000fc

0800c6bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	6039      	str	r1, [r7, #0]
 800c6c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c6c8:	79fb      	ldrb	r3, [r7, #7]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d105      	bne.n	800c6da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	4907      	ldr	r1, [pc, #28]	; (800c6f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6d2:	4808      	ldr	r0, [pc, #32]	; (800c6f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6d4:	f7fd f8d6 	bl	8009884 <USBD_GetString>
 800c6d8:	e004      	b.n	800c6e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6da:	683a      	ldr	r2, [r7, #0]
 800c6dc:	4904      	ldr	r1, [pc, #16]	; (800c6f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6de:	4805      	ldr	r0, [pc, #20]	; (800c6f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6e0:	f7fd f8d0 	bl	8009884 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6e4:	4b02      	ldr	r3, [pc, #8]	; (800c6f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20005048 	.word	0x20005048
 800c6f4:	0800d1c8 	.word	0x0800d1c8

0800c6f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	4603      	mov	r3, r0
 800c700:	6039      	str	r1, [r7, #0]
 800c702:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c704:	79fb      	ldrb	r3, [r7, #7]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d105      	bne.n	800c716 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c70a:	683a      	ldr	r2, [r7, #0]
 800c70c:	4907      	ldr	r1, [pc, #28]	; (800c72c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c70e:	4808      	ldr	r0, [pc, #32]	; (800c730 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c710:	f7fd f8b8 	bl	8009884 <USBD_GetString>
 800c714:	e004      	b.n	800c720 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c716:	683a      	ldr	r2, [r7, #0]
 800c718:	4904      	ldr	r1, [pc, #16]	; (800c72c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c71a:	4805      	ldr	r0, [pc, #20]	; (800c730 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c71c:	f7fd f8b2 	bl	8009884 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c720:	4b02      	ldr	r3, [pc, #8]	; (800c72c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c722:	4618      	mov	r0, r3
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	20005048 	.word	0x20005048
 800c730:	0800d1d4 	.word	0x0800d1d4

0800c734 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c73a:	4b0f      	ldr	r3, [pc, #60]	; (800c778 <Get_SerialNum+0x44>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c740:	4b0e      	ldr	r3, [pc, #56]	; (800c77c <Get_SerialNum+0x48>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c746:	4b0e      	ldr	r3, [pc, #56]	; (800c780 <Get_SerialNum+0x4c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4413      	add	r3, r2
 800c752:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d009      	beq.n	800c76e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c75a:	2208      	movs	r2, #8
 800c75c:	4909      	ldr	r1, [pc, #36]	; (800c784 <Get_SerialNum+0x50>)
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f000 f814 	bl	800c78c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c764:	2204      	movs	r2, #4
 800c766:	4908      	ldr	r1, [pc, #32]	; (800c788 <Get_SerialNum+0x54>)
 800c768:	68b8      	ldr	r0, [r7, #8]
 800c76a:	f000 f80f 	bl	800c78c <IntToUnicode>
  }
}
 800c76e:	bf00      	nop
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	1fff7a10 	.word	0x1fff7a10
 800c77c:	1fff7a14 	.word	0x1fff7a14
 800c780:	1fff7a18 	.word	0x1fff7a18
 800c784:	200000fe 	.word	0x200000fe
 800c788:	2000010e 	.word	0x2000010e

0800c78c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b087      	sub	sp, #28
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	4613      	mov	r3, r2
 800c798:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c79e:	2300      	movs	r3, #0
 800c7a0:	75fb      	strb	r3, [r7, #23]
 800c7a2:	e027      	b.n	800c7f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	0f1b      	lsrs	r3, r3, #28
 800c7a8:	2b09      	cmp	r3, #9
 800c7aa:	d80b      	bhi.n	800c7c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	0f1b      	lsrs	r3, r3, #28
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	7dfb      	ldrb	r3, [r7, #23]
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	440b      	add	r3, r1
 800c7bc:	3230      	adds	r2, #48	; 0x30
 800c7be:	b2d2      	uxtb	r2, r2
 800c7c0:	701a      	strb	r2, [r3, #0]
 800c7c2:	e00a      	b.n	800c7da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	0f1b      	lsrs	r3, r3, #28
 800c7c8:	b2da      	uxtb	r2, r3
 800c7ca:	7dfb      	ldrb	r3, [r7, #23]
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	440b      	add	r3, r1
 800c7d4:	3237      	adds	r2, #55	; 0x37
 800c7d6:	b2d2      	uxtb	r2, r2
 800c7d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	011b      	lsls	r3, r3, #4
 800c7de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
 800c7e2:	005b      	lsls	r3, r3, #1
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	75fb      	strb	r3, [r7, #23]
 800c7f4:	7dfa      	ldrb	r2, [r7, #23]
 800c7f6:	79fb      	ldrb	r3, [r7, #7]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d3d3      	bcc.n	800c7a4 <IntToUnicode+0x18>
  }
}
 800c7fc:	bf00      	nop
 800c7fe:	bf00      	nop
 800c800:	371c      	adds	r7, #28
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr

0800c80a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c80a:	b480      	push	{r7}
 800c80c:	b083      	sub	sp, #12
 800c80e:	af00      	add	r7, sp, #0
 800c810:	4603      	mov	r3, r0
 800c812:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800c814:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c816:	4618      	mov	r0, r3
 800c818:	370c      	adds	r7, #12
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c822:	b480      	push	{r7}
 800c824:	b085      	sub	sp, #20
 800c826:	af00      	add	r7, sp, #0
 800c828:	4603      	mov	r3, r0
 800c82a:	60b9      	str	r1, [r7, #8]
 800c82c:	607a      	str	r2, [r7, #4]
 800c82e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c836:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c83e:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c840:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c842:	4618      	mov	r0, r3
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr

0800c84e <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c84e:	b480      	push	{r7}
 800c850:	b083      	sub	sp, #12
 800c852:	af00      	add	r7, sp, #0
 800c854:	4603      	mov	r3, r0
 800c856:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800c858:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	370c      	adds	r7, #12
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr

0800c866 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c866:	b480      	push	{r7}
 800c868:	b083      	sub	sp, #12
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	4603      	mov	r3, r0
 800c86e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800c870:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c872:	4618      	mov	r0, r3
 800c874:	370c      	adds	r7, #12
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr

0800c87e <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c87e:	b480      	push	{r7}
 800c880:	b085      	sub	sp, #20
 800c882:	af00      	add	r7, sp, #0
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
 800c888:	461a      	mov	r2, r3
 800c88a:	4603      	mov	r3, r0
 800c88c:	73fb      	strb	r3, [r7, #15]
 800c88e:	4613      	mov	r3, r2
 800c890:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800c892:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c894:	4618      	mov	r0, r3
 800c896:	3714      	adds	r7, #20
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60b9      	str	r1, [r7, #8]
 800c8a8:	607a      	str	r2, [r7, #4]
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	73fb      	strb	r3, [r7, #15]
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800c8b4:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3714      	adds	r7, #20
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c8c2:	b480      	push	{r7}
 800c8c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c8c6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr
	...

0800c8d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b08a      	sub	sp, #40	; 0x28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8dc:	f107 0314 	add.w	r3, r7, #20
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	601a      	str	r2, [r3, #0]
 800c8e4:	605a      	str	r2, [r3, #4]
 800c8e6:	609a      	str	r2, [r3, #8]
 800c8e8:	60da      	str	r2, [r3, #12]
 800c8ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c8f4:	d13a      	bne.n	800c96c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	613b      	str	r3, [r7, #16]
 800c8fa:	4b1e      	ldr	r3, [pc, #120]	; (800c974 <HAL_PCD_MspInit+0xa0>)
 800c8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8fe:	4a1d      	ldr	r2, [pc, #116]	; (800c974 <HAL_PCD_MspInit+0xa0>)
 800c900:	f043 0301 	orr.w	r3, r3, #1
 800c904:	6313      	str	r3, [r2, #48]	; 0x30
 800c906:	4b1b      	ldr	r3, [pc, #108]	; (800c974 <HAL_PCD_MspInit+0xa0>)
 800c908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c90a:	f003 0301 	and.w	r3, r3, #1
 800c90e:	613b      	str	r3, [r7, #16]
 800c910:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c912:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c918:	2302      	movs	r3, #2
 800c91a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c91c:	2300      	movs	r3, #0
 800c91e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c920:	2303      	movs	r3, #3
 800c922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c924:	230a      	movs	r3, #10
 800c926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c928:	f107 0314 	add.w	r3, r7, #20
 800c92c:	4619      	mov	r1, r3
 800c92e:	4812      	ldr	r0, [pc, #72]	; (800c978 <HAL_PCD_MspInit+0xa4>)
 800c930:	f7f4 feba 	bl	80016a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c934:	4b0f      	ldr	r3, [pc, #60]	; (800c974 <HAL_PCD_MspInit+0xa0>)
 800c936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c938:	4a0e      	ldr	r2, [pc, #56]	; (800c974 <HAL_PCD_MspInit+0xa0>)
 800c93a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c93e:	6353      	str	r3, [r2, #52]	; 0x34
 800c940:	2300      	movs	r3, #0
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	4b0b      	ldr	r3, [pc, #44]	; (800c974 <HAL_PCD_MspInit+0xa0>)
 800c946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c948:	4a0a      	ldr	r2, [pc, #40]	; (800c974 <HAL_PCD_MspInit+0xa0>)
 800c94a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c94e:	6453      	str	r3, [r2, #68]	; 0x44
 800c950:	4b08      	ldr	r3, [pc, #32]	; (800c974 <HAL_PCD_MspInit+0xa0>)
 800c952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c958:	60fb      	str	r3, [r7, #12]
 800c95a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c95c:	2200      	movs	r2, #0
 800c95e:	2105      	movs	r1, #5
 800c960:	2043      	movs	r0, #67	; 0x43
 800c962:	f7f4 fe5b 	bl	800161c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c966:	2043      	movs	r0, #67	; 0x43
 800c968:	f7f4 fe74 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c96c:	bf00      	nop
 800c96e:	3728      	adds	r7, #40	; 0x28
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	40023800 	.word	0x40023800
 800c978:	40020000 	.word	0x40020000

0800c97c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c990:	4619      	mov	r1, r3
 800c992:	4610      	mov	r0, r2
 800c994:	f7fb fe16 	bl	80085c4 <USBD_LL_SetupStage>
}
 800c998:	bf00      	nop
 800c99a:	3708      	adds	r7, #8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c9b2:	78fa      	ldrb	r2, [r7, #3]
 800c9b4:	6879      	ldr	r1, [r7, #4]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	00db      	lsls	r3, r3, #3
 800c9ba:	4413      	add	r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	440b      	add	r3, r1
 800c9c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	78fb      	ldrb	r3, [r7, #3]
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	f7fb fe50 	bl	800866e <USBD_LL_DataOutStage>
}
 800c9ce:	bf00      	nop
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b082      	sub	sp, #8
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	460b      	mov	r3, r1
 800c9e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c9e8:	78fa      	ldrb	r2, [r7, #3]
 800c9ea:	6879      	ldr	r1, [r7, #4]
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	00db      	lsls	r3, r3, #3
 800c9f0:	4413      	add	r3, r2
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	440b      	add	r3, r1
 800c9f6:	334c      	adds	r3, #76	; 0x4c
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	78fb      	ldrb	r3, [r7, #3]
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	f7fb fee9 	bl	80087d4 <USBD_LL_DataInStage>
}
 800ca02:	bf00      	nop
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b082      	sub	sp, #8
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7fc f81d 	bl	8008a58 <USBD_LL_SOF>
}
 800ca1e:	bf00      	nop
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b084      	sub	sp, #16
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	68db      	ldr	r3, [r3, #12]
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d001      	beq.n	800ca3e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ca3a:	f7f3 ff93 	bl	8000964 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca44:	7bfa      	ldrb	r2, [r7, #15]
 800ca46:	4611      	mov	r1, r2
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7fb ffc7 	bl	80089dc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7fb ff6f 	bl	8008938 <USBD_LL_Reset>
}
 800ca5a:	bf00      	nop
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
	...

0800ca64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fb ffc2 	bl	80089fc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	6812      	ldr	r2, [r2, #0]
 800ca86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca8a:	f043 0301 	orr.w	r3, r3, #1
 800ca8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d005      	beq.n	800caa4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca98:	4b04      	ldr	r3, [pc, #16]	; (800caac <HAL_PCD_SuspendCallback+0x48>)
 800ca9a:	691b      	ldr	r3, [r3, #16]
 800ca9c:	4a03      	ldr	r2, [pc, #12]	; (800caac <HAL_PCD_SuspendCallback+0x48>)
 800ca9e:	f043 0306 	orr.w	r3, r3, #6
 800caa2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800caa4:	bf00      	nop
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	e000ed00 	.word	0xe000ed00

0800cab0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fb ffb2 	bl	8008a28 <USBD_LL_Resume>
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	460b      	mov	r3, r1
 800cad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cade:	78fa      	ldrb	r2, [r7, #3]
 800cae0:	4611      	mov	r1, r2
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fc f80a 	bl	8008afc <USBD_LL_IsoOUTIncomplete>
}
 800cae8:	bf00      	nop
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	460b      	mov	r3, r1
 800cafa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cb02:	78fa      	ldrb	r2, [r7, #3]
 800cb04:	4611      	mov	r1, r2
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fb ffc6 	bl	8008a98 <USBD_LL_IsoINIncomplete>
}
 800cb0c:	bf00      	nop
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7fc f81c 	bl	8008b60 <USBD_LL_DevConnected>
}
 800cb28:	bf00      	nop
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7fc f819 	bl	8008b76 <USBD_LL_DevDisconnected>
}
 800cb44:	bf00      	nop
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d13c      	bne.n	800cbd6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cb5c:	4a20      	ldr	r2, [pc, #128]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a1e      	ldr	r2, [pc, #120]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cb68:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cb6c:	4b1c      	ldr	r3, [pc, #112]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cb6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cb72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cb74:	4b1a      	ldr	r3, [pc, #104]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cb76:	2204      	movs	r2, #4
 800cb78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cb7a:	4b19      	ldr	r3, [pc, #100]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cb7c:	2202      	movs	r2, #2
 800cb7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cb80:	4b17      	ldr	r3, [pc, #92]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cb82:	2200      	movs	r2, #0
 800cb84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb86:	4b16      	ldr	r3, [pc, #88]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cb88:	2202      	movs	r2, #2
 800cb8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cb8c:	4b14      	ldr	r3, [pc, #80]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cb8e:	2200      	movs	r2, #0
 800cb90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cb92:	4b13      	ldr	r3, [pc, #76]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cb98:	4b11      	ldr	r3, [pc, #68]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cb9e:	4b10      	ldr	r3, [pc, #64]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cba4:	4b0e      	ldr	r3, [pc, #56]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cbaa:	480d      	ldr	r0, [pc, #52]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cbac:	f7f5 f85e 	bl	8001c6c <HAL_PCD_Init>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d001      	beq.n	800cbba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cbb6:	f7f3 fed5 	bl	8000964 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cbba:	2180      	movs	r1, #128	; 0x80
 800cbbc:	4808      	ldr	r0, [pc, #32]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cbbe:	f7f6 fae2 	bl	8003186 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cbc2:	2240      	movs	r2, #64	; 0x40
 800cbc4:	2100      	movs	r1, #0
 800cbc6:	4806      	ldr	r0, [pc, #24]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cbc8:	f7f6 fa96 	bl	80030f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cbcc:	2280      	movs	r2, #128	; 0x80
 800cbce:	2101      	movs	r1, #1
 800cbd0:	4803      	ldr	r0, [pc, #12]	; (800cbe0 <USBD_LL_Init+0x94>)
 800cbd2:	f7f6 fa91 	bl	80030f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cbd6:	2300      	movs	r3, #0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	20005248 	.word	0x20005248

0800cbe4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7f5 f953 	bl	8001ea6 <HAL_PCD_Start>
 800cc00:	4603      	mov	r3, r0
 800cc02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc04:	7bfb      	ldrb	r3, [r7, #15]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f000 f962 	bl	800ced0 <USBD_Get_USB_Status>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b084      	sub	sp, #16
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
 800cc22:	4608      	mov	r0, r1
 800cc24:	4611      	mov	r1, r2
 800cc26:	461a      	mov	r2, r3
 800cc28:	4603      	mov	r3, r0
 800cc2a:	70fb      	strb	r3, [r7, #3]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	70bb      	strb	r3, [r7, #2]
 800cc30:	4613      	mov	r3, r2
 800cc32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cc42:	78bb      	ldrb	r3, [r7, #2]
 800cc44:	883a      	ldrh	r2, [r7, #0]
 800cc46:	78f9      	ldrb	r1, [r7, #3]
 800cc48:	f7f5 fe24 	bl	8002894 <HAL_PCD_EP_Open>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc50:	7bfb      	ldrb	r3, [r7, #15]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 f93c 	bl	800ced0 <USBD_Get_USB_Status>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b084      	sub	sp, #16
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
 800cc6e:	460b      	mov	r3, r1
 800cc70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc76:	2300      	movs	r3, #0
 800cc78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc80:	78fa      	ldrb	r2, [r7, #3]
 800cc82:	4611      	mov	r1, r2
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7f5 fe6d 	bl	8002964 <HAL_PCD_EP_Close>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc8e:	7bfb      	ldrb	r3, [r7, #15]
 800cc90:	4618      	mov	r0, r3
 800cc92:	f000 f91d 	bl	800ced0 <USBD_Get_USB_Status>
 800cc96:	4603      	mov	r3, r0
 800cc98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	460b      	mov	r3, r1
 800ccae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccbe:	78fa      	ldrb	r2, [r7, #3]
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7f6 f830 	bl	8002d28 <HAL_PCD_EP_Flush>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cccc:	7bfb      	ldrb	r3, [r7, #15]
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f000 f8fe 	bl	800ced0 <USBD_Get_USB_Status>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b084      	sub	sp, #16
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	460b      	mov	r3, r1
 800ccec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccfc:	78fa      	ldrb	r2, [r7, #3]
 800ccfe:	4611      	mov	r1, r2
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7f5 ff26 	bl	8002b52 <HAL_PCD_EP_SetStall>
 800cd06:	4603      	mov	r3, r0
 800cd08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f000 f8df 	bl	800ced0 <USBD_Get_USB_Status>
 800cd12:	4603      	mov	r3, r0
 800cd14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd16:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd30:	2300      	movs	r3, #0
 800cd32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd3a:	78fa      	ldrb	r2, [r7, #3]
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7f5 ff6b 	bl	8002c1a <HAL_PCD_EP_ClrStall>
 800cd44:	4603      	mov	r3, r0
 800cd46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f000 f8c0 	bl	800ced0 <USBD_Get_USB_Status>
 800cd50:	4603      	mov	r3, r0
 800cd52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd54:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd5e:	b480      	push	{r7}
 800cd60:	b085      	sub	sp, #20
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	460b      	mov	r3, r1
 800cd68:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd70:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	da0b      	bge.n	800cd92 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd7a:	78fb      	ldrb	r3, [r7, #3]
 800cd7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd80:	68f9      	ldr	r1, [r7, #12]
 800cd82:	4613      	mov	r3, r2
 800cd84:	00db      	lsls	r3, r3, #3
 800cd86:	4413      	add	r3, r2
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	440b      	add	r3, r1
 800cd8c:	333e      	adds	r3, #62	; 0x3e
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	e00b      	b.n	800cdaa <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd92:	78fb      	ldrb	r3, [r7, #3]
 800cd94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd98:	68f9      	ldr	r1, [r7, #12]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	00db      	lsls	r3, r3, #3
 800cd9e:	4413      	add	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	440b      	add	r3, r1
 800cda4:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800cda8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b084      	sub	sp, #16
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cdd0:	78fa      	ldrb	r2, [r7, #3]
 800cdd2:	4611      	mov	r1, r2
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7f5 fd38 	bl	800284a <HAL_PCD_SetAddress>
 800cdda:	4603      	mov	r3, r0
 800cddc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdde:	7bfb      	ldrb	r3, [r7, #15]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f000 f875 	bl	800ced0 <USBD_Get_USB_Status>
 800cde6:	4603      	mov	r3, r0
 800cde8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdea:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b086      	sub	sp, #24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	607a      	str	r2, [r7, #4]
 800cdfe:	603b      	str	r3, [r7, #0]
 800ce00:	460b      	mov	r3, r1
 800ce02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce04:	2300      	movs	r3, #0
 800ce06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce12:	7af9      	ldrb	r1, [r7, #11]
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	f7f5 fe51 	bl	8002abe <HAL_PCD_EP_Transmit>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce20:	7dfb      	ldrb	r3, [r7, #23]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f000 f854 	bl	800ced0 <USBD_Get_USB_Status>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce2c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3718      	adds	r7, #24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b086      	sub	sp, #24
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	60f8      	str	r0, [r7, #12]
 800ce3e:	607a      	str	r2, [r7, #4]
 800ce40:	603b      	str	r3, [r7, #0]
 800ce42:	460b      	mov	r3, r1
 800ce44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce46:	2300      	movs	r3, #0
 800ce48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce54:	7af9      	ldrb	r1, [r7, #11]
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	f7f5 fdcd 	bl	80029f8 <HAL_PCD_EP_Receive>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
 800ce64:	4618      	mov	r0, r3
 800ce66:	f000 f833 	bl	800ced0 <USBD_Get_USB_Status>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3718      	adds	r7, #24
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	460b      	mov	r3, r1
 800ce82:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce8a:	78fa      	ldrb	r2, [r7, #3]
 800ce8c:	4611      	mov	r1, r2
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7f5 fdfd 	bl	8002a8e <HAL_PCD_EP_GetRxCount>
 800ce94:	4603      	mov	r3, r0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
	...

0800cea0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cea8:	4b03      	ldr	r3, [pc, #12]	; (800ceb8 <USBD_static_malloc+0x18>)
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	370c      	adds	r7, #12
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop
 800ceb8:	20005754 	.word	0x20005754

0800cebc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]

}
 800cec4:	bf00      	nop
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4603      	mov	r3, r0
 800ced8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cede:	79fb      	ldrb	r3, [r7, #7]
 800cee0:	2b03      	cmp	r3, #3
 800cee2:	d817      	bhi.n	800cf14 <USBD_Get_USB_Status+0x44>
 800cee4:	a201      	add	r2, pc, #4	; (adr r2, 800ceec <USBD_Get_USB_Status+0x1c>)
 800cee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceea:	bf00      	nop
 800ceec:	0800cefd 	.word	0x0800cefd
 800cef0:	0800cf03 	.word	0x0800cf03
 800cef4:	0800cf09 	.word	0x0800cf09
 800cef8:	0800cf0f 	.word	0x0800cf0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cefc:	2300      	movs	r3, #0
 800cefe:	73fb      	strb	r3, [r7, #15]
    break;
 800cf00:	e00b      	b.n	800cf1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf02:	2303      	movs	r3, #3
 800cf04:	73fb      	strb	r3, [r7, #15]
    break;
 800cf06:	e008      	b.n	800cf1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf0c:	e005      	b.n	800cf1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf0e:	2303      	movs	r3, #3
 800cf10:	73fb      	strb	r3, [r7, #15]
    break;
 800cf12:	e002      	b.n	800cf1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf14:	2303      	movs	r3, #3
 800cf16:	73fb      	strb	r3, [r7, #15]
    break;
 800cf18:	bf00      	nop
  }
  return usb_status;
 800cf1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3714      	adds	r7, #20
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <__libc_init_array>:
 800cf28:	b570      	push	{r4, r5, r6, lr}
 800cf2a:	4d0d      	ldr	r5, [pc, #52]	; (800cf60 <__libc_init_array+0x38>)
 800cf2c:	4c0d      	ldr	r4, [pc, #52]	; (800cf64 <__libc_init_array+0x3c>)
 800cf2e:	1b64      	subs	r4, r4, r5
 800cf30:	10a4      	asrs	r4, r4, #2
 800cf32:	2600      	movs	r6, #0
 800cf34:	42a6      	cmp	r6, r4
 800cf36:	d109      	bne.n	800cf4c <__libc_init_array+0x24>
 800cf38:	4d0b      	ldr	r5, [pc, #44]	; (800cf68 <__libc_init_array+0x40>)
 800cf3a:	4c0c      	ldr	r4, [pc, #48]	; (800cf6c <__libc_init_array+0x44>)
 800cf3c:	f000 f8f2 	bl	800d124 <_init>
 800cf40:	1b64      	subs	r4, r4, r5
 800cf42:	10a4      	asrs	r4, r4, #2
 800cf44:	2600      	movs	r6, #0
 800cf46:	42a6      	cmp	r6, r4
 800cf48:	d105      	bne.n	800cf56 <__libc_init_array+0x2e>
 800cf4a:	bd70      	pop	{r4, r5, r6, pc}
 800cf4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf50:	4798      	blx	r3
 800cf52:	3601      	adds	r6, #1
 800cf54:	e7ee      	b.n	800cf34 <__libc_init_array+0xc>
 800cf56:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf5a:	4798      	blx	r3
 800cf5c:	3601      	adds	r6, #1
 800cf5e:	e7f2      	b.n	800cf46 <__libc_init_array+0x1e>
 800cf60:	0800f438 	.word	0x0800f438
 800cf64:	0800f438 	.word	0x0800f438
 800cf68:	0800f438 	.word	0x0800f438
 800cf6c:	0800f43c 	.word	0x0800f43c

0800cf70 <__retarget_lock_acquire_recursive>:
 800cf70:	4770      	bx	lr

0800cf72 <__retarget_lock_release_recursive>:
 800cf72:	4770      	bx	lr

0800cf74 <memcpy>:
 800cf74:	440a      	add	r2, r1
 800cf76:	4291      	cmp	r1, r2
 800cf78:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf7c:	d100      	bne.n	800cf80 <memcpy+0xc>
 800cf7e:	4770      	bx	lr
 800cf80:	b510      	push	{r4, lr}
 800cf82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf8a:	4291      	cmp	r1, r2
 800cf8c:	d1f9      	bne.n	800cf82 <memcpy+0xe>
 800cf8e:	bd10      	pop	{r4, pc}

0800cf90 <memset>:
 800cf90:	4402      	add	r2, r0
 800cf92:	4603      	mov	r3, r0
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d100      	bne.n	800cf9a <memset+0xa>
 800cf98:	4770      	bx	lr
 800cf9a:	f803 1b01 	strb.w	r1, [r3], #1
 800cf9e:	e7f9      	b.n	800cf94 <memset+0x4>

0800cfa0 <_free_r>:
 800cfa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfa2:	2900      	cmp	r1, #0
 800cfa4:	d044      	beq.n	800d030 <_free_r+0x90>
 800cfa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfaa:	9001      	str	r0, [sp, #4]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f1a1 0404 	sub.w	r4, r1, #4
 800cfb2:	bfb8      	it	lt
 800cfb4:	18e4      	addlt	r4, r4, r3
 800cfb6:	f000 f8a9 	bl	800d10c <__malloc_lock>
 800cfba:	4a1e      	ldr	r2, [pc, #120]	; (800d034 <_free_r+0x94>)
 800cfbc:	9801      	ldr	r0, [sp, #4]
 800cfbe:	6813      	ldr	r3, [r2, #0]
 800cfc0:	b933      	cbnz	r3, 800cfd0 <_free_r+0x30>
 800cfc2:	6063      	str	r3, [r4, #4]
 800cfc4:	6014      	str	r4, [r2, #0]
 800cfc6:	b003      	add	sp, #12
 800cfc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfcc:	f000 b8a4 	b.w	800d118 <__malloc_unlock>
 800cfd0:	42a3      	cmp	r3, r4
 800cfd2:	d908      	bls.n	800cfe6 <_free_r+0x46>
 800cfd4:	6825      	ldr	r5, [r4, #0]
 800cfd6:	1961      	adds	r1, r4, r5
 800cfd8:	428b      	cmp	r3, r1
 800cfda:	bf01      	itttt	eq
 800cfdc:	6819      	ldreq	r1, [r3, #0]
 800cfde:	685b      	ldreq	r3, [r3, #4]
 800cfe0:	1949      	addeq	r1, r1, r5
 800cfe2:	6021      	streq	r1, [r4, #0]
 800cfe4:	e7ed      	b.n	800cfc2 <_free_r+0x22>
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	b10b      	cbz	r3, 800cff0 <_free_r+0x50>
 800cfec:	42a3      	cmp	r3, r4
 800cfee:	d9fa      	bls.n	800cfe6 <_free_r+0x46>
 800cff0:	6811      	ldr	r1, [r2, #0]
 800cff2:	1855      	adds	r5, r2, r1
 800cff4:	42a5      	cmp	r5, r4
 800cff6:	d10b      	bne.n	800d010 <_free_r+0x70>
 800cff8:	6824      	ldr	r4, [r4, #0]
 800cffa:	4421      	add	r1, r4
 800cffc:	1854      	adds	r4, r2, r1
 800cffe:	42a3      	cmp	r3, r4
 800d000:	6011      	str	r1, [r2, #0]
 800d002:	d1e0      	bne.n	800cfc6 <_free_r+0x26>
 800d004:	681c      	ldr	r4, [r3, #0]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	6053      	str	r3, [r2, #4]
 800d00a:	4421      	add	r1, r4
 800d00c:	6011      	str	r1, [r2, #0]
 800d00e:	e7da      	b.n	800cfc6 <_free_r+0x26>
 800d010:	d902      	bls.n	800d018 <_free_r+0x78>
 800d012:	230c      	movs	r3, #12
 800d014:	6003      	str	r3, [r0, #0]
 800d016:	e7d6      	b.n	800cfc6 <_free_r+0x26>
 800d018:	6825      	ldr	r5, [r4, #0]
 800d01a:	1961      	adds	r1, r4, r5
 800d01c:	428b      	cmp	r3, r1
 800d01e:	bf04      	itt	eq
 800d020:	6819      	ldreq	r1, [r3, #0]
 800d022:	685b      	ldreq	r3, [r3, #4]
 800d024:	6063      	str	r3, [r4, #4]
 800d026:	bf04      	itt	eq
 800d028:	1949      	addeq	r1, r1, r5
 800d02a:	6021      	streq	r1, [r4, #0]
 800d02c:	6054      	str	r4, [r2, #4]
 800d02e:	e7ca      	b.n	800cfc6 <_free_r+0x26>
 800d030:	b003      	add	sp, #12
 800d032:	bd30      	pop	{r4, r5, pc}
 800d034:	200059d0 	.word	0x200059d0

0800d038 <cleanup_glue>:
 800d038:	b538      	push	{r3, r4, r5, lr}
 800d03a:	460c      	mov	r4, r1
 800d03c:	6809      	ldr	r1, [r1, #0]
 800d03e:	4605      	mov	r5, r0
 800d040:	b109      	cbz	r1, 800d046 <cleanup_glue+0xe>
 800d042:	f7ff fff9 	bl	800d038 <cleanup_glue>
 800d046:	4621      	mov	r1, r4
 800d048:	4628      	mov	r0, r5
 800d04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d04e:	f7ff bfa7 	b.w	800cfa0 <_free_r>
	...

0800d054 <_reclaim_reent>:
 800d054:	4b2c      	ldr	r3, [pc, #176]	; (800d108 <_reclaim_reent+0xb4>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4283      	cmp	r3, r0
 800d05a:	b570      	push	{r4, r5, r6, lr}
 800d05c:	4604      	mov	r4, r0
 800d05e:	d051      	beq.n	800d104 <_reclaim_reent+0xb0>
 800d060:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d062:	b143      	cbz	r3, 800d076 <_reclaim_reent+0x22>
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d14a      	bne.n	800d100 <_reclaim_reent+0xac>
 800d06a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d06c:	6819      	ldr	r1, [r3, #0]
 800d06e:	b111      	cbz	r1, 800d076 <_reclaim_reent+0x22>
 800d070:	4620      	mov	r0, r4
 800d072:	f7ff ff95 	bl	800cfa0 <_free_r>
 800d076:	6961      	ldr	r1, [r4, #20]
 800d078:	b111      	cbz	r1, 800d080 <_reclaim_reent+0x2c>
 800d07a:	4620      	mov	r0, r4
 800d07c:	f7ff ff90 	bl	800cfa0 <_free_r>
 800d080:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d082:	b111      	cbz	r1, 800d08a <_reclaim_reent+0x36>
 800d084:	4620      	mov	r0, r4
 800d086:	f7ff ff8b 	bl	800cfa0 <_free_r>
 800d08a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d08c:	b111      	cbz	r1, 800d094 <_reclaim_reent+0x40>
 800d08e:	4620      	mov	r0, r4
 800d090:	f7ff ff86 	bl	800cfa0 <_free_r>
 800d094:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d096:	b111      	cbz	r1, 800d09e <_reclaim_reent+0x4a>
 800d098:	4620      	mov	r0, r4
 800d09a:	f7ff ff81 	bl	800cfa0 <_free_r>
 800d09e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d0a0:	b111      	cbz	r1, 800d0a8 <_reclaim_reent+0x54>
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f7ff ff7c 	bl	800cfa0 <_free_r>
 800d0a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d0aa:	b111      	cbz	r1, 800d0b2 <_reclaim_reent+0x5e>
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	f7ff ff77 	bl	800cfa0 <_free_r>
 800d0b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d0b4:	b111      	cbz	r1, 800d0bc <_reclaim_reent+0x68>
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f7ff ff72 	bl	800cfa0 <_free_r>
 800d0bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0be:	b111      	cbz	r1, 800d0c6 <_reclaim_reent+0x72>
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f7ff ff6d 	bl	800cfa0 <_free_r>
 800d0c6:	69a3      	ldr	r3, [r4, #24]
 800d0c8:	b1e3      	cbz	r3, 800d104 <_reclaim_reent+0xb0>
 800d0ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	4798      	blx	r3
 800d0d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d0d2:	b1b9      	cbz	r1, 800d104 <_reclaim_reent+0xb0>
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0da:	f7ff bfad 	b.w	800d038 <cleanup_glue>
 800d0de:	5949      	ldr	r1, [r1, r5]
 800d0e0:	b941      	cbnz	r1, 800d0f4 <_reclaim_reent+0xa0>
 800d0e2:	3504      	adds	r5, #4
 800d0e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0e6:	2d80      	cmp	r5, #128	; 0x80
 800d0e8:	68d9      	ldr	r1, [r3, #12]
 800d0ea:	d1f8      	bne.n	800d0de <_reclaim_reent+0x8a>
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f7ff ff57 	bl	800cfa0 <_free_r>
 800d0f2:	e7ba      	b.n	800d06a <_reclaim_reent+0x16>
 800d0f4:	680e      	ldr	r6, [r1, #0]
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f7ff ff52 	bl	800cfa0 <_free_r>
 800d0fc:	4631      	mov	r1, r6
 800d0fe:	e7ef      	b.n	800d0e0 <_reclaim_reent+0x8c>
 800d100:	2500      	movs	r5, #0
 800d102:	e7ef      	b.n	800d0e4 <_reclaim_reent+0x90>
 800d104:	bd70      	pop	{r4, r5, r6, pc}
 800d106:	bf00      	nop
 800d108:	20000138 	.word	0x20000138

0800d10c <__malloc_lock>:
 800d10c:	4801      	ldr	r0, [pc, #4]	; (800d114 <__malloc_lock+0x8>)
 800d10e:	f7ff bf2f 	b.w	800cf70 <__retarget_lock_acquire_recursive>
 800d112:	bf00      	nop
 800d114:	200059cc 	.word	0x200059cc

0800d118 <__malloc_unlock>:
 800d118:	4801      	ldr	r0, [pc, #4]	; (800d120 <__malloc_unlock+0x8>)
 800d11a:	f7ff bf2a 	b.w	800cf72 <__retarget_lock_release_recursive>
 800d11e:	bf00      	nop
 800d120:	200059cc 	.word	0x200059cc

0800d124 <_init>:
 800d124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d126:	bf00      	nop
 800d128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d12a:	bc08      	pop	{r3}
 800d12c:	469e      	mov	lr, r3
 800d12e:	4770      	bx	lr

0800d130 <_fini>:
 800d130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d132:	bf00      	nop
 800d134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d136:	bc08      	pop	{r3}
 800d138:	469e      	mov	lr, r3
 800d13a:	4770      	bx	lr

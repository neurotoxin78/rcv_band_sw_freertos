
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011120  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dc0  080112c0  080112c0  000212c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014080  08014080  000302b4  2**0
                  CONTENTS
  4 .ARM          00000008  08014080  08014080  00024080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014088  08014088  000302b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014088  08014088  00024088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801408c  0801408c  0002408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  08014090  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001b048  200002b4  08014344  000302b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  2001b2fc  08014344  0003b2fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ac25  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065d6  00000000  00000000  0005af09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002260  00000000  00000000  000614e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f98  00000000  00000000  00063740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fca1  00000000  00000000  000656d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e11a  00000000  00000000  00085379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7a75  00000000  00000000  000b3493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015af08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009850  00000000  00000000  0015af58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b4 	.word	0x200002b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080112a8 	.word	0x080112a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002b8 	.word	0x200002b8
 80001dc:	080112a8 	.word	0x080112a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <displayBackgrounds>:
char buff[20];

uint16_t light_color = ST7735_COLOR565(125, 160, 175);
uint16_t dark_color = ST7735_COLOR565(40, 80, 130);

void displayBackgrounds() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af04      	add	r7, sp, #16
	/* backgriund */
	ST7735_FillRectangleFast(0, 0, 160, 80, light_color);
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <displayBackgrounds+0xbc>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2350      	movs	r3, #80	; 0x50
 8000592:	22a0      	movs	r2, #160	; 0xa0
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f001 f954 	bl	8001844 <ST7735_FillRectangleFast>
	/* down string */
	ST7735_FillRectangleFast(0, 64, 160, 16, dark_color);
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <displayBackgrounds+0xc0>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2310      	movs	r3, #16
 80005a4:	22a0      	movs	r2, #160	; 0xa0
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	2000      	movs	r0, #0
 80005aa:	f001 f94b 	bl	8001844 <ST7735_FillRectangleFast>
	/* up string */
	ST7735_FillRectangleFast(0, 0, 160, 20, dark_color);
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <displayBackgrounds+0xc0>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2314      	movs	r3, #20
 80005b6:	22a0      	movs	r2, #160	; 0xa0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f001 f942 	bl	8001844 <ST7735_FillRectangleFast>
	/* labels */
	ST7735_WriteString(1, 6, "BAND",Font_7x10, light_color, dark_color);
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <displayBackgrounds+0xbc>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <displayBackgrounds+0xc0>)
 80005c6:	8819      	ldrh	r1, [r3, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <displayBackgrounds+0xc4>)
 80005ca:	9102      	str	r1, [sp, #8]
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <displayBackgrounds+0xc8>)
 80005d6:	2106      	movs	r1, #6
 80005d8:	2001      	movs	r0, #1
 80005da:	f001 f876 	bl	80016ca <ST7735_WriteString>
	ST7735_WriteString(72, 6,"STEP",Font_7x10, light_color, dark_color);
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <displayBackgrounds+0xbc>)
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <displayBackgrounds+0xc0>)
 80005e4:	8819      	ldrh	r1, [r3, #0]
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <displayBackgrounds+0xc4>)
 80005e8:	9102      	str	r1, [sp, #8]
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <displayBackgrounds+0xcc>)
 80005f4:	2106      	movs	r1, #6
 80005f6:	2048      	movs	r0, #72	; 0x48
 80005f8:	f001 f867 	bl	80016ca <ST7735_WriteString>
    ST7735_WriteString(2, 35, "VFO", Font_7x10, dark_color, light_color);
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <displayBackgrounds+0xc0>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <displayBackgrounds+0xbc>)
 8000602:	8819      	ldrh	r1, [r3, #0]
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <displayBackgrounds+0xc4>)
 8000606:	9102      	str	r1, [sp, #8]
 8000608:	9201      	str	r2, [sp, #4]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <displayBackgrounds+0xd0>)
 8000612:	2123      	movs	r1, #35	; 0x23
 8000614:	2002      	movs	r0, #2
 8000616:	f001 f858 	bl	80016ca <ST7735_WriteString>
    ST7735_WriteString(2, 43, " Hz", Font_7x10, dark_color, light_color);
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <displayBackgrounds+0xc0>)
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <displayBackgrounds+0xbc>)
 8000620:	8819      	ldrh	r1, [r3, #0]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <displayBackgrounds+0xc4>)
 8000624:	9102      	str	r1, [sp, #8]
 8000626:	9201      	str	r2, [sp, #4]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <displayBackgrounds+0xd4>)
 8000630:	212b      	movs	r1, #43	; 0x2b
 8000632:	2002      	movs	r0, #2
 8000634:	f001 f849 	bl	80016ca <ST7735_WriteString>
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	20000002 	.word	0x20000002
 8000648:	20000004 	.word	0x20000004
 800064c:	080112c0 	.word	0x080112c0
 8000650:	080112c8 	.word	0x080112c8
 8000654:	080112d0 	.word	0x080112d0
 8000658:	080112d4 	.word	0x080112d4

0800065c <displayBand>:

void displayBand(const char * band)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]

	ST7735_WriteString(35, 2, band, Font_11x18, light_color, dark_color);
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <displayBand+0x30>)
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <displayBand+0x34>)
 800066a:	8819      	ldrh	r1, [r3, #0]
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <displayBand+0x38>)
 800066e:	9102      	str	r1, [sp, #8]
 8000670:	9201      	str	r2, [sp, #4]
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	9200      	str	r2, [sp, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	2102      	movs	r1, #2
 800067c:	2023      	movs	r0, #35	; 0x23
 800067e:	f001 f824 	bl	80016ca <ST7735_WriteString>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	20000002 	.word	0x20000002
 8000694:	2000000c 	.word	0x2000000c

08000698 <displayStep>:

void displayStep(const char * step)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af04      	add	r7, sp, #16
 800069e:	6078      	str	r0, [r7, #4]
	ST7735_WriteString(104, 2, step, Font_11x18, light_color, dark_color);
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <displayStep+0x30>)
 80006a2:	881a      	ldrh	r2, [r3, #0]
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <displayStep+0x34>)
 80006a6:	8819      	ldrh	r1, [r3, #0]
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <displayStep+0x38>)
 80006aa:	9102      	str	r1, [sp, #8]
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	9200      	str	r2, [sp, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	2102      	movs	r1, #2
 80006b8:	2068      	movs	r0, #104	; 0x68
 80006ba:	f001 f806 	bl	80016ca <ST7735_WriteString>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000002 	.word	0x20000002
 80006d0:	2000000c 	.word	0x2000000c

080006d4 <displayFrequency>:

void displayFrequency(uint32_t freq) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af04      	add	r7, sp, #16
 80006da:	6078      	str	r0, [r7, #4]
	uint16_t th, dig, mi;
	th = freq%1000;
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <displayFrequency+0xa4>)
 80006e0:	fba3 1302 	umull	r1, r3, r3, r2
 80006e4:	099b      	lsrs	r3, r3, #6
 80006e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ea:	fb01 f303 	mul.w	r3, r1, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	81fb      	strh	r3, [r7, #14]
	dig = (freq / 1000)%1000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a20      	ldr	r2, [pc, #128]	; (8000778 <displayFrequency+0xa4>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	099a      	lsrs	r2, r3, #6
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <displayFrequency+0xa4>)
 80006fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000702:	099b      	lsrs	r3, r3, #6
 8000704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000708:	fb01 f303 	mul.w	r3, r1, r3
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	81bb      	strh	r3, [r7, #12]
	mi = (freq / 1000000);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <displayFrequency+0xa8>)
 8000714:	fba2 2303 	umull	r2, r3, r2, r3
 8000718:	0c9b      	lsrs	r3, r3, #18
 800071a:	817b      	strh	r3, [r7, #10]
	sprintf(buff, "%02d.%03d",mi, dig);
 800071c:	897a      	ldrh	r2, [r7, #10]
 800071e:	89bb      	ldrh	r3, [r7, #12]
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <displayFrequency+0xac>)
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <displayFrequency+0xb0>)
 8000724:	f00f fe1c 	bl	8010360 <siprintf>
	ST7735_WriteString(26, 32, buff, Font_16x26, dark_color, light_color);
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <displayFrequency+0xb4>)
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <displayFrequency+0xb8>)
 800072e:	8819      	ldrh	r1, [r3, #0]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <displayFrequency+0xbc>)
 8000732:	9102      	str	r1, [sp, #8]
 8000734:	9201      	str	r2, [sp, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	9200      	str	r2, [sp, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <displayFrequency+0xb0>)
 800073e:	2120      	movs	r1, #32
 8000740:	201a      	movs	r0, #26
 8000742:	f000 ffc2 	bl	80016ca <ST7735_WriteString>
	sprintf(buff, "%03d",th);
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	461a      	mov	r2, r3
 800074a:	4912      	ldr	r1, [pc, #72]	; (8000794 <displayFrequency+0xc0>)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <displayFrequency+0xb0>)
 800074e:	f00f fe07 	bl	8010360 <siprintf>
	ST7735_WriteString(125, 37, buff, Font_11x18, dark_color, light_color);
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <displayFrequency+0xb4>)
 8000754:	881a      	ldrh	r2, [r3, #0]
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <displayFrequency+0xb8>)
 8000758:	8819      	ldrh	r1, [r3, #0]
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <displayFrequency+0xc4>)
 800075c:	9102      	str	r1, [sp, #8]
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <displayFrequency+0xb0>)
 8000768:	2125      	movs	r1, #37	; 0x25
 800076a:	207d      	movs	r0, #125	; 0x7d
 800076c:	f000 ffad 	bl	80016ca <ST7735_WriteString>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	10624dd3 	.word	0x10624dd3
 800077c:	431bde83 	.word	0x431bde83
 8000780:	080112d8 	.word	0x080112d8
 8000784:	200002d0 	.word	0x200002d0
 8000788:	20000002 	.word	0x20000002
 800078c:	20000000 	.word	0x20000000
 8000790:	20000014 	.word	0x20000014
 8000794:	080112e4 	.word	0x080112e4
 8000798:	2000000c 	.word	0x2000000c

0800079c <blk_pwm_setvalue>:

void blk_pwm_setvalue(uint16_t value)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
	  USR_TIM_PWM_OpenTim5Ch2();
 80007a6:	f001 fc3b 	bl	8002020 <USR_TIM_PWM_OpenTim5Ch2>
	  USR_TIM_PWM_SetCompare(value * 10);
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	461a      	mov	r2, r3
 80007ae:	0092      	lsls	r2, r2, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fc3c 	bl	8002034 <USR_TIM_PWM_SetCompare>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <setBacklight>:

void setBacklight(uint8_t percent) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	81fb      	strh	r3, [r7, #14]
	uint16_t d = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i <= percent; i++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	81fb      	strh	r3, [r7, #14]
 80007da:	e013      	b.n	8000804 <setBacklight+0x40>
		blk_pwm_setvalue(i);
 80007dc:	89fb      	ldrh	r3, [r7, #14]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffdc 	bl	800079c <blk_pwm_setvalue>
		for (d = 0; d <=60000; d++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	81bb      	strh	r3, [r7, #12]
 80007e8:	e002      	b.n	80007f0 <setBacklight+0x2c>
 80007ea:	89bb      	ldrh	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	81bb      	strh	r3, [r7, #12]
 80007f0:	89bb      	ldrh	r3, [r7, #12]
 80007f2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d9f7      	bls.n	80007ea <setBacklight+0x26>
		{

		}
		d = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i <= percent; i++) {
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	3301      	adds	r3, #1
 8000802:	81fb      	strh	r3, [r7, #14]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	b29b      	uxth	r3, r3
 8000808:	89fa      	ldrh	r2, [r7, #14]
 800080a:	429a      	cmp	r2, r3
 800080c:	d9e6      	bls.n	80007dc <setBacklight+0x18>
	}
	i=0;
 800080e:	2300      	movs	r3, #0
 8000810:	81fb      	strh	r3, [r7, #14]
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <getRunTimeCounterValue+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000350 	.word	0x20000350

08000840 <vApplicationIdleHook>:
extern uint16_t current_step;
extern uint8_t current_band;
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	//vTaskList(taskListStatus);
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000854:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <MX_FREERTOS_Init+0x38>)
 8000856:	2100      	movs	r1, #0
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_FREERTOS_Init+0x3c>)
 800085a:	f00c f84d 	bl	800c8f8 <osThreadNew>
 800085e:	4603      	mov	r3, r0
 8000860:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <MX_FREERTOS_Init+0x40>)
 8000862:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <MX_FREERTOS_Init+0x44>)
 8000866:	2100      	movs	r1, #0
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_FREERTOS_Init+0x48>)
 800086a:	f00c f845 	bl	800c8f8 <osThreadNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a0a      	ldr	r2, [pc, #40]	; (800089c <MX_FREERTOS_Init+0x4c>)
 8000872:	6013      	str	r3, [r2, #0]

  /* creation of buttonsTask */
  buttonsTaskHandle = osThreadNew(StartButtonsTask, NULL, &buttonsTask_attributes);
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <MX_FREERTOS_Init+0x50>)
 8000876:	2100      	movs	r1, #0
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <MX_FREERTOS_Init+0x54>)
 800087a:	f00c f83d 	bl	800c8f8 <osThreadNew>
 800087e:	4603      	mov	r3, r0
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <MX_FREERTOS_Init+0x58>)
 8000882:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	08013eec 	.word	0x08013eec
 800088c:	080008ad 	.word	0x080008ad
 8000890:	200002f0 	.word	0x200002f0
 8000894:	08013f10 	.word	0x08013f10
 8000898:	080008fd 	.word	0x080008fd
 800089c:	200002f4 	.word	0x200002f4
 80008a0:	08013f34 	.word	0x08013f34
 80008a4:	08000a75 	.word	0x08000a75
 80008a8:	200002f8 	.word	0x200002f8

080008ac <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80008b4:	f00e fd72 	bl	800f39c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	current_freq = band[current_band].minFreq;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <StartDefaultTask+0x44>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <StartDefaultTask+0x48>)
 80008c0:	460b      	mov	r3, r1
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	440b      	add	r3, r1
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	3304      	adds	r3, #4
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <StartDefaultTask+0x4c>)
 80008d2:	601a      	str	r2, [r3, #0]
	si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_8MA);
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <StartDefaultTask+0x4c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	2103      	movs	r1, #3
 80008dc:	4618      	mov	r0, r3
 80008de:	f009 fec9 	bl	800a674 <si5351_SetupCLK0>
	si5351_EnableOutputs(1 << 0);
 80008e2:	2001      	movs	r0, #1
 80008e4:	f009 fee7 	bl	800a6b6 <si5351_EnableOutputs>
	/* Timer*/
	for (;;) {
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		osDelay(250);
 80008e8:	20fa      	movs	r0, #250	; 0xfa
 80008ea:	f00c f897 	bl	800ca1c <osDelay>
 80008ee:	e7fb      	b.n	80008e8 <StartDefaultTask+0x3c>
 80008f0:	2000014e 	.word	0x2000014e
 80008f4:	2000005c 	.word	0x2000005c
 80008f8:	20000354 	.word	0x20000354

080008fc <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */

	int32_t prevCounter = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
	/*  */
	max_freq = band[current_band].maxFreq;
 8000908:	4b52      	ldr	r3, [pc, #328]	; (8000a54 <StartEncoderTask+0x158>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	4a52      	ldr	r2, [pc, #328]	; (8000a58 <StartEncoderTask+0x15c>)
 8000910:	460b      	mov	r3, r1
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	440b      	add	r3, r1
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	3308      	adds	r3, #8
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	4b4e      	ldr	r3, [pc, #312]	; (8000a5c <StartEncoderTask+0x160>)
 8000922:	601a      	str	r2, [r3, #0]
	min_freq = band[current_band].minFreq;
 8000924:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <StartEncoderTask+0x158>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	4a4b      	ldr	r2, [pc, #300]	; (8000a58 <StartEncoderTask+0x15c>)
 800092c:	460b      	mov	r3, r1
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	440b      	add	r3, r1
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	3304      	adds	r3, #4
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	4b48      	ldr	r3, [pc, #288]	; (8000a60 <StartEncoderTask+0x164>)
 800093e:	601a      	str	r2, [r3, #0]
	current_freq = min_freq;
 8000940:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <StartEncoderTask+0x164>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a47      	ldr	r2, [pc, #284]	; (8000a64 <StartEncoderTask+0x168>)
 8000946:	6013      	str	r3, [r2, #0]
	/* */
	//ST7735_FillScreenFast(ST7735_BLACK);
	displayBackgrounds();
 8000948:	f7ff fe1c 	bl	8000584 <displayBackgrounds>
	displayBand(band[current_band].name);
 800094c:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <StartEncoderTask+0x158>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	4a41      	ldr	r2, [pc, #260]	; (8000a58 <StartEncoderTask+0x15c>)
 8000954:	460b      	mov	r3, r1
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	440b      	add	r3, r1
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe7b 	bl	800065c <displayBand>
	displayStep(step[current_step].name);
 8000966:	4b40      	ldr	r3, [pc, #256]	; (8000a68 <StartEncoderTask+0x16c>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b3f      	ldr	r3, [pc, #252]	; (8000a6c <StartEncoderTask+0x170>)
 800096e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe90 	bl	8000698 <displayStep>
	displayFrequency(current_freq);
 8000978:	4b3a      	ldr	r3, [pc, #232]	; (8000a64 <StartEncoderTask+0x168>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fea9 	bl	80006d4 <displayFrequency>
	/* */
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 8000982:	4b3b      	ldr	r3, [pc, #236]	; (8000a70 <StartEncoderTask+0x174>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000988:	613b      	str	r3, [r7, #16]
		uint16_t step_value = step[current_step].step;
 800098a:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <StartEncoderTask+0x16c>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	4a37      	ldr	r2, [pc, #220]	; (8000a6c <StartEncoderTask+0x170>)
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	4413      	add	r3, r2
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	81fb      	strh	r3, [r7, #14]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	3b01      	subs	r3, #1
 800099c:	b29b      	uxth	r3, r3
 800099e:	0fda      	lsrs	r2, r3, #31
 80009a0:	4413      	add	r3, r2
 80009a2:	105b      	asrs	r3, r3, #1
 80009a4:	425b      	negs	r3, r3
 80009a6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80009aa:	337f      	adds	r3, #127	; 0x7f
 80009ac:	613b      	str	r3, [r7, #16]

		if (currCounter != prevCounter) {
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d04a      	beq.n	8000a4c <StartEncoderTask+0x150>
			if (currCounter > prevCounter) {
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	dd20      	ble.n	8000a00 <StartEncoderTask+0x104>
				if (current_freq != min_freq) {
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <StartEncoderTask+0x168>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <StartEncoderTask+0x164>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d006      	beq.n	80009d8 <StartEncoderTask+0xdc>
					current_freq -= step_value;
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <StartEncoderTask+0x168>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	89fb      	ldrh	r3, [r7, #14]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <StartEncoderTask+0x168>)
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	e003      	b.n	80009e0 <StartEncoderTask+0xe4>
				} else {
					current_freq = max_freq;
 80009d8:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <StartEncoderTask+0x160>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <StartEncoderTask+0x168>)
 80009de:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 80009e0:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <StartEncoderTask+0x168>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	2101      	movs	r1, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f009 fe43 	bl	800a674 <si5351_SetupCLK0>
				displayFrequency(current_freq);
 80009ee:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <StartEncoderTask+0x168>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe6e 	bl	80006d4 <displayFrequency>
				osDelay(5);
 80009f8:	2005      	movs	r0, #5
 80009fa:	f00c f80f 	bl	800ca1c <osDelay>
 80009fe:	e023      	b.n	8000a48 <StartEncoderTask+0x14c>
			} else if (currCounter < prevCounter) {
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	da1f      	bge.n	8000a48 <StartEncoderTask+0x14c>
				if (current_freq != max_freq) {
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <StartEncoderTask+0x168>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <StartEncoderTask+0x160>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d006      	beq.n	8000a22 <StartEncoderTask+0x126>
					current_freq += step_value;
 8000a14:	89fa      	ldrh	r2, [r7, #14]
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <StartEncoderTask+0x168>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <StartEncoderTask+0x168>)
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	e003      	b.n	8000a2a <StartEncoderTask+0x12e>
				} else {
					current_freq = min_freq;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <StartEncoderTask+0x164>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <StartEncoderTask+0x168>)
 8000a28:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <StartEncoderTask+0x168>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	2101      	movs	r1, #1
 8000a32:	4618      	mov	r0, r3
 8000a34:	f009 fe1e 	bl	800a674 <si5351_SetupCLK0>
				displayFrequency(current_freq);
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <StartEncoderTask+0x168>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fe49 	bl	80006d4 <displayFrequency>
				osDelay(5);
 8000a42:	2005      	movs	r0, #5
 8000a44:	f00b ffea 	bl	800ca1c <osDelay>
			} else {

			}
			prevCounter = currCounter;
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	617b      	str	r3, [r7, #20]
		}

		osDelay(5);
 8000a4c:	2005      	movs	r0, #5
 8000a4e:	f00b ffe5 	bl	800ca1c <osDelay>
	for (;;) {
 8000a52:	e796      	b.n	8000982 <StartEncoderTask+0x86>
 8000a54:	2000014e 	.word	0x2000014e
 8000a58:	2000005c 	.word	0x2000005c
 8000a5c:	200002e8 	.word	0x200002e8
 8000a60:	200002ec 	.word	0x200002ec
 8000a64:	20000354 	.word	0x20000354
 8000a68:	2000014c 	.word	0x2000014c
 8000a6c:	2000001c 	.word	0x2000001c
 8000a70:	20000428 	.word	0x20000428

08000a74 <StartButtonsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonsTask */
void StartButtonsTask(void *argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonsTask */
	/* Infinite loop */
	for (;;) {
		/* BUTTON */
		//printf("Step %d\n\r", current_step);
		if (buttonPressed[buttonNumber]) {
 8000a7c:	4ba7      	ldr	r3, [pc, #668]	; (8000d1c <StartButtonsTask+0x2a8>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4ba7      	ldr	r3, [pc, #668]	; (8000d20 <StartButtonsTask+0x2ac>)
 8000a84:	5c9b      	ldrb	r3, [r3, r2]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	f000 8143 	beq.w	8000d14 <StartButtonsTask+0x2a0>
			buttonPressed[buttonNumber] = 0;
 8000a8e:	4ba3      	ldr	r3, [pc, #652]	; (8000d1c <StartButtonsTask+0x2a8>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	4ba2      	ldr	r3, [pc, #648]	; (8000d20 <StartButtonsTask+0x2ac>)
 8000a96:	2100      	movs	r1, #0
 8000a98:	5499      	strb	r1, [r3, r2]
			if (buttonNumber == 0) {
 8000a9a:	4ba0      	ldr	r3, [pc, #640]	; (8000d1c <StartButtonsTask+0x2a8>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d121      	bne.n	8000ae6 <StartButtonsTask+0x72>
				if (current_step != lastStep) {
 8000aa2:	4ba0      	ldr	r3, [pc, #640]	; (8000d24 <StartButtonsTask+0x2b0>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d00f      	beq.n	8000ace <StartButtonsTask+0x5a>
					current_step++;
 8000aae:	4b9d      	ldr	r3, [pc, #628]	; (8000d24 <StartButtonsTask+0x2b0>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b9b      	ldr	r3, [pc, #620]	; (8000d24 <StartButtonsTask+0x2b0>)
 8000ab8:	801a      	strh	r2, [r3, #0]
					displayStep(step[current_step].name);
 8000aba:	4b9a      	ldr	r3, [pc, #616]	; (8000d24 <StartButtonsTask+0x2b0>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b99      	ldr	r3, [pc, #612]	; (8000d28 <StartButtonsTask+0x2b4>)
 8000ac2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fde6 	bl	8000698 <displayStep>
 8000acc:	e00b      	b.n	8000ae6 <StartButtonsTask+0x72>
				} else {
					current_step = 0;
 8000ace:	4b95      	ldr	r3, [pc, #596]	; (8000d24 <StartButtonsTask+0x2b0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	801a      	strh	r2, [r3, #0]
					displayStep(step[current_step].name);
 8000ad4:	4b93      	ldr	r3, [pc, #588]	; (8000d24 <StartButtonsTask+0x2b0>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b93      	ldr	r3, [pc, #588]	; (8000d28 <StartButtonsTask+0x2b4>)
 8000adc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fdd9 	bl	8000698 <displayStep>
				}
			}
			if (buttonNumber == 1) {
 8000ae6:	4b8d      	ldr	r3, [pc, #564]	; (8000d1c <StartButtonsTask+0x2a8>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	f040 8087 	bne.w	8000bfe <StartButtonsTask+0x18a>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af4:	488d      	ldr	r0, [pc, #564]	; (8000d2c <StartButtonsTask+0x2b8>)
 8000af6:	f001 ff23 	bl	8002940 <HAL_GPIO_TogglePin>
				if (current_band != lastBand) {
 8000afa:	4b8d      	ldr	r3, [pc, #564]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	2313      	movs	r3, #19
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d03f      	beq.n	8000b86 <StartButtonsTask+0x112>
					current_band++;
 8000b06:	4b8a      	ldr	r3, [pc, #552]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b88      	ldr	r3, [pc, #544]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000b10:	701a      	strb	r2, [r3, #0]
					displayBand(band[current_band].name);
 8000b12:	4b87      	ldr	r3, [pc, #540]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	4619      	mov	r1, r3
 8000b18:	4a86      	ldr	r2, [pc, #536]	; (8000d34 <StartButtonsTask+0x2c0>)
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	440b      	add	r3, r1
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fd98 	bl	800065c <displayBand>
					max_freq = band[current_band].maxFreq;
 8000b2c:	4b80      	ldr	r3, [pc, #512]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	4a80      	ldr	r2, [pc, #512]	; (8000d34 <StartButtonsTask+0x2c0>)
 8000b34:	460b      	mov	r3, r1
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	440b      	add	r3, r1
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	3308      	adds	r3, #8
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	4b7c      	ldr	r3, [pc, #496]	; (8000d38 <StartButtonsTask+0x2c4>)
 8000b46:	601a      	str	r2, [r3, #0]
					min_freq = band[current_band].minFreq;
 8000b48:	4b79      	ldr	r3, [pc, #484]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4a79      	ldr	r2, [pc, #484]	; (8000d34 <StartButtonsTask+0x2c0>)
 8000b50:	460b      	mov	r3, r1
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	440b      	add	r3, r1
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b76      	ldr	r3, [pc, #472]	; (8000d3c <StartButtonsTask+0x2c8>)
 8000b62:	601a      	str	r2, [r3, #0]
					current_freq = min_freq;
 8000b64:	4b75      	ldr	r3, [pc, #468]	; (8000d3c <StartButtonsTask+0x2c8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a75      	ldr	r2, [pc, #468]	; (8000d40 <StartButtonsTask+0x2cc>)
 8000b6a:	6013      	str	r3, [r2, #0]
					displayFrequency(current_freq);
 8000b6c:	4b74      	ldr	r3, [pc, #464]	; (8000d40 <StartButtonsTask+0x2cc>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fdaf 	bl	80006d4 <displayFrequency>
					si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 8000b76:	4b72      	ldr	r3, [pc, #456]	; (8000d40 <StartButtonsTask+0x2cc>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f009 fd78 	bl	800a674 <si5351_SetupCLK0>
 8000b84:	e03b      	b.n	8000bfe <StartButtonsTask+0x18a>
				} else {
					current_band = 0;
 8000b86:	4b6a      	ldr	r3, [pc, #424]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
					displayBand(band[current_band].name);
 8000b8c:	4b68      	ldr	r3, [pc, #416]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4a68      	ldr	r2, [pc, #416]	; (8000d34 <StartButtonsTask+0x2c0>)
 8000b94:	460b      	mov	r3, r1
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	440b      	add	r3, r1
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fd5b 	bl	800065c <displayBand>
					max_freq = band[current_band].maxFreq;
 8000ba6:	4b62      	ldr	r3, [pc, #392]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	4a61      	ldr	r2, [pc, #388]	; (8000d34 <StartButtonsTask+0x2c0>)
 8000bae:	460b      	mov	r3, r1
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	440b      	add	r3, r1
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	3308      	adds	r3, #8
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b5e      	ldr	r3, [pc, #376]	; (8000d38 <StartButtonsTask+0x2c4>)
 8000bc0:	601a      	str	r2, [r3, #0]
					min_freq = band[current_band].minFreq;
 8000bc2:	4b5b      	ldr	r3, [pc, #364]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4a5a      	ldr	r2, [pc, #360]	; (8000d34 <StartButtonsTask+0x2c0>)
 8000bca:	460b      	mov	r3, r1
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	440b      	add	r3, r1
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <StartButtonsTask+0x2c8>)
 8000bdc:	601a      	str	r2, [r3, #0]
					current_freq = min_freq;
 8000bde:	4b57      	ldr	r3, [pc, #348]	; (8000d3c <StartButtonsTask+0x2c8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a57      	ldr	r2, [pc, #348]	; (8000d40 <StartButtonsTask+0x2cc>)
 8000be4:	6013      	str	r3, [r2, #0]
					displayFrequency(current_freq);
 8000be6:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <StartButtonsTask+0x2cc>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fd72 	bl	80006d4 <displayFrequency>
					si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 8000bf0:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <StartButtonsTask+0x2cc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f009 fd3b 	bl	800a674 <si5351_SetupCLK0>
				}
			}
			if (buttonNumber == 2) {
 8000bfe:	4b47      	ldr	r3, [pc, #284]	; (8000d1c <StartButtonsTask+0x2a8>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	f040 8086 	bne.w	8000d14 <StartButtonsTask+0x2a0>
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	4847      	ldr	r0, [pc, #284]	; (8000d2c <StartButtonsTask+0x2b8>)
 8000c0e:	f001 fe97 	bl	8002940 <HAL_GPIO_TogglePin>
							if (current_band != 0) {
 8000c12:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d03f      	beq.n	8000c9a <StartButtonsTask+0x226>
								current_band--;
 8000c1a:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b43      	ldr	r3, [pc, #268]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000c24:	701a      	strb	r2, [r3, #0]
								displayBand(band[current_band].name);
 8000c26:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4a41      	ldr	r2, [pc, #260]	; (8000d34 <StartButtonsTask+0x2c0>)
 8000c2e:	460b      	mov	r3, r1
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	440b      	add	r3, r1
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fd0e 	bl	800065c <displayBand>
								max_freq = band[current_band].maxFreq;
 8000c40:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	4a3b      	ldr	r2, [pc, #236]	; (8000d34 <StartButtonsTask+0x2c0>)
 8000c48:	460b      	mov	r3, r1
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	440b      	add	r3, r1
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	3308      	adds	r3, #8
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b37      	ldr	r3, [pc, #220]	; (8000d38 <StartButtonsTask+0x2c4>)
 8000c5a:	601a      	str	r2, [r3, #0]
								min_freq = band[current_band].minFreq;
 8000c5c:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	4a34      	ldr	r2, [pc, #208]	; (8000d34 <StartButtonsTask+0x2c0>)
 8000c64:	460b      	mov	r3, r1
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	440b      	add	r3, r1
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3304      	adds	r3, #4
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <StartButtonsTask+0x2c8>)
 8000c76:	601a      	str	r2, [r3, #0]
								current_freq = min_freq;
 8000c78:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <StartButtonsTask+0x2c8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a30      	ldr	r2, [pc, #192]	; (8000d40 <StartButtonsTask+0x2cc>)
 8000c7e:	6013      	str	r3, [r2, #0]
								displayFrequency(current_freq);
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <StartButtonsTask+0x2cc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fd25 	bl	80006d4 <displayFrequency>
								si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <StartButtonsTask+0x2cc>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	2101      	movs	r1, #1
 8000c92:	4618      	mov	r0, r3
 8000c94:	f009 fcee 	bl	800a674 <si5351_SetupCLK0>
 8000c98:	e03c      	b.n	8000d14 <StartButtonsTask+0x2a0>
							} else {
								current_band = lastBand;
 8000c9a:	2313      	movs	r3, #19
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000ca0:	701a      	strb	r2, [r3, #0]
								displayBand(band[current_band].name);
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <StartButtonsTask+0x2c0>)
 8000caa:	460b      	mov	r3, r1
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	440b      	add	r3, r1
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fcd0 	bl	800065c <displayBand>
								max_freq = band[current_band].maxFreq;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <StartButtonsTask+0x2c0>)
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	440b      	add	r3, r1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	3308      	adds	r3, #8
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <StartButtonsTask+0x2c4>)
 8000cd6:	601a      	str	r2, [r3, #0]
								min_freq = band[current_band].minFreq;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <StartButtonsTask+0x2bc>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <StartButtonsTask+0x2c0>)
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	440b      	add	r3, r1
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	3304      	adds	r3, #4
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <StartButtonsTask+0x2c8>)
 8000cf2:	601a      	str	r2, [r3, #0]
								current_freq = min_freq;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <StartButtonsTask+0x2c8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <StartButtonsTask+0x2cc>)
 8000cfa:	6013      	str	r3, [r2, #0]
								displayFrequency(current_freq);
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <StartButtonsTask+0x2cc>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fce7 	bl	80006d4 <displayFrequency>
								si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <StartButtonsTask+0x2cc>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f009 fcb0 	bl	800a674 <si5351_SetupCLK0>
							}
						}
		}
		osDelay(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f00b fe81 	bl	800ca1c <osDelay>
		if (buttonPressed[buttonNumber]) {
 8000d1a:	e6af      	b.n	8000a7c <StartButtonsTask+0x8>
 8000d1c:	200002e4 	.word	0x200002e4
 8000d20:	2000041c 	.word	0x2000041c
 8000d24:	2000014c 	.word	0x2000014c
 8000d28:	2000001c 	.word	0x2000001c
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	2000014e 	.word	0x2000014e
 8000d34:	2000005c 	.word	0x2000005c
 8000d38:	200002e8 	.word	0x200002e8
 8000d3c:	200002ec 	.word	0x200002ec
 8000d40:	20000354 	.word	0x20000354

08000d44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b4a      	ldr	r3, [pc, #296]	; (8000e88 <MX_GPIO_Init+0x144>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a49      	ldr	r2, [pc, #292]	; (8000e88 <MX_GPIO_Init+0x144>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b47      	ldr	r3, [pc, #284]	; (8000e88 <MX_GPIO_Init+0x144>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <MX_GPIO_Init+0x144>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a42      	ldr	r2, [pc, #264]	; (8000e88 <MX_GPIO_Init+0x144>)
 8000d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <MX_GPIO_Init+0x144>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	4b3c      	ldr	r3, [pc, #240]	; (8000e88 <MX_GPIO_Init+0x144>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a3b      	ldr	r2, [pc, #236]	; (8000e88 <MX_GPIO_Init+0x144>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <MX_GPIO_Init+0x144>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <MX_GPIO_Init+0x144>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a34      	ldr	r2, [pc, #208]	; (8000e88 <MX_GPIO_Init+0x144>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <MX_GPIO_Init+0x144>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd0:	482e      	ldr	r0, [pc, #184]	; (8000e8c <MX_GPIO_Init+0x148>)
 8000dd2:	f001 fd83 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	211c      	movs	r1, #28
 8000dda:	482d      	ldr	r0, [pc, #180]	; (8000e90 <MX_GPIO_Init+0x14c>)
 8000ddc:	f001 fd7e 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4824      	ldr	r0, [pc, #144]	; (8000e8c <MX_GPIO_Init+0x148>)
 8000dfa:	f001 fad5 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BAND_BTN_Pin|MENU_BTN_Pin;
 8000dfe:	f240 1301 	movw	r3, #257	; 0x101
 8000e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	481e      	ldr	r0, [pc, #120]	; (8000e90 <MX_GPIO_Init+0x14c>)
 8000e16:	f001 fac7 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000e1a:	231c      	movs	r3, #28
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4817      	ldr	r0, [pc, #92]	; (8000e90 <MX_GPIO_Init+0x14c>)
 8000e32:	f001 fab9 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8000e36:	2304      	movs	r3, #4
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4812      	ldr	r0, [pc, #72]	; (8000e94 <MX_GPIO_Init+0x150>)
 8000e4c:	f001 faac 	bl	80023a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2105      	movs	r1, #5
 8000e54:	2006      	movs	r0, #6
 8000e56:	f001 fa63 	bl	8002320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e5a:	2006      	movs	r0, #6
 8000e5c:	f001 fa8c 	bl	8002378 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2105      	movs	r1, #5
 8000e64:	2008      	movs	r0, #8
 8000e66:	f001 fa5b 	bl	8002320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e6a:	2008      	movs	r0, #8
 8000e6c:	f001 fa84 	bl	8002378 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2105      	movs	r1, #5
 8000e74:	2017      	movs	r0, #23
 8000e76:	f001 fa53 	bl	8002320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e7a:	2017      	movs	r0, #23
 8000e7c:	f001 fa7c 	bl	8002378 <HAL_NVIC_EnableIRQ>

}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	; 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400

08000e98 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <MX_I2C2_Init+0x54>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <MX_I2C2_Init+0x58>)
 8000ea6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000ed6:	f001 fd73 	bl	80029c0 <HAL_I2C_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ee0:	f000 f962 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200002fc 	.word	0x200002fc
 8000eec:	40005800 	.word	0x40005800
 8000ef0:	000186a0 	.word	0x000186a0

08000ef4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <HAL_I2C_MspInit+0xa4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d13c      	bne.n	8000f90 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <HAL_I2C_MspInit+0xa8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <HAL_I2C_MspInit+0xa8>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_I2C_MspInit+0xa8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f44:	2304      	movs	r3, #4
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <HAL_I2C_MspInit+0xac>)
 8000f50:	f001 fa2a 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f54:	2308      	movs	r3, #8
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f58:	2312      	movs	r3, #18
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000f64:	2309      	movs	r3, #9
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <HAL_I2C_MspInit+0xac>)
 8000f70:	f001 fa1a 	bl	80023a8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_I2C_MspInit+0xa8>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_I2C_MspInit+0xa8>)
 8000f7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_I2C_MspInit+0xa8>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40005800 	.word	0x40005800
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000faa:	f000 fafd 	bl	80015a8 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_COLOR565(40, 80, 130));
 8000fae:	f642 2090 	movw	r0, #10896	; 0x2a90
 8000fb2:	f000 fccb 	bl	800194c <ST7735_FillScreen>
    ST7735_WriteString(8, 10, "ShortWave", Font_16x26, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <Display_Init+0x5c>)
 8000fb8:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000fbc:	9202      	str	r2, [sp, #8]
 8000fbe:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000fc2:	9201      	str	r2, [sp, #4]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	9200      	str	r2, [sp, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <Display_Init+0x60>)
 8000fcc:	210a      	movs	r1, #10
 8000fce:	2008      	movs	r0, #8
 8000fd0:	f000 fb7b 	bl	80016ca <ST7735_WriteString>
    ST7735_WriteString(34, 35, "receiver", Font_11x18, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <Display_Init+0x64>)
 8000fd6:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000fda:	9202      	str	r2, [sp, #8]
 8000fdc:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000fe0:	9201      	str	r2, [sp, #4]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	9200      	str	r2, [sp, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <Display_Init+0x68>)
 8000fea:	2123      	movs	r1, #35	; 0x23
 8000fec:	2022      	movs	r0, #34	; 0x22
 8000fee:	f000 fb6c 	bl	80016ca <ST7735_WriteString>
    HAL_Delay(3000);
 8000ff2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ff6:	f001 f8a1 	bl	800213c <HAL_Delay>
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000014 	.word	0x20000014
 8001004:	080113b0 	.word	0x080113b0
 8001008:	2000000c 	.word	0x2000000c
 800100c:	080113bc 	.word	0x080113bc

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f001 f850 	bl	80020b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f82a 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f7ff fe92 	bl	8000d44 <MX_GPIO_Init>
  MX_RTC_Init();
 8001020:	f000 f8d8 	bl	80011d4 <MX_RTC_Init>
  MX_TIM3_Init();
 8001024:	f000 fe60 	bl	8001ce8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001028:	f000 feb2 	bl	8001d90 <MX_TIM5_Init>
  MX_SPI1_Init();
 800102c:	f000 f958 	bl	80012e0 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001030:	f7ff ff32 	bl	8000e98 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8001034:	f00e f9b2 	bl	800f39c <MX_USB_DEVICE_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001038:	213c      	movs	r1, #60	; 0x3c
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <main+0x58>)
 800103c:	f006 f9d4 	bl	80073e8 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001040:	2104      	movs	r1, #4
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <main+0x5c>)
 8001044:	f005 ff0a 	bl	8006e5c <HAL_TIM_PWM_Start>

  /* Display */
  setBacklight(100);
 8001048:	2064      	movs	r0, #100	; 0x64
 800104a:	f7ff fbbb 	bl	80007c4 <setBacklight>
  Display_Init();
 800104e:	f7ff ffa9 	bl	8000fa4 <Display_Init>
  /* si5251*/
  si5351_Init(0);
 8001052:	2000      	movs	r0, #0
 8001054:	f009 f928 	bl	800a2a8 <si5351_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001058:	f00b fc04 	bl	800c864 <osKernelInitialize>
  MX_FREERTOS_Init();
 800105c:	f7ff fbf8 	bl	8000850 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001060:	f00b fc24 	bl	800c8ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001064:	e7fe      	b.n	8001064 <main+0x54>
 8001066:	bf00      	nop
 8001068:	20000428 	.word	0x20000428
 800106c:	20000470 	.word	0x20000470

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	; 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2230      	movs	r2, #48	; 0x30
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f00e ffde 	bl	8010040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <SystemClock_Config+0xcc>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b25      	ldr	r3, [pc, #148]	; (800113c <SystemClock_Config+0xcc>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <SystemClock_Config+0xd0>)
 80010ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <SystemClock_Config+0xd0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80010cc:	2305      	movs	r3, #5
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010d6:	2301      	movs	r3, #1
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010da:	2302      	movs	r3, #2
 80010dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010e4:	2319      	movs	r3, #25
 80010e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010e8:	23c0      	movs	r3, #192	; 0xc0
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010f0:	2304      	movs	r3, #4
 80010f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 fd07 	bl	8004b0c <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001104:	f000 f850 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110c:	2302      	movs	r3, #2
 800110e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2103      	movs	r1, #3
 8001124:	4618      	mov	r0, r3
 8001126:	f004 f819 	bl	800515c <HAL_RCC_ClockConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001130:	f000 f83a 	bl	80011a8 <Error_Handler>
  }
}
 8001134:	bf00      	nop
 8001136:	3750      	adds	r7, #80	; 0x50
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, uint8_t *ptr, int len) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS(ptr, len);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4619      	mov	r1, r3
 8001156:	68b8      	ldr	r0, [r7, #8]
 8001158:	f00e f9de 	bl	800f518 <CDC_Transmit_FS>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <_write+0x40>)
 8001162:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <_write+0x40>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d0f1      	beq.n	8001150 <_write+0xc>

    if (USBD_FAIL == rc) {
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <_write+0x40>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b03      	cmp	r3, #3
 8001172:	d101      	bne.n	8001178 <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 8001174:	2300      	movs	r3, #0
 8001176:	e000      	b.n	800117a <_write+0x36>
    }
    return len;
 8001178:	687b      	ldr	r3, [r7, #4]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000358 	.word	0x20000358

08001188 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1) {

  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001198:	d101      	bne.n	800119e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800119a:	f000 ffaf 	bl	80020fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error_Handler");
 80011b0:	4801      	ldr	r0, [pc, #4]	; (80011b8 <Error_Handler+0x10>)
 80011b2:	f00f f82d 	bl	8010210 <iprintf>
 80011b6:	e7fb      	b.n	80011b0 <Error_Handler+0x8>
 80011b8:	080113c8 	.word	0x080113c8

080011bc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011e8:	2300      	movs	r3, #0
 80011ea:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <MX_RTC_Init+0xac>)
 80011ee:	4a25      	ldr	r2, [pc, #148]	; (8001284 <MX_RTC_Init+0xb0>)
 80011f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <MX_RTC_Init+0xac>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_RTC_Init+0xac>)
 80011fa:	227f      	movs	r2, #127	; 0x7f
 80011fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <MX_RTC_Init+0xac>)
 8001200:	22ff      	movs	r2, #255	; 0xff
 8001202:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_RTC_Init+0xac>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_RTC_Init+0xac>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MX_RTC_Init+0xac>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001216:	481a      	ldr	r0, [pc, #104]	; (8001280 <MX_RTC_Init+0xac>)
 8001218:	f004 fc5c 	bl	8005ad4 <HAL_RTC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001222:	f7ff ffc1 	bl	80011a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2200      	movs	r2, #0
 800123e:	4619      	mov	r1, r3
 8001240:	480f      	ldr	r0, [pc, #60]	; (8001280 <MX_RTC_Init+0xac>)
 8001242:	f004 fd1f 	bl	8005c84 <HAL_RTC_SetTime>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800124c:	f7ff ffac 	bl	80011a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001250:	2305      	movs	r3, #5
 8001252:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001254:	2305      	movs	r3, #5
 8001256:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8001258:	2307      	movs	r3, #7
 800125a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 800125c:	2316      	movs	r3, #22
 800125e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	; (8001280 <MX_RTC_Init+0xac>)
 8001268:	f004 fe54 	bl	8005f14 <HAL_RTC_SetDate>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001272:	f7ff ff99 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000035c 	.word	0x2000035c
 8001284:	40002800 	.word	0x40002800

08001288 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
 80012a0:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <HAL_RTC_MspInit+0x50>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d111      	bne.n	80012d0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012ac:	2302      	movs	r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 f9f4 	bl	80056a8 <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80012c6:	f7ff ff6f 	bl	80011a8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <HAL_RTC_MspInit+0x54>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40002800 	.word	0x40002800
 80012dc:	42470e3c 	.word	0x42470e3c

080012e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_SPI1_Init+0x64>)
 80012e6:	4a18      	ldr	r2, [pc, #96]	; (8001348 <MX_SPI1_Init+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_SPI1_Init+0x64>)
 80012ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_SPI1_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_SPI1_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_SPI1_Init+0x64>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_SPI1_Init+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_SPI1_Init+0x64>)
 800130c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001310:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_SPI1_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <MX_SPI1_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_SPI1_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <MX_SPI1_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_SPI1_Init+0x64>)
 800132c:	220a      	movs	r2, #10
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_SPI1_Init+0x64>)
 8001332:	f004 ffb9 	bl	80062a8 <HAL_SPI_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800133c:	f7ff ff34 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000037c 	.word	0x2000037c
 8001348:	40013000 	.word	0x40013000

0800134c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <HAL_SPI_MspInit+0x84>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12b      	bne.n	80013c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_SPI_MspInit+0x88>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <HAL_SPI_MspInit+0x88>)
 8001378:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_SPI_MspInit+0x88>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_SPI_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <HAL_SPI_MspInit+0x88>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_SPI_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013a6:	23a0      	movs	r3, #160	; 0xa0
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013b6:	2305      	movs	r3, #5
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <HAL_SPI_MspInit+0x8c>)
 80013c2:	f000 fff1 	bl	80023a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40013000 	.word	0x40013000
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000

080013dc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2110      	movs	r1, #16
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <ST7735_Select+0x14>)
 80013e6:	f001 fa79 	bl	80028dc <HAL_GPIO_WritePin>
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40020000 	.word	0x40020000

080013f4 <ST7735_Unselect>:

void ST7735_Unselect() {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2110      	movs	r1, #16
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <ST7735_Unselect+0x14>)
 80013fe:	f001 fa6d 	bl	80028dc <HAL_GPIO_WritePin>
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40020000 	.word	0x40020000

0800140c <ST7735_Reset>:

static void ST7735_Reset() {
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2108      	movs	r1, #8
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <ST7735_Reset+0x24>)
 8001416:	f001 fa61 	bl	80028dc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800141a:	2005      	movs	r0, #5
 800141c:	f000 fe8e 	bl	800213c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	2108      	movs	r1, #8
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <ST7735_Reset+0x24>)
 8001426:	f001 fa59 	bl	80028dc <HAL_GPIO_WritePin>
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40020000 	.word	0x40020000

08001434 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2104      	movs	r1, #4
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <ST7735_WriteCommand+0x2c>)
 8001444:	f001 fa4a 	bl	80028dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001448:	1df9      	adds	r1, r7, #7
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	2201      	movs	r2, #1
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <ST7735_WriteCommand+0x30>)
 8001452:	f005 f8c5 	bl	80065e0 <HAL_SPI_Transmit>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40020000 	.word	0x40020000
 8001464:	2000037c 	.word	0x2000037c

08001468 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	2104      	movs	r1, #4
 8001476:	4807      	ldr	r0, [pc, #28]	; (8001494 <ST7735_WriteData+0x2c>)
 8001478:	f001 fa30 	bl	80028dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b29a      	uxth	r2, r3
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <ST7735_WriteData+0x30>)
 8001488:	f005 f8aa 	bl	80065e0 <HAL_SPI_Transmit>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40020000 	.word	0x40020000
 8001498:	2000037c 	.word	0x2000037c

0800149c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80014ae:	e034      	b.n	800151a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80014ba:	7afb      	ldrb	r3, [r7, #11]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ffb9 	bl	8001434 <ST7735_WriteCommand>

        numArgs = *addr++;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80014cc:	7abb      	ldrb	r3, [r7, #10]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80014d6:	7abb      	ldrb	r3, [r7, #10]
 80014d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014dc:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80014de:	7abb      	ldrb	r3, [r7, #10]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80014e4:	7abb      	ldrb	r3, [r7, #10]
 80014e6:	4619      	mov	r1, r3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ffbd 	bl	8001468 <ST7735_WriteData>
            addr += numArgs;
 80014ee:	7abb      	ldrb	r3, [r7, #10]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80014f6:	89bb      	ldrh	r3, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00e      	beq.n	800151a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001506:	89bb      	ldrh	r3, [r7, #12]
 8001508:	2bff      	cmp	r3, #255	; 0xff
 800150a:	d102      	bne.n	8001512 <ST7735_ExecuteCommandList+0x76>
 800150c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001510:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001512:	89bb      	ldrh	r3, [r7, #12]
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fe11 	bl	800213c <HAL_Delay>
    while(numCommands--) {
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	73fa      	strb	r2, [r7, #15]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1c5      	bne.n	80014b0 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800152e:	b590      	push	{r4, r7, lr}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	4604      	mov	r4, r0
 8001536:	4608      	mov	r0, r1
 8001538:	4611      	mov	r1, r2
 800153a:	461a      	mov	r2, r3
 800153c:	4623      	mov	r3, r4
 800153e:	71fb      	strb	r3, [r7, #7]
 8001540:	4603      	mov	r3, r0
 8001542:	71bb      	strb	r3, [r7, #6]
 8001544:	460b      	mov	r3, r1
 8001546:	717b      	strb	r3, [r7, #5]
 8001548:	4613      	mov	r3, r2
 800154a:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800154c:	202a      	movs	r0, #42	; 0x2a
 800154e:	f7ff ff71 	bl	8001434 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001552:	2300      	movs	r3, #0
 8001554:	733b      	strb	r3, [r7, #12]
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	3301      	adds	r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	737b      	strb	r3, [r7, #13]
 800155e:	2300      	movs	r3, #0
 8001560:	73bb      	strb	r3, [r7, #14]
 8001562:	797b      	ldrb	r3, [r7, #5]
 8001564:	3301      	adds	r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2104      	movs	r1, #4
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff79 	bl	8001468 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001576:	202b      	movs	r0, #43	; 0x2b
 8001578:	f7ff ff5c 	bl	8001434 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	331a      	adds	r3, #26
 8001580:	b2db      	uxtb	r3, r3
 8001582:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001584:	793b      	ldrb	r3, [r7, #4]
 8001586:	331a      	adds	r3, #26
 8001588:	b2db      	uxtb	r3, r3
 800158a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2104      	movs	r1, #4
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff68 	bl	8001468 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001598:	202c      	movs	r0, #44	; 0x2c
 800159a:	f7ff ff4b 	bl	8001434 <ST7735_WriteCommand>
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd90      	pop	{r4, r7, pc}
	...

080015a8 <ST7735_Init>:

void ST7735_Init() {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
    ST7735_Select();
 80015ac:	f7ff ff16 	bl	80013dc <ST7735_Select>
    ST7735_Reset();
 80015b0:	f7ff ff2c 	bl	800140c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80015b4:	4806      	ldr	r0, [pc, #24]	; (80015d0 <ST7735_Init+0x28>)
 80015b6:	f7ff ff71 	bl	800149c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <ST7735_Init+0x2c>)
 80015bc:	f7ff ff6e 	bl	800149c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <ST7735_Init+0x30>)
 80015c2:	f7ff ff6b 	bl	800149c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80015c6:	f7ff ff15 	bl	80013f4 <ST7735_Unselect>
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	08013f58 	.word	0x08013f58
 80015d4:	08013f94 	.word	0x08013f94
 80015d8:	08013fa4 	.word	0x08013fa4

080015dc <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80015dc:	b082      	sub	sp, #8
 80015de:	b590      	push	{r4, r7, lr}
 80015e0:	b089      	sub	sp, #36	; 0x24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
 80015ea:	460b      	mov	r3, r1
 80015ec:	80bb      	strh	r3, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	b2d8      	uxtb	r0, r3
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	b2d9      	uxtb	r1, r3
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001602:	4413      	add	r3, r2
 8001604:	b2db      	uxtb	r3, r3
 8001606:	3b01      	subs	r3, #1
 8001608:	b2dc      	uxtb	r4, r3
 800160a:	88bb      	ldrh	r3, [r7, #4]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001612:	4413      	add	r3, r2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	3b01      	subs	r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4622      	mov	r2, r4
 800161c:	f7ff ff87 	bl	800152e <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	e043      	b.n	80016ae <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	3b20      	subs	r3, #32
 800162c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001630:	fb01 f303 	mul.w	r3, r1, r3
 8001634:	4619      	mov	r1, r3
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	440b      	add	r3, r1
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e029      	b.n	800169c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00e      	beq.n	8001676 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001658:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	b29b      	uxth	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	743b      	strb	r3, [r7, #16]
 8001662:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001664:	b2db      	uxtb	r3, r3
 8001666:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	2102      	movs	r1, #2
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fefa 	bl	8001468 <ST7735_WriteData>
 8001674:	e00f      	b.n	8001696 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001676:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	b29b      	uxth	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	733b      	strb	r3, [r7, #12]
 8001682:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001686:	b2db      	uxtb	r3, r3
 8001688:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	2102      	movs	r1, #2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fee9 	bl	8001468 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	3301      	adds	r3, #1
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80016a0:	461a      	mov	r2, r3
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d3cf      	bcc.n	8001648 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	3301      	adds	r3, #1
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80016b2:	461a      	mov	r2, r3
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d3b5      	bcc.n	8001626 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
 80016be:	3724      	adds	r7, #36	; 0x24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80016c6:	b002      	add	sp, #8
 80016c8:	4770      	bx	lr

080016ca <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80016ca:	b082      	sub	sp, #8
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af04      	add	r7, sp, #16
 80016d2:	603a      	str	r2, [r7, #0]
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
 80016da:	460b      	mov	r3, r1
 80016dc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80016de:	f7ff fe7d 	bl	80013dc <ST7735_Select>

    while(*str) {
 80016e2:	e02d      	b.n	8001740 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	7d3a      	ldrb	r2, [r7, #20]
 80016e8:	4413      	add	r3, r2
 80016ea:	2b9f      	cmp	r3, #159	; 0x9f
 80016ec:	dd13      	ble.n	8001716 <ST7735_WriteString+0x4c>
            x = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80016f2:	7d7b      	ldrb	r3, [r7, #21]
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	88bb      	ldrh	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80016fc:	88bb      	ldrh	r3, [r7, #4]
 80016fe:	7d7a      	ldrb	r2, [r7, #21]
 8001700:	4413      	add	r3, r2
 8001702:	2b4f      	cmp	r3, #79	; 0x4f
 8001704:	dc21      	bgt.n	800174a <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b20      	cmp	r3, #32
 800170c:	d103      	bne.n	8001716 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	603b      	str	r3, [r7, #0]
                continue;
 8001714:	e014      	b.n	8001740 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	88b9      	ldrh	r1, [r7, #4]
 800171c:	88f8      	ldrh	r0, [r7, #6]
 800171e:	8c3b      	ldrh	r3, [r7, #32]
 8001720:	9302      	str	r3, [sp, #8]
 8001722:	8bbb      	ldrh	r3, [r7, #28]
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f7ff ff56 	bl	80015dc <ST7735_WriteChar>
        x += font.width;
 8001730:	7d3b      	ldrb	r3, [r7, #20]
 8001732:	b29a      	uxth	r2, r3
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	4413      	add	r3, r2
 8001738:	80fb      	strh	r3, [r7, #6]
        str++;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1cd      	bne.n	80016e4 <ST7735_WriteString+0x1a>
 8001748:	e000      	b.n	800174c <ST7735_WriteString+0x82>
                break;
 800174a:	bf00      	nop
    }

    ST7735_Unselect();
 800174c:	f7ff fe52 	bl	80013f4 <ST7735_Unselect>
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800175a:	b002      	add	sp, #8
 800175c:	4770      	bx	lr
	...

08001760 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	4604      	mov	r4, r0
 8001768:	4608      	mov	r0, r1
 800176a:	4611      	mov	r1, r2
 800176c:	461a      	mov	r2, r3
 800176e:	4623      	mov	r3, r4
 8001770:	80fb      	strh	r3, [r7, #6]
 8001772:	4603      	mov	r3, r0
 8001774:	80bb      	strh	r3, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	807b      	strh	r3, [r7, #2]
 800177a:	4613      	mov	r3, r2
 800177c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	2b9f      	cmp	r3, #159	; 0x9f
 8001782:	d857      	bhi.n	8001834 <ST7735_FillRectangle+0xd4>
 8001784:	88bb      	ldrh	r3, [r7, #4]
 8001786:	2b4f      	cmp	r3, #79	; 0x4f
 8001788:	d854      	bhi.n	8001834 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800178a:	88fa      	ldrh	r2, [r7, #6]
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	4413      	add	r3, r2
 8001790:	2ba0      	cmp	r3, #160	; 0xa0
 8001792:	dd03      	ble.n	800179c <ST7735_FillRectangle+0x3c>
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800179a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800179c:	88ba      	ldrh	r2, [r7, #4]
 800179e:	883b      	ldrh	r3, [r7, #0]
 80017a0:	4413      	add	r3, r2
 80017a2:	2b50      	cmp	r3, #80	; 0x50
 80017a4:	dd03      	ble.n	80017ae <ST7735_FillRectangle+0x4e>
 80017a6:	88bb      	ldrh	r3, [r7, #4]
 80017a8:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80017ac:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80017ae:	f7ff fe15 	bl	80013dc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	b2d8      	uxtb	r0, r3
 80017b6:	88bb      	ldrh	r3, [r7, #4]
 80017b8:	b2d9      	uxtb	r1, r3
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b2dc      	uxtb	r4, r3
 80017ca:	88bb      	ldrh	r3, [r7, #4]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	883b      	ldrh	r3, [r7, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4622      	mov	r2, r4
 80017dc:	f7ff fea7 	bl	800152e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80017e0:	8c3b      	ldrh	r3, [r7, #32]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	733b      	strb	r3, [r7, #12]
 80017ea:	8c3b      	ldrh	r3, [r7, #32]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2104      	movs	r1, #4
 80017f4:	4811      	ldr	r0, [pc, #68]	; (800183c <ST7735_FillRectangle+0xdc>)
 80017f6:	f001 f871 	bl	80028dc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80017fa:	883b      	ldrh	r3, [r7, #0]
 80017fc:	80bb      	strh	r3, [r7, #4]
 80017fe:	e013      	b.n	8001828 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	80fb      	strh	r3, [r7, #6]
 8001804:	e00a      	b.n	800181c <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001806:	f107 010c 	add.w	r1, r7, #12
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	2202      	movs	r2, #2
 8001810:	480b      	ldr	r0, [pc, #44]	; (8001840 <ST7735_FillRectangle+0xe0>)
 8001812:	f004 fee5 	bl	80065e0 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	3b01      	subs	r3, #1
 800181a:	80fb      	strh	r3, [r7, #6]
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f1      	bne.n	8001806 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8001822:	88bb      	ldrh	r3, [r7, #4]
 8001824:	3b01      	subs	r3, #1
 8001826:	80bb      	strh	r3, [r7, #4]
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1e8      	bne.n	8001800 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800182e:	f7ff fde1 	bl	80013f4 <ST7735_Unselect>
 8001832:	e000      	b.n	8001836 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001834:	bf00      	nop
}
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	40020000 	.word	0x40020000
 8001840:	2000037c 	.word	0x2000037c

08001844 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	4604      	mov	r4, r0
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4623      	mov	r3, r4
 8001854:	80fb      	strh	r3, [r7, #6]
 8001856:	4603      	mov	r3, r0
 8001858:	80bb      	strh	r3, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	807b      	strh	r3, [r7, #2]
 800185e:	4613      	mov	r3, r2
 8001860:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	2b9f      	cmp	r3, #159	; 0x9f
 8001866:	d869      	bhi.n	800193c <ST7735_FillRectangleFast+0xf8>
 8001868:	88bb      	ldrh	r3, [r7, #4]
 800186a:	2b4f      	cmp	r3, #79	; 0x4f
 800186c:	d866      	bhi.n	800193c <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800186e:	88fa      	ldrh	r2, [r7, #6]
 8001870:	887b      	ldrh	r3, [r7, #2]
 8001872:	4413      	add	r3, r2
 8001874:	2ba0      	cmp	r3, #160	; 0xa0
 8001876:	dd03      	ble.n	8001880 <ST7735_FillRectangleFast+0x3c>
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800187e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001880:	88ba      	ldrh	r2, [r7, #4]
 8001882:	883b      	ldrh	r3, [r7, #0]
 8001884:	4413      	add	r3, r2
 8001886:	2b50      	cmp	r3, #80	; 0x50
 8001888:	dd03      	ble.n	8001892 <ST7735_FillRectangleFast+0x4e>
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001890:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001892:	f7ff fda3 	bl	80013dc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	b2d8      	uxtb	r0, r3
 800189a:	88bb      	ldrh	r3, [r7, #4]
 800189c:	b2d9      	uxtb	r1, r3
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b2dc      	uxtb	r4, r3
 80018ae:	88bb      	ldrh	r3, [r7, #4]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	883b      	ldrh	r3, [r7, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4622      	mov	r2, r4
 80018c0:	f7ff fe35 	bl	800152e <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 80018c4:	8c3b      	ldrh	r3, [r7, #32]
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	723b      	strb	r3, [r7, #8]
 80018ce:	8c3b      	ldrh	r3, [r7, #32]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f00e fb93 	bl	8010004 <malloc>
 80018de:	4603      	mov	r3, r0
 80018e0:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 80018e2:	2300      	movs	r3, #0
 80018e4:	80fb      	strh	r3, [r7, #6]
 80018e6:	e008      	b.n	80018fa <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	893a      	ldrh	r2, [r7, #8]
 80018f2:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	3301      	adds	r3, #1
 80018f8:	80fb      	strh	r3, [r7, #6]
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	887b      	ldrh	r3, [r7, #2]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d3f2      	bcc.n	80018e8 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	2104      	movs	r1, #4
 8001906:	480f      	ldr	r0, [pc, #60]	; (8001944 <ST7735_FillRectangleFast+0x100>)
 8001908:	f000 ffe8 	bl	80028dc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 800190c:	883b      	ldrh	r3, [r7, #0]
 800190e:	80bb      	strh	r3, [r7, #4]
 8001910:	e00b      	b.n	800192a <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	68f9      	ldr	r1, [r7, #12]
 800191e:	480a      	ldr	r0, [pc, #40]	; (8001948 <ST7735_FillRectangleFast+0x104>)
 8001920:	f004 fe5e 	bl	80065e0 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	80bb      	strh	r3, [r7, #4]
 800192a:	88bb      	ldrh	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <ST7735_FillRectangleFast+0xce>

    free(line);
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f00e fb6f 	bl	8010014 <free>
    ST7735_Unselect();
 8001936:	f7ff fd5d 	bl	80013f4 <ST7735_Unselect>
 800193a:	e000      	b.n	800193e <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800193c:	bf00      	nop
}
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}
 8001944:	40020000 	.word	0x40020000
 8001948:	2000037c 	.word	0x2000037c

0800194c <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af02      	add	r7, sp, #8
 8001952:	4603      	mov	r3, r0
 8001954:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2350      	movs	r3, #80	; 0x50
 800195c:	22a0      	movs	r2, #160	; 0xa0
 800195e:	2100      	movs	r1, #0
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff fefd 	bl	8001760 <ST7735_FillRectangle>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_MspInit+0x54>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <HAL_MspInit+0x54>)
 8001980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_MspInit+0x54>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_MspInit+0x54>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_MspInit+0x54>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_MspInit+0x54>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	210f      	movs	r1, #15
 80019b2:	f06f 0001 	mvn.w	r0, #1
 80019b6:	f000 fcb3 	bl	8002320 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08c      	sub	sp, #48	; 0x30
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	201c      	movs	r0, #28
 80019de:	f000 fc9f 	bl	8002320 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019e2:	201c      	movs	r0, #28
 80019e4:	f000 fcc8 	bl	8002378 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_InitTick+0xa8>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_InitTick+0xa8>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6413      	str	r3, [r2, #64]	; 0x40
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_InitTick+0xa8>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a04:	f107 0210 	add.w	r2, r7, #16
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fe18 	bl	8005644 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a14:	f003 fe02 	bl	800561c <HAL_RCC_GetPCLK1Freq>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <HAL_InitTick+0xac>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	0c9b      	lsrs	r3, r3, #18
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_InitTick+0xb0>)
 8001a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_InitTick+0xb0>)
 8001a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a3a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <HAL_InitTick+0xb0>)
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_InitTick+0xb0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_InitTick+0xb0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001a4e:	480a      	ldr	r0, [pc, #40]	; (8001a78 <HAL_InitTick+0xb0>)
 8001a50:	f004 ffdc 	bl	8006a0c <HAL_TIM_Base_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d104      	bne.n	8001a64 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <HAL_InitTick+0xb0>)
 8001a5c:	f005 f89c 	bl	8006b98 <HAL_TIM_Base_Start_IT>
 8001a60:	4603      	mov	r3, r0
 8001a62:	e000      	b.n	8001a66 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3730      	adds	r7, #48	; 0x30
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	431bde83 	.word	0x431bde83
 8001a78:	200003d4 	.word	0x200003d4

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler+0x4>

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BAND_BTN_Pin);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f000 ff6f 	bl	8002990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8001aba:	2004      	movs	r0, #4
 8001abc:	f000 ff68 	bl	8002990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_BTN_Pin);
 8001ac8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001acc:	f000 ff60 	bl	8002990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <TIM2_IRQHandler+0x10>)
 8001ada:	f005 fd43 	bl	8007564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200003d4 	.word	0x200003d4

08001ae8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001aec:	4808      	ldr	r0, [pc, #32]	; (8001b10 <TIM3_IRQHandler+0x28>)
 8001aee:	f005 fd39 	bl	8007564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <TIM3_IRQHandler+0x2c>)
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <TIM3_IRQHandler+0x2c>)
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <TIM3_IRQHandler+0x2c>)
 8001b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b08:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000428 	.word	0x20000428
 8001b14:	40000400 	.word	0x40000400

08001b18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <TIM5_IRQHandler+0x10>)
 8001b1e:	f005 fd21 	bl	8007564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000470 	.word	0x20000470

08001b2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <OTG_FS_IRQHandler+0x10>)
 8001b32:	f001 febe 	bl	80038b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2001abc0 	.word	0x2001abc0

08001b40 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
	buttonNumber = -1;
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001b4c:	22ff      	movs	r2, #255	; 0xff
 8001b4e:	701a      	strb	r2, [r3, #0]
    if(GPIO_Pin == ENC_BTN_Pin)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d103      	bne.n	8001b5e <HAL_GPIO_EXTI_Callback+0x1e>
    {
		buttonNumber = 0;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	e00d      	b.n	8001b7a <HAL_GPIO_EXTI_Callback+0x3a>
    } else if(GPIO_Pin == BAND_BTN_Pin)
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d103      	bne.n	8001b6c <HAL_GPIO_EXTI_Callback+0x2c>
    {
		buttonNumber = 1;
 8001b64:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	e006      	b.n	8001b7a <HAL_GPIO_EXTI_Callback+0x3a>
    } else if(GPIO_Pin == MENU_BTN_Pin)
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b72:	d102      	bne.n	8001b7a <HAL_GPIO_EXTI_Callback+0x3a>
    	buttonNumber = 2;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001b76:	2202      	movs	r2, #2
 8001b78:	701a      	strb	r2, [r3, #0]
	if(buttonNumber < 0) {
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8001b7a:	f000 fad3 	bl	8002124 <HAL_GetTick>
 8001b7e:	60f8      	str	r0, [r7, #12]
    if(tstamp - lastPressed < 250)
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2bf9      	cmp	r3, #249	; 0xf9
 8001b8a:	d909      	bls.n	8001ba0 <HAL_GPIO_EXTI_Callback+0x60>
        return;
    lastPressed = tstamp;
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_GPIO_EXTI_Callback+0x70>)
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	5499      	strb	r1, [r3, r2]
 8001b9e:	e000      	b.n	8001ba2 <HAL_GPIO_EXTI_Callback+0x62>
        return;
 8001ba0:	bf00      	nop
}
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200002e4 	.word	0x200002e4
 8001bac:	20000420 	.word	0x20000420
 8001bb0:	2000041c 	.word	0x2000041c

08001bb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e00a      	b.n	8001bdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bc6:	f3af 8000 	nop.w
 8001bca:	4601      	mov	r1, r0
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	60ba      	str	r2, [r7, #8]
 8001bd2:	b2ca      	uxtb	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbf0      	blt.n	8001bc6 <_read+0x12>
	}

return len;
 8001be4:	687b      	ldr	r3, [r7, #4]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c16:	605a      	str	r2, [r3, #4]
	return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_isatty>:

int _isatty(int file)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
	return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c88:	f00e f898 	bl	800fdbc <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <_sbrk+0x64>)
 8001ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20020000 	.word	0x20020000
 8001cb8:	00000800 	.word	0x00000800
 8001cbc:	20000424 	.word	0x20000424
 8001cc0:	2001b300 	.word	0x2001b300

08001cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <SystemInit+0x20>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <SystemInit+0x20>)
 8001cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08c      	sub	sp, #48	; 0x30
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2224      	movs	r2, #36	; 0x24
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f00e f9a2 	bl	8010040 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d04:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <MX_TIM3_Init+0xa0>)
 8001d06:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <MX_TIM3_Init+0xa4>)
 8001d08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <MX_TIM3_Init+0xa0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <MX_TIM3_Init+0xa0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <MX_TIM3_Init+0xa0>)
 8001d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <MX_TIM3_Init+0xa0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <MX_TIM3_Init+0xa0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d32:	2301      	movs	r3, #1
 8001d34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d42:	2301      	movs	r3, #1
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	4619      	mov	r1, r3
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <MX_TIM3_Init+0xa0>)
 8001d56:	f005 f9ad 	bl	80070b4 <HAL_TIM_Encoder_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d60:	f7ff fa22 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_TIM3_Init+0xa0>)
 8001d72:	f006 fd79 	bl	8008868 <HAL_TIMEx_MasterConfigSynchronization>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d7c:	f7ff fa14 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	3730      	adds	r7, #48	; 0x30
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000428 	.word	0x20000428
 8001d8c:	40000400 	.word	0x40000400

08001d90 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08e      	sub	sp, #56	; 0x38
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
 8001dbc:	615a      	str	r2, [r3, #20]
 8001dbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dc0:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001dc2:	4a2d      	ldr	r2, [pc, #180]	; (8001e78 <MX_TIM5_Init+0xe8>)
 8001dc4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 48-1;
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001dc8:	222f      	movs	r2, #47	; 0x2f
 8001dca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dcc:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8001dd2:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001dd4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001dd8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de0:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001de6:	4823      	ldr	r0, [pc, #140]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001de8:	f004 fe10 	bl	8006a0c <HAL_TIM_Base_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001df2:	f7ff f9d9 	bl	80011a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001dfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e00:	4619      	mov	r1, r3
 8001e02:	481c      	ldr	r0, [pc, #112]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001e04:	f005 fe5c 	bl	8007ac0 <HAL_TIM_ConfigClockSource>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001e0e:	f7ff f9cb 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e12:	4818      	ldr	r0, [pc, #96]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001e14:	f004 ff52 	bl	8006cbc <HAL_TIM_PWM_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001e1e:	f7ff f9c3 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e2a:	f107 0320 	add.w	r3, r7, #32
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4810      	ldr	r0, [pc, #64]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001e32:	f006 fd19 	bl	8008868 <HAL_TIMEx_MasterConfigSynchronization>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001e3c:	f7ff f9b4 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e40:	2360      	movs	r3, #96	; 0x60
 8001e42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2204      	movs	r2, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4807      	ldr	r0, [pc, #28]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001e58:	f005 fc8c 	bl	8007774 <HAL_TIM_PWM_ConfigChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001e62:	f7ff f9a1 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e66:	4803      	ldr	r0, [pc, #12]	; (8001e74 <MX_TIM5_Init+0xe4>)
 8001e68:	f000 f8a0 	bl	8001fac <HAL_TIM_MspPostInit>

}
 8001e6c:	bf00      	nop
 8001e6e:	3738      	adds	r7, #56	; 0x38
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000470 	.word	0x20000470
 8001e78:	40000c00 	.word	0x40000c00

08001e7c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d151      	bne.n	8001f42 <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a23      	ldr	r2, [pc, #140]	; (8001f50 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001ef2:	2340      	movs	r3, #64	; 0x40
 8001ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f02:	2302      	movs	r3, #2
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4811      	ldr	r0, [pc, #68]	; (8001f54 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001f0e:	f000 fa4b 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001f12:	2320      	movs	r3, #32
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f22:	2302      	movs	r3, #2
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480a      	ldr	r0, [pc, #40]	; (8001f58 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f2e:	f000 fa3b 	bl	80023a8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2105      	movs	r1, #5
 8001f36:	201d      	movs	r0, #29
 8001f38:	f000 f9f2 	bl	8002320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f3c:	201d      	movs	r0, #29
 8001f3e:	f000 fa1b 	bl	8002378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f42:	bf00      	nop
 8001f44:	3728      	adds	r7, #40	; 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400

08001f5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_TIM_Base_MspInit+0x48>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d115      	bne.n	8001f9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HAL_TIM_Base_MspInit+0x4c>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	4a0c      	ldr	r2, [pc, #48]	; (8001fa8 <HAL_TIM_Base_MspInit+0x4c>)
 8001f78:	f043 0308 	orr.w	r3, r3, #8
 8001f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_TIM_Base_MspInit+0x4c>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2105      	movs	r1, #5
 8001f8e:	2032      	movs	r0, #50	; 0x32
 8001f90:	f000 f9c6 	bl	8002320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f94:	2032      	movs	r0, #50	; 0x32
 8001f96:	f000 f9ef 	bl	8002378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40000c00 	.word	0x40000c00
 8001fa8:	40023800 	.word	0x40023800

08001fac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a12      	ldr	r2, [pc, #72]	; (8002014 <HAL_TIM_MspPostInit+0x68>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d11d      	bne.n	800200a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_TIM_MspPostInit+0x6c>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <HAL_TIM_MspPostInit+0x6c>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_TIM_MspPostInit+0x6c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8001fea:	2302      	movs	r3, #2
 8001fec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <HAL_TIM_MspPostInit+0x70>)
 8002006:	f000 f9cf 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800200a:	bf00      	nop
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40023800 	.word	0x40023800
 800201c:	40020000 	.word	0x40020000

08002020 <USR_TIM_PWM_OpenTim5Ch2>:
  /* USER CODE END TIM5_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USR_TIM_PWM_OpenTim5Ch2() {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002024:	2104      	movs	r1, #4
 8002026:	4802      	ldr	r0, [pc, #8]	; (8002030 <USR_TIM_PWM_OpenTim5Ch2+0x10>)
 8002028:	f004 ff18 	bl	8006e5c <HAL_TIM_PWM_Start>
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000470 	.word	0x20000470

08002034 <USR_TIM_PWM_SetCompare>:
void USR_TIM_PWM_CloseTim5Ch2() {
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
}

//duty == 0~1000
void USR_TIM_PWM_SetCompare(uint16_t duty) {
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	80fb      	strh	r3, [r7, #6]
	if (duty > 1000) // здесь 1000, потому что порог подсчета установлен в 1 тысячу
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002044:	d902      	bls.n	800204c <USR_TIM_PWM_SetCompare+0x18>
			{
		duty = 1000;
 8002046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204a:	80fb      	strh	r3, [r7, #6]
	}
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, duty);
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <USR_TIM_PWM_SetCompare+0x2c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	88fa      	ldrh	r2, [r7, #6]
 8002052:	639a      	str	r2, [r3, #56]	; 0x38

}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	20000470 	.word	0x20000470

08002064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800209c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002068:	480d      	ldr	r0, [pc, #52]	; (80020a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800206a:	490e      	ldr	r1, [pc, #56]	; (80020a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800206c:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002070:	e002      	b.n	8002078 <LoopCopyDataInit>

08002072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002076:	3304      	adds	r3, #4

08002078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800207c:	d3f9      	bcc.n	8002072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207e:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002080:	4c0b      	ldr	r4, [pc, #44]	; (80020b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002084:	e001      	b.n	800208a <LoopFillZerobss>

08002086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002088:	3204      	adds	r2, #4

0800208a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800208c:	d3fb      	bcc.n	8002086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800208e:	f7ff fe19 	bl	8001cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002092:	f00d ff8f 	bl	800ffb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002096:	f7fe ffbb 	bl	8001010 <main>
  bx  lr    
 800209a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800209c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a4:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 80020a8:	08014090 	.word	0x08014090
  ldr r2, =_sbss
 80020ac:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 80020b0:	2001b2fc 	.word	0x2001b2fc

080020b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b4:	e7fe      	b.n	80020b4 <ADC_IRQHandler>
	...

080020b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_Init+0x40>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <HAL_Init+0x40>)
 80020c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_Init+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <HAL_Init+0x40>)
 80020ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <HAL_Init+0x40>)
 80020da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e0:	2003      	movs	r0, #3
 80020e2:	f000 f8fd 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e6:	200f      	movs	r0, #15
 80020e8:	f7ff fc6e 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ec:	f7ff fc40 	bl	8001970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023c00 	.word	0x40023c00

080020fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_IncTick+0x20>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_IncTick+0x24>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4413      	add	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_IncTick+0x24>)
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000158 	.word	0x20000158
 8002120:	200004b8 	.word	0x200004b8

08002124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return uwTick;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_GetTick+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	200004b8 	.word	0x200004b8

0800213c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff ffee 	bl	8002124 <HAL_GetTick>
 8002148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002154:	d005      	beq.n	8002162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_Delay+0x44>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002162:	bf00      	nop
 8002164:	f7ff ffde 	bl	8002124 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	d8f7      	bhi.n	8002164 <HAL_Delay+0x28>
  {
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000158 	.word	0x20000158

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4907      	ldr	r1, [pc, #28]	; (8002220 <__NVIC_EnableIRQ+0x38>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	490c      	ldr	r1, [pc, #48]	; (8002270 <__NVIC_SetPriority+0x4c>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4908      	ldr	r1, [pc, #32]	; (8002274 <__NVIC_SetPriority+0x50>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3b04      	subs	r3, #4
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	bf28      	it	cs
 8002296:	2304      	movcs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3304      	adds	r3, #4
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d902      	bls.n	80022a8 <NVIC_EncodePriority+0x30>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b03      	subs	r3, #3
 80022a6:	e000      	b.n	80022aa <NVIC_EncodePriority+0x32>
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43d9      	mvns	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	4313      	orrs	r3, r2
         );
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b07      	cmp	r3, #7
 80022ec:	d00f      	beq.n	800230e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d00c      	beq.n	800230e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d009      	beq.n	800230e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d006      	beq.n	800230e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d003      	beq.n	800230e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002306:	2190      	movs	r1, #144	; 0x90
 8002308:	4804      	ldr	r0, [pc, #16]	; (800231c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800230a:	f7fe ff57 	bl	80011bc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ff38 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	080113d8 	.word	0x080113d8

08002320 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b0f      	cmp	r3, #15
 8002336:	d903      	bls.n	8002340 <HAL_NVIC_SetPriority+0x20>
 8002338:	21a8      	movs	r1, #168	; 0xa8
 800233a:	480e      	ldr	r0, [pc, #56]	; (8002374 <HAL_NVIC_SetPriority+0x54>)
 800233c:	f7fe ff3e 	bl	80011bc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	d903      	bls.n	800234e <HAL_NVIC_SetPriority+0x2e>
 8002346:	21a9      	movs	r1, #169	; 0xa9
 8002348:	480a      	ldr	r0, [pc, #40]	; (8002374 <HAL_NVIC_SetPriority+0x54>)
 800234a:	f7fe ff37 	bl	80011bc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800234e:	f7ff ff3d 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002352:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	6978      	ldr	r0, [r7, #20]
 800235a:	f7ff ff8d 	bl	8002278 <NVIC_EncodePriority>
 800235e:	4602      	mov	r2, r0
 8002360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff5c 	bl	8002224 <__NVIC_SetPriority>
}
 800236c:	bf00      	nop
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	080113d8 	.word	0x080113d8

08002378 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	da03      	bge.n	8002392 <HAL_NVIC_EnableIRQ+0x1a>
 800238a:	21bc      	movs	r1, #188	; 0xbc
 800238c:	4805      	ldr	r0, [pc, #20]	; (80023a4 <HAL_NVIC_EnableIRQ+0x2c>)
 800238e:	f7fe ff15 	bl	80011bc <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff26 	bl	80021e8 <__NVIC_EnableIRQ>
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	080113d8 	.word	0x080113d8

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a33      	ldr	r2, [pc, #204]	; (8002490 <HAL_GPIO_Init+0xe8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d017      	beq.n	80023f6 <HAL_GPIO_Init+0x4e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a32      	ldr	r2, [pc, #200]	; (8002494 <HAL_GPIO_Init+0xec>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x4e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a31      	ldr	r2, [pc, #196]	; (8002498 <HAL_GPIO_Init+0xf0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00f      	beq.n	80023f6 <HAL_GPIO_Init+0x4e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a30      	ldr	r2, [pc, #192]	; (800249c <HAL_GPIO_Init+0xf4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00b      	beq.n	80023f6 <HAL_GPIO_Init+0x4e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a2f      	ldr	r2, [pc, #188]	; (80024a0 <HAL_GPIO_Init+0xf8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <HAL_GPIO_Init+0x4e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a2e      	ldr	r2, [pc, #184]	; (80024a4 <HAL_GPIO_Init+0xfc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x4e>
 80023ee:	21ac      	movs	r1, #172	; 0xac
 80023f0:	482d      	ldr	r0, [pc, #180]	; (80024a8 <HAL_GPIO_Init+0x100>)
 80023f2:	f7fe fee3 	bl	80011bc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_GPIO_Init+0x64>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	041b      	lsls	r3, r3, #16
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x6c>
 800240c:	21ad      	movs	r1, #173	; 0xad
 800240e:	4826      	ldr	r0, [pc, #152]	; (80024a8 <HAL_GPIO_Init+0x100>)
 8002410:	f7fe fed4 	bl	80011bc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d035      	beq.n	8002488 <HAL_GPIO_Init+0xe0>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d031      	beq.n	8002488 <HAL_GPIO_Init+0xe0>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b11      	cmp	r3, #17
 800242a:	d02d      	beq.n	8002488 <HAL_GPIO_Init+0xe0>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d029      	beq.n	8002488 <HAL_GPIO_Init+0xe0>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b12      	cmp	r3, #18
 800243a:	d025      	beq.n	8002488 <HAL_GPIO_Init+0xe0>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002444:	d020      	beq.n	8002488 <HAL_GPIO_Init+0xe0>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800244e:	d01b      	beq.n	8002488 <HAL_GPIO_Init+0xe0>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002458:	d016      	beq.n	8002488 <HAL_GPIO_Init+0xe0>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002462:	d011      	beq.n	8002488 <HAL_GPIO_Init+0xe0>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800246c:	d00c      	beq.n	8002488 <HAL_GPIO_Init+0xe0>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002476:	d007      	beq.n	8002488 <HAL_GPIO_Init+0xe0>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0xe0>
 8002480:	21ae      	movs	r1, #174	; 0xae
 8002482:	4809      	ldr	r0, [pc, #36]	; (80024a8 <HAL_GPIO_Init+0x100>)
 8002484:	f7fe fe9a 	bl	80011bc <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	e20c      	b.n	80028a8 <HAL_GPIO_Init+0x500>
 800248e:	bf00      	nop
 8002490:	40020000 	.word	0x40020000
 8002494:	40020400 	.word	0x40020400
 8002498:	40020800 	.word	0x40020800
 800249c:	40020c00 	.word	0x40020c00
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40021c00 	.word	0x40021c00
 80024a8:	08011414 	.word	0x08011414
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 81ec 	bne.w	80028a2 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d005      	beq.n	80024e2 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d144      	bne.n	800256c <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00f      	beq.n	800250a <HAL_GPIO_Init+0x162>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d00b      	beq.n	800250a <HAL_GPIO_Init+0x162>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x162>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x162>
 8002502:	21c0      	movs	r1, #192	; 0xc0
 8002504:	4884      	ldr	r0, [pc, #528]	; (8002718 <HAL_GPIO_Init+0x370>)
 8002506:	f7fe fe59 	bl	80011bc <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002540:	2201      	movs	r2, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 0201 	and.w	r2, r3, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b03      	cmp	r3, #3
 8002576:	d027      	beq.n	80025c8 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00b      	beq.n	8002598 <HAL_GPIO_Init+0x1f0>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d007      	beq.n	8002598 <HAL_GPIO_Init+0x1f0>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x1f0>
 8002590:	21d1      	movs	r1, #209	; 0xd1
 8002592:	4861      	ldr	r0, [pc, #388]	; (8002718 <HAL_GPIO_Init+0x370>)
 8002594:	f7fe fe12 	bl	80011bc <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	f040 80a3 	bne.w	800271c <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d077      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b09      	cmp	r3, #9
 80025e4:	d073      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d06f      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d06b      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d067      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d063      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d05f      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d05b      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d057      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d053      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d04f      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b04      	cmp	r3, #4
 8002634:	d04b      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d047      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d043      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b05      	cmp	r3, #5
 800264c:	d03f      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b05      	cmp	r3, #5
 8002654:	d03b      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b05      	cmp	r3, #5
 800265c:	d037      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b06      	cmp	r3, #6
 8002664:	d033      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b06      	cmp	r3, #6
 800266c:	d02f      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b05      	cmp	r3, #5
 8002674:	d02b      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b06      	cmp	r3, #6
 800267c:	d027      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b07      	cmp	r3, #7
 8002684:	d023      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b07      	cmp	r3, #7
 800268c:	d01f      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b07      	cmp	r3, #7
 8002694:	d01b      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b08      	cmp	r3, #8
 800269c:	d017      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	2b0a      	cmp	r3, #10
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b09      	cmp	r3, #9
 80026ac:	d00f      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b09      	cmp	r3, #9
 80026b4:	d00b      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d007      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b0f      	cmp	r3, #15
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x326>
 80026c6:	21de      	movs	r1, #222	; 0xde
 80026c8:	4813      	ldr	r0, [pc, #76]	; (8002718 <HAL_GPIO_Init+0x370>)
 80026ca:	f7fe fd77 	bl	80011bc <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	08da      	lsrs	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3208      	adds	r2, #8
 80026d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	08da      	lsrs	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3208      	adds	r2, #8
 8002710:	69b9      	ldr	r1, [r7, #24]
 8002712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002716:	e001      	b.n	800271c <HAL_GPIO_Init+0x374>
 8002718:	08011414 	.word	0x08011414
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	2203      	movs	r2, #3
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0203 	and.w	r2, r3, #3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80a2 	beq.w	80028a2 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b56      	ldr	r3, [pc, #344]	; (80028bc <HAL_GPIO_Init+0x514>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a55      	ldr	r2, [pc, #340]	; (80028bc <HAL_GPIO_Init+0x514>)
 8002768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b53      	ldr	r3, [pc, #332]	; (80028bc <HAL_GPIO_Init+0x514>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277a:	4a51      	ldr	r2, [pc, #324]	; (80028c0 <HAL_GPIO_Init+0x518>)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	220f      	movs	r2, #15
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a48      	ldr	r2, [pc, #288]	; (80028c4 <HAL_GPIO_Init+0x51c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d019      	beq.n	80027da <HAL_GPIO_Init+0x432>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a47      	ldr	r2, [pc, #284]	; (80028c8 <HAL_GPIO_Init+0x520>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0x42e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a46      	ldr	r2, [pc, #280]	; (80028cc <HAL_GPIO_Init+0x524>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <HAL_GPIO_Init+0x42a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a45      	ldr	r2, [pc, #276]	; (80028d0 <HAL_GPIO_Init+0x528>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x426>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a44      	ldr	r2, [pc, #272]	; (80028d4 <HAL_GPIO_Init+0x52c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_GPIO_Init+0x422>
 80027c6:	2304      	movs	r3, #4
 80027c8:	e008      	b.n	80027dc <HAL_GPIO_Init+0x434>
 80027ca:	2307      	movs	r3, #7
 80027cc:	e006      	b.n	80027dc <HAL_GPIO_Init+0x434>
 80027ce:	2303      	movs	r3, #3
 80027d0:	e004      	b.n	80027dc <HAL_GPIO_Init+0x434>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e002      	b.n	80027dc <HAL_GPIO_Init+0x434>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_GPIO_Init+0x434>
 80027da:	2300      	movs	r3, #0
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	f002 0203 	and.w	r2, r2, #3
 80027e2:	0092      	lsls	r2, r2, #2
 80027e4:	4093      	lsls	r3, r2
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ec:	4934      	ldr	r1, [pc, #208]	; (80028c0 <HAL_GPIO_Init+0x518>)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <HAL_GPIO_Init+0x530>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800281e:	4a2e      	ldr	r2, [pc, #184]	; (80028d8 <HAL_GPIO_Init+0x530>)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002824:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <HAL_GPIO_Init+0x530>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002848:	4a23      	ldr	r2, [pc, #140]	; (80028d8 <HAL_GPIO_Init+0x530>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_GPIO_Init+0x530>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002872:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_GPIO_Init+0x530>)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002878:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <HAL_GPIO_Init+0x530>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800289c:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_GPIO_Init+0x530>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3301      	adds	r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b0f      	cmp	r3, #15
 80028ac:	f67f adfe 	bls.w	80024ac <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40013800 	.word	0x40013800
 80028c4:	40020000 	.word	0x40020000
 80028c8:	40020400 	.word	0x40020400
 80028cc:	40020800 	.word	0x40020800
 80028d0:	40020c00 	.word	0x40020c00
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40013c00 	.word	0x40013c00

080028dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
 80028e8:	4613      	mov	r3, r2
 80028ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80028ec:	887b      	ldrh	r3, [r7, #2]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <HAL_GPIO_WritePin+0x20>
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	041b      	lsls	r3, r3, #16
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d004      	beq.n	8002906 <HAL_GPIO_WritePin+0x2a>
 80028fc:	f240 119d 	movw	r1, #413	; 0x19d
 8002900:	480e      	ldr	r0, [pc, #56]	; (800293c <HAL_GPIO_WritePin+0x60>)
 8002902:	f7fe fc5b 	bl	80011bc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002906:	787b      	ldrb	r3, [r7, #1]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_GPIO_WritePin+0x40>
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d004      	beq.n	800291c <HAL_GPIO_WritePin+0x40>
 8002912:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002916:	4809      	ldr	r0, [pc, #36]	; (800293c <HAL_GPIO_WritePin+0x60>)
 8002918:	f7fe fc50 	bl	80011bc <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800291c:	787b      	ldrb	r3, [r7, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002928:	e003      	b.n	8002932 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	041a      	lsls	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	619a      	str	r2, [r3, #24]
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	08011414 	.word	0x08011414

08002940 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d004      	beq.n	800295c <HAL_GPIO_TogglePin+0x1c>
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_GPIO_TogglePin+0x26>
 800295c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002960:	480a      	ldr	r0, [pc, #40]	; (800298c <HAL_GPIO_TogglePin+0x4c>)
 8002962:	f7fe fc2b 	bl	80011bc <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800296c:	887a      	ldrh	r2, [r7, #2]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4013      	ands	r3, r2
 8002972:	041a      	lsls	r2, r3, #16
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	43d9      	mvns	r1, r3
 8002978:	887b      	ldrh	r3, [r7, #2]
 800297a:	400b      	ands	r3, r1
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	619a      	str	r2, [r3, #24]
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	08011414 	.word	0x08011414

08002990 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029a6:	4a05      	ldr	r2, [pc, #20]	; (80029bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f8c6 	bl	8001b40 <HAL_GPIO_EXTI_Callback>
  }
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40013c00 	.word	0x40013c00

080029c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e1bd      	b.n	8002d4e <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a93      	ldr	r2, [pc, #588]	; (8002c24 <HAL_I2C_Init+0x264>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00e      	beq.n	80029fa <HAL_I2C_Init+0x3a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a91      	ldr	r2, [pc, #580]	; (8002c28 <HAL_I2C_Init+0x268>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d009      	beq.n	80029fa <HAL_I2C_Init+0x3a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a90      	ldr	r2, [pc, #576]	; (8002c2c <HAL_I2C_Init+0x26c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d004      	beq.n	80029fa <HAL_I2C_Init+0x3a>
 80029f0:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80029f4:	488e      	ldr	r0, [pc, #568]	; (8002c30 <HAL_I2C_Init+0x270>)
 80029f6:	f7fe fbe1 	bl	80011bc <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <HAL_I2C_Init+0x4c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4a8b      	ldr	r2, [pc, #556]	; (8002c34 <HAL_I2C_Init+0x274>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d904      	bls.n	8002a16 <HAL_I2C_Init+0x56>
 8002a0c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002a10:	4887      	ldr	r0, [pc, #540]	; (8002c30 <HAL_I2C_Init+0x270>)
 8002a12:	f7fe fbd3 	bl	80011bc <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <HAL_I2C_Init+0x72>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a26:	d004      	beq.n	8002a32 <HAL_I2C_Init+0x72>
 8002a28:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002a2c:	4880      	ldr	r0, [pc, #512]	; (8002c30 <HAL_I2C_Init+0x270>)
 8002a2e:	f7fe fbc5 	bl	80011bc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d004      	beq.n	8002a4c <HAL_I2C_Init+0x8c>
 8002a42:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002a46:	487a      	ldr	r0, [pc, #488]	; (8002c30 <HAL_I2C_Init+0x270>)
 8002a48:	f7fe fbb8 	bl	80011bc <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a54:	d009      	beq.n	8002a6a <HAL_I2C_Init+0xaa>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a5e:	d004      	beq.n	8002a6a <HAL_I2C_Init+0xaa>
 8002a60:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002a64:	4872      	ldr	r0, [pc, #456]	; (8002c30 <HAL_I2C_Init+0x270>)
 8002a66:	f7fe fba9 	bl	80011bc <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <HAL_I2C_Init+0xc4>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d004      	beq.n	8002a84 <HAL_I2C_Init+0xc4>
 8002a7a:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002a7e:	486c      	ldr	r0, [pc, #432]	; (8002c30 <HAL_I2C_Init+0x270>)
 8002a80:	f7fe fb9c 	bl	80011bc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d004      	beq.n	8002a9a <HAL_I2C_Init+0xda>
 8002a90:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002a94:	4866      	ldr	r0, [pc, #408]	; (8002c30 <HAL_I2C_Init+0x270>)
 8002a96:	f7fe fb91 	bl	80011bc <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_I2C_Init+0xf4>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d004      	beq.n	8002ab4 <HAL_I2C_Init+0xf4>
 8002aaa:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002aae:	4860      	ldr	r0, [pc, #384]	; (8002c30 <HAL_I2C_Init+0x270>)
 8002ab0:	f7fe fb84 	bl	80011bc <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_I2C_Init+0x10e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	2b80      	cmp	r3, #128	; 0x80
 8002ac2:	d004      	beq.n	8002ace <HAL_I2C_Init+0x10e>
 8002ac4:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002ac8:	4859      	ldr	r0, [pc, #356]	; (8002c30 <HAL_I2C_Init+0x270>)
 8002aca:	f7fe fb77 	bl	80011bc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe fa06 	bl	8000ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b20:	f002 fd7c 	bl	800561c <HAL_RCC_GetPCLK1Freq>
 8002b24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4a43      	ldr	r2, [pc, #268]	; (8002c38 <HAL_I2C_Init+0x278>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d807      	bhi.n	8002b40 <HAL_I2C_Init+0x180>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a42      	ldr	r2, [pc, #264]	; (8002c3c <HAL_I2C_Init+0x27c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	bf94      	ite	ls
 8002b38:	2301      	movls	r3, #1
 8002b3a:	2300      	movhi	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	e006      	b.n	8002b4e <HAL_I2C_Init+0x18e>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a3f      	ldr	r2, [pc, #252]	; (8002c40 <HAL_I2C_Init+0x280>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	bf94      	ite	ls
 8002b48:	2301      	movls	r3, #1
 8002b4a:	2300      	movhi	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0fb      	b.n	8002d4e <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a3a      	ldr	r2, [pc, #232]	; (8002c44 <HAL_I2C_Init+0x284>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	0c9b      	lsrs	r3, r3, #18
 8002b60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4a2c      	ldr	r2, [pc, #176]	; (8002c38 <HAL_I2C_Init+0x278>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d802      	bhi.n	8002b90 <HAL_I2C_Init+0x1d0>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	e009      	b.n	8002ba4 <HAL_I2C_Init+0x1e4>
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	4a2b      	ldr	r2, [pc, #172]	; (8002c48 <HAL_I2C_Init+0x288>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	099b      	lsrs	r3, r3, #6
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	491e      	ldr	r1, [pc, #120]	; (8002c38 <HAL_I2C_Init+0x278>)
 8002bc0:	428b      	cmp	r3, r1
 8002bc2:	d819      	bhi.n	8002bf8 <HAL_I2C_Init+0x238>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e59      	subs	r1, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd2:	1c59      	adds	r1, r3, #1
 8002bd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bd8:	400b      	ands	r3, r1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_I2C_Init+0x234>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1e59      	subs	r1, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf2:	e065      	b.n	8002cc0 <HAL_I2C_Init+0x300>
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	e063      	b.n	8002cc0 <HAL_I2C_Init+0x300>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d125      	bne.n	8002c4c <HAL_I2C_Init+0x28c>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1e58      	subs	r0, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	440b      	add	r3, r1
 8002c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c12:	3301      	adds	r3, #1
 8002c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e026      	b.n	8002c72 <HAL_I2C_Init+0x2b2>
 8002c24:	40005400 	.word	0x40005400
 8002c28:	40005800 	.word	0x40005800
 8002c2c:	40005c00 	.word	0x40005c00
 8002c30:	08011450 	.word	0x08011450
 8002c34:	00061a80 	.word	0x00061a80
 8002c38:	000186a0 	.word	0x000186a0
 8002c3c:	001e847f 	.word	0x001e847f
 8002c40:	003d08ff 	.word	0x003d08ff
 8002c44:	431bde83 	.word	0x431bde83
 8002c48:	10624dd3 	.word	0x10624dd3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e58      	subs	r0, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	0099      	lsls	r1, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Init+0x2ba>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e022      	b.n	8002cc0 <HAL_I2C_Init+0x300>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10e      	bne.n	8002ca0 <HAL_I2C_Init+0x2e0>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1e58      	subs	r0, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	440b      	add	r3, r1
 8002c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9e:	e00f      	b.n	8002cc0 <HAL_I2C_Init+0x300>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e58      	subs	r0, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	0099      	lsls	r1, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	6809      	ldr	r1, [r1, #0]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6911      	ldr	r1, [r2, #16]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68d2      	ldr	r2, [r2, #12]
 8002cfa:	4311      	orrs	r1, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop

08002d58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	4608      	mov	r0, r1
 8002d62:	4611      	mov	r1, r2
 8002d64:	461a      	mov	r2, r3
 8002d66:	4603      	mov	r3, r0
 8002d68:	817b      	strh	r3, [r7, #10]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	813b      	strh	r3, [r7, #8]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d72:	f7ff f9d7 	bl	8002124 <HAL_GetTick>
 8002d76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d007      	beq.n	8002d8e <HAL_I2C_Mem_Write+0x36>
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d004      	beq.n	8002d8e <HAL_I2C_Mem_Write+0x36>
 8002d84:	f640 11b9 	movw	r1, #2489	; 0x9b9
 8002d88:	4873      	ldr	r0, [pc, #460]	; (8002f58 <HAL_I2C_Mem_Write+0x200>)
 8002d8a:	f7fe fa17 	bl	80011bc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	f040 80d9 	bne.w	8002f4e <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2319      	movs	r3, #25
 8002da2:	2201      	movs	r2, #1
 8002da4:	496d      	ldr	r1, [pc, #436]	; (8002f5c <HAL_I2C_Mem_Write+0x204>)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 faa0 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
 8002db4:	e0cc      	b.n	8002f50 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_I2C_Mem_Write+0x6c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e0c5      	b.n	8002f50 <HAL_I2C_Mem_Write+0x1f8>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d007      	beq.n	8002dea <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2221      	movs	r2, #33	; 0x21
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2240      	movs	r2, #64	; 0x40
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a3a      	ldr	r2, [r7, #32]
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a4d      	ldr	r2, [pc, #308]	; (8002f60 <HAL_I2C_Mem_Write+0x208>)
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e2c:	88f8      	ldrh	r0, [r7, #6]
 8002e2e:	893a      	ldrh	r2, [r7, #8]
 8002e30:	8979      	ldrh	r1, [r7, #10]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f9bf 	bl	80031c0 <I2C_RequestMemoryWrite>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d052      	beq.n	8002eee <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e081      	b.n	8002f50 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fb21 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00d      	beq.n	8002e78 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d107      	bne.n	8002e74 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e06b      	b.n	8002f50 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d11b      	bne.n	8002eee <HAL_I2C_Mem_Write+0x196>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d017      	beq.n	8002eee <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	781a      	ldrb	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1aa      	bne.n	8002e4c <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fb0d 	bl	800351a <I2C_WaitOnBTFFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d107      	bne.n	8002f1e <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e016      	b.n	8002f50 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e000      	b.n	8002f50 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
  }
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	08011450 	.word	0x08011450
 8002f5c:	00100002 	.word	0x00100002
 8002f60:	ffff0000 	.word	0xffff0000

08002f64 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	460b      	mov	r3, r1
 8002f72:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f74:	f7ff f8d6 	bl	8002124 <HAL_GetTick>
 8002f78:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	f040 8111 	bne.w	80031ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2319      	movs	r3, #25
 8002f92:	2201      	movs	r2, #1
 8002f94:	4988      	ldr	r1, [pc, #544]	; (80031b8 <HAL_I2C_IsDeviceReady+0x254>)
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f9a8 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e104      	b.n	80031b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_I2C_IsDeviceReady+0x50>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e0fd      	b.n	80031b0 <HAL_I2C_IsDeviceReady+0x24c>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d007      	beq.n	8002fda <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2224      	movs	r2, #36	; 0x24
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4a70      	ldr	r2, [pc, #448]	; (80031bc <HAL_I2C_IsDeviceReady+0x258>)
 8002ffc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800300c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2200      	movs	r2, #0
 8003016:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f966 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00d      	beq.n	8003042 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003034:	d103      	bne.n	800303e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e0b6      	b.n	80031b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003042:	897b      	ldrh	r3, [r7, #10]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003050:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003052:	f7ff f867 	bl	8002124 <HAL_GetTick>
 8003056:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b02      	cmp	r3, #2
 8003064:	bf0c      	ite	eq
 8003066:	2301      	moveq	r3, #1
 8003068:	2300      	movne	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307c:	bf0c      	ite	eq
 800307e:	2301      	moveq	r3, #1
 8003080:	2300      	movne	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003086:	e025      	b.n	80030d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003088:	f7ff f84c 	bl	8002124 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d302      	bcc.n	800309e <HAL_I2C_IsDeviceReady+0x13a>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	22a0      	movs	r2, #160	; 0xa0
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2ba0      	cmp	r3, #160	; 0xa0
 80030de:	d005      	beq.n	80030ec <HAL_I2C_IsDeviceReady+0x188>
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d102      	bne.n	80030ec <HAL_I2C_IsDeviceReady+0x188>
 80030e6:	7dbb      	ldrb	r3, [r7, #22]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0cd      	beq.n	8003088 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d129      	bne.n	8003156 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003110:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2319      	movs	r3, #25
 800312e:	2201      	movs	r2, #1
 8003130:	4921      	ldr	r1, [pc, #132]	; (80031b8 <HAL_I2C_IsDeviceReady+0x254>)
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f8da 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e036      	b.n	80031b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e02c      	b.n	80031b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003164:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800316e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	2319      	movs	r3, #25
 8003176:	2201      	movs	r2, #1
 8003178:	490f      	ldr	r1, [pc, #60]	; (80031b8 <HAL_I2C_IsDeviceReady+0x254>)
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f8b6 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e012      	b.n	80031b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	3301      	adds	r3, #1
 800318e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	f4ff af32 	bcc.w	8002ffe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
  }
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	00100002 	.word	0x00100002
 80031bc:	ffff0000 	.word	0xffff0000

080031c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	4608      	mov	r0, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	817b      	strh	r3, [r7, #10]
 80031d2:	460b      	mov	r3, r1
 80031d4:	813b      	strh	r3, [r7, #8]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f878 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003210:	d103      	bne.n	800321a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e05f      	b.n	80032de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800321e:	897b      	ldrh	r3, [r7, #10]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800322c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	6a3a      	ldr	r2, [r7, #32]
 8003232:	492d      	ldr	r1, [pc, #180]	; (80032e8 <I2C_RequestMemoryWrite+0x128>)
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f8b0 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e04c      	b.n	80032de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800325a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325c:	6a39      	ldr	r1, [r7, #32]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f91a 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2b04      	cmp	r3, #4
 8003270:	d107      	bne.n	8003282 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003280:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e02b      	b.n	80032de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d105      	bne.n	8003298 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800328c:	893b      	ldrh	r3, [r7, #8]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	611a      	str	r2, [r3, #16]
 8003296:	e021      	b.n	80032dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003298:	893b      	ldrh	r3, [r7, #8]
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	b29b      	uxth	r3, r3
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a8:	6a39      	ldr	r1, [r7, #32]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f8f4 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00d      	beq.n	80032d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d107      	bne.n	80032ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e005      	b.n	80032de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032d2:	893b      	ldrh	r3, [r7, #8]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	00010002 	.word	0x00010002

080032ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032fc:	e025      	b.n	800334a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d021      	beq.n	800334a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003306:	f7fe ff0d 	bl	8002124 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d302      	bcc.n	800331c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d116      	bne.n	800334a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f043 0220 	orr.w	r2, r3, #32
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e023      	b.n	8003392 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d10d      	bne.n	8003370 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	e00c      	b.n	800338a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	43da      	mvns	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4013      	ands	r3, r2
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	bf0c      	ite	eq
 8003382:	2301      	moveq	r3, #1
 8003384:	2300      	movne	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	429a      	cmp	r2, r3
 800338e:	d0b6      	beq.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033a8:	e051      	b.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b8:	d123      	bne.n	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f043 0204 	orr.w	r2, r3, #4
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e046      	b.n	8003490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d021      	beq.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fe fe8b 	bl	8002124 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d116      	bne.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f043 0220 	orr.w	r2, r3, #32
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e020      	b.n	8003490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	d10c      	bne.n	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	43da      	mvns	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf14      	ite	ne
 800346a:	2301      	movne	r3, #1
 800346c:	2300      	moveq	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	e00b      	b.n	800348a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	43da      	mvns	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4013      	ands	r3, r2
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d18d      	bne.n	80033aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a4:	e02d      	b.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f878 	bl	800359c <I2C_IsAcknowledgeFailed>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e02d      	b.n	8003512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d021      	beq.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034be:	f7fe fe31 	bl	8002124 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d116      	bne.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f043 0220 	orr.w	r2, r3, #32
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e007      	b.n	8003512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350c:	2b80      	cmp	r3, #128	; 0x80
 800350e:	d1ca      	bne.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003526:	e02d      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f837 	bl	800359c <I2C_IsAcknowledgeFailed>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e02d      	b.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d021      	beq.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003540:	f7fe fdf0 	bl	8002124 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	d302      	bcc.n	8003556 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d116      	bne.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f043 0220 	orr.w	r2, r3, #32
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b04      	cmp	r3, #4
 8003590:	d1ca      	bne.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b2:	d11b      	bne.n	80035ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f043 0204 	orr.w	r2, r3, #4
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fe:	b08f      	sub	sp, #60	; 0x3c
 8003600:	af0a      	add	r7, sp, #40	; 0x28
 8003602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e118      	b.n	8003840 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003616:	d003      	beq.n	8003620 <HAL_PCD_Init+0x24>
 8003618:	2187      	movs	r1, #135	; 0x87
 800361a:	488b      	ldr	r0, [pc, #556]	; (8003848 <HAL_PCD_Init+0x24c>)
 800361c:	f7fd fdce 	bl	80011bc <assert_failed>

  USBx = hpcd->Instance;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f00c f8b4 	bl	800f7a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2203      	movs	r2, #3
 8003644:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f005 fae9 	bl	8008c36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	687e      	ldr	r6, [r7, #4]
 800366c:	466d      	mov	r5, sp
 800366e:	f106 0410 	add.w	r4, r6, #16
 8003672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800367a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800367e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003682:	1d33      	adds	r3, r6, #4
 8003684:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003686:	6838      	ldr	r0, [r7, #0]
 8003688:	f005 f9c0 	bl	8008a0c <USB_CoreInit>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0d0      	b.n	8003840 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2100      	movs	r1, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f005 fad7 	bl	8008c58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
 80036ae:	e04a      	b.n	8003746 <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	333d      	adds	r3, #61	; 0x3d
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	333c      	adds	r3, #60	; 0x3c
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	b298      	uxth	r0, r3
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	3344      	adds	r3, #68	; 0x44
 80036ec:	4602      	mov	r2, r0
 80036ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	3340      	adds	r3, #64	; 0x40
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	3348      	adds	r3, #72	; 0x48
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	334c      	adds	r3, #76	; 0x4c
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800372c:	7bfa      	ldrb	r2, [r7, #15]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3354      	adds	r3, #84	; 0x54
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	3301      	adds	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	7bfa      	ldrb	r2, [r7, #15]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	429a      	cmp	r2, r3
 800374e:	d3af      	bcc.n	80036b0 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003750:	2300      	movs	r3, #0
 8003752:	73fb      	strb	r3, [r7, #15]
 8003754:	e044      	b.n	80037e0 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003756:	7bfa      	ldrb	r2, [r7, #15]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	3301      	adds	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d3b5      	bcc.n	8003756 <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	687e      	ldr	r6, [r7, #4]
 80037f2:	466d      	mov	r5, sp
 80037f4:	f106 0410 	add.w	r4, r6, #16
 80037f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003800:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003804:	e885 0003 	stmia.w	r5, {r0, r1}
 8003808:	1d33      	adds	r3, r6, #4
 800380a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800380c:	6838      	ldr	r0, [r7, #0]
 800380e:	f005 fa6f 	bl	8008cf0 <USB_DevInit>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e00d      	b.n	8003840 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f006 fbbe 	bl	8009fba <USB_DevDisconnect>

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003848:	08011488 	.word	0x08011488

0800384c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_PCD_Start+0x1c>
 8003864:	2302      	movs	r3, #2
 8003866:	e020      	b.n	80038aa <HAL_PCD_Start+0x5e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	2b01      	cmp	r3, #1
 8003876:	d109      	bne.n	800388c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800387c:	2b01      	cmp	r3, #1
 800387e:	d005      	beq.n	800388c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f005 f9bf 	bl	8008c14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f006 fb6c 	bl	8009f78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038b2:	b590      	push	{r4, r7, lr}
 80038b4:	b08d      	sub	sp, #52	; 0x34
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f006 fc2a 	bl	800a122 <USB_GetMode>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 848a 	bne.w	80041ea <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f006 fb8e 	bl	8009ffc <USB_ReadInterrupts>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8480 	beq.w	80041e8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f006 fb7b 	bl	8009ffc <USB_ReadInterrupts>
 8003906:	4603      	mov	r3, r0
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b02      	cmp	r3, #2
 800390e:	d107      	bne.n	8003920 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f002 0202 	and.w	r2, r2, #2
 800391e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f006 fb69 	bl	8009ffc <USB_ReadInterrupts>
 800392a:	4603      	mov	r3, r0
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b10      	cmp	r3, #16
 8003932:	d161      	bne.n	80039f8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0210 	bic.w	r2, r2, #16
 8003942:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f003 020f 	and.w	r2, r3, #15
 8003950:	4613      	mov	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	4413      	add	r3, r2
 8003960:	3304      	adds	r3, #4
 8003962:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	0c5b      	lsrs	r3, r3, #17
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	2b02      	cmp	r3, #2
 800396e:	d124      	bne.n	80039ba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d035      	beq.n	80039e8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800398a:	b29b      	uxth	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	6a38      	ldr	r0, [r7, #32]
 8003990:	f006 f9a0 	bl	8009cd4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	091b      	lsrs	r3, r3, #4
 800399c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a0:	441a      	add	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	6a1a      	ldr	r2, [r3, #32]
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b2:	441a      	add	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	621a      	str	r2, [r3, #32]
 80039b8:	e016      	b.n	80039e8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	0c5b      	lsrs	r3, r3, #17
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	2b06      	cmp	r3, #6
 80039c4:	d110      	bne.n	80039e8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039cc:	2208      	movs	r2, #8
 80039ce:	4619      	mov	r1, r3
 80039d0:	6a38      	ldr	r0, [r7, #32]
 80039d2:	f006 f97f 	bl	8009cd4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	6a1a      	ldr	r2, [r3, #32]
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e2:	441a      	add	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0210 	orr.w	r2, r2, #16
 80039f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f006 fafd 	bl	8009ffc <USB_ReadInterrupts>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a0c:	f040 80a7 	bne.w	8003b5e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f006 fb02 	bl	800a022 <USB_ReadDevAllOutEpInterrupt>
 8003a1e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a20:	e099      	b.n	8003b56 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 808e 	beq.w	8003b4a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	4611      	mov	r1, r2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f006 fb26 	bl	800a08a <USB_ReadDevOutEPInterrupt>
 8003a3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00c      	beq.n	8003a64 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a56:	461a      	mov	r2, r3
 8003a58:	2301      	movs	r3, #1
 8003a5a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fec2 	bl	80047e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00c      	beq.n	8003a88 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2308      	movs	r3, #8
 8003a7e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 ff98 	bl	80049b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d030      	beq.n	8003b10 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab6:	2b80      	cmp	r3, #128	; 0x80
 8003ab8:	d109      	bne.n	8003ace <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ac8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003acc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	78db      	ldrb	r3, [r3, #3]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d108      	bne.n	8003afe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2200      	movs	r2, #0
 8003af0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f00b ff51 	bl	800f9a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b26:	461a      	mov	r2, r3
 8003b28:	2320      	movs	r3, #32
 8003b2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b42:	461a      	mov	r2, r3
 8003b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b48:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f47f af62 	bne.w	8003a22 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f006 fa4a 	bl	8009ffc <USB_ReadInterrupts>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b72:	f040 80db 	bne.w	8003d2c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f006 fa6b 	bl	800a056 <USB_ReadDevAllInEpInterrupt>
 8003b80:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b86:	e0cd      	b.n	8003d24 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80c2 	beq.w	8003d18 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f006 fa91 	bl	800a0c6 <USB_ReadDevInEPInterrupt>
 8003ba4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d057      	beq.n	8003c60 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69f9      	ldr	r1, [r7, #28]
 8003bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be0:	461a      	mov	r2, r3
 8003be2:	2301      	movs	r3, #1
 8003be4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d132      	bne.n	8003c54 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	334c      	adds	r3, #76	; 0x4c
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4403      	add	r3, r0
 8003c0e:	3348      	adds	r3, #72	; 0x48
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4419      	add	r1, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4403      	add	r3, r0
 8003c22:	334c      	adds	r3, #76	; 0x4c
 8003c24:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d113      	bne.n	8003c54 <HAL_PCD_IRQHandler+0x3a2>
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	3354      	adds	r3, #84	; 0x54
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d108      	bne.n	8003c54 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	2101      	movs	r1, #1
 8003c50:	f006 fa98 	bl	800a184 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	4619      	mov	r1, r3
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f00b fe25 	bl	800f8aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c76:	461a      	mov	r2, r3
 8003c78:	2308      	movs	r3, #8
 8003c7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c92:	461a      	mov	r2, r3
 8003c94:	2310      	movs	r3, #16
 8003c96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2340      	movs	r3, #64	; 0x40
 8003cb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d023      	beq.n	8003d06 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003cbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cc0:	6a38      	ldr	r0, [r7, #32]
 8003cc2:	f005 f979 	bl	8008fb8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	3338      	adds	r3, #56	; 0x38
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	78db      	ldrb	r3, [r3, #3]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d108      	bne.n	8003cf4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	4619      	mov	r1, r3
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f00b fe68 	bl	800f9c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d00:	461a      	mov	r2, r3
 8003d02:	2302      	movs	r3, #2
 8003d04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fcdb 	bl	80046ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f47f af2e 	bne.w	8003b88 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f006 f963 	bl	8009ffc <USB_ReadInterrupts>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d40:	d122      	bne.n	8003d88 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d108      	bne.n	8003d72 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d68:	2100      	movs	r1, #0
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fec2 	bl	8004af4 <HAL_PCDEx_LPM_Callback>
 8003d70:	e002      	b.n	8003d78 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f00b fe06 	bl	800f984 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f006 f935 	bl	8009ffc <USB_ReadInterrupts>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9c:	d112      	bne.n	8003dc4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d102      	bne.n	8003db4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f00b fdc2 	bl	800f938 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003dc2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f006 f917 	bl	8009ffc <USB_ReadInterrupts>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd8:	f040 80b7 	bne.w	8003f4a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2110      	movs	r1, #16
 8003df6:	4618      	mov	r0, r3
 8003df8:	f005 f8de 	bl	8008fb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e00:	e046      	b.n	8003e90 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e14:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e26:	0151      	lsls	r1, r2, #5
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	440a      	add	r2, r1
 8003e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e42:	461a      	mov	r2, r3
 8003e44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e48:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e7a:	0151      	lsls	r1, r2, #5
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	440a      	add	r2, r1
 8003e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e88:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d3b3      	bcc.n	8003e02 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ea8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003eac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d016      	beq.n	8003ee4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec6:	f043 030b 	orr.w	r3, r3, #11
 8003eca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003edc:	f043 030b 	orr.w	r3, r3, #11
 8003ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ee2:	e015      	b.n	8003f10 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ef6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003efa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f0a:	f043 030b 	orr.w	r3, r3, #11
 8003f0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f34:	461a      	mov	r2, r3
 8003f36:	f006 f925 	bl	800a184 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f006 f854 	bl	8009ffc <USB_ReadInterrupts>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5e:	d124      	bne.n	8003faa <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f006 f8ea 	bl	800a13e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f005 f89f 	bl	80090b2 <USB_GetDevSpeed>
 8003f74:	4603      	mov	r3, r0
 8003f76:	461a      	mov	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681c      	ldr	r4, [r3, #0]
 8003f80:	f001 fb40 	bl	8005604 <HAL_RCC_GetHCLKFreq>
 8003f84:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f004 fd9e 	bl	8008ad0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f00b fcb0 	bl	800f8fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f006 f824 	bl	8009ffc <USB_ReadInterrupts>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f00b fc8d 	bl	800f8de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f002 0208 	and.w	r2, r2, #8
 8003fd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f006 f80f 	bl	8009ffc <USB_ReadInterrupts>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe4:	2b80      	cmp	r3, #128	; 0x80
 8003fe6:	d122      	bne.n	800402e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff8:	e014      	b.n	8004024 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffe:	4613      	mov	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	4413      	add	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d105      	bne.n	800401e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	b2db      	uxtb	r3, r3
 8004016:	4619      	mov	r1, r3
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fb27 	bl	800466c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	3301      	adds	r3, #1
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402a:	429a      	cmp	r2, r3
 800402c:	d3e5      	bcc.n	8003ffa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f005 ffe2 	bl	8009ffc <USB_ReadInterrupts>
 8004038:	4603      	mov	r3, r0
 800403a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800403e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004042:	d13b      	bne.n	80040bc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004044:	2301      	movs	r3, #1
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
 8004048:	e02b      	b.n	80040a2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	3340      	adds	r3, #64	; 0x40
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d115      	bne.n	800409c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004070:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004072:	2b00      	cmp	r3, #0
 8004074:	da12      	bge.n	800409c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	333f      	adds	r3, #63	; 0x3f
 8004086:	2201      	movs	r2, #1
 8004088:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004092:	b2db      	uxtb	r3, r3
 8004094:	4619      	mov	r1, r3
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fae8 	bl	800466c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	3301      	adds	r3, #1
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d3ce      	bcc.n	800404a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f005 ff9b 	bl	8009ffc <USB_ReadInterrupts>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d0:	d155      	bne.n	800417e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040d2:	2301      	movs	r3, #1
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
 80040d6:	e045      	b.n	8004164 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d12e      	bne.n	800415e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004100:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004102:	2b00      	cmp	r3, #0
 8004104:	da2b      	bge.n	800415e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004112:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004116:	429a      	cmp	r2, r3
 8004118:	d121      	bne.n	800415e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800415a:	6053      	str	r3, [r2, #4]
            break;
 800415c:	e007      	b.n	800416e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	3301      	adds	r3, #1
 8004162:	627b      	str	r3, [r7, #36]	; 0x24
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	429a      	cmp	r2, r3
 800416c:	d3b4      	bcc.n	80040d8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800417c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f005 ff3a 	bl	8009ffc <USB_ReadInterrupts>
 8004188:	4603      	mov	r3, r0
 800418a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004192:	d10a      	bne.n	80041aa <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f00b fc27 	bl	800f9e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695a      	ldr	r2, [r3, #20]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f005 ff24 	bl	8009ffc <USB_ReadInterrupts>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d115      	bne.n	80041ea <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f00b fc17 	bl	800fa04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	e000      	b.n	80041ea <HAL_PCD_IRQHandler+0x938>
      return;
 80041e8:	bf00      	nop
    }
  }
}
 80041ea:	3734      	adds	r7, #52	; 0x34
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd90      	pop	{r4, r7, pc}

080041f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_PCD_SetAddress+0x1a>
 8004206:	2302      	movs	r3, #2
 8004208:	e013      	b.n	8004232 <HAL_PCD_SetAddress+0x42>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	78fa      	ldrb	r2, [r7, #3]
 8004220:	4611      	mov	r1, r2
 8004222:	4618      	mov	r0, r3
 8004224:	f005 fe82 	bl	8009f2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	4608      	mov	r0, r1
 8004244:	4611      	mov	r1, r2
 8004246:	461a      	mov	r2, r3
 8004248:	4603      	mov	r3, r0
 800424a:	70fb      	strb	r3, [r7, #3]
 800424c:	460b      	mov	r3, r1
 800424e:	803b      	strh	r3, [r7, #0]
 8004250:	4613      	mov	r3, r2
 8004252:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800425c:	2b00      	cmp	r3, #0
 800425e:	da0f      	bge.n	8004280 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	f003 020f 	and.w	r2, r3, #15
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	3338      	adds	r3, #56	; 0x38
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4413      	add	r3, r2
 8004274:	3304      	adds	r3, #4
 8004276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	705a      	strb	r2, [r3, #1]
 800427e:	e00f      	b.n	80042a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	f003 020f 	and.w	r2, r3, #15
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	3304      	adds	r3, #4
 8004298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042ac:	883a      	ldrh	r2, [r7, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	78ba      	ldrb	r2, [r7, #2]
 80042b6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042ca:	78bb      	ldrb	r3, [r7, #2]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d102      	bne.n	80042d6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_PCD_EP_Open+0xaa>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e00e      	b.n	8004302 <HAL_PCD_EP_Open+0xc8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68f9      	ldr	r1, [r7, #12]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f004 ff02 	bl	80090fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004300:	7afb      	ldrb	r3, [r7, #11]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	460b      	mov	r3, r1
 8004314:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800431a:	2b00      	cmp	r3, #0
 800431c:	da0f      	bge.n	800433e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	f003 020f 	and.w	r2, r3, #15
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	3338      	adds	r3, #56	; 0x38
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	3304      	adds	r3, #4
 8004334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	705a      	strb	r2, [r3, #1]
 800433c:	e00f      	b.n	800435e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	f003 020f 	and.w	r2, r3, #15
 8004344:	4613      	mov	r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	4413      	add	r3, r2
 8004354:	3304      	adds	r3, #4
 8004356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_PCD_EP_Close+0x6e>
 8004374:	2302      	movs	r3, #2
 8004376:	e00e      	b.n	8004396 <HAL_PCD_EP_Close+0x8c>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68f9      	ldr	r1, [r7, #12]
 8004386:	4618      	mov	r0, r3
 8004388:	f004 ff40 	bl	800920c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b086      	sub	sp, #24
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	460b      	mov	r3, r1
 80043ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ae:	7afb      	ldrb	r3, [r7, #11]
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	3304      	adds	r3, #4
 80043c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2200      	movs	r2, #0
 80043d8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2200      	movs	r2, #0
 80043de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e0:	7afb      	ldrb	r3, [r7, #11]
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d102      	bne.n	80043fa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043fa:	7afb      	ldrb	r3, [r7, #11]
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	6979      	ldr	r1, [r7, #20]
 8004412:	f005 fa1f 	bl	8009854 <USB_EP0StartXfer>
 8004416:	e008      	b.n	800442a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	6979      	ldr	r1, [r7, #20]
 8004426:	f004 ffcd 	bl	80093c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004456:	681b      	ldr	r3, [r3, #0]
}
 8004458:	4618      	mov	r0, r3
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	460b      	mov	r3, r1
 8004472:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004474:	7afb      	ldrb	r3, [r7, #11]
 8004476:	f003 020f 	and.w	r2, r3, #15
 800447a:	4613      	mov	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	3338      	adds	r3, #56	; 0x38
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	3304      	adds	r3, #4
 800448a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2200      	movs	r2, #0
 800449c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2201      	movs	r2, #1
 80044a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a4:	7afb      	ldrb	r3, [r7, #11]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d102      	bne.n	80044be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044be:	7afb      	ldrb	r3, [r7, #11]
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	6979      	ldr	r1, [r7, #20]
 80044d6:	f005 f9bd 	bl	8009854 <USB_EP0StartXfer>
 80044da:	e008      	b.n	80044ee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	6979      	ldr	r1, [r7, #20]
 80044ea:	f004 ff6b 	bl	80093c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	f003 020f 	and.w	r2, r3, #15
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	429a      	cmp	r2, r3
 8004510:	d901      	bls.n	8004516 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e050      	b.n	80045b8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800451a:	2b00      	cmp	r3, #0
 800451c:	da0f      	bge.n	800453e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	f003 020f 	and.w	r2, r3, #15
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	3338      	adds	r3, #56	; 0x38
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	3304      	adds	r3, #4
 8004534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	705a      	strb	r2, [r3, #1]
 800453c:	e00d      	b.n	800455a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800453e:	78fa      	ldrb	r2, [r7, #3]
 8004540:	4613      	mov	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	4413      	add	r3, r2
 8004550:	3304      	adds	r3, #4
 8004552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	b2da      	uxtb	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_PCD_EP_SetStall+0x82>
 8004576:	2302      	movs	r3, #2
 8004578:	e01e      	b.n	80045b8 <HAL_PCD_EP_SetStall+0xc0>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68f9      	ldr	r1, [r7, #12]
 8004588:	4618      	mov	r0, r3
 800458a:	f005 fbfb 	bl	8009d84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800458e:	78fb      	ldrb	r3, [r7, #3]
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	b2d9      	uxtb	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045a8:	461a      	mov	r2, r3
 80045aa:	f005 fdeb 	bl	800a184 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	f003 020f 	and.w	r2, r3, #15
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d901      	bls.n	80045de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e042      	b.n	8004664 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	da0f      	bge.n	8004606 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	f003 020f 	and.w	r2, r3, #15
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	3338      	adds	r3, #56	; 0x38
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	3304      	adds	r3, #4
 80045fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	705a      	strb	r2, [r3, #1]
 8004604:	e00f      	b.n	8004626 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	f003 020f 	and.w	r2, r3, #15
 800460c:	4613      	mov	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4413      	add	r3, r2
 800461c:	3304      	adds	r3, #4
 800461e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	b2da      	uxtb	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_PCD_EP_ClrStall+0x86>
 8004642:	2302      	movs	r3, #2
 8004644:	e00e      	b.n	8004664 <HAL_PCD_EP_ClrStall+0xa4>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68f9      	ldr	r1, [r7, #12]
 8004654:	4618      	mov	r0, r3
 8004656:	f005 fc03 	bl	8009e60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800467c:	2b00      	cmp	r3, #0
 800467e:	da0c      	bge.n	800469a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	f003 020f 	and.w	r2, r3, #15
 8004686:	4613      	mov	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	3338      	adds	r3, #56	; 0x38
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4413      	add	r3, r2
 8004694:	3304      	adds	r3, #4
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	e00c      	b.n	80046b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	f003 020f 	and.w	r2, r3, #15
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	4413      	add	r3, r2
 80046b0:	3304      	adds	r3, #4
 80046b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68f9      	ldr	r1, [r7, #12]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f005 fa22 	bl	8009b04 <USB_EPStopXfer>
 80046c0:	4603      	mov	r3, r0
 80046c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80046c4:	7afb      	ldrb	r3, [r7, #11]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b08a      	sub	sp, #40	; 0x28
 80046d2:	af02      	add	r7, sp, #8
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	3338      	adds	r3, #56	; 0x38
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	3304      	adds	r3, #4
 80046f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d901      	bls.n	8004706 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e06c      	b.n	80047e0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	429a      	cmp	r2, r3
 800471a:	d902      	bls.n	8004722 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3303      	adds	r3, #3
 8004726:	089b      	lsrs	r3, r3, #2
 8004728:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800472a:	e02b      	b.n	8004784 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	699a      	ldr	r2, [r3, #24]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	429a      	cmp	r2, r3
 8004740:	d902      	bls.n	8004748 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	3303      	adds	r3, #3
 800474c:	089b      	lsrs	r3, r3, #2
 800474e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6919      	ldr	r1, [r3, #16]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	b2da      	uxtb	r2, r3
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004760:	b2db      	uxtb	r3, r3
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	4603      	mov	r3, r0
 8004766:	6978      	ldr	r0, [r7, #20]
 8004768:	f005 fa76 	bl	8009c58 <USB_WritePacket>

    ep->xfer_buff  += len;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	441a      	add	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a1a      	ldr	r2, [r3, #32]
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	441a      	add	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	b29b      	uxth	r3, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	429a      	cmp	r2, r3
 8004798:	d809      	bhi.n	80047ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1a      	ldr	r2, [r3, #32]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d203      	bcs.n	80047ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1be      	bne.n	800472c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d811      	bhi.n	80047de <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	2201      	movs	r2, #1
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	6939      	ldr	r1, [r7, #16]
 80047d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047da:	4013      	ands	r3, r2
 80047dc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	333c      	adds	r3, #60	; 0x3c
 8004800:	3304      	adds	r3, #4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d17b      	bne.n	8004916 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d015      	beq.n	8004854 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	4a61      	ldr	r2, [pc, #388]	; (80049b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	f240 80b9 	bls.w	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80b3 	beq.w	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484a:	461a      	mov	r2, r3
 800484c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004850:	6093      	str	r3, [r2, #8]
 8004852:	e0a7      	b.n	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	461a      	mov	r2, r3
 800486c:	2320      	movs	r3, #32
 800486e:	6093      	str	r3, [r2, #8]
 8004870:	e098      	b.n	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	f040 8093 	bne.w	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	4a4b      	ldr	r2, [pc, #300]	; (80049b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d90f      	bls.n	80048a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489c:	461a      	mov	r2, r3
 800489e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a2:	6093      	str	r3, [r2, #8]
 80048a4:	e07e      	b.n	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	4413      	add	r3, r2
 80048b8:	3304      	adds	r3, #4
 80048ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	0159      	lsls	r1, r3, #5
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	440b      	add	r3, r1
 80048c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d2:	1ad2      	subs	r2, r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d114      	bne.n	8004908 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048f0:	461a      	mov	r2, r3
 80048f2:	2101      	movs	r1, #1
 80048f4:	f005 fc46 	bl	800a184 <USB_EP0_OutStart>
 80048f8:	e006      	b.n	8004908 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	441a      	add	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f00a ffb0 	bl	800f874 <HAL_PCD_DataOutStageCallback>
 8004914:	e046      	b.n	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	4a26      	ldr	r2, [pc, #152]	; (80049b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d124      	bne.n	8004968 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004934:	461a      	mov	r2, r3
 8004936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800493a:	6093      	str	r3, [r2, #8]
 800493c:	e032      	b.n	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004954:	461a      	mov	r2, r3
 8004956:	2320      	movs	r3, #32
 8004958:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f00a ff87 	bl	800f874 <HAL_PCD_DataOutStageCallback>
 8004966:	e01d      	b.n	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d114      	bne.n	8004998 <PCD_EP_OutXfrComplete_int+0x1b0>
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d108      	bne.n	8004998 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004990:	461a      	mov	r2, r3
 8004992:	2100      	movs	r1, #0
 8004994:	f005 fbf6 	bl	800a184 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	4619      	mov	r1, r3
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f00a ff68 	bl	800f874 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	4f54300a 	.word	0x4f54300a
 80049b4:	4f54310a 	.word	0x4f54310a

080049b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	333c      	adds	r3, #60	; 0x3c
 80049d0:	3304      	adds	r3, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <PCD_EP_OutSetupPacket_int+0x88>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d90e      	bls.n	8004a0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d009      	beq.n	8004a0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	461a      	mov	r2, r3
 8004a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f00a ff1f 	bl	800f850 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d90c      	bls.n	8004a34 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d108      	bne.n	8004a34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2101      	movs	r1, #1
 8004a30:	f005 fba8 	bl	800a184 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	4f54300a 	.word	0x4f54300a

08004a44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
 8004a50:	4613      	mov	r3, r2
 8004a52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d107      	bne.n	8004a72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a62:	883b      	ldrh	r3, [r7, #0]
 8004a64:	0419      	lsls	r1, r3, #16
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a70:	e028      	b.n	8004ac4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]
 8004a84:	e00d      	b.n	8004aa2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	3340      	adds	r3, #64	; 0x40
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	0c1b      	lsrs	r3, r3, #16
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4413      	add	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	73fb      	strb	r3, [r7, #15]
 8004aa2:	7bfa      	ldrb	r2, [r7, #15]
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d3ec      	bcc.n	8004a86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004aac:	883b      	ldrh	r3, [r7, #0]
 8004aae:	0418      	lsls	r0, r3, #16
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	4302      	orrs	r2, r0
 8004abc:	3340      	adds	r3, #64	; 0x40
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	887a      	ldrh	r2, [r7, #2]
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e314      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b0f      	cmp	r3, #15
 8004b24:	d903      	bls.n	8004b2e <HAL_RCC_OscConfig+0x22>
 8004b26:	21e6      	movs	r1, #230	; 0xe6
 8004b28:	4897      	ldr	r0, [pc, #604]	; (8004d88 <HAL_RCC_OscConfig+0x27c>)
 8004b2a:	f7fc fb47 	bl	80011bc <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8088 	beq.w	8004c4c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00d      	beq.n	8004b60 <HAL_RCC_OscConfig+0x54>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b4c:	d008      	beq.n	8004b60 <HAL_RCC_OscConfig+0x54>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b56:	d003      	beq.n	8004b60 <HAL_RCC_OscConfig+0x54>
 8004b58:	21eb      	movs	r1, #235	; 0xeb
 8004b5a:	488b      	ldr	r0, [pc, #556]	; (8004d88 <HAL_RCC_OscConfig+0x27c>)
 8004b5c:	f7fc fb2e 	bl	80011bc <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b60:	4b8a      	ldr	r3, [pc, #552]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d00c      	beq.n	8004b86 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b6c:	4b87      	ldr	r3, [pc, #540]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d112      	bne.n	8004b9e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b78:	4b84      	ldr	r3, [pc, #528]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b84:	d10b      	bne.n	8004b9e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b86:	4b81      	ldr	r3, [pc, #516]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d05b      	beq.n	8004c4a <HAL_RCC_OscConfig+0x13e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d157      	bne.n	8004c4a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e2d4      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCC_OscConfig+0xaa>
 8004ba8:	4b78      	ldr	r3, [pc, #480]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a77      	ldr	r2, [pc, #476]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	e01d      	b.n	8004bf2 <HAL_RCC_OscConfig+0xe6>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bbe:	d10c      	bne.n	8004bda <HAL_RCC_OscConfig+0xce>
 8004bc0:	4b72      	ldr	r3, [pc, #456]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a71      	ldr	r2, [pc, #452]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	4b6f      	ldr	r3, [pc, #444]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a6e      	ldr	r2, [pc, #440]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	e00b      	b.n	8004bf2 <HAL_RCC_OscConfig+0xe6>
 8004bda:	4b6c      	ldr	r3, [pc, #432]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a6b      	ldr	r2, [pc, #428]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	4b69      	ldr	r3, [pc, #420]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a68      	ldr	r2, [pc, #416]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bf0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d013      	beq.n	8004c22 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfa:	f7fd fa93 	bl	8002124 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c02:	f7fd fa8f 	bl	8002124 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b64      	cmp	r3, #100	; 0x64
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e299      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c14:	4b5d      	ldr	r3, [pc, #372]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCC_OscConfig+0xf6>
 8004c20:	e014      	b.n	8004c4c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c22:	f7fd fa7f 	bl	8002124 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c2a:	f7fd fa7b 	bl	8002124 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b64      	cmp	r3, #100	; 0x64
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e285      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3c:	4b53      	ldr	r3, [pc, #332]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <HAL_RCC_OscConfig+0x11e>
 8004c48:	e000      	b.n	8004c4c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d079      	beq.n	8004d4c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_RCC_OscConfig+0x166>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d004      	beq.n	8004c72 <HAL_RCC_OscConfig+0x166>
 8004c68:	f240 111d 	movw	r1, #285	; 0x11d
 8004c6c:	4846      	ldr	r0, [pc, #280]	; (8004d88 <HAL_RCC_OscConfig+0x27c>)
 8004c6e:	f7fc faa5 	bl	80011bc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b1f      	cmp	r3, #31
 8004c78:	d904      	bls.n	8004c84 <HAL_RCC_OscConfig+0x178>
 8004c7a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004c7e:	4842      	ldr	r0, [pc, #264]	; (8004d88 <HAL_RCC_OscConfig+0x27c>)
 8004c80:	f7fc fa9c 	bl	80011bc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c84:	4b41      	ldr	r3, [pc, #260]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00b      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c90:	4b3e      	ldr	r3, [pc, #248]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d11c      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c9c:	4b3b      	ldr	r3, [pc, #236]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d116      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ca8:	4b38      	ldr	r3, [pc, #224]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x1b4>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e243      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc0:	4b32      	ldr	r3, [pc, #200]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	492f      	ldr	r1, [pc, #188]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd4:	e03a      	b.n	8004d4c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d020      	beq.n	8004d20 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cde:	4b2c      	ldr	r3, [pc, #176]	; (8004d90 <HAL_RCC_OscConfig+0x284>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fd fa1e 	bl	8002124 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cec:	f7fd fa1a 	bl	8002124 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e224      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfe:	4b23      	ldr	r3, [pc, #140]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0a:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	491c      	ldr	r1, [pc, #112]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]
 8004d1e:	e015      	b.n	8004d4c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d20:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <HAL_RCC_OscConfig+0x284>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fd f9fd 	bl	8002124 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d2e:	f7fd f9f9 	bl	8002124 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e203      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d40:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d045      	beq.n	8004de4 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_OscConfig+0x266>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d004      	beq.n	8004d72 <HAL_RCC_OscConfig+0x266>
 8004d68:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004d6c:	4806      	ldr	r0, [pc, #24]	; (8004d88 <HAL_RCC_OscConfig+0x27c>)
 8004d6e:	f7fc fa25 	bl	80011bc <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d01e      	beq.n	8004db8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <HAL_RCC_OscConfig+0x288>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fd f9d0 	bl	8002124 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d86:	e010      	b.n	8004daa <HAL_RCC_OscConfig+0x29e>
 8004d88:	080114c0 	.word	0x080114c0
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	42470000 	.word	0x42470000
 8004d94:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d98:	f7fd f9c4 	bl	8002124 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e1ce      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004daa:	4b5e      	ldr	r3, [pc, #376]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f0      	beq.n	8004d98 <HAL_RCC_OscConfig+0x28c>
 8004db6:	e015      	b.n	8004de4 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db8:	4b5b      	ldr	r3, [pc, #364]	; (8004f28 <HAL_RCC_OscConfig+0x41c>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dbe:	f7fd f9b1 	bl	8002124 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc6:	f7fd f9ad 	bl	8002124 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e1b7      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd8:	4b52      	ldr	r3, [pc, #328]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80b0 	beq.w	8004f52 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df2:	2300      	movs	r3, #0
 8004df4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00c      	beq.n	8004e18 <HAL_RCC_OscConfig+0x30c>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d008      	beq.n	8004e18 <HAL_RCC_OscConfig+0x30c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b05      	cmp	r3, #5
 8004e0c:	d004      	beq.n	8004e18 <HAL_RCC_OscConfig+0x30c>
 8004e0e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004e12:	4846      	ldr	r0, [pc, #280]	; (8004f2c <HAL_RCC_OscConfig+0x420>)
 8004e14:	f7fc f9d2 	bl	80011bc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e18:	4b42      	ldr	r3, [pc, #264]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10f      	bne.n	8004e44 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e24:	2300      	movs	r3, #0
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	4b3e      	ldr	r3, [pc, #248]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	4a3d      	ldr	r2, [pc, #244]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e32:	6413      	str	r3, [r2, #64]	; 0x40
 8004e34:	4b3b      	ldr	r3, [pc, #236]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e40:	2301      	movs	r3, #1
 8004e42:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e44:	4b3a      	ldr	r3, [pc, #232]	; (8004f30 <HAL_RCC_OscConfig+0x424>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d118      	bne.n	8004e82 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e50:	4b37      	ldr	r3, [pc, #220]	; (8004f30 <HAL_RCC_OscConfig+0x424>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a36      	ldr	r2, [pc, #216]	; (8004f30 <HAL_RCC_OscConfig+0x424>)
 8004e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e5c:	f7fd f962 	bl	8002124 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e64:	f7fd f95e 	bl	8002124 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e168      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e76:	4b2e      	ldr	r3, [pc, #184]	; (8004f30 <HAL_RCC_OscConfig+0x424>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d106      	bne.n	8004e98 <HAL_RCC_OscConfig+0x38c>
 8004e8a:	4b26      	ldr	r3, [pc, #152]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	4a25      	ldr	r2, [pc, #148]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	6713      	str	r3, [r2, #112]	; 0x70
 8004e96:	e01c      	b.n	8004ed2 <HAL_RCC_OscConfig+0x3c6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2b05      	cmp	r3, #5
 8004e9e:	d10c      	bne.n	8004eba <HAL_RCC_OscConfig+0x3ae>
 8004ea0:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	4a1f      	ldr	r2, [pc, #124]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004ea6:	f043 0304 	orr.w	r3, r3, #4
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004eac:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb8:	e00b      	b.n	8004ed2 <HAL_RCC_OscConfig+0x3c6>
 8004eba:	4b1a      	ldr	r3, [pc, #104]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec6:	4b17      	ldr	r3, [pc, #92]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	4a16      	ldr	r2, [pc, #88]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004ecc:	f023 0304 	bic.w	r3, r3, #4
 8004ed0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d015      	beq.n	8004f06 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eda:	f7fd f923 	bl	8002124 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fd f91f 	bl	8002124 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e127      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <HAL_RCC_OscConfig+0x418>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ee      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x3d6>
 8004f04:	e01c      	b.n	8004f40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f06:	f7fd f90d 	bl	8002124 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f0c:	e012      	b.n	8004f34 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f0e:	f7fd f909 	bl	8002124 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d909      	bls.n	8004f34 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e111      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
 8004f24:	40023800 	.word	0x40023800
 8004f28:	42470e80 	.word	0x42470e80
 8004f2c:	080114c0 	.word	0x080114c0
 8004f30:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f34:	4b86      	ldr	r3, [pc, #536]	; (8005150 <HAL_RCC_OscConfig+0x644>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e6      	bne.n	8004f0e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d105      	bne.n	8004f52 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f46:	4b82      	ldr	r3, [pc, #520]	; (8005150 <HAL_RCC_OscConfig+0x644>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	4a81      	ldr	r2, [pc, #516]	; (8005150 <HAL_RCC_OscConfig+0x644>)
 8004f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00c      	beq.n	8004f74 <HAL_RCC_OscConfig+0x468>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d008      	beq.n	8004f74 <HAL_RCC_OscConfig+0x468>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d004      	beq.n	8004f74 <HAL_RCC_OscConfig+0x468>
 8004f6a:	f240 11cd 	movw	r1, #461	; 0x1cd
 8004f6e:	4879      	ldr	r0, [pc, #484]	; (8005154 <HAL_RCC_OscConfig+0x648>)
 8004f70:	f7fc f924 	bl	80011bc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 80e4 	beq.w	8005146 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f7e:	4b74      	ldr	r3, [pc, #464]	; (8005150 <HAL_RCC_OscConfig+0x644>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	f000 80a5 	beq.w	80050d6 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	f040 8089 	bne.w	80050a8 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x4a6>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa6:	d004      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x4a6>
 8004fa8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004fac:	4869      	ldr	r0, [pc, #420]	; (8005154 <HAL_RCC_OscConfig+0x648>)
 8004fae:	f7fc f905 	bl	80011bc <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	2b3f      	cmp	r3, #63	; 0x3f
 8004fb8:	d904      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x4b8>
 8004fba:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004fbe:	4865      	ldr	r0, [pc, #404]	; (8005154 <HAL_RCC_OscConfig+0x648>)
 8004fc0:	f7fc f8fc 	bl	80011bc <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	2b31      	cmp	r3, #49	; 0x31
 8004fca:	d904      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004fd4:	d904      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x4d4>
 8004fd6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004fda:	485e      	ldr	r0, [pc, #376]	; (8005154 <HAL_RCC_OscConfig+0x648>)
 8004fdc:	f7fc f8ee 	bl	80011bc <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d010      	beq.n	800500a <HAL_RCC_OscConfig+0x4fe>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d00c      	beq.n	800500a <HAL_RCC_OscConfig+0x4fe>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	2b06      	cmp	r3, #6
 8004ff6:	d008      	beq.n	800500a <HAL_RCC_OscConfig+0x4fe>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d004      	beq.n	800500a <HAL_RCC_OscConfig+0x4fe>
 8005000:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005004:	4853      	ldr	r0, [pc, #332]	; (8005154 <HAL_RCC_OscConfig+0x648>)
 8005006:	f7fc f8d9 	bl	80011bc <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	2b01      	cmp	r3, #1
 8005010:	d903      	bls.n	800501a <HAL_RCC_OscConfig+0x50e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	2b0f      	cmp	r3, #15
 8005018:	d904      	bls.n	8005024 <HAL_RCC_OscConfig+0x518>
 800501a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800501e:	484d      	ldr	r0, [pc, #308]	; (8005154 <HAL_RCC_OscConfig+0x648>)
 8005020:	f7fc f8cc 	bl	80011bc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005024:	4b4c      	ldr	r3, [pc, #304]	; (8005158 <HAL_RCC_OscConfig+0x64c>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502a:	f7fd f87b 	bl	8002124 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005032:	f7fd f877 	bl	8002124 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e081      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005044:	4b42      	ldr	r3, [pc, #264]	; (8005150 <HAL_RCC_OscConfig+0x644>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f0      	bne.n	8005032 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	019b      	lsls	r3, r3, #6
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	3b01      	subs	r3, #1
 800506a:	041b      	lsls	r3, r3, #16
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	061b      	lsls	r3, r3, #24
 8005074:	4936      	ldr	r1, [pc, #216]	; (8005150 <HAL_RCC_OscConfig+0x644>)
 8005076:	4313      	orrs	r3, r2
 8005078:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800507a:	4b37      	ldr	r3, [pc, #220]	; (8005158 <HAL_RCC_OscConfig+0x64c>)
 800507c:	2201      	movs	r2, #1
 800507e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005080:	f7fd f850 	bl	8002124 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005088:	f7fd f84c 	bl	8002124 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e056      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800509a:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <HAL_RCC_OscConfig+0x644>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x57c>
 80050a6:	e04e      	b.n	8005146 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a8:	4b2b      	ldr	r3, [pc, #172]	; (8005158 <HAL_RCC_OscConfig+0x64c>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ae:	f7fd f839 	bl	8002124 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050b6:	f7fd f835 	bl	8002124 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e03f      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c8:	4b21      	ldr	r3, [pc, #132]	; (8005150 <HAL_RCC_OscConfig+0x644>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f0      	bne.n	80050b6 <HAL_RCC_OscConfig+0x5aa>
 80050d4:	e037      	b.n	8005146 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e032      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050e2:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_RCC_OscConfig+0x644>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d028      	beq.n	8005142 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d121      	bne.n	8005142 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005108:	429a      	cmp	r2, r3
 800510a:	d11a      	bne.n	8005142 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005112:	4013      	ands	r3, r2
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005118:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800511a:	4293      	cmp	r3, r2
 800511c:	d111      	bne.n	8005142 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	3b01      	subs	r3, #1
 800512c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d107      	bne.n	8005142 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800513e:	429a      	cmp	r2, r3
 8005140:	d001      	beq.n	8005146 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40023800 	.word	0x40023800
 8005154:	080114c0 	.word	0x080114c0
 8005158:	42470060 	.word	0x42470060

0800515c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e174      	b.n	800545a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_RCC_ClockConfig+0x24>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d904      	bls.n	800518a <HAL_RCC_ClockConfig+0x2e>
 8005180:	f240 215a 	movw	r1, #602	; 0x25a
 8005184:	487b      	ldr	r0, [pc, #492]	; (8005374 <HAL_RCC_ClockConfig+0x218>)
 8005186:	f7fc f819 	bl	80011bc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d019      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x68>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d016      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x68>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d013      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x68>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d010      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x68>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d00d      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x68>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b05      	cmp	r3, #5
 80051ac:	d00a      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x68>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b06      	cmp	r3, #6
 80051b2:	d007      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x68>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b07      	cmp	r3, #7
 80051b8:	d004      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x68>
 80051ba:	f240 215b 	movw	r1, #603	; 0x25b
 80051be:	486d      	ldr	r0, [pc, #436]	; (8005374 <HAL_RCC_ClockConfig+0x218>)
 80051c0:	f7fb fffc 	bl	80011bc <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051c4:	4b6c      	ldr	r3, [pc, #432]	; (8005378 <HAL_RCC_ClockConfig+0x21c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d90c      	bls.n	80051ec <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d2:	4b69      	ldr	r3, [pc, #420]	; (8005378 <HAL_RCC_ClockConfig+0x21c>)
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051da:	4b67      	ldr	r3, [pc, #412]	; (8005378 <HAL_RCC_ClockConfig+0x21c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d001      	beq.n	80051ec <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e136      	b.n	800545a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d049      	beq.n	800528c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005204:	4b5d      	ldr	r3, [pc, #372]	; (800537c <HAL_RCC_ClockConfig+0x220>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4a5c      	ldr	r2, [pc, #368]	; (800537c <HAL_RCC_ClockConfig+0x220>)
 800520a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800520e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800521c:	4b57      	ldr	r3, [pc, #348]	; (800537c <HAL_RCC_ClockConfig+0x220>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	4a56      	ldr	r2, [pc, #344]	; (800537c <HAL_RCC_ClockConfig+0x220>)
 8005222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d024      	beq.n	800527a <HAL_RCC_ClockConfig+0x11e>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b80      	cmp	r3, #128	; 0x80
 8005236:	d020      	beq.n	800527a <HAL_RCC_ClockConfig+0x11e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b90      	cmp	r3, #144	; 0x90
 800523e:	d01c      	beq.n	800527a <HAL_RCC_ClockConfig+0x11e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2ba0      	cmp	r3, #160	; 0xa0
 8005246:	d018      	beq.n	800527a <HAL_RCC_ClockConfig+0x11e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	2bb0      	cmp	r3, #176	; 0xb0
 800524e:	d014      	beq.n	800527a <HAL_RCC_ClockConfig+0x11e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2bc0      	cmp	r3, #192	; 0xc0
 8005256:	d010      	beq.n	800527a <HAL_RCC_ClockConfig+0x11e>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2bd0      	cmp	r3, #208	; 0xd0
 800525e:	d00c      	beq.n	800527a <HAL_RCC_ClockConfig+0x11e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2be0      	cmp	r3, #224	; 0xe0
 8005266:	d008      	beq.n	800527a <HAL_RCC_ClockConfig+0x11e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2bf0      	cmp	r3, #240	; 0xf0
 800526e:	d004      	beq.n	800527a <HAL_RCC_ClockConfig+0x11e>
 8005270:	f240 217e 	movw	r1, #638	; 0x27e
 8005274:	483f      	ldr	r0, [pc, #252]	; (8005374 <HAL_RCC_ClockConfig+0x218>)
 8005276:	f7fb ffa1 	bl	80011bc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800527a:	4b40      	ldr	r3, [pc, #256]	; (800537c <HAL_RCC_ClockConfig+0x220>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	493d      	ldr	r1, [pc, #244]	; (800537c <HAL_RCC_ClockConfig+0x220>)
 8005288:	4313      	orrs	r3, r2
 800528a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d059      	beq.n	800534c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d010      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x166>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d00c      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x166>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d008      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x166>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d004      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x166>
 80052b8:	f240 2185 	movw	r1, #645	; 0x285
 80052bc:	482d      	ldr	r0, [pc, #180]	; (8005374 <HAL_RCC_ClockConfig+0x218>)
 80052be:	f7fb ff7d 	bl	80011bc <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d107      	bne.n	80052da <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	4b2c      	ldr	r3, [pc, #176]	; (800537c <HAL_RCC_ClockConfig+0x220>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d119      	bne.n	800530a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e0bf      	b.n	800545a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d003      	beq.n	80052ea <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ea:	4b24      	ldr	r3, [pc, #144]	; (800537c <HAL_RCC_ClockConfig+0x220>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e0af      	b.n	800545a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fa:	4b20      	ldr	r3, [pc, #128]	; (800537c <HAL_RCC_ClockConfig+0x220>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e0a7      	b.n	800545a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800530a:	4b1c      	ldr	r3, [pc, #112]	; (800537c <HAL_RCC_ClockConfig+0x220>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4919      	ldr	r1, [pc, #100]	; (800537c <HAL_RCC_ClockConfig+0x220>)
 8005318:	4313      	orrs	r3, r2
 800531a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800531c:	f7fc ff02 	bl	8002124 <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005322:	e00a      	b.n	800533a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005324:	f7fc fefe 	bl	8002124 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e08f      	b.n	800545a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533a:	4b10      	ldr	r3, [pc, #64]	; (800537c <HAL_RCC_ClockConfig+0x220>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 020c 	and.w	r2, r3, #12
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	429a      	cmp	r2, r3
 800534a:	d1eb      	bne.n	8005324 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800534c:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <HAL_RCC_ClockConfig+0x21c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d212      	bcs.n	8005380 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b07      	ldr	r3, [pc, #28]	; (8005378 <HAL_RCC_ClockConfig+0x21c>)
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005362:	4b05      	ldr	r3, [pc, #20]	; (8005378 <HAL_RCC_ClockConfig+0x21c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d007      	beq.n	8005380 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e072      	b.n	800545a <HAL_RCC_ClockConfig+0x2fe>
 8005374:	080114c0 	.word	0x080114c0
 8005378:	40023c00 	.word	0x40023c00
 800537c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d025      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d018      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x26a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539c:	d013      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x26a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80053a6:	d00e      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x26a>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80053b0:	d009      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x26a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80053ba:	d004      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x26a>
 80053bc:	f240 21c3 	movw	r1, #707	; 0x2c3
 80053c0:	4828      	ldr	r0, [pc, #160]	; (8005464 <HAL_RCC_ClockConfig+0x308>)
 80053c2:	f7fb fefb 	bl	80011bc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053c6:	4b28      	ldr	r3, [pc, #160]	; (8005468 <HAL_RCC_ClockConfig+0x30c>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	4925      	ldr	r1, [pc, #148]	; (8005468 <HAL_RCC_ClockConfig+0x30c>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d026      	beq.n	8005432 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d018      	beq.n	800541e <HAL_RCC_ClockConfig+0x2c2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f4:	d013      	beq.n	800541e <HAL_RCC_ClockConfig+0x2c2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80053fe:	d00e      	beq.n	800541e <HAL_RCC_ClockConfig+0x2c2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005408:	d009      	beq.n	800541e <HAL_RCC_ClockConfig+0x2c2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005412:	d004      	beq.n	800541e <HAL_RCC_ClockConfig+0x2c2>
 8005414:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005418:	4812      	ldr	r0, [pc, #72]	; (8005464 <HAL_RCC_ClockConfig+0x308>)
 800541a:	f7fb fecf 	bl	80011bc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800541e:	4b12      	ldr	r3, [pc, #72]	; (8005468 <HAL_RCC_ClockConfig+0x30c>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	490e      	ldr	r1, [pc, #56]	; (8005468 <HAL_RCC_ClockConfig+0x30c>)
 800542e:	4313      	orrs	r3, r2
 8005430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005432:	f000 f821 	bl	8005478 <HAL_RCC_GetSysClockFreq>
 8005436:	4602      	mov	r2, r0
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <HAL_RCC_ClockConfig+0x30c>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	490a      	ldr	r1, [pc, #40]	; (800546c <HAL_RCC_ClockConfig+0x310>)
 8005444:	5ccb      	ldrb	r3, [r1, r3]
 8005446:	fa22 f303 	lsr.w	r3, r2, r3
 800544a:	4a09      	ldr	r2, [pc, #36]	; (8005470 <HAL_RCC_ClockConfig+0x314>)
 800544c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <HAL_RCC_ClockConfig+0x318>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f7fc fab8 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	080114c0 	.word	0x080114c0
 8005468:	40023800 	.word	0x40023800
 800546c:	08013fd0 	.word	0x08013fd0
 8005470:	20000150 	.word	0x20000150
 8005474:	20000154 	.word	0x20000154

08005478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800547c:	b090      	sub	sp, #64	; 0x40
 800547e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	637b      	str	r3, [r7, #52]	; 0x34
 8005484:	2300      	movs	r3, #0
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005488:	2300      	movs	r3, #0
 800548a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005490:	4b59      	ldr	r3, [pc, #356]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 030c 	and.w	r3, r3, #12
 8005498:	2b08      	cmp	r3, #8
 800549a:	d00d      	beq.n	80054b8 <HAL_RCC_GetSysClockFreq+0x40>
 800549c:	2b08      	cmp	r3, #8
 800549e:	f200 80a1 	bhi.w	80055e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_RCC_GetSysClockFreq+0x34>
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d003      	beq.n	80054b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80054aa:	e09b      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054ac:	4b53      	ldr	r3, [pc, #332]	; (80055fc <HAL_RCC_GetSysClockFreq+0x184>)
 80054ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80054b0:	e09b      	b.n	80055ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054b2:	4b53      	ldr	r3, [pc, #332]	; (8005600 <HAL_RCC_GetSysClockFreq+0x188>)
 80054b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054b6:	e098      	b.n	80055ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054b8:	4b4f      	ldr	r3, [pc, #316]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054c2:	4b4d      	ldr	r3, [pc, #308]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d028      	beq.n	8005520 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ce:	4b4a      	ldr	r3, [pc, #296]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	099b      	lsrs	r3, r3, #6
 80054d4:	2200      	movs	r2, #0
 80054d6:	623b      	str	r3, [r7, #32]
 80054d8:	627a      	str	r2, [r7, #36]	; 0x24
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80054e0:	2100      	movs	r1, #0
 80054e2:	4b47      	ldr	r3, [pc, #284]	; (8005600 <HAL_RCC_GetSysClockFreq+0x188>)
 80054e4:	fb03 f201 	mul.w	r2, r3, r1
 80054e8:	2300      	movs	r3, #0
 80054ea:	fb00 f303 	mul.w	r3, r0, r3
 80054ee:	4413      	add	r3, r2
 80054f0:	4a43      	ldr	r2, [pc, #268]	; (8005600 <HAL_RCC_GetSysClockFreq+0x188>)
 80054f2:	fba0 1202 	umull	r1, r2, r0, r2
 80054f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054f8:	460a      	mov	r2, r1
 80054fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80054fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fe:	4413      	add	r3, r2
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	2200      	movs	r2, #0
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	61fa      	str	r2, [r7, #28]
 800550a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800550e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005512:	f7fa feb5 	bl	8000280 <__aeabi_uldivmod>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4613      	mov	r3, r2
 800551c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800551e:	e053      	b.n	80055c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005520:	4b35      	ldr	r3, [pc, #212]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	099b      	lsrs	r3, r3, #6
 8005526:	2200      	movs	r2, #0
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	617a      	str	r2, [r7, #20]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005532:	f04f 0b00 	mov.w	fp, #0
 8005536:	4652      	mov	r2, sl
 8005538:	465b      	mov	r3, fp
 800553a:	f04f 0000 	mov.w	r0, #0
 800553e:	f04f 0100 	mov.w	r1, #0
 8005542:	0159      	lsls	r1, r3, #5
 8005544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005548:	0150      	lsls	r0, r2, #5
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	ebb2 080a 	subs.w	r8, r2, sl
 8005552:	eb63 090b 	sbc.w	r9, r3, fp
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005562:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005566:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800556a:	ebb2 0408 	subs.w	r4, r2, r8
 800556e:	eb63 0509 	sbc.w	r5, r3, r9
 8005572:	f04f 0200 	mov.w	r2, #0
 8005576:	f04f 0300 	mov.w	r3, #0
 800557a:	00eb      	lsls	r3, r5, #3
 800557c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005580:	00e2      	lsls	r2, r4, #3
 8005582:	4614      	mov	r4, r2
 8005584:	461d      	mov	r5, r3
 8005586:	eb14 030a 	adds.w	r3, r4, sl
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	eb45 030b 	adc.w	r3, r5, fp
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	f04f 0300 	mov.w	r3, #0
 800559a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800559e:	4629      	mov	r1, r5
 80055a0:	028b      	lsls	r3, r1, #10
 80055a2:	4621      	mov	r1, r4
 80055a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055a8:	4621      	mov	r1, r4
 80055aa:	028a      	lsls	r2, r1, #10
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	2200      	movs	r2, #0
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	60fa      	str	r2, [r7, #12]
 80055b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055bc:	f7fa fe60 	bl	8000280 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4613      	mov	r3, r2
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055c8:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	0c1b      	lsrs	r3, r3, #16
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	3301      	adds	r3, #1
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80055d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055e2:	e002      	b.n	80055ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055e4:	4b05      	ldr	r3, [pc, #20]	; (80055fc <HAL_RCC_GetSysClockFreq+0x184>)
 80055e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3740      	adds	r7, #64	; 0x40
 80055f0:	46bd      	mov	sp, r7
 80055f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055f6:	bf00      	nop
 80055f8:	40023800 	.word	0x40023800
 80055fc:	00f42400 	.word	0x00f42400
 8005600:	017d7840 	.word	0x017d7840

08005604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005608:	4b03      	ldr	r3, [pc, #12]	; (8005618 <HAL_RCC_GetHCLKFreq+0x14>)
 800560a:	681b      	ldr	r3, [r3, #0]
}
 800560c:	4618      	mov	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20000150 	.word	0x20000150

0800561c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005620:	f7ff fff0 	bl	8005604 <HAL_RCC_GetHCLKFreq>
 8005624:	4602      	mov	r2, r0
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	0a9b      	lsrs	r3, r3, #10
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	4903      	ldr	r1, [pc, #12]	; (8005640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005632:	5ccb      	ldrb	r3, [r1, r3]
 8005634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005638:	4618      	mov	r0, r3
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40023800 	.word	0x40023800
 8005640:	08013fe0 	.word	0x08013fe0

08005644 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	220f      	movs	r2, #15
 8005652:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0203 	and.w	r2, r3, #3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005660:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800566c:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <HAL_RCC_GetClockConfig+0x5c>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005678:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <HAL_RCC_GetClockConfig+0x5c>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	08db      	lsrs	r3, r3, #3
 800567e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005686:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <HAL_RCC_GetClockConfig+0x60>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0207 	and.w	r2, r3, #7
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	601a      	str	r2, [r3, #0]
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40023800 	.word	0x40023800
 80056a4:	40023c00 	.word	0x40023c00

080056a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b0f      	cmp	r3, #15
 80056c6:	d904      	bls.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80056c8:	f640 11d7 	movw	r1, #2519	; 0x9d7
 80056cc:	4834      	ldr	r0, [pc, #208]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80056ce:	f7fb fd75 	bl	80011bc <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d105      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d066      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d903      	bls.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	2b07      	cmp	r3, #7
 80056f8:	d904      	bls.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80056fa:	f640 11de 	movw	r1, #2526	; 0x9de
 80056fe:	4828      	ldr	r0, [pc, #160]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005700:	f7fb fd5c 	bl	80011bc <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b31      	cmp	r3, #49	; 0x31
 800570a:	d904      	bls.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005714:	d904      	bls.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005716:	f640 11df 	movw	r1, #2527	; 0x9df
 800571a:	4821      	ldr	r0, [pc, #132]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800571c:	f7fb fd4e 	bl	80011bc <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d903      	bls.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b3f      	cmp	r3, #63	; 0x3f
 800572e:	d904      	bls.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x92>
 8005730:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8005734:	481a      	ldr	r0, [pc, #104]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005736:	f7fb fd41 	bl	80011bc <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800573a:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005740:	f7fc fcf0 	bl	8002124 <HAL_GetTick>
 8005744:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005746:	e008      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005748:	f7fc fcec 	bl	8002124 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e1b3      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800575a:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	019b      	lsls	r3, r3, #6
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	071b      	lsls	r3, r3, #28
 8005778:	490b      	ldr	r1, [pc, #44]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800577a:	4313      	orrs	r3, r2
 800577c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005780:	4b08      	ldr	r3, [pc, #32]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8005782:	2201      	movs	r2, #1
 8005784:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005786:	f7fc fccd 	bl	8002124 <HAL_GetTick>
 800578a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800578c:	e00e      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800578e:	f7fc fcc9 	bl	8002124 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d907      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e190      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80057a0:	080114f8 	.word	0x080114f8
 80057a4:	42470068 	.word	0x42470068
 80057a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057ac:	4b88      	ldr	r3, [pc, #544]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0ea      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8173 	beq.w	8005aac <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ce:	f000 80a6 	beq.w	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057da:	f000 80a0 	beq.w	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	4a7c      	ldr	r2, [pc, #496]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	f000 809a 	beq.w	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	4a7a      	ldr	r2, [pc, #488]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	f000 8094 	beq.w	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	4a78      	ldr	r2, [pc, #480]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	f000 808e 	beq.w	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	4a76      	ldr	r2, [pc, #472]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005808:	4293      	cmp	r3, r2
 800580a:	f000 8088 	beq.w	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	4a74      	ldr	r2, [pc, #464]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	f000 8082 	beq.w	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	4a72      	ldr	r2, [pc, #456]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d07c      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	4a70      	ldr	r2, [pc, #448]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d077      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	4a6f      	ldr	r2, [pc, #444]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d072      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	4a6d      	ldr	r2, [pc, #436]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d06d      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	4a6c      	ldr	r2, [pc, #432]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d068      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	4a6a      	ldr	r2, [pc, #424]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d063      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	4a69      	ldr	r2, [pc, #420]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d05e      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	4a67      	ldr	r2, [pc, #412]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d059      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	4a66      	ldr	r2, [pc, #408]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d054      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	4a64      	ldr	r2, [pc, #400]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d04f      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	4a63      	ldr	r2, [pc, #396]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d04a      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	4a61      	ldr	r2, [pc, #388]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d045      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	4a60      	ldr	r2, [pc, #384]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d040      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	4a5e      	ldr	r2, [pc, #376]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d03b      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	4a5d      	ldr	r2, [pc, #372]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d036      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	4a5b      	ldr	r2, [pc, #364]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d031      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	4a5a      	ldr	r2, [pc, #360]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d02c      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	4a58      	ldr	r2, [pc, #352]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d027      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	4a57      	ldr	r2, [pc, #348]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d022      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	4a55      	ldr	r2, [pc, #340]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01d      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	4a54      	ldr	r2, [pc, #336]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d018      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	4a52      	ldr	r2, [pc, #328]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	4a51      	ldr	r2, [pc, #324]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00e      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	4a4f      	ldr	r2, [pc, #316]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d009      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	4a4e      	ldr	r2, [pc, #312]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d004      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005914:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8005918:	484c      	ldr	r0, [pc, #304]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800591a:	f7fb fc4f 	bl	80011bc <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	4b2b      	ldr	r3, [pc, #172]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	4a2a      	ldr	r2, [pc, #168]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592c:	6413      	str	r3, [r2, #64]	; 0x40
 800592e:	4b28      	ldr	r3, [pc, #160]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800593a:	4b45      	ldr	r3, [pc, #276]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a44      	ldr	r2, [pc, #272]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005944:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005946:	f7fc fbed 	bl	8002124 <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800594c:	e008      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800594e:	f7fc fbe9 	bl	8002124 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e0b0      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005960:	4b3b      	ldr	r3, [pc, #236]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0f0      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800596c:	4b18      	ldr	r3, [pc, #96]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800596e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005974:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d073      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	429a      	cmp	r2, r3
 8005988:	d06c      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800598a:	4b11      	ldr	r3, [pc, #68]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005992:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005994:	4b2f      	ldr	r3, [pc, #188]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005996:	2201      	movs	r2, #1
 8005998:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800599a:	4b2e      	ldr	r3, [pc, #184]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059a0:	4a0b      	ldr	r2, [pc, #44]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059a6:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d158      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059b2:	f7fc fbb7 	bl	8002124 <HAL_GetTick>
 80059b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b8:	e04e      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ba:	f7fc fbb3 	bl	8002124 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d945      	bls.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e078      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80059d0:	40023800 	.word	0x40023800
 80059d4:	00020300 	.word	0x00020300
 80059d8:	00030300 	.word	0x00030300
 80059dc:	00040300 	.word	0x00040300
 80059e0:	00050300 	.word	0x00050300
 80059e4:	00060300 	.word	0x00060300
 80059e8:	00070300 	.word	0x00070300
 80059ec:	00080300 	.word	0x00080300
 80059f0:	00090300 	.word	0x00090300
 80059f4:	000a0300 	.word	0x000a0300
 80059f8:	000b0300 	.word	0x000b0300
 80059fc:	000c0300 	.word	0x000c0300
 8005a00:	000d0300 	.word	0x000d0300
 8005a04:	000e0300 	.word	0x000e0300
 8005a08:	000f0300 	.word	0x000f0300
 8005a0c:	00100300 	.word	0x00100300
 8005a10:	00110300 	.word	0x00110300
 8005a14:	00120300 	.word	0x00120300
 8005a18:	00130300 	.word	0x00130300
 8005a1c:	00140300 	.word	0x00140300
 8005a20:	00150300 	.word	0x00150300
 8005a24:	00160300 	.word	0x00160300
 8005a28:	00170300 	.word	0x00170300
 8005a2c:	00180300 	.word	0x00180300
 8005a30:	00190300 	.word	0x00190300
 8005a34:	001a0300 	.word	0x001a0300
 8005a38:	001b0300 	.word	0x001b0300
 8005a3c:	001c0300 	.word	0x001c0300
 8005a40:	001d0300 	.word	0x001d0300
 8005a44:	001e0300 	.word	0x001e0300
 8005a48:	001f0300 	.word	0x001f0300
 8005a4c:	080114f8 	.word	0x080114f8
 8005a50:	40007000 	.word	0x40007000
 8005a54:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a58:	4b1c      	ldr	r3, [pc, #112]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0aa      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a70:	d10d      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005a72:	4b16      	ldr	r3, [pc, #88]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a86:	4911      	ldr	r1, [pc, #68]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	608b      	str	r3, [r1, #8]
 8005a8c:	e005      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	4a0e      	ldr	r2, [pc, #56]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005a94:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a98:	6093      	str	r3, [r2, #8]
 8005a9a:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005a9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa6:	4909      	ldr	r1, [pc, #36]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0308 	and.w	r3, r3, #8
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	7d1a      	ldrb	r2, [r3, #20]
 8005abc:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005abe:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	424711e0 	.word	0x424711e0

08005ad4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e0c4      	b.n	8005c74 <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a63      	ldr	r2, [pc, #396]	; (8005c7c <HAL_RTC_Init+0x1a8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d004      	beq.n	8005afe <HAL_RTC_Init+0x2a>
 8005af4:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005af8:	4861      	ldr	r0, [pc, #388]	; (8005c80 <HAL_RTC_Init+0x1ac>)
 8005afa:	f7fb fb5f 	bl	80011bc <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d008      	beq.n	8005b18 <HAL_RTC_Init+0x44>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d004      	beq.n	8005b18 <HAL_RTC_Init+0x44>
 8005b0e:	f240 1105 	movw	r1, #261	; 0x105
 8005b12:	485b      	ldr	r0, [pc, #364]	; (8005c80 <HAL_RTC_Init+0x1ac>)
 8005b14:	f7fb fb52 	bl	80011bc <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b1e:	d904      	bls.n	8005b2a <HAL_RTC_Init+0x56>
 8005b20:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005b24:	4856      	ldr	r0, [pc, #344]	; (8005c80 <HAL_RTC_Init+0x1ac>)
 8005b26:	f7fb fb49 	bl	80011bc <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b32:	d304      	bcc.n	8005b3e <HAL_RTC_Init+0x6a>
 8005b34:	f240 1107 	movw	r1, #263	; 0x107
 8005b38:	4851      	ldr	r0, [pc, #324]	; (8005c80 <HAL_RTC_Init+0x1ac>)
 8005b3a:	f7fb fb3f 	bl	80011bc <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d013      	beq.n	8005b6e <HAL_RTC_Init+0x9a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b4e:	d00e      	beq.n	8005b6e <HAL_RTC_Init+0x9a>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b58:	d009      	beq.n	8005b6e <HAL_RTC_Init+0x9a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b62:	d004      	beq.n	8005b6e <HAL_RTC_Init+0x9a>
 8005b64:	f44f 7184 	mov.w	r1, #264	; 0x108
 8005b68:	4845      	ldr	r0, [pc, #276]	; (8005c80 <HAL_RTC_Init+0x1ac>)
 8005b6a:	f7fb fb27 	bl	80011bc <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <HAL_RTC_Init+0xb6>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b7e:	d004      	beq.n	8005b8a <HAL_RTC_Init+0xb6>
 8005b80:	f240 1109 	movw	r1, #265	; 0x109
 8005b84:	483e      	ldr	r0, [pc, #248]	; (8005c80 <HAL_RTC_Init+0x1ac>)
 8005b86:	f7fb fb19 	bl	80011bc <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d009      	beq.n	8005ba6 <HAL_RTC_Init+0xd2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b9a:	d004      	beq.n	8005ba6 <HAL_RTC_Init+0xd2>
 8005b9c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005ba0:	4837      	ldr	r0, [pc, #220]	; (8005c80 <HAL_RTC_Init+0x1ac>)
 8005ba2:	f7fb fb0b 	bl	80011bc <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	7f5b      	ldrb	r3, [r3, #29]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d105      	bne.n	8005bbc <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fb fb66 	bl	8001288 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	22ca      	movs	r2, #202	; 0xca
 8005bc8:	625a      	str	r2, [r3, #36]	; 0x24
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2253      	movs	r2, #83	; 0x53
 8005bd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fad2 	bl	800617c <RTC_EnterInitMode>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d12c      	bne.n	8005c3c <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6812      	ldr	r2, [r2, #0]
 8005bec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6899      	ldr	r1, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	68d2      	ldr	r2, [r2, #12]
 8005c1c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6919      	ldr	r1, [r3, #16]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	041a      	lsls	r2, r3, #16
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fad9 	bl	80061ea <RTC_ExitInitMode>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d113      	bne.n	8005c6a <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699a      	ldr	r2, [r3, #24]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	22ff      	movs	r2, #255	; 0xff
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40002800 	.word	0x40002800
 8005c80:	08011534 	.word	0x08011534

08005c84 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <HAL_RTC_SetTime+0x26>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d004      	beq.n	8005caa <HAL_RTC_SetTime+0x26>
 8005ca0:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8005ca4:	489a      	ldr	r0, [pc, #616]	; (8005f10 <HAL_RTC_SetTime+0x28c>)
 8005ca6:	f7fb fa89 	bl	80011bc <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb2:	d00d      	beq.n	8005cd0 <HAL_RTC_SetTime+0x4c>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cbc:	d008      	beq.n	8005cd0 <HAL_RTC_SetTime+0x4c>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <HAL_RTC_SetTime+0x4c>
 8005cc6:	f240 21b5 	movw	r1, #693	; 0x2b5
 8005cca:	4891      	ldr	r0, [pc, #580]	; (8005f10 <HAL_RTC_SetTime+0x28c>)
 8005ccc:	f7fb fa76 	bl	80011bc <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d009      	beq.n	8005cec <HAL_RTC_SetTime+0x68>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ce0:	d004      	beq.n	8005cec <HAL_RTC_SetTime+0x68>
 8005ce2:	f240 21b6 	movw	r1, #694	; 0x2b6
 8005ce6:	488a      	ldr	r0, [pc, #552]	; (8005f10 <HAL_RTC_SetTime+0x28c>)
 8005ce8:	f7fb fa68 	bl	80011bc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	7f1b      	ldrb	r3, [r3, #28]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_RTC_SetTime+0x74>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e107      	b.n	8005f08 <HAL_RTC_SetTime+0x284>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2202      	movs	r2, #2
 8005d02:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d15c      	bne.n	8005dc4 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01a      	beq.n	8005d4e <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_RTC_SetTime+0xa4>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b0c      	cmp	r3, #12
 8005d26:	d904      	bls.n	8005d32 <HAL_RTC_SetTime+0xae>
 8005d28:	f240 21c1 	movw	r1, #705	; 0x2c1
 8005d2c:	4878      	ldr	r0, [pc, #480]	; (8005f10 <HAL_RTC_SetTime+0x28c>)
 8005d2e:	f7fb fa45 	bl	80011bc <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	78db      	ldrb	r3, [r3, #3]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d015      	beq.n	8005d66 <HAL_RTC_SetTime+0xe2>
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	78db      	ldrb	r3, [r3, #3]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d011      	beq.n	8005d66 <HAL_RTC_SetTime+0xe2>
 8005d42:	f240 21c2 	movw	r1, #706	; 0x2c2
 8005d46:	4872      	ldr	r0, [pc, #456]	; (8005f10 <HAL_RTC_SetTime+0x28c>)
 8005d48:	f7fb fa38 	bl	80011bc <assert_failed>
 8005d4c:	e00b      	b.n	8005d66 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2200      	movs	r2, #0
 8005d52:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b17      	cmp	r3, #23
 8005d5a:	d904      	bls.n	8005d66 <HAL_RTC_SetTime+0xe2>
 8005d5c:	f240 21c7 	movw	r1, #711	; 0x2c7
 8005d60:	486b      	ldr	r0, [pc, #428]	; (8005f10 <HAL_RTC_SetTime+0x28c>)
 8005d62:	f7fb fa2b 	bl	80011bc <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	2b3b      	cmp	r3, #59	; 0x3b
 8005d6c:	d904      	bls.n	8005d78 <HAL_RTC_SetTime+0xf4>
 8005d6e:	f240 21c9 	movw	r1, #713	; 0x2c9
 8005d72:	4867      	ldr	r0, [pc, #412]	; (8005f10 <HAL_RTC_SetTime+0x28c>)
 8005d74:	f7fb fa22 	bl	80011bc <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	789b      	ldrb	r3, [r3, #2]
 8005d7c:	2b3b      	cmp	r3, #59	; 0x3b
 8005d7e:	d904      	bls.n	8005d8a <HAL_RTC_SetTime+0x106>
 8005d80:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005d84:	4862      	ldr	r0, [pc, #392]	; (8005f10 <HAL_RTC_SetTime+0x28c>)
 8005d86:	f7fb fa19 	bl	80011bc <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fa50 	bl	8006234 <RTC_ByteToBcd2>
 8005d94:	4603      	mov	r3, r0
 8005d96:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fa49 	bl	8006234 <RTC_ByteToBcd2>
 8005da2:	4603      	mov	r3, r0
 8005da4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005da6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	789b      	ldrb	r3, [r3, #2]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fa41 	bl	8006234 <RTC_ByteToBcd2>
 8005db2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005db4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	78db      	ldrb	r3, [r3, #3]
 8005dbc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	e062      	b.n	8005e8a <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d022      	beq.n	8005e18 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fa49 	bl	800626e <RTC_Bcd2ToByte>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <HAL_RTC_SetTime+0x16e>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fa41 	bl	800626e <RTC_Bcd2ToByte>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b0c      	cmp	r3, #12
 8005df0:	d904      	bls.n	8005dfc <HAL_RTC_SetTime+0x178>
 8005df2:	f240 21d5 	movw	r1, #725	; 0x2d5
 8005df6:	4846      	ldr	r0, [pc, #280]	; (8005f10 <HAL_RTC_SetTime+0x28c>)
 8005df8:	f7fb f9e0 	bl	80011bc <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	78db      	ldrb	r3, [r3, #3]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d019      	beq.n	8005e38 <HAL_RTC_SetTime+0x1b4>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	78db      	ldrb	r3, [r3, #3]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d015      	beq.n	8005e38 <HAL_RTC_SetTime+0x1b4>
 8005e0c:	f240 21d6 	movw	r1, #726	; 0x2d6
 8005e10:	483f      	ldr	r0, [pc, #252]	; (8005f10 <HAL_RTC_SetTime+0x28c>)
 8005e12:	f7fb f9d3 	bl	80011bc <assert_failed>
 8005e16:	e00f      	b.n	8005e38 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fa23 	bl	800626e <RTC_Bcd2ToByte>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b17      	cmp	r3, #23
 8005e2c:	d904      	bls.n	8005e38 <HAL_RTC_SetTime+0x1b4>
 8005e2e:	f240 21db 	movw	r1, #731	; 0x2db
 8005e32:	4837      	ldr	r0, [pc, #220]	; (8005f10 <HAL_RTC_SetTime+0x28c>)
 8005e34:	f7fb f9c2 	bl	80011bc <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fa16 	bl	800626e <RTC_Bcd2ToByte>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b3b      	cmp	r3, #59	; 0x3b
 8005e46:	d904      	bls.n	8005e52 <HAL_RTC_SetTime+0x1ce>
 8005e48:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005e4c:	4830      	ldr	r0, [pc, #192]	; (8005f10 <HAL_RTC_SetTime+0x28c>)
 8005e4e:	f7fb f9b5 	bl	80011bc <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	789b      	ldrb	r3, [r3, #2]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fa09 	bl	800626e <RTC_Bcd2ToByte>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b3b      	cmp	r3, #59	; 0x3b
 8005e60:	d904      	bls.n	8005e6c <HAL_RTC_SetTime+0x1e8>
 8005e62:	f240 21de 	movw	r1, #734	; 0x2de
 8005e66:	482a      	ldr	r0, [pc, #168]	; (8005f10 <HAL_RTC_SetTime+0x28c>)
 8005e68:	f7fb f9a8 	bl	80011bc <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e78:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e7e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	78db      	ldrb	r3, [r3, #3]
 8005e84:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	22ca      	movs	r2, #202	; 0xca
 8005e90:	625a      	str	r2, [r3, #36]	; 0x24
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2253      	movs	r2, #83	; 0x53
 8005e98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f96e 	bl	800617c <RTC_EnterInitMode>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ea4:	7cfb      	ldrb	r3, [r7, #19]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d120      	bne.n	8005eec <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005eb4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005eb8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ec8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6899      	ldr	r1, [r3, #8]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f981 	bl	80061ea <RTC_ExitInitMode>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005eec:	7cfb      	ldrb	r3, [r7, #19]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	22ff      	movs	r2, #255	; 0xff
 8005efe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	771a      	strb	r2, [r3, #28]

  return status;
 8005f06:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd90      	pop	{r4, r7, pc}
 8005f10:	08011534 	.word	0x08011534

08005f14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f14:	b590      	push	{r4, r7, lr}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <HAL_RTC_SetDate+0x26>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d004      	beq.n	8005f3a <HAL_RTC_SetDate+0x26>
 8005f30:	f240 3153 	movw	r1, #851	; 0x353
 8005f34:	487c      	ldr	r0, [pc, #496]	; (8006128 <HAL_RTC_SetDate+0x214>)
 8005f36:	f7fb f941 	bl	80011bc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	7f1b      	ldrb	r3, [r3, #28]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_RTC_SetDate+0x32>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e0ec      	b.n	8006120 <HAL_RTC_SetDate+0x20c>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10e      	bne.n	8005f76 <HAL_RTC_SetDate+0x62>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	785b      	ldrb	r3, [r3, #1]
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	f023 0310 	bic.w	r3, r3, #16
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	330a      	adds	r3, #10
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d01c      	beq.n	8005fb8 <HAL_RTC_SetDate+0xa4>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d018      	beq.n	8005fb8 <HAL_RTC_SetDate+0xa4>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d014      	beq.n	8005fb8 <HAL_RTC_SetDate+0xa4>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d010      	beq.n	8005fb8 <HAL_RTC_SetDate+0xa4>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b05      	cmp	r3, #5
 8005f9c:	d00c      	beq.n	8005fb8 <HAL_RTC_SetDate+0xa4>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b06      	cmp	r3, #6
 8005fa4:	d008      	beq.n	8005fb8 <HAL_RTC_SetDate+0xa4>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b07      	cmp	r3, #7
 8005fac:	d004      	beq.n	8005fb8 <HAL_RTC_SetDate+0xa4>
 8005fae:	f240 315f 	movw	r1, #863	; 0x35f
 8005fb2:	485d      	ldr	r0, [pc, #372]	; (8006128 <HAL_RTC_SetDate+0x214>)
 8005fb4:	f7fb f902 	bl	80011bc <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d13f      	bne.n	800603e <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	78db      	ldrb	r3, [r3, #3]
 8005fc2:	2b63      	cmp	r3, #99	; 0x63
 8005fc4:	d904      	bls.n	8005fd0 <HAL_RTC_SetDate+0xbc>
 8005fc6:	f240 3163 	movw	r1, #867	; 0x363
 8005fca:	4857      	ldr	r0, [pc, #348]	; (8006128 <HAL_RTC_SetDate+0x214>)
 8005fcc:	f7fb f8f6 	bl	80011bc <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_RTC_SetDate+0xcc>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	785b      	ldrb	r3, [r3, #1]
 8005fdc:	2b0c      	cmp	r3, #12
 8005fde:	d904      	bls.n	8005fea <HAL_RTC_SetDate+0xd6>
 8005fe0:	f44f 7159 	mov.w	r1, #868	; 0x364
 8005fe4:	4850      	ldr	r0, [pc, #320]	; (8006128 <HAL_RTC_SetDate+0x214>)
 8005fe6:	f7fb f8e9 	bl	80011bc <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	789b      	ldrb	r3, [r3, #2]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_RTC_SetDate+0xe6>
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	789b      	ldrb	r3, [r3, #2]
 8005ff6:	2b1f      	cmp	r3, #31
 8005ff8:	d904      	bls.n	8006004 <HAL_RTC_SetDate+0xf0>
 8005ffa:	f240 3165 	movw	r1, #869	; 0x365
 8005ffe:	484a      	ldr	r0, [pc, #296]	; (8006128 <HAL_RTC_SetDate+0x214>)
 8006000:	f7fb f8dc 	bl	80011bc <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	78db      	ldrb	r3, [r3, #3]
 8006008:	4618      	mov	r0, r3
 800600a:	f000 f913 	bl	8006234 <RTC_ByteToBcd2>
 800600e:	4603      	mov	r3, r0
 8006010:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 f90c 	bl	8006234 <RTC_ByteToBcd2>
 800601c:	4603      	mov	r3, r0
 800601e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006020:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	789b      	ldrb	r3, [r3, #2]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 f904 	bl	8006234 <RTC_ByteToBcd2>
 800602c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800602e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006038:	4313      	orrs	r3, r2
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	e045      	b.n	80060ca <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	78db      	ldrb	r3, [r3, #3]
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f913 	bl	800626e <RTC_Bcd2ToByte>
 8006048:	4603      	mov	r3, r0
 800604a:	2b63      	cmp	r3, #99	; 0x63
 800604c:	d904      	bls.n	8006058 <HAL_RTC_SetDate+0x144>
 800604e:	f240 316e 	movw	r1, #878	; 0x36e
 8006052:	4835      	ldr	r0, [pc, #212]	; (8006128 <HAL_RTC_SetDate+0x214>)
 8006054:	f7fb f8b2 	bl	80011bc <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 f906 	bl	800626e <RTC_Bcd2ToByte>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <HAL_RTC_SetDate+0x164>
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	785b      	ldrb	r3, [r3, #1]
 800606c:	4618      	mov	r0, r3
 800606e:	f000 f8fe 	bl	800626e <RTC_Bcd2ToByte>
 8006072:	4603      	mov	r3, r0
 8006074:	2b0c      	cmp	r3, #12
 8006076:	d904      	bls.n	8006082 <HAL_RTC_SetDate+0x16e>
 8006078:	f240 316f 	movw	r1, #879	; 0x36f
 800607c:	482a      	ldr	r0, [pc, #168]	; (8006128 <HAL_RTC_SetDate+0x214>)
 800607e:	f7fb f89d 	bl	80011bc <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	789b      	ldrb	r3, [r3, #2]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 f8f1 	bl	800626e <RTC_Bcd2ToByte>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <HAL_RTC_SetDate+0x18e>
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	789b      	ldrb	r3, [r3, #2]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f8e9 	bl	800626e <RTC_Bcd2ToByte>
 800609c:	4603      	mov	r3, r0
 800609e:	2b1f      	cmp	r3, #31
 80060a0:	d904      	bls.n	80060ac <HAL_RTC_SetDate+0x198>
 80060a2:	f44f 715c 	mov.w	r1, #880	; 0x370
 80060a6:	4820      	ldr	r0, [pc, #128]	; (8006128 <HAL_RTC_SetDate+0x214>)
 80060a8:	f7fb f888 	bl	80011bc <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	78db      	ldrb	r3, [r3, #3]
 80060b0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060b8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060be:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	22ca      	movs	r2, #202	; 0xca
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2253      	movs	r2, #83	; 0x53
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f84e 	bl	800617c <RTC_EnterInitMode>
 80060e0:	4603      	mov	r3, r0
 80060e2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80060e4:	7cfb      	ldrb	r3, [r7, #19]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10c      	bne.n	8006104 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 f875 	bl	80061ea <RTC_ExitInitMode>
 8006100:	4603      	mov	r3, r0
 8006102:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006104:	7cfb      	ldrb	r3, [r7, #19]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d102      	bne.n	8006110 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	22ff      	movs	r2, #255	; 0xff
 8006116:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	771a      	strb	r2, [r3, #28]

  return status;
 800611e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006120:	4618      	mov	r0, r3
 8006122:	371c      	adds	r7, #28
 8006124:	46bd      	mov	sp, r7
 8006126:	bd90      	pop	{r4, r7, pc}
 8006128:	08011534 	.word	0x08011534

0800612c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006146:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006148:	f7fb ffec 	bl	8002124 <HAL_GetTick>
 800614c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800614e:	e009      	b.n	8006164 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006150:	f7fb ffe8 	bl	8002124 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800615e:	d901      	bls.n	8006164 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e007      	b.n	8006174 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0ee      	beq.n	8006150 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d122      	bne.n	80061e0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061a8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061aa:	f7fb ffbb 	bl	8002124 <HAL_GetTick>
 80061ae:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061b0:	e00c      	b.n	80061cc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061b2:	f7fb ffb7 	bl	8002124 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061c0:	d904      	bls.n	80061cc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2204      	movs	r2, #4
 80061c6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d102      	bne.n	80061e0 <RTC_EnterInitMode+0x64>
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d1e8      	bne.n	80061b2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006204:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff ff89 	bl	800612c <HAL_RTC_WaitForSynchro>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2204      	movs	r2, #4
 8006224:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006242:	e005      	b.n	8006250 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	3301      	adds	r3, #1
 8006248:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	3b0a      	subs	r3, #10
 800624e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	2b09      	cmp	r3, #9
 8006254:	d8f6      	bhi.n	8006244 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	b2da      	uxtb	r2, r3
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	4313      	orrs	r3, r2
 8006260:	b2db      	uxtb	r3, r3
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	4603      	mov	r3, r0
 8006276:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	091b      	lsrs	r3, r3, #4
 8006280:	b2db      	uxtb	r3, r3
 8006282:	461a      	mov	r2, r3
 8006284:	0092      	lsls	r2, r2, #2
 8006286:	4413      	add	r3, r2
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	b2da      	uxtb	r2, r3
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	4413      	add	r3, r2
 8006298:	b2db      	uxtb	r3, r3
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e18c      	b.n	80065d4 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a75      	ldr	r2, [pc, #468]	; (8006494 <HAL_SPI_Init+0x1ec>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d018      	beq.n	80062f6 <HAL_SPI_Init+0x4e>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a73      	ldr	r2, [pc, #460]	; (8006498 <HAL_SPI_Init+0x1f0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <HAL_SPI_Init+0x4e>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a72      	ldr	r2, [pc, #456]	; (800649c <HAL_SPI_Init+0x1f4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00e      	beq.n	80062f6 <HAL_SPI_Init+0x4e>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a70      	ldr	r2, [pc, #448]	; (80064a0 <HAL_SPI_Init+0x1f8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d009      	beq.n	80062f6 <HAL_SPI_Init+0x4e>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a6f      	ldr	r2, [pc, #444]	; (80064a4 <HAL_SPI_Init+0x1fc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d004      	beq.n	80062f6 <HAL_SPI_Init+0x4e>
 80062ec:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80062f0:	486d      	ldr	r0, [pc, #436]	; (80064a8 <HAL_SPI_Init+0x200>)
 80062f2:	f7fa ff63 	bl	80011bc <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d009      	beq.n	8006312 <HAL_SPI_Init+0x6a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006306:	d004      	beq.n	8006312 <HAL_SPI_Init+0x6a>
 8006308:	f240 1141 	movw	r1, #321	; 0x141
 800630c:	4866      	ldr	r0, [pc, #408]	; (80064a8 <HAL_SPI_Init+0x200>)
 800630e:	f7fa ff55 	bl	80011bc <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00e      	beq.n	8006338 <HAL_SPI_Init+0x90>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006322:	d009      	beq.n	8006338 <HAL_SPI_Init+0x90>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800632c:	d004      	beq.n	8006338 <HAL_SPI_Init+0x90>
 800632e:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006332:	485d      	ldr	r0, [pc, #372]	; (80064a8 <HAL_SPI_Init+0x200>)
 8006334:	f7fa ff42 	bl	80011bc <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006340:	d008      	beq.n	8006354 <HAL_SPI_Init+0xac>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <HAL_SPI_Init+0xac>
 800634a:	f240 1143 	movw	r1, #323	; 0x143
 800634e:	4856      	ldr	r0, [pc, #344]	; (80064a8 <HAL_SPI_Init+0x200>)
 8006350:	f7fa ff34 	bl	80011bc <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800635c:	d00d      	beq.n	800637a <HAL_SPI_Init+0xd2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <HAL_SPI_Init+0xd2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800636e:	d004      	beq.n	800637a <HAL_SPI_Init+0xd2>
 8006370:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006374:	484c      	ldr	r0, [pc, #304]	; (80064a8 <HAL_SPI_Init+0x200>)
 8006376:	f7fa ff21 	bl	80011bc <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d020      	beq.n	80063c4 <HAL_SPI_Init+0x11c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	2b08      	cmp	r3, #8
 8006388:	d01c      	beq.n	80063c4 <HAL_SPI_Init+0x11c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	2b10      	cmp	r3, #16
 8006390:	d018      	beq.n	80063c4 <HAL_SPI_Init+0x11c>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	2b18      	cmp	r3, #24
 8006398:	d014      	beq.n	80063c4 <HAL_SPI_Init+0x11c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d010      	beq.n	80063c4 <HAL_SPI_Init+0x11c>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	2b28      	cmp	r3, #40	; 0x28
 80063a8:	d00c      	beq.n	80063c4 <HAL_SPI_Init+0x11c>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	2b30      	cmp	r3, #48	; 0x30
 80063b0:	d008      	beq.n	80063c4 <HAL_SPI_Init+0x11c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	2b38      	cmp	r3, #56	; 0x38
 80063b8:	d004      	beq.n	80063c4 <HAL_SPI_Init+0x11c>
 80063ba:	f240 1145 	movw	r1, #325	; 0x145
 80063be:	483a      	ldr	r0, [pc, #232]	; (80064a8 <HAL_SPI_Init+0x200>)
 80063c0:	f7fa fefc 	bl	80011bc <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d008      	beq.n	80063de <HAL_SPI_Init+0x136>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	2b80      	cmp	r3, #128	; 0x80
 80063d2:	d004      	beq.n	80063de <HAL_SPI_Init+0x136>
 80063d4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80063d8:	4833      	ldr	r0, [pc, #204]	; (80064a8 <HAL_SPI_Init+0x200>)
 80063da:	f7fa feef 	bl	80011bc <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <HAL_SPI_Init+0x150>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	2b10      	cmp	r3, #16
 80063ec:	d004      	beq.n	80063f8 <HAL_SPI_Init+0x150>
 80063ee:	f240 1147 	movw	r1, #327	; 0x147
 80063f2:	482d      	ldr	r0, [pc, #180]	; (80064a8 <HAL_SPI_Init+0x200>)
 80063f4:	f7fa fee2 	bl	80011bc <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d155      	bne.n	80064ac <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d008      	beq.n	800641a <HAL_SPI_Init+0x172>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d004      	beq.n	800641a <HAL_SPI_Init+0x172>
 8006410:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8006414:	4824      	ldr	r0, [pc, #144]	; (80064a8 <HAL_SPI_Init+0x200>)
 8006416:	f7fa fed1 	bl	80011bc <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <HAL_SPI_Init+0x18c>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d004      	beq.n	8006434 <HAL_SPI_Init+0x18c>
 800642a:	f240 114b 	movw	r1, #331	; 0x14b
 800642e:	481e      	ldr	r0, [pc, #120]	; (80064a8 <HAL_SPI_Init+0x200>)
 8006430:	f7fa fec4 	bl	80011bc <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800643c:	d125      	bne.n	800648a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d05d      	beq.n	8006502 <HAL_SPI_Init+0x25a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	2b08      	cmp	r3, #8
 800644c:	d059      	beq.n	8006502 <HAL_SPI_Init+0x25a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	2b10      	cmp	r3, #16
 8006454:	d055      	beq.n	8006502 <HAL_SPI_Init+0x25a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	2b18      	cmp	r3, #24
 800645c:	d051      	beq.n	8006502 <HAL_SPI_Init+0x25a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	2b20      	cmp	r3, #32
 8006464:	d04d      	beq.n	8006502 <HAL_SPI_Init+0x25a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	2b28      	cmp	r3, #40	; 0x28
 800646c:	d049      	beq.n	8006502 <HAL_SPI_Init+0x25a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	2b30      	cmp	r3, #48	; 0x30
 8006474:	d045      	beq.n	8006502 <HAL_SPI_Init+0x25a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	2b38      	cmp	r3, #56	; 0x38
 800647c:	d041      	beq.n	8006502 <HAL_SPI_Init+0x25a>
 800647e:	f240 114f 	movw	r1, #335	; 0x14f
 8006482:	4809      	ldr	r0, [pc, #36]	; (80064a8 <HAL_SPI_Init+0x200>)
 8006484:	f7fa fe9a 	bl	80011bc <assert_failed>
 8006488:	e03b      	b.n	8006502 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	61da      	str	r2, [r3, #28]
 8006490:	e037      	b.n	8006502 <HAL_SPI_Init+0x25a>
 8006492:	bf00      	nop
 8006494:	40013000 	.word	0x40013000
 8006498:	40003800 	.word	0x40003800
 800649c:	40003c00 	.word	0x40003c00
 80064a0:	40013400 	.word	0x40013400
 80064a4:	40015000 	.word	0x40015000
 80064a8:	0801156c 	.word	0x0801156c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d020      	beq.n	80064f6 <HAL_SPI_Init+0x24e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d01c      	beq.n	80064f6 <HAL_SPI_Init+0x24e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	2b10      	cmp	r3, #16
 80064c2:	d018      	beq.n	80064f6 <HAL_SPI_Init+0x24e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	2b18      	cmp	r3, #24
 80064ca:	d014      	beq.n	80064f6 <HAL_SPI_Init+0x24e>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d010      	beq.n	80064f6 <HAL_SPI_Init+0x24e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	2b28      	cmp	r3, #40	; 0x28
 80064da:	d00c      	beq.n	80064f6 <HAL_SPI_Init+0x24e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	2b30      	cmp	r3, #48	; 0x30
 80064e2:	d008      	beq.n	80064f6 <HAL_SPI_Init+0x24e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	2b38      	cmp	r3, #56	; 0x38
 80064ea:	d004      	beq.n	80064f6 <HAL_SPI_Init+0x24e>
 80064ec:	f240 1159 	movw	r1, #345	; 0x159
 80064f0:	483a      	ldr	r0, [pc, #232]	; (80065dc <HAL_SPI_Init+0x334>)
 80064f2:	f7fa fe63 	bl	80011bc <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7fa ff15 	bl	800134c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2202      	movs	r2, #2
 8006526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006538:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006586:	ea42 0103 	orr.w	r1, r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	0c1b      	lsrs	r3, r3, #16
 80065a0:	f003 0104 	and.w	r1, r3, #4
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	f003 0210 	and.w	r2, r3, #16
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69da      	ldr	r2, [r3, #28]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	0801156c 	.word	0x0801156c

080065e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	603b      	str	r3, [r7, #0]
 80065ec:	4613      	mov	r3, r2
 80065ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d009      	beq.n	8006610 <HAL_SPI_Transmit+0x30>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006604:	d004      	beq.n	8006610 <HAL_SPI_Transmit+0x30>
 8006606:	f44f 7142 	mov.w	r1, #776	; 0x308
 800660a:	4880      	ldr	r0, [pc, #512]	; (800680c <HAL_SPI_Transmit+0x22c>)
 800660c:	f7fa fdd6 	bl	80011bc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_SPI_Transmit+0x3e>
 800661a:	2302      	movs	r3, #2
 800661c:	e128      	b.n	8006870 <HAL_SPI_Transmit+0x290>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006626:	f7fb fd7d 	bl	8002124 <HAL_GetTick>
 800662a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800662c:	88fb      	ldrh	r3, [r7, #6]
 800662e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	d002      	beq.n	8006642 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800663c:	2302      	movs	r3, #2
 800663e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006640:	e10d      	b.n	800685e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <HAL_SPI_Transmit+0x6e>
 8006648:	88fb      	ldrh	r3, [r7, #6]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d102      	bne.n	8006654 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006652:	e104      	b.n	800685e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2203      	movs	r2, #3
 8006658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	88fa      	ldrh	r2, [r7, #6]
 800666c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	88fa      	ldrh	r2, [r7, #6]
 8006672:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669a:	d10f      	bne.n	80066bc <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d007      	beq.n	80066da <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e2:	d14b      	bne.n	800677c <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <HAL_SPI_Transmit+0x112>
 80066ec:	8afb      	ldrh	r3, [r7, #22]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d13e      	bne.n	8006770 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f6:	881a      	ldrh	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	1c9a      	adds	r2, r3, #2
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006716:	e02b      	b.n	8006770 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b02      	cmp	r3, #2
 8006724:	d112      	bne.n	800674c <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	881a      	ldrh	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	1c9a      	adds	r2, r3, #2
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006740:	b29b      	uxth	r3, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	86da      	strh	r2, [r3, #54]	; 0x36
 800674a:	e011      	b.n	8006770 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800674c:	f7fb fcea 	bl	8002124 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	429a      	cmp	r2, r3
 800675a:	d803      	bhi.n	8006764 <HAL_SPI_Transmit+0x184>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006762:	d102      	bne.n	800676a <HAL_SPI_Transmit+0x18a>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800676e:	e076      	b.n	800685e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1ce      	bne.n	8006718 <HAL_SPI_Transmit+0x138>
 800677a:	e04e      	b.n	800681a <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <HAL_SPI_Transmit+0x1aa>
 8006784:	8afb      	ldrh	r3, [r7, #22]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d142      	bne.n	8006810 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	330c      	adds	r3, #12
 8006794:	7812      	ldrb	r2, [r2, #0]
 8006796:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067b0:	e02e      	b.n	8006810 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d113      	bne.n	80067e8 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	330c      	adds	r3, #12
 80067ca:	7812      	ldrb	r2, [r2, #0]
 80067cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067dc:	b29b      	uxth	r3, r3
 80067de:	3b01      	subs	r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80067e6:	e013      	b.n	8006810 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067e8:	f7fb fc9c 	bl	8002124 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d803      	bhi.n	8006800 <HAL_SPI_Transmit+0x220>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fe:	d102      	bne.n	8006806 <HAL_SPI_Transmit+0x226>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d104      	bne.n	8006810 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	77fb      	strb	r3, [r7, #31]
          goto error;
 800680a:	e028      	b.n	800685e <HAL_SPI_Transmit+0x27e>
 800680c:	0801156c 	.word	0x0801156c
    while (hspi->TxXferCount > 0U)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1cb      	bne.n	80067b2 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f8b2 	bl	8006988 <SPI_EndRxTxTransaction>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	77fb      	strb	r3, [r7, #31]
 800685a:	e000      	b.n	800685e <HAL_SPI_Transmit+0x27e>
  }

error:
 800685c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800686e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3720      	adds	r7, #32
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006888:	f7fb fc4c 	bl	8002124 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	1a9b      	subs	r3, r3, r2
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	4413      	add	r3, r2
 8006896:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006898:	f7fb fc44 	bl	8002124 <HAL_GetTick>
 800689c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800689e:	4b39      	ldr	r3, [pc, #228]	; (8006984 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	015b      	lsls	r3, r3, #5
 80068a4:	0d1b      	lsrs	r3, r3, #20
 80068a6:	69fa      	ldr	r2, [r7, #28]
 80068a8:	fb02 f303 	mul.w	r3, r2, r3
 80068ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ae:	e054      	b.n	800695a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b6:	d050      	beq.n	800695a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068b8:	f7fb fc34 	bl	8002124 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	69fa      	ldr	r2, [r7, #28]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d902      	bls.n	80068ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d13d      	bne.n	800694a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068e6:	d111      	bne.n	800690c <SPI_WaitFlagStateUntilTimeout+0x94>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f0:	d004      	beq.n	80068fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068fa:	d107      	bne.n	800690c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800690a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006914:	d10f      	bne.n	8006936 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e017      	b.n	800697a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	3b01      	subs	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4013      	ands	r3, r2
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	429a      	cmp	r2, r3
 8006968:	bf0c      	ite	eq
 800696a:	2301      	moveq	r3, #1
 800696c:	2300      	movne	r3, #0
 800696e:	b2db      	uxtb	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	429a      	cmp	r2, r3
 8006976:	d19b      	bne.n	80068b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3720      	adds	r7, #32
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000150 	.word	0x20000150

08006988 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006994:	4b1b      	ldr	r3, [pc, #108]	; (8006a04 <SPI_EndRxTxTransaction+0x7c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a1b      	ldr	r2, [pc, #108]	; (8006a08 <SPI_EndRxTxTransaction+0x80>)
 800699a:	fba2 2303 	umull	r2, r3, r2, r3
 800699e:	0d5b      	lsrs	r3, r3, #21
 80069a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069a4:	fb02 f303 	mul.w	r3, r2, r3
 80069a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069b2:	d112      	bne.n	80069da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2200      	movs	r2, #0
 80069bc:	2180      	movs	r1, #128	; 0x80
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff ff5a 	bl	8006878 <SPI_WaitFlagStateUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d016      	beq.n	80069f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ce:	f043 0220 	orr.w	r2, r3, #32
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e00f      	b.n	80069fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00a      	beq.n	80069f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f0:	2b80      	cmp	r3, #128	; 0x80
 80069f2:	d0f2      	beq.n	80069da <SPI_EndRxTxTransaction+0x52>
 80069f4:	e000      	b.n	80069f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80069f6:	bf00      	nop
  }

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000150 	.word	0x20000150
 8006a08:	165e9f81 	.word	0x165e9f81

08006a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e0a7      	b.n	8006b6e <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a55      	ldr	r2, [pc, #340]	; (8006b78 <HAL_TIM_Base_Init+0x16c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d027      	beq.n	8006a78 <HAL_TIM_Base_Init+0x6c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a30:	d022      	beq.n	8006a78 <HAL_TIM_Base_Init+0x6c>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a51      	ldr	r2, [pc, #324]	; (8006b7c <HAL_TIM_Base_Init+0x170>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d01d      	beq.n	8006a78 <HAL_TIM_Base_Init+0x6c>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a4f      	ldr	r2, [pc, #316]	; (8006b80 <HAL_TIM_Base_Init+0x174>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d018      	beq.n	8006a78 <HAL_TIM_Base_Init+0x6c>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a4e      	ldr	r2, [pc, #312]	; (8006b84 <HAL_TIM_Base_Init+0x178>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d013      	beq.n	8006a78 <HAL_TIM_Base_Init+0x6c>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a4c      	ldr	r2, [pc, #304]	; (8006b88 <HAL_TIM_Base_Init+0x17c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00e      	beq.n	8006a78 <HAL_TIM_Base_Init+0x6c>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a4b      	ldr	r2, [pc, #300]	; (8006b8c <HAL_TIM_Base_Init+0x180>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d009      	beq.n	8006a78 <HAL_TIM_Base_Init+0x6c>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a49      	ldr	r2, [pc, #292]	; (8006b90 <HAL_TIM_Base_Init+0x184>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d004      	beq.n	8006a78 <HAL_TIM_Base_Init+0x6c>
 8006a6e:	f240 1113 	movw	r1, #275	; 0x113
 8006a72:	4848      	ldr	r0, [pc, #288]	; (8006b94 <HAL_TIM_Base_Init+0x188>)
 8006a74:	f7fa fba2 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d014      	beq.n	8006aaa <HAL_TIM_Base_Init+0x9e>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b10      	cmp	r3, #16
 8006a86:	d010      	beq.n	8006aaa <HAL_TIM_Base_Init+0x9e>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d00c      	beq.n	8006aaa <HAL_TIM_Base_Init+0x9e>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b40      	cmp	r3, #64	; 0x40
 8006a96:	d008      	beq.n	8006aaa <HAL_TIM_Base_Init+0x9e>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	2b60      	cmp	r3, #96	; 0x60
 8006a9e:	d004      	beq.n	8006aaa <HAL_TIM_Base_Init+0x9e>
 8006aa0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006aa4:	483b      	ldr	r0, [pc, #236]	; (8006b94 <HAL_TIM_Base_Init+0x188>)
 8006aa6:	f7fa fb89 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00e      	beq.n	8006ad0 <HAL_TIM_Base_Init+0xc4>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aba:	d009      	beq.n	8006ad0 <HAL_TIM_Base_Init+0xc4>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac4:	d004      	beq.n	8006ad0 <HAL_TIM_Base_Init+0xc4>
 8006ac6:	f240 1115 	movw	r1, #277	; 0x115
 8006aca:	4832      	ldr	r0, [pc, #200]	; (8006b94 <HAL_TIM_Base_Init+0x188>)
 8006acc:	f7fa fb76 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d008      	beq.n	8006aea <HAL_TIM_Base_Init+0xde>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	2b80      	cmp	r3, #128	; 0x80
 8006ade:	d004      	beq.n	8006aea <HAL_TIM_Base_Init+0xde>
 8006ae0:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006ae4:	482b      	ldr	r0, [pc, #172]	; (8006b94 <HAL_TIM_Base_Init+0x188>)
 8006ae6:	f7fa fb69 	bl	80011bc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fb fa2c 	bl	8001f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f001 fb0a 	bl	8008130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	40010000 	.word	0x40010000
 8006b7c:	40000400 	.word	0x40000400
 8006b80:	40000800 	.word	0x40000800
 8006b84:	40000c00 	.word	0x40000c00
 8006b88:	40014000 	.word	0x40014000
 8006b8c:	40014400 	.word	0x40014400
 8006b90:	40014800 	.word	0x40014800
 8006b94:	080115a4 	.word	0x080115a4

08006b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a3d      	ldr	r2, [pc, #244]	; (8006c9c <HAL_TIM_Base_Start_IT+0x104>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d027      	beq.n	8006bfa <HAL_TIM_Base_Start_IT+0x62>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb2:	d022      	beq.n	8006bfa <HAL_TIM_Base_Start_IT+0x62>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a39      	ldr	r2, [pc, #228]	; (8006ca0 <HAL_TIM_Base_Start_IT+0x108>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d01d      	beq.n	8006bfa <HAL_TIM_Base_Start_IT+0x62>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a38      	ldr	r2, [pc, #224]	; (8006ca4 <HAL_TIM_Base_Start_IT+0x10c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d018      	beq.n	8006bfa <HAL_TIM_Base_Start_IT+0x62>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a36      	ldr	r2, [pc, #216]	; (8006ca8 <HAL_TIM_Base_Start_IT+0x110>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d013      	beq.n	8006bfa <HAL_TIM_Base_Start_IT+0x62>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a35      	ldr	r2, [pc, #212]	; (8006cac <HAL_TIM_Base_Start_IT+0x114>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00e      	beq.n	8006bfa <HAL_TIM_Base_Start_IT+0x62>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a33      	ldr	r2, [pc, #204]	; (8006cb0 <HAL_TIM_Base_Start_IT+0x118>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d009      	beq.n	8006bfa <HAL_TIM_Base_Start_IT+0x62>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a32      	ldr	r2, [pc, #200]	; (8006cb4 <HAL_TIM_Base_Start_IT+0x11c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d004      	beq.n	8006bfa <HAL_TIM_Base_Start_IT+0x62>
 8006bf0:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006bf4:	4830      	ldr	r0, [pc, #192]	; (8006cb8 <HAL_TIM_Base_Start_IT+0x120>)
 8006bf6:	f7fa fae1 	bl	80011bc <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d001      	beq.n	8006c0a <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e044      	b.n	8006c94 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 0201 	orr.w	r2, r2, #1
 8006c20:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a1d      	ldr	r2, [pc, #116]	; (8006c9c <HAL_TIM_Base_Start_IT+0x104>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d018      	beq.n	8006c5e <HAL_TIM_Base_Start_IT+0xc6>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c34:	d013      	beq.n	8006c5e <HAL_TIM_Base_Start_IT+0xc6>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a19      	ldr	r2, [pc, #100]	; (8006ca0 <HAL_TIM_Base_Start_IT+0x108>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d00e      	beq.n	8006c5e <HAL_TIM_Base_Start_IT+0xc6>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a17      	ldr	r2, [pc, #92]	; (8006ca4 <HAL_TIM_Base_Start_IT+0x10c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d009      	beq.n	8006c5e <HAL_TIM_Base_Start_IT+0xc6>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a16      	ldr	r2, [pc, #88]	; (8006ca8 <HAL_TIM_Base_Start_IT+0x110>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d004      	beq.n	8006c5e <HAL_TIM_Base_Start_IT+0xc6>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a14      	ldr	r2, [pc, #80]	; (8006cac <HAL_TIM_Base_Start_IT+0x114>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d111      	bne.n	8006c82 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b06      	cmp	r3, #6
 8006c6e:	d010      	beq.n	8006c92 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0201 	orr.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c80:	e007      	b.n	8006c92 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40010000 	.word	0x40010000
 8006ca0:	40000400 	.word	0x40000400
 8006ca4:	40000800 	.word	0x40000800
 8006ca8:	40000c00 	.word	0x40000c00
 8006cac:	40014000 	.word	0x40014000
 8006cb0:	40014400 	.word	0x40014400
 8006cb4:	40014800 	.word	0x40014800
 8006cb8:	080115a4 	.word	0x080115a4

08006cbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e0a7      	b.n	8006e1e <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a55      	ldr	r2, [pc, #340]	; (8006e28 <HAL_TIM_PWM_Init+0x16c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d027      	beq.n	8006d28 <HAL_TIM_PWM_Init+0x6c>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce0:	d022      	beq.n	8006d28 <HAL_TIM_PWM_Init+0x6c>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a51      	ldr	r2, [pc, #324]	; (8006e2c <HAL_TIM_PWM_Init+0x170>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d01d      	beq.n	8006d28 <HAL_TIM_PWM_Init+0x6c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a4f      	ldr	r2, [pc, #316]	; (8006e30 <HAL_TIM_PWM_Init+0x174>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d018      	beq.n	8006d28 <HAL_TIM_PWM_Init+0x6c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a4e      	ldr	r2, [pc, #312]	; (8006e34 <HAL_TIM_PWM_Init+0x178>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d013      	beq.n	8006d28 <HAL_TIM_PWM_Init+0x6c>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a4c      	ldr	r2, [pc, #304]	; (8006e38 <HAL_TIM_PWM_Init+0x17c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00e      	beq.n	8006d28 <HAL_TIM_PWM_Init+0x6c>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a4b      	ldr	r2, [pc, #300]	; (8006e3c <HAL_TIM_PWM_Init+0x180>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d009      	beq.n	8006d28 <HAL_TIM_PWM_Init+0x6c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a49      	ldr	r2, [pc, #292]	; (8006e40 <HAL_TIM_PWM_Init+0x184>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d004      	beq.n	8006d28 <HAL_TIM_PWM_Init+0x6c>
 8006d1e:	f240 5129 	movw	r1, #1321	; 0x529
 8006d22:	4848      	ldr	r0, [pc, #288]	; (8006e44 <HAL_TIM_PWM_Init+0x188>)
 8006d24:	f7fa fa4a 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d014      	beq.n	8006d5a <HAL_TIM_PWM_Init+0x9e>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2b10      	cmp	r3, #16
 8006d36:	d010      	beq.n	8006d5a <HAL_TIM_PWM_Init+0x9e>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d00c      	beq.n	8006d5a <HAL_TIM_PWM_Init+0x9e>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2b40      	cmp	r3, #64	; 0x40
 8006d46:	d008      	beq.n	8006d5a <HAL_TIM_PWM_Init+0x9e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b60      	cmp	r3, #96	; 0x60
 8006d4e:	d004      	beq.n	8006d5a <HAL_TIM_PWM_Init+0x9e>
 8006d50:	f240 512a 	movw	r1, #1322	; 0x52a
 8006d54:	483b      	ldr	r0, [pc, #236]	; (8006e44 <HAL_TIM_PWM_Init+0x188>)
 8006d56:	f7fa fa31 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00e      	beq.n	8006d80 <HAL_TIM_PWM_Init+0xc4>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d6a:	d009      	beq.n	8006d80 <HAL_TIM_PWM_Init+0xc4>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d74:	d004      	beq.n	8006d80 <HAL_TIM_PWM_Init+0xc4>
 8006d76:	f240 512b 	movw	r1, #1323	; 0x52b
 8006d7a:	4832      	ldr	r0, [pc, #200]	; (8006e44 <HAL_TIM_PWM_Init+0x188>)
 8006d7c:	f7fa fa1e 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d008      	beq.n	8006d9a <HAL_TIM_PWM_Init+0xde>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	2b80      	cmp	r3, #128	; 0x80
 8006d8e:	d004      	beq.n	8006d9a <HAL_TIM_PWM_Init+0xde>
 8006d90:	f240 512c 	movw	r1, #1324	; 0x52c
 8006d94:	482b      	ldr	r0, [pc, #172]	; (8006e44 <HAL_TIM_PWM_Init+0x188>)
 8006d96:	f7fa fa11 	bl	80011bc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f84a 	bl	8006e48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	f001 f9b2 	bl	8008130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40010000 	.word	0x40010000
 8006e2c:	40000400 	.word	0x40000400
 8006e30:	40000800 	.word	0x40000800
 8006e34:	40000c00 	.word	0x40000c00
 8006e38:	40014000 	.word	0x40014000
 8006e3c:	40014400 	.word	0x40014400
 8006e40:	40014800 	.word	0x40014800
 8006e44:	080115a4 	.word	0x080115a4

08006e48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a8a      	ldr	r2, [pc, #552]	; (8007094 <HAL_TIM_PWM_Start+0x238>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d10b      	bne.n	8006e88 <HAL_TIM_PWM_Start+0x2c>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d06c      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d069      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b08      	cmp	r3, #8
 8006e80:	d066      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b0c      	cmp	r3, #12
 8006e86:	d063      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e90:	d10b      	bne.n	8006eaa <HAL_TIM_PWM_Start+0x4e>
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d05b      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d058      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d055      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b0c      	cmp	r3, #12
 8006ea8:	d052      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a7a      	ldr	r2, [pc, #488]	; (8007098 <HAL_TIM_PWM_Start+0x23c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d10b      	bne.n	8006ecc <HAL_TIM_PWM_Start+0x70>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d04a      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d047      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b08      	cmp	r3, #8
 8006ec4:	d044      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b0c      	cmp	r3, #12
 8006eca:	d041      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a72      	ldr	r2, [pc, #456]	; (800709c <HAL_TIM_PWM_Start+0x240>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d10b      	bne.n	8006eee <HAL_TIM_PWM_Start+0x92>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d039      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d036      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d033      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b0c      	cmp	r3, #12
 8006eec:	d030      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a6b      	ldr	r2, [pc, #428]	; (80070a0 <HAL_TIM_PWM_Start+0x244>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d10b      	bne.n	8006f10 <HAL_TIM_PWM_Start+0xb4>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d028      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	d025      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b08      	cmp	r3, #8
 8006f08:	d022      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b0c      	cmp	r3, #12
 8006f0e:	d01f      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a63      	ldr	r2, [pc, #396]	; (80070a4 <HAL_TIM_PWM_Start+0x248>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d105      	bne.n	8006f26 <HAL_TIM_PWM_Start+0xca>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d017      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d014      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a5f      	ldr	r2, [pc, #380]	; (80070a8 <HAL_TIM_PWM_Start+0x24c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d102      	bne.n	8006f36 <HAL_TIM_PWM_Start+0xda>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00c      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a5c      	ldr	r2, [pc, #368]	; (80070ac <HAL_TIM_PWM_Start+0x250>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d102      	bne.n	8006f46 <HAL_TIM_PWM_Start+0xea>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d004      	beq.n	8006f50 <HAL_TIM_PWM_Start+0xf4>
 8006f46:	f240 51af 	movw	r1, #1455	; 0x5af
 8006f4a:	4859      	ldr	r0, [pc, #356]	; (80070b0 <HAL_TIM_PWM_Start+0x254>)
 8006f4c:	f7fa f936 	bl	80011bc <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d109      	bne.n	8006f6a <HAL_TIM_PWM_Start+0x10e>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	bf14      	ite	ne
 8006f62:	2301      	movne	r3, #1
 8006f64:	2300      	moveq	r3, #0
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	e022      	b.n	8006fb0 <HAL_TIM_PWM_Start+0x154>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d109      	bne.n	8006f84 <HAL_TIM_PWM_Start+0x128>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	bf14      	ite	ne
 8006f7c:	2301      	movne	r3, #1
 8006f7e:	2300      	moveq	r3, #0
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	e015      	b.n	8006fb0 <HAL_TIM_PWM_Start+0x154>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b08      	cmp	r3, #8
 8006f88:	d109      	bne.n	8006f9e <HAL_TIM_PWM_Start+0x142>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	bf14      	ite	ne
 8006f96:	2301      	movne	r3, #1
 8006f98:	2300      	moveq	r3, #0
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	e008      	b.n	8006fb0 <HAL_TIM_PWM_Start+0x154>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	bf14      	ite	ne
 8006faa:	2301      	movne	r3, #1
 8006fac:	2300      	moveq	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <HAL_TIM_PWM_Start+0x15c>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e068      	b.n	800708a <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d104      	bne.n	8006fc8 <HAL_TIM_PWM_Start+0x16c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc6:	e013      	b.n	8006ff0 <HAL_TIM_PWM_Start+0x194>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d104      	bne.n	8006fd8 <HAL_TIM_PWM_Start+0x17c>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd6:	e00b      	b.n	8006ff0 <HAL_TIM_PWM_Start+0x194>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	d104      	bne.n	8006fe8 <HAL_TIM_PWM_Start+0x18c>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fe6:	e003      	b.n	8006ff0 <HAL_TIM_PWM_Start+0x194>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 fbc9 	bl	8008790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a24      	ldr	r2, [pc, #144]	; (8007094 <HAL_TIM_PWM_Start+0x238>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d107      	bne.n	8007018 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007016:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1d      	ldr	r2, [pc, #116]	; (8007094 <HAL_TIM_PWM_Start+0x238>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d018      	beq.n	8007054 <HAL_TIM_PWM_Start+0x1f8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800702a:	d013      	beq.n	8007054 <HAL_TIM_PWM_Start+0x1f8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a19      	ldr	r2, [pc, #100]	; (8007098 <HAL_TIM_PWM_Start+0x23c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00e      	beq.n	8007054 <HAL_TIM_PWM_Start+0x1f8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a18      	ldr	r2, [pc, #96]	; (800709c <HAL_TIM_PWM_Start+0x240>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d009      	beq.n	8007054 <HAL_TIM_PWM_Start+0x1f8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a16      	ldr	r2, [pc, #88]	; (80070a0 <HAL_TIM_PWM_Start+0x244>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_TIM_PWM_Start+0x1f8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a15      	ldr	r2, [pc, #84]	; (80070a4 <HAL_TIM_PWM_Start+0x248>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d111      	bne.n	8007078 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2b06      	cmp	r3, #6
 8007064:	d010      	beq.n	8007088 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 0201 	orr.w	r2, r2, #1
 8007074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007076:	e007      	b.n	8007088 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0201 	orr.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	40010000 	.word	0x40010000
 8007098:	40000400 	.word	0x40000400
 800709c:	40000800 	.word	0x40000800
 80070a0:	40000c00 	.word	0x40000c00
 80070a4:	40014000 	.word	0x40014000
 80070a8:	40014400 	.word	0x40014400
 80070ac:	40014800 	.word	0x40014800
 80070b0:	080115a4 	.word	0x080115a4

080070b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e18a      	b.n	80073de <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a78      	ldr	r2, [pc, #480]	; (80072b0 <HAL_TIM_Encoder_Init+0x1fc>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d01d      	beq.n	800710e <HAL_TIM_Encoder_Init+0x5a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070da:	d018      	beq.n	800710e <HAL_TIM_Encoder_Init+0x5a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a74      	ldr	r2, [pc, #464]	; (80072b4 <HAL_TIM_Encoder_Init+0x200>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d013      	beq.n	800710e <HAL_TIM_Encoder_Init+0x5a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a73      	ldr	r2, [pc, #460]	; (80072b8 <HAL_TIM_Encoder_Init+0x204>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d00e      	beq.n	800710e <HAL_TIM_Encoder_Init+0x5a>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a71      	ldr	r2, [pc, #452]	; (80072bc <HAL_TIM_Encoder_Init+0x208>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d009      	beq.n	800710e <HAL_TIM_Encoder_Init+0x5a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a70      	ldr	r2, [pc, #448]	; (80072c0 <HAL_TIM_Encoder_Init+0x20c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d004      	beq.n	800710e <HAL_TIM_Encoder_Init+0x5a>
 8007104:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8007108:	486e      	ldr	r0, [pc, #440]	; (80072c4 <HAL_TIM_Encoder_Init+0x210>)
 800710a:	f7fa f857 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d014      	beq.n	8007140 <HAL_TIM_Encoder_Init+0x8c>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	2b10      	cmp	r3, #16
 800711c:	d010      	beq.n	8007140 <HAL_TIM_Encoder_Init+0x8c>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2b20      	cmp	r3, #32
 8007124:	d00c      	beq.n	8007140 <HAL_TIM_Encoder_Init+0x8c>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	2b40      	cmp	r3, #64	; 0x40
 800712c:	d008      	beq.n	8007140 <HAL_TIM_Encoder_Init+0x8c>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	2b60      	cmp	r3, #96	; 0x60
 8007134:	d004      	beq.n	8007140 <HAL_TIM_Encoder_Init+0x8c>
 8007136:	f640 31d2 	movw	r1, #3026	; 0xbd2
 800713a:	4862      	ldr	r0, [pc, #392]	; (80072c4 <HAL_TIM_Encoder_Init+0x210>)
 800713c:	f7fa f83e 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00e      	beq.n	8007166 <HAL_TIM_Encoder_Init+0xb2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007150:	d009      	beq.n	8007166 <HAL_TIM_Encoder_Init+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800715a:	d004      	beq.n	8007166 <HAL_TIM_Encoder_Init+0xb2>
 800715c:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8007160:	4858      	ldr	r0, [pc, #352]	; (80072c4 <HAL_TIM_Encoder_Init+0x210>)
 8007162:	f7fa f82b 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d008      	beq.n	8007180 <HAL_TIM_Encoder_Init+0xcc>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	2b80      	cmp	r3, #128	; 0x80
 8007174:	d004      	beq.n	8007180 <HAL_TIM_Encoder_Init+0xcc>
 8007176:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800717a:	4852      	ldr	r0, [pc, #328]	; (80072c4 <HAL_TIM_Encoder_Init+0x210>)
 800717c:	f7fa f81e 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d00c      	beq.n	80071a2 <HAL_TIM_Encoder_Init+0xee>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d008      	beq.n	80071a2 <HAL_TIM_Encoder_Init+0xee>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b03      	cmp	r3, #3
 8007196:	d004      	beq.n	80071a2 <HAL_TIM_Encoder_Init+0xee>
 8007198:	f640 31d5 	movw	r1, #3029	; 0xbd5
 800719c:	4849      	ldr	r0, [pc, #292]	; (80072c4 <HAL_TIM_Encoder_Init+0x210>)
 800719e:	f7fa f80d 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d00c      	beq.n	80071c4 <HAL_TIM_Encoder_Init+0x110>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d008      	beq.n	80071c4 <HAL_TIM_Encoder_Init+0x110>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d004      	beq.n	80071c4 <HAL_TIM_Encoder_Init+0x110>
 80071ba:	f640 31d6 	movw	r1, #3030	; 0xbd6
 80071be:	4841      	ldr	r0, [pc, #260]	; (80072c4 <HAL_TIM_Encoder_Init+0x210>)
 80071c0:	f7f9 fffc 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d00c      	beq.n	80071e6 <HAL_TIM_Encoder_Init+0x132>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d008      	beq.n	80071e6 <HAL_TIM_Encoder_Init+0x132>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d004      	beq.n	80071e6 <HAL_TIM_Encoder_Init+0x132>
 80071dc:	f640 31d7 	movw	r1, #3031	; 0xbd7
 80071e0:	4838      	ldr	r0, [pc, #224]	; (80072c4 <HAL_TIM_Encoder_Init+0x210>)
 80071e2:	f7f9 ffeb 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d008      	beq.n	8007200 <HAL_TIM_Encoder_Init+0x14c>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d004      	beq.n	8007200 <HAL_TIM_Encoder_Init+0x14c>
 80071f6:	f640 31d8 	movw	r1, #3032	; 0xbd8
 80071fa:	4832      	ldr	r0, [pc, #200]	; (80072c4 <HAL_TIM_Encoder_Init+0x210>)
 80071fc:	f7f9 ffde 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d008      	beq.n	800721a <HAL_TIM_Encoder_Init+0x166>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	2b02      	cmp	r3, #2
 800720e:	d004      	beq.n	800721a <HAL_TIM_Encoder_Init+0x166>
 8007210:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8007214:	482b      	ldr	r0, [pc, #172]	; (80072c4 <HAL_TIM_Encoder_Init+0x210>)
 8007216:	f7f9 ffd1 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d010      	beq.n	8007244 <HAL_TIM_Encoder_Init+0x190>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	2b04      	cmp	r3, #4
 8007228:	d00c      	beq.n	8007244 <HAL_TIM_Encoder_Init+0x190>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	2b08      	cmp	r3, #8
 8007230:	d008      	beq.n	8007244 <HAL_TIM_Encoder_Init+0x190>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	2b0c      	cmp	r3, #12
 8007238:	d004      	beq.n	8007244 <HAL_TIM_Encoder_Init+0x190>
 800723a:	f640 31da 	movw	r1, #3034	; 0xbda
 800723e:	4821      	ldr	r0, [pc, #132]	; (80072c4 <HAL_TIM_Encoder_Init+0x210>)
 8007240:	f7f9 ffbc 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d010      	beq.n	800726e <HAL_TIM_Encoder_Init+0x1ba>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	2b04      	cmp	r3, #4
 8007252:	d00c      	beq.n	800726e <HAL_TIM_Encoder_Init+0x1ba>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	2b08      	cmp	r3, #8
 800725a:	d008      	beq.n	800726e <HAL_TIM_Encoder_Init+0x1ba>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	2b0c      	cmp	r3, #12
 8007262:	d004      	beq.n	800726e <HAL_TIM_Encoder_Init+0x1ba>
 8007264:	f640 31db 	movw	r1, #3035	; 0xbdb
 8007268:	4816      	ldr	r0, [pc, #88]	; (80072c4 <HAL_TIM_Encoder_Init+0x210>)
 800726a:	f7f9 ffa7 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b0f      	cmp	r3, #15
 8007274:	d904      	bls.n	8007280 <HAL_TIM_Encoder_Init+0x1cc>
 8007276:	f640 31dc 	movw	r1, #3036	; 0xbdc
 800727a:	4812      	ldr	r0, [pc, #72]	; (80072c4 <HAL_TIM_Encoder_Init+0x210>)
 800727c:	f7f9 ff9e 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	2b0f      	cmp	r3, #15
 8007286:	d904      	bls.n	8007292 <HAL_TIM_Encoder_Init+0x1de>
 8007288:	f640 31dd 	movw	r1, #3037	; 0xbdd
 800728c:	480d      	ldr	r0, [pc, #52]	; (80072c4 <HAL_TIM_Encoder_Init+0x210>)
 800728e:	f7f9 ff95 	bl	80011bc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d114      	bne.n	80072c8 <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fa fde8 	bl	8001e7c <HAL_TIM_Encoder_MspInit>
 80072ac:	e00c      	b.n	80072c8 <HAL_TIM_Encoder_Init+0x214>
 80072ae:	bf00      	nop
 80072b0:	40010000 	.word	0x40010000
 80072b4:	40000400 	.word	0x40000400
 80072b8:	40000800 	.word	0x40000800
 80072bc:	40000c00 	.word	0x40000c00
 80072c0:	40014000 	.word	0x40014000
 80072c4:	080115a4 	.word	0x080115a4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6812      	ldr	r2, [r2, #0]
 80072da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072de:	f023 0307 	bic.w	r3, r3, #7
 80072e2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3304      	adds	r3, #4
 80072ec:	4619      	mov	r1, r3
 80072ee:	4610      	mov	r0, r2
 80072f0:	f000 ff1e 	bl	8008130 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800731c:	f023 0303 	bic.w	r3, r3, #3
 8007320:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	021b      	lsls	r3, r3, #8
 800732c:	4313      	orrs	r3, r2
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	4313      	orrs	r3, r2
 8007332:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800733a:	f023 030c 	bic.w	r3, r3, #12
 800733e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800734a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	4313      	orrs	r3, r2
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	011a      	lsls	r2, r3, #4
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	031b      	lsls	r3, r3, #12
 800736a:	4313      	orrs	r3, r2
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007378:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007380:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	4313      	orrs	r3, r2
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop

080073e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007400:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007408:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007410:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a4d      	ldr	r2, [pc, #308]	; (800754c <HAL_TIM_Encoder_Start+0x164>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d01d      	beq.n	8007458 <HAL_TIM_Encoder_Start+0x70>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007424:	d018      	beq.n	8007458 <HAL_TIM_Encoder_Start+0x70>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a49      	ldr	r2, [pc, #292]	; (8007550 <HAL_TIM_Encoder_Start+0x168>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d013      	beq.n	8007458 <HAL_TIM_Encoder_Start+0x70>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a47      	ldr	r2, [pc, #284]	; (8007554 <HAL_TIM_Encoder_Start+0x16c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00e      	beq.n	8007458 <HAL_TIM_Encoder_Start+0x70>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a46      	ldr	r2, [pc, #280]	; (8007558 <HAL_TIM_Encoder_Start+0x170>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d009      	beq.n	8007458 <HAL_TIM_Encoder_Start+0x70>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a44      	ldr	r2, [pc, #272]	; (800755c <HAL_TIM_Encoder_Start+0x174>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d004      	beq.n	8007458 <HAL_TIM_Encoder_Start+0x70>
 800744e:	f640 418e 	movw	r1, #3214	; 0xc8e
 8007452:	4843      	ldr	r0, [pc, #268]	; (8007560 <HAL_TIM_Encoder_Start+0x178>)
 8007454:	f7f9 feb2 	bl	80011bc <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d110      	bne.n	8007480 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d102      	bne.n	800746a <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007464:	7b7b      	ldrb	r3, [r7, #13]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d001      	beq.n	800746e <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e069      	b.n	8007542 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2202      	movs	r2, #2
 8007472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2202      	movs	r2, #2
 800747a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800747e:	e031      	b.n	80074e4 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b04      	cmp	r3, #4
 8007484:	d110      	bne.n	80074a8 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d102      	bne.n	8007492 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800748c:	7b3b      	ldrb	r3, [r7, #12]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d001      	beq.n	8007496 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e055      	b.n	8007542 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2202      	movs	r2, #2
 800749a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2202      	movs	r2, #2
 80074a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074a6:	e01d      	b.n	80074e4 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d108      	bne.n	80074c0 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d105      	bne.n	80074c0 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074b4:	7b7b      	ldrb	r3, [r7, #13]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d102      	bne.n	80074c0 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074ba:	7b3b      	ldrb	r3, [r7, #12]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d001      	beq.n	80074c4 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e03e      	b.n	8007542 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_TIM_Encoder_Start+0x10a>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d008      	beq.n	8007502 <HAL_TIM_Encoder_Start+0x11a>
 80074f0:	e00f      	b.n	8007512 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2201      	movs	r2, #1
 80074f8:	2100      	movs	r1, #0
 80074fa:	4618      	mov	r0, r3
 80074fc:	f001 f948 	bl	8008790 <TIM_CCxChannelCmd>
      break;
 8007500:	e016      	b.n	8007530 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2201      	movs	r2, #1
 8007508:	2104      	movs	r1, #4
 800750a:	4618      	mov	r0, r3
 800750c:	f001 f940 	bl	8008790 <TIM_CCxChannelCmd>
      break;
 8007510:	e00e      	b.n	8007530 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2201      	movs	r2, #1
 8007518:	2100      	movs	r1, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f001 f938 	bl	8008790 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2201      	movs	r2, #1
 8007526:	2104      	movs	r1, #4
 8007528:	4618      	mov	r0, r3
 800752a:	f001 f931 	bl	8008790 <TIM_CCxChannelCmd>
      break;
 800752e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0201 	orr.w	r2, r2, #1
 800753e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	40010000 	.word	0x40010000
 8007550:	40000400 	.word	0x40000400
 8007554:	40000800 	.word	0x40000800
 8007558:	40000c00 	.word	0x40000c00
 800755c:	40014000 	.word	0x40014000
 8007560:	080115a4 	.word	0x080115a4

08007564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b02      	cmp	r3, #2
 8007578:	d122      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	2b02      	cmp	r3, #2
 8007586:	d11b      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 0202 	mvn.w	r2, #2
 8007590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fda4 	bl	80080f4 <HAL_TIM_IC_CaptureCallback>
 80075ac:	e005      	b.n	80075ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fd96 	bl	80080e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fda7 	bl	8008108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d122      	bne.n	8007614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b04      	cmp	r3, #4
 80075da:	d11b      	bne.n	8007614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f06f 0204 	mvn.w	r2, #4
 80075e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2202      	movs	r2, #2
 80075ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fd7a 	bl	80080f4 <HAL_TIM_IC_CaptureCallback>
 8007600:	e005      	b.n	800760e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fd6c 	bl	80080e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fd7d 	bl	8008108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b08      	cmp	r3, #8
 8007620:	d122      	bne.n	8007668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b08      	cmp	r3, #8
 800762e:	d11b      	bne.n	8007668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f06f 0208 	mvn.w	r2, #8
 8007638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2204      	movs	r2, #4
 800763e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fd50 	bl	80080f4 <HAL_TIM_IC_CaptureCallback>
 8007654:	e005      	b.n	8007662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fd42 	bl	80080e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fd53 	bl	8008108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f003 0310 	and.w	r3, r3, #16
 8007672:	2b10      	cmp	r3, #16
 8007674:	d122      	bne.n	80076bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	2b10      	cmp	r3, #16
 8007682:	d11b      	bne.n	80076bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0210 	mvn.w	r2, #16
 800768c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2208      	movs	r2, #8
 8007692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fd26 	bl	80080f4 <HAL_TIM_IC_CaptureCallback>
 80076a8:	e005      	b.n	80076b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fd18 	bl	80080e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fd29 	bl	8008108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d10e      	bne.n	80076e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d107      	bne.n	80076e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0201 	mvn.w	r2, #1
 80076e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7f9 fd50 	bl	8001188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f2:	2b80      	cmp	r3, #128	; 0x80
 80076f4:	d10e      	bne.n	8007714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007700:	2b80      	cmp	r3, #128	; 0x80
 8007702:	d107      	bne.n	8007714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800770c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 f972 	bl	80089f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771e:	2b40      	cmp	r3, #64	; 0x40
 8007720:	d10e      	bne.n	8007740 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772c:	2b40      	cmp	r3, #64	; 0x40
 800772e:	d107      	bne.n	8007740 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fcee 	bl	800811c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	2b20      	cmp	r3, #32
 800774c:	d10e      	bne.n	800776c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f003 0320 	and.w	r3, r3, #32
 8007758:	2b20      	cmp	r3, #32
 800775a:	d107      	bne.n	800776c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0220 	mvn.w	r2, #32
 8007764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 f93c 	bl	80089e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d010      	beq.n	80077ac <HAL_TIM_PWM_ConfigChannel+0x38>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b04      	cmp	r3, #4
 800778e:	d00d      	beq.n	80077ac <HAL_TIM_PWM_ConfigChannel+0x38>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b08      	cmp	r3, #8
 8007794:	d00a      	beq.n	80077ac <HAL_TIM_PWM_ConfigChannel+0x38>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b0c      	cmp	r3, #12
 800779a:	d007      	beq.n	80077ac <HAL_TIM_PWM_ConfigChannel+0x38>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b3c      	cmp	r3, #60	; 0x3c
 80077a0:	d004      	beq.n	80077ac <HAL_TIM_PWM_ConfigChannel+0x38>
 80077a2:	f241 0177 	movw	r1, #4215	; 0x1077
 80077a6:	4893      	ldr	r0, [pc, #588]	; (80079f4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80077a8:	f7f9 fd08 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b60      	cmp	r3, #96	; 0x60
 80077b2:	d008      	beq.n	80077c6 <HAL_TIM_PWM_ConfigChannel+0x52>
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b70      	cmp	r3, #112	; 0x70
 80077ba:	d004      	beq.n	80077c6 <HAL_TIM_PWM_ConfigChannel+0x52>
 80077bc:	f241 0178 	movw	r1, #4216	; 0x1078
 80077c0:	488c      	ldr	r0, [pc, #560]	; (80079f4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80077c2:	f7f9 fcfb 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d008      	beq.n	80077e0 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d004      	beq.n	80077e0 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80077d6:	f241 0179 	movw	r1, #4217	; 0x1079
 80077da:	4886      	ldr	r0, [pc, #536]	; (80079f4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80077dc:	f7f9 fcee 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d008      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x86>
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d004      	beq.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x86>
 80077f0:	f241 017a 	movw	r1, #4218	; 0x107a
 80077f4:	487f      	ldr	r0, [pc, #508]	; (80079f4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80077f6:	f7f9 fce1 	bl	80011bc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_TIM_PWM_ConfigChannel+0x94>
 8007804:	2302      	movs	r3, #2
 8007806:	e14c      	b.n	8007aa2 <HAL_TIM_PWM_ConfigChannel+0x32e>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b0c      	cmp	r3, #12
 8007814:	f200 813d 	bhi.w	8007a92 <HAL_TIM_PWM_ConfigChannel+0x31e>
 8007818:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800781a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781e:	bf00      	nop
 8007820:	08007855 	.word	0x08007855
 8007824:	08007a93 	.word	0x08007a93
 8007828:	08007a93 	.word	0x08007a93
 800782c:	08007a93 	.word	0x08007a93
 8007830:	080078ef 	.word	0x080078ef
 8007834:	08007a93 	.word	0x08007a93
 8007838:	08007a93 	.word	0x08007a93
 800783c:	08007a93 	.word	0x08007a93
 8007840:	08007977 	.word	0x08007977
 8007844:	08007a93 	.word	0x08007a93
 8007848:	08007a93 	.word	0x08007a93
 800784c:	08007a93 	.word	0x08007a93
 8007850:	08007a15 	.word	0x08007a15
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a67      	ldr	r2, [pc, #412]	; (80079f8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d027      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x13a>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007866:	d022      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a63      	ldr	r2, [pc, #396]	; (80079fc <HAL_TIM_PWM_ConfigChannel+0x288>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d01d      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a62      	ldr	r2, [pc, #392]	; (8007a00 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d018      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x13a>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a60      	ldr	r2, [pc, #384]	; (8007a04 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d013      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a5f      	ldr	r2, [pc, #380]	; (8007a08 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00e      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a5d      	ldr	r2, [pc, #372]	; (8007a0c <HAL_TIM_PWM_ConfigChannel+0x298>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d009      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x13a>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a5c      	ldr	r2, [pc, #368]	; (8007a10 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d004      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x13a>
 80078a4:	f241 0184 	movw	r1, #4228	; 0x1084
 80078a8:	4852      	ldr	r0, [pc, #328]	; (80079f4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80078aa:	f7f9 fc87 	bl	80011bc <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68b9      	ldr	r1, [r7, #8]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fcbb 	bl	8008230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	699a      	ldr	r2, [r3, #24]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0208 	orr.w	r2, r2, #8
 80078c8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	699a      	ldr	r2, [r3, #24]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0204 	bic.w	r2, r2, #4
 80078d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6999      	ldr	r1, [r3, #24]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	691a      	ldr	r2, [r3, #16]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	619a      	str	r2, [r3, #24]
      break;
 80078ec:	e0d4      	b.n	8007a98 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a41      	ldr	r2, [pc, #260]	; (80079f8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d01d      	beq.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007900:	d018      	beq.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a3d      	ldr	r2, [pc, #244]	; (80079fc <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d013      	beq.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a3b      	ldr	r2, [pc, #236]	; (8007a00 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00e      	beq.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a3a      	ldr	r2, [pc, #232]	; (8007a04 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d009      	beq.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a38      	ldr	r2, [pc, #224]	; (8007a08 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d004      	beq.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800792a:	f241 0195 	movw	r1, #4245	; 0x1095
 800792e:	4831      	ldr	r0, [pc, #196]	; (80079f4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007930:	f7f9 fc44 	bl	80011bc <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68b9      	ldr	r1, [r7, #8]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fd08 	bl	8008350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699a      	ldr	r2, [r3, #24]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800794e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800795e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6999      	ldr	r1, [r3, #24]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	021a      	lsls	r2, r3, #8
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	619a      	str	r2, [r3, #24]
      break;
 8007974:	e090      	b.n	8007a98 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a1f      	ldr	r2, [pc, #124]	; (80079f8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d018      	beq.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007988:	d013      	beq.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a1b      	ldr	r2, [pc, #108]	; (80079fc <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00e      	beq.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a19      	ldr	r2, [pc, #100]	; (8007a00 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d009      	beq.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a18      	ldr	r2, [pc, #96]	; (8007a04 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d004      	beq.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 80079a8:	f241 01a6 	movw	r1, #4262	; 0x10a6
 80079ac:	4811      	ldr	r0, [pc, #68]	; (80079f4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80079ae:	f7f9 fc05 	bl	80011bc <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fd5d 	bl	8008478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69da      	ldr	r2, [r3, #28]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f042 0208 	orr.w	r2, r2, #8
 80079cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69da      	ldr	r2, [r3, #28]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0204 	bic.w	r2, r2, #4
 80079dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69d9      	ldr	r1, [r3, #28]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	61da      	str	r2, [r3, #28]
      break;
 80079f0:	e052      	b.n	8007a98 <HAL_TIM_PWM_ConfigChannel+0x324>
 80079f2:	bf00      	nop
 80079f4:	080115a4 	.word	0x080115a4
 80079f8:	40010000 	.word	0x40010000
 80079fc:	40000400 	.word	0x40000400
 8007a00:	40000800 	.word	0x40000800
 8007a04:	40000c00 	.word	0x40000c00
 8007a08:	40014000 	.word	0x40014000
 8007a0c:	40014400 	.word	0x40014400
 8007a10:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a24      	ldr	r2, [pc, #144]	; (8007aac <HAL_TIM_PWM_ConfigChannel+0x338>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d018      	beq.n	8007a50 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a26:	d013      	beq.n	8007a50 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a20      	ldr	r2, [pc, #128]	; (8007ab0 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00e      	beq.n	8007a50 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a1f      	ldr	r2, [pc, #124]	; (8007ab4 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d009      	beq.n	8007a50 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1d      	ldr	r2, [pc, #116]	; (8007ab8 <HAL_TIM_PWM_ConfigChannel+0x344>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d004      	beq.n	8007a50 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007a46:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8007a4a:	481c      	ldr	r0, [pc, #112]	; (8007abc <HAL_TIM_PWM_ConfigChannel+0x348>)
 8007a4c:	f7f9 fbb6 	bl	80011bc <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68b9      	ldr	r1, [r7, #8]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 fda2 	bl	80085a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	69da      	ldr	r2, [r3, #28]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a6a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69da      	ldr	r2, [r3, #28]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	69d9      	ldr	r1, [r3, #28]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	021a      	lsls	r2, r3, #8
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	61da      	str	r2, [r3, #28]
      break;
 8007a90:	e002      	b.n	8007a98 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	75fb      	strb	r3, [r7, #23]
      break;
 8007a96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40000400 	.word	0x40000400
 8007ab4:	40000800 	.word	0x40000800
 8007ab8:	40000c00 	.word	0x40000c00
 8007abc:	080115a4 	.word	0x080115a4

08007ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_TIM_ConfigClockSource+0x1c>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e2f0      	b.n	80080be <HAL_TIM_ConfigClockSource+0x5fe>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af4:	d029      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x8a>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b70      	cmp	r3, #112	; 0x70
 8007afc:	d025      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x8a>
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b06:	d020      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x8a>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b40      	cmp	r3, #64	; 0x40
 8007b0e:	d01c      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x8a>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b50      	cmp	r3, #80	; 0x50
 8007b16:	d018      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x8a>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b60      	cmp	r3, #96	; 0x60
 8007b1e:	d014      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x8a>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d010      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x8a>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b10      	cmp	r3, #16
 8007b2e:	d00c      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x8a>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b20      	cmp	r3, #32
 8007b36:	d008      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x8a>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b30      	cmp	r3, #48	; 0x30
 8007b3e:	d004      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x8a>
 8007b40:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8007b44:	487c      	ldr	r0, [pc, #496]	; (8007d38 <HAL_TIM_ConfigClockSource+0x278>)
 8007b46:	f7f9 fb39 	bl	80011bc <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b60:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b72:	f000 80f1 	beq.w	8007d58 <HAL_TIM_ConfigClockSource+0x298>
 8007b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b7a:	f200 8293 	bhi.w	80080a4 <HAL_TIM_ConfigClockSource+0x5e4>
 8007b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b82:	d02d      	beq.n	8007be0 <HAL_TIM_ConfigClockSource+0x120>
 8007b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b88:	f200 828c 	bhi.w	80080a4 <HAL_TIM_ConfigClockSource+0x5e4>
 8007b8c:	2b70      	cmp	r3, #112	; 0x70
 8007b8e:	d05d      	beq.n	8007c4c <HAL_TIM_ConfigClockSource+0x18c>
 8007b90:	2b70      	cmp	r3, #112	; 0x70
 8007b92:	f200 8287 	bhi.w	80080a4 <HAL_TIM_ConfigClockSource+0x5e4>
 8007b96:	2b60      	cmp	r3, #96	; 0x60
 8007b98:	f000 81a0 	beq.w	8007edc <HAL_TIM_ConfigClockSource+0x41c>
 8007b9c:	2b60      	cmp	r3, #96	; 0x60
 8007b9e:	f200 8281 	bhi.w	80080a4 <HAL_TIM_ConfigClockSource+0x5e4>
 8007ba2:	2b50      	cmp	r3, #80	; 0x50
 8007ba4:	f000 8144 	beq.w	8007e30 <HAL_TIM_ConfigClockSource+0x370>
 8007ba8:	2b50      	cmp	r3, #80	; 0x50
 8007baa:	f200 827b 	bhi.w	80080a4 <HAL_TIM_ConfigClockSource+0x5e4>
 8007bae:	2b40      	cmp	r3, #64	; 0x40
 8007bb0:	f000 81f6 	beq.w	8007fa0 <HAL_TIM_ConfigClockSource+0x4e0>
 8007bb4:	2b40      	cmp	r3, #64	; 0x40
 8007bb6:	f200 8275 	bhi.w	80080a4 <HAL_TIM_ConfigClockSource+0x5e4>
 8007bba:	2b30      	cmp	r3, #48	; 0x30
 8007bbc:	f000 8246 	beq.w	800804c <HAL_TIM_ConfigClockSource+0x58c>
 8007bc0:	2b30      	cmp	r3, #48	; 0x30
 8007bc2:	f200 826f 	bhi.w	80080a4 <HAL_TIM_ConfigClockSource+0x5e4>
 8007bc6:	2b20      	cmp	r3, #32
 8007bc8:	f000 8240 	beq.w	800804c <HAL_TIM_ConfigClockSource+0x58c>
 8007bcc:	2b20      	cmp	r3, #32
 8007bce:	f200 8269 	bhi.w	80080a4 <HAL_TIM_ConfigClockSource+0x5e4>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 823a 	beq.w	800804c <HAL_TIM_ConfigClockSource+0x58c>
 8007bd8:	2b10      	cmp	r3, #16
 8007bda:	f000 8237 	beq.w	800804c <HAL_TIM_ConfigClockSource+0x58c>
 8007bde:	e261      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a55      	ldr	r2, [pc, #340]	; (8007d3c <HAL_TIM_ConfigClockSource+0x27c>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	f000 825f 	beq.w	80080aa <HAL_TIM_ConfigClockSource+0x5ea>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf4:	f000 8259 	beq.w	80080aa <HAL_TIM_ConfigClockSource+0x5ea>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a50      	ldr	r2, [pc, #320]	; (8007d40 <HAL_TIM_ConfigClockSource+0x280>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	f000 8253 	beq.w	80080aa <HAL_TIM_ConfigClockSource+0x5ea>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a4e      	ldr	r2, [pc, #312]	; (8007d44 <HAL_TIM_ConfigClockSource+0x284>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	f000 824d 	beq.w	80080aa <HAL_TIM_ConfigClockSource+0x5ea>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a4c      	ldr	r2, [pc, #304]	; (8007d48 <HAL_TIM_ConfigClockSource+0x288>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	f000 8247 	beq.w	80080aa <HAL_TIM_ConfigClockSource+0x5ea>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a4a      	ldr	r2, [pc, #296]	; (8007d4c <HAL_TIM_ConfigClockSource+0x28c>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	f000 8241 	beq.w	80080aa <HAL_TIM_ConfigClockSource+0x5ea>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a48      	ldr	r2, [pc, #288]	; (8007d50 <HAL_TIM_ConfigClockSource+0x290>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	f000 823b 	beq.w	80080aa <HAL_TIM_ConfigClockSource+0x5ea>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a46      	ldr	r2, [pc, #280]	; (8007d54 <HAL_TIM_ConfigClockSource+0x294>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	f000 8235 	beq.w	80080aa <HAL_TIM_ConfigClockSource+0x5ea>
 8007c40:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8007c44:	483c      	ldr	r0, [pc, #240]	; (8007d38 <HAL_TIM_ConfigClockSource+0x278>)
 8007c46:	f7f9 fab9 	bl	80011bc <assert_failed>
      break;
 8007c4a:	e22e      	b.n	80080aa <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a3a      	ldr	r2, [pc, #232]	; (8007d3c <HAL_TIM_ConfigClockSource+0x27c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d01d      	beq.n	8007c92 <HAL_TIM_ConfigClockSource+0x1d2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c5e:	d018      	beq.n	8007c92 <HAL_TIM_ConfigClockSource+0x1d2>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a36      	ldr	r2, [pc, #216]	; (8007d40 <HAL_TIM_ConfigClockSource+0x280>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d013      	beq.n	8007c92 <HAL_TIM_ConfigClockSource+0x1d2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a35      	ldr	r2, [pc, #212]	; (8007d44 <HAL_TIM_ConfigClockSource+0x284>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00e      	beq.n	8007c92 <HAL_TIM_ConfigClockSource+0x1d2>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a33      	ldr	r2, [pc, #204]	; (8007d48 <HAL_TIM_ConfigClockSource+0x288>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d009      	beq.n	8007c92 <HAL_TIM_ConfigClockSource+0x1d2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a32      	ldr	r2, [pc, #200]	; (8007d4c <HAL_TIM_ConfigClockSource+0x28c>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d004      	beq.n	8007c92 <HAL_TIM_ConfigClockSource+0x1d2>
 8007c88:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8007c8c:	482a      	ldr	r0, [pc, #168]	; (8007d38 <HAL_TIM_ConfigClockSource+0x278>)
 8007c8e:	f7f9 fa95 	bl	80011bc <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d013      	beq.n	8007cc2 <HAL_TIM_ConfigClockSource+0x202>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca2:	d00e      	beq.n	8007cc2 <HAL_TIM_ConfigClockSource+0x202>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cac:	d009      	beq.n	8007cc2 <HAL_TIM_ConfigClockSource+0x202>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cb6:	d004      	beq.n	8007cc2 <HAL_TIM_ConfigClockSource+0x202>
 8007cb8:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8007cbc:	481e      	ldr	r0, [pc, #120]	; (8007d38 <HAL_TIM_ConfigClockSource+0x278>)
 8007cbe:	f7f9 fa7d 	bl	80011bc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cca:	d014      	beq.n	8007cf6 <HAL_TIM_ConfigClockSource+0x236>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d010      	beq.n	8007cf6 <HAL_TIM_ConfigClockSource+0x236>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00c      	beq.n	8007cf6 <HAL_TIM_ConfigClockSource+0x236>
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d008      	beq.n	8007cf6 <HAL_TIM_ConfigClockSource+0x236>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	2b0a      	cmp	r3, #10
 8007cea:	d004      	beq.n	8007cf6 <HAL_TIM_ConfigClockSource+0x236>
 8007cec:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8007cf0:	4811      	ldr	r0, [pc, #68]	; (8007d38 <HAL_TIM_ConfigClockSource+0x278>)
 8007cf2:	f7f9 fa63 	bl	80011bc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	2b0f      	cmp	r3, #15
 8007cfc:	d904      	bls.n	8007d08 <HAL_TIM_ConfigClockSource+0x248>
 8007cfe:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8007d02:	480d      	ldr	r0, [pc, #52]	; (8007d38 <HAL_TIM_ConfigClockSource+0x278>)
 8007d04:	f7f9 fa5a 	bl	80011bc <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	6899      	ldr	r1, [r3, #8]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f000 fd1a 	bl	8008750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d2a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	609a      	str	r2, [r3, #8]
      break;
 8007d34:	e1ba      	b.n	80080ac <HAL_TIM_ConfigClockSource+0x5ec>
 8007d36:	bf00      	nop
 8007d38:	080115a4 	.word	0x080115a4
 8007d3c:	40010000 	.word	0x40010000
 8007d40:	40000400 	.word	0x40000400
 8007d44:	40000800 	.word	0x40000800
 8007d48:	40000c00 	.word	0x40000c00
 8007d4c:	40014000 	.word	0x40014000
 8007d50:	40014400 	.word	0x40014400
 8007d54:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a8a      	ldr	r2, [pc, #552]	; (8007f88 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d018      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0x2d4>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6a:	d013      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0x2d4>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a86      	ldr	r2, [pc, #536]	; (8007f8c <HAL_TIM_ConfigClockSource+0x4cc>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d00e      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0x2d4>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a85      	ldr	r2, [pc, #532]	; (8007f90 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d009      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0x2d4>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a83      	ldr	r2, [pc, #524]	; (8007f94 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d004      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0x2d4>
 8007d8a:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8007d8e:	4882      	ldr	r0, [pc, #520]	; (8007f98 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007d90:	f7f9 fa14 	bl	80011bc <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d013      	beq.n	8007dc4 <HAL_TIM_ConfigClockSource+0x304>
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da4:	d00e      	beq.n	8007dc4 <HAL_TIM_ConfigClockSource+0x304>
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dae:	d009      	beq.n	8007dc4 <HAL_TIM_ConfigClockSource+0x304>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007db8:	d004      	beq.n	8007dc4 <HAL_TIM_ConfigClockSource+0x304>
 8007dba:	f241 41e5 	movw	r1, #5349	; 0x14e5
 8007dbe:	4876      	ldr	r0, [pc, #472]	; (8007f98 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007dc0:	f7f9 f9fc 	bl	80011bc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dcc:	d014      	beq.n	8007df8 <HAL_TIM_ConfigClockSource+0x338>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d010      	beq.n	8007df8 <HAL_TIM_ConfigClockSource+0x338>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00c      	beq.n	8007df8 <HAL_TIM_ConfigClockSource+0x338>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d008      	beq.n	8007df8 <HAL_TIM_ConfigClockSource+0x338>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2b0a      	cmp	r3, #10
 8007dec:	d004      	beq.n	8007df8 <HAL_TIM_ConfigClockSource+0x338>
 8007dee:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8007df2:	4869      	ldr	r0, [pc, #420]	; (8007f98 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007df4:	f7f9 f9e2 	bl	80011bc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	2b0f      	cmp	r3, #15
 8007dfe:	d904      	bls.n	8007e0a <HAL_TIM_ConfigClockSource+0x34a>
 8007e00:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8007e04:	4864      	ldr	r0, [pc, #400]	; (8007f98 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007e06:	f7f9 f9d9 	bl	80011bc <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6899      	ldr	r1, [r3, #8]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f000 fc99 	bl	8008750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689a      	ldr	r2, [r3, #8]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e2c:	609a      	str	r2, [r3, #8]
      break;
 8007e2e:	e13d      	b.n	80080ac <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a54      	ldr	r2, [pc, #336]	; (8007f88 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d01d      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x3b6>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e42:	d018      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x3b6>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a50      	ldr	r2, [pc, #320]	; (8007f8c <HAL_TIM_ConfigClockSource+0x4cc>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d013      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x3b6>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a4f      	ldr	r2, [pc, #316]	; (8007f90 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00e      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x3b6>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a4d      	ldr	r2, [pc, #308]	; (8007f94 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d009      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x3b6>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a4d      	ldr	r2, [pc, #308]	; (8007f9c <HAL_TIM_ConfigClockSource+0x4dc>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d004      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x3b6>
 8007e6c:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8007e70:	4849      	ldr	r0, [pc, #292]	; (8007f98 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007e72:	f7f9 f9a3 	bl	80011bc <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e7e:	d014      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x3ea>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d010      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x3ea>
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00c      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x3ea>
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d008      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x3ea>
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	2b0a      	cmp	r3, #10
 8007e9e:	d004      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x3ea>
 8007ea0:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8007ea4:	483c      	ldr	r0, [pc, #240]	; (8007f98 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007ea6:	f7f9 f989 	bl	80011bc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	2b0f      	cmp	r3, #15
 8007eb0:	d904      	bls.n	8007ebc <HAL_TIM_ConfigClockSource+0x3fc>
 8007eb2:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8007eb6:	4838      	ldr	r0, [pc, #224]	; (8007f98 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007eb8:	f7f9 f980 	bl	80011bc <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	6859      	ldr	r1, [r3, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	f000 fbc7 	bl	800865c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2150      	movs	r1, #80	; 0x50
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fc20 	bl	800871a <TIM_ITRx_SetConfig>
      break;
 8007eda:	e0e7      	b.n	80080ac <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a29      	ldr	r2, [pc, #164]	; (8007f88 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d01d      	beq.n	8007f22 <HAL_TIM_ConfigClockSource+0x462>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eee:	d018      	beq.n	8007f22 <HAL_TIM_ConfigClockSource+0x462>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a25      	ldr	r2, [pc, #148]	; (8007f8c <HAL_TIM_ConfigClockSource+0x4cc>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d013      	beq.n	8007f22 <HAL_TIM_ConfigClockSource+0x462>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a24      	ldr	r2, [pc, #144]	; (8007f90 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d00e      	beq.n	8007f22 <HAL_TIM_ConfigClockSource+0x462>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a22      	ldr	r2, [pc, #136]	; (8007f94 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d009      	beq.n	8007f22 <HAL_TIM_ConfigClockSource+0x462>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a22      	ldr	r2, [pc, #136]	; (8007f9c <HAL_TIM_ConfigClockSource+0x4dc>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d004      	beq.n	8007f22 <HAL_TIM_ConfigClockSource+0x462>
 8007f18:	f241 5106 	movw	r1, #5382	; 0x1506
 8007f1c:	481e      	ldr	r0, [pc, #120]	; (8007f98 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007f1e:	f7f9 f94d 	bl	80011bc <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f2a:	d014      	beq.n	8007f56 <HAL_TIM_ConfigClockSource+0x496>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d010      	beq.n	8007f56 <HAL_TIM_ConfigClockSource+0x496>
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00c      	beq.n	8007f56 <HAL_TIM_ConfigClockSource+0x496>
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d008      	beq.n	8007f56 <HAL_TIM_ConfigClockSource+0x496>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	2b0a      	cmp	r3, #10
 8007f4a:	d004      	beq.n	8007f56 <HAL_TIM_ConfigClockSource+0x496>
 8007f4c:	f241 5109 	movw	r1, #5385	; 0x1509
 8007f50:	4811      	ldr	r0, [pc, #68]	; (8007f98 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007f52:	f7f9 f933 	bl	80011bc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	2b0f      	cmp	r3, #15
 8007f5c:	d904      	bls.n	8007f68 <HAL_TIM_ConfigClockSource+0x4a8>
 8007f5e:	f241 510a 	movw	r1, #5386	; 0x150a
 8007f62:	480d      	ldr	r0, [pc, #52]	; (8007f98 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007f64:	f7f9 f92a 	bl	80011bc <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	6859      	ldr	r1, [r3, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	461a      	mov	r2, r3
 8007f76:	f000 fba0 	bl	80086ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2160      	movs	r1, #96	; 0x60
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fbca 	bl	800871a <TIM_ITRx_SetConfig>
      break;
 8007f86:	e091      	b.n	80080ac <HAL_TIM_ConfigClockSource+0x5ec>
 8007f88:	40010000 	.word	0x40010000
 8007f8c:	40000400 	.word	0x40000400
 8007f90:	40000800 	.word	0x40000800
 8007f94:	40000c00 	.word	0x40000c00
 8007f98:	080115a4 	.word	0x080115a4
 8007f9c:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a48      	ldr	r2, [pc, #288]	; (80080c8 <HAL_TIM_ConfigClockSource+0x608>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d01d      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x526>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb2:	d018      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x526>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a44      	ldr	r2, [pc, #272]	; (80080cc <HAL_TIM_ConfigClockSource+0x60c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d013      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x526>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a43      	ldr	r2, [pc, #268]	; (80080d0 <HAL_TIM_ConfigClockSource+0x610>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d00e      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x526>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a41      	ldr	r2, [pc, #260]	; (80080d4 <HAL_TIM_ConfigClockSource+0x614>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d009      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x526>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a40      	ldr	r2, [pc, #256]	; (80080d8 <HAL_TIM_ConfigClockSource+0x618>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d004      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x526>
 8007fdc:	f241 5116 	movw	r1, #5398	; 0x1516
 8007fe0:	483e      	ldr	r0, [pc, #248]	; (80080dc <HAL_TIM_ConfigClockSource+0x61c>)
 8007fe2:	f7f9 f8eb 	bl	80011bc <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fee:	d014      	beq.n	800801a <HAL_TIM_ConfigClockSource+0x55a>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d010      	beq.n	800801a <HAL_TIM_ConfigClockSource+0x55a>
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00c      	beq.n	800801a <HAL_TIM_ConfigClockSource+0x55a>
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d008      	beq.n	800801a <HAL_TIM_ConfigClockSource+0x55a>
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	2b0a      	cmp	r3, #10
 800800e:	d004      	beq.n	800801a <HAL_TIM_ConfigClockSource+0x55a>
 8008010:	f241 5119 	movw	r1, #5401	; 0x1519
 8008014:	4831      	ldr	r0, [pc, #196]	; (80080dc <HAL_TIM_ConfigClockSource+0x61c>)
 8008016:	f7f9 f8d1 	bl	80011bc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	2b0f      	cmp	r3, #15
 8008020:	d904      	bls.n	800802c <HAL_TIM_ConfigClockSource+0x56c>
 8008022:	f241 511a 	movw	r1, #5402	; 0x151a
 8008026:	482d      	ldr	r0, [pc, #180]	; (80080dc <HAL_TIM_ConfigClockSource+0x61c>)
 8008028:	f7f9 f8c8 	bl	80011bc <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6818      	ldr	r0, [r3, #0]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	6859      	ldr	r1, [r3, #4]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	461a      	mov	r2, r3
 800803a:	f000 fb0f 	bl	800865c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2140      	movs	r1, #64	; 0x40
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fb68 	bl	800871a <TIM_ITRx_SetConfig>
      break;
 800804a:	e02f      	b.n	80080ac <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a1d      	ldr	r2, [pc, #116]	; (80080c8 <HAL_TIM_ConfigClockSource+0x608>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d01d      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x5d2>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800805e:	d018      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x5d2>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a19      	ldr	r2, [pc, #100]	; (80080cc <HAL_TIM_ConfigClockSource+0x60c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d013      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x5d2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a18      	ldr	r2, [pc, #96]	; (80080d0 <HAL_TIM_ConfigClockSource+0x610>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00e      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x5d2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a16      	ldr	r2, [pc, #88]	; (80080d4 <HAL_TIM_ConfigClockSource+0x614>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d009      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x5d2>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a15      	ldr	r2, [pc, #84]	; (80080d8 <HAL_TIM_ConfigClockSource+0x618>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d004      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x5d2>
 8008088:	f241 5129 	movw	r1, #5417	; 0x1529
 800808c:	4813      	ldr	r0, [pc, #76]	; (80080dc <HAL_TIM_ConfigClockSource+0x61c>)
 800808e:	f7f9 f895 	bl	80011bc <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4619      	mov	r1, r3
 800809c:	4610      	mov	r0, r2
 800809e:	f000 fb3c 	bl	800871a <TIM_ITRx_SetConfig>
      break;
 80080a2:	e003      	b.n	80080ac <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	73fb      	strb	r3, [r7, #15]
      break;
 80080a8:	e000      	b.n	80080ac <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 80080aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	40010000 	.word	0x40010000
 80080cc:	40000400 	.word	0x40000400
 80080d0:	40000800 	.word	0x40000800
 80080d4:	40000c00 	.word	0x40000c00
 80080d8:	40014000 	.word	0x40014000
 80080dc:	080115a4 	.word	0x080115a4

080080e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a34      	ldr	r2, [pc, #208]	; (8008214 <TIM_Base_SetConfig+0xe4>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00f      	beq.n	8008168 <TIM_Base_SetConfig+0x38>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814e:	d00b      	beq.n	8008168 <TIM_Base_SetConfig+0x38>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a31      	ldr	r2, [pc, #196]	; (8008218 <TIM_Base_SetConfig+0xe8>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d007      	beq.n	8008168 <TIM_Base_SetConfig+0x38>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a30      	ldr	r2, [pc, #192]	; (800821c <TIM_Base_SetConfig+0xec>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_Base_SetConfig+0x38>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a2f      	ldr	r2, [pc, #188]	; (8008220 <TIM_Base_SetConfig+0xf0>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d108      	bne.n	800817a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a25      	ldr	r2, [pc, #148]	; (8008214 <TIM_Base_SetConfig+0xe4>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d01b      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008188:	d017      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a22      	ldr	r2, [pc, #136]	; (8008218 <TIM_Base_SetConfig+0xe8>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d013      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a21      	ldr	r2, [pc, #132]	; (800821c <TIM_Base_SetConfig+0xec>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00f      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a20      	ldr	r2, [pc, #128]	; (8008220 <TIM_Base_SetConfig+0xf0>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00b      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a1f      	ldr	r2, [pc, #124]	; (8008224 <TIM_Base_SetConfig+0xf4>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d007      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a1e      	ldr	r2, [pc, #120]	; (8008228 <TIM_Base_SetConfig+0xf8>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d003      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a1d      	ldr	r2, [pc, #116]	; (800822c <TIM_Base_SetConfig+0xfc>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d108      	bne.n	80081cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a08      	ldr	r2, [pc, #32]	; (8008214 <TIM_Base_SetConfig+0xe4>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d103      	bne.n	8008200 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	691a      	ldr	r2, [r3, #16]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	615a      	str	r2, [r3, #20]
}
 8008206:	bf00      	nop
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	40010000 	.word	0x40010000
 8008218:	40000400 	.word	0x40000400
 800821c:	40000800 	.word	0x40000800
 8008220:	40000c00 	.word	0x40000c00
 8008224:	40014000 	.word	0x40014000
 8008228:	40014400 	.word	0x40014400
 800822c:	40014800 	.word	0x40014800

08008230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	f023 0201 	bic.w	r2, r3, #1
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800825e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f023 0303 	bic.w	r3, r3, #3
 8008266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f023 0302 	bic.w	r3, r3, #2
 8008278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	4313      	orrs	r3, r2
 8008282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a30      	ldr	r2, [pc, #192]	; (8008348 <TIM_OC1_SetConfig+0x118>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d119      	bne.n	80082c0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d008      	beq.n	80082a6 <TIM_OC1_SetConfig+0x76>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	2b08      	cmp	r3, #8
 800829a:	d004      	beq.n	80082a6 <TIM_OC1_SetConfig+0x76>
 800829c:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 80082a0:	482a      	ldr	r0, [pc, #168]	; (800834c <TIM_OC1_SetConfig+0x11c>)
 80082a2:	f7f8 ff8b 	bl	80011bc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f023 0308 	bic.w	r3, r3, #8
 80082ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f023 0304 	bic.w	r3, r3, #4
 80082be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a21      	ldr	r2, [pc, #132]	; (8008348 <TIM_OC1_SetConfig+0x118>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d12d      	bne.n	8008324 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082d0:	d008      	beq.n	80082e4 <TIM_OC1_SetConfig+0xb4>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <TIM_OC1_SetConfig+0xb4>
 80082da:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 80082de:	481b      	ldr	r0, [pc, #108]	; (800834c <TIM_OC1_SetConfig+0x11c>)
 80082e0:	f7f8 ff6c 	bl	80011bc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ec:	d008      	beq.n	8008300 <TIM_OC1_SetConfig+0xd0>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d004      	beq.n	8008300 <TIM_OC1_SetConfig+0xd0>
 80082f6:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 80082fa:	4814      	ldr	r0, [pc, #80]	; (800834c <TIM_OC1_SetConfig+0x11c>)
 80082fc:	f7f8 ff5e 	bl	80011bc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800830e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	4313      	orrs	r3, r2
 8008318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	4313      	orrs	r3, r2
 8008322:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	621a      	str	r2, [r3, #32]
}
 800833e:	bf00      	nop
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	40010000 	.word	0x40010000
 800834c:	080115a4 	.word	0x080115a4

08008350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	f023 0210 	bic.w	r2, r3, #16
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	021b      	lsls	r3, r3, #8
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	4313      	orrs	r3, r2
 8008392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f023 0320 	bic.w	r3, r3, #32
 800839a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	011b      	lsls	r3, r3, #4
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a31      	ldr	r2, [pc, #196]	; (8008470 <TIM_OC2_SetConfig+0x120>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d11a      	bne.n	80083e6 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d008      	beq.n	80083ca <TIM_OC2_SetConfig+0x7a>
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d004      	beq.n	80083ca <TIM_OC2_SetConfig+0x7a>
 80083c0:	f641 3112 	movw	r1, #6930	; 0x1b12
 80083c4:	482b      	ldr	r0, [pc, #172]	; (8008474 <TIM_OC2_SetConfig+0x124>)
 80083c6:	f7f8 fef9 	bl	80011bc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	4313      	orrs	r3, r2
 80083dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083e4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a21      	ldr	r2, [pc, #132]	; (8008470 <TIM_OC2_SetConfig+0x120>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d12f      	bne.n	800844e <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083f6:	d008      	beq.n	800840a <TIM_OC2_SetConfig+0xba>
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d004      	beq.n	800840a <TIM_OC2_SetConfig+0xba>
 8008400:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8008404:	481b      	ldr	r0, [pc, #108]	; (8008474 <TIM_OC2_SetConfig+0x124>)
 8008406:	f7f8 fed9 	bl	80011bc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008412:	d008      	beq.n	8008426 <TIM_OC2_SetConfig+0xd6>
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d004      	beq.n	8008426 <TIM_OC2_SetConfig+0xd6>
 800841c:	f641 3121 	movw	r1, #6945	; 0x1b21
 8008420:	4814      	ldr	r0, [pc, #80]	; (8008474 <TIM_OC2_SetConfig+0x124>)
 8008422:	f7f8 fecb 	bl	80011bc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800842c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	4313      	orrs	r3, r2
 8008440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	4313      	orrs	r3, r2
 800844c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	621a      	str	r2, [r3, #32]
}
 8008468:	bf00      	nop
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	40010000 	.word	0x40010000
 8008474:	080115a4 	.word	0x080115a4

08008478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0303 	bic.w	r3, r3, #3
 80084ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	021b      	lsls	r3, r3, #8
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a31      	ldr	r2, [pc, #196]	; (8008598 <TIM_OC3_SetConfig+0x120>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d11a      	bne.n	800850c <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d008      	beq.n	80084f0 <TIM_OC3_SetConfig+0x78>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	2b08      	cmp	r3, #8
 80084e4:	d004      	beq.n	80084f0 <TIM_OC3_SetConfig+0x78>
 80084e6:	f641 315d 	movw	r1, #7005	; 0x1b5d
 80084ea:	482c      	ldr	r0, [pc, #176]	; (800859c <TIM_OC3_SetConfig+0x124>)
 80084ec:	f7f8 fe66 	bl	80011bc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	021b      	lsls	r3, r3, #8
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	4313      	orrs	r3, r2
 8008502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800850a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a22      	ldr	r2, [pc, #136]	; (8008598 <TIM_OC3_SetConfig+0x120>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d12f      	bne.n	8008574 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800851c:	d008      	beq.n	8008530 <TIM_OC3_SetConfig+0xb8>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d004      	beq.n	8008530 <TIM_OC3_SetConfig+0xb8>
 8008526:	f641 316a 	movw	r1, #7018	; 0x1b6a
 800852a:	481c      	ldr	r0, [pc, #112]	; (800859c <TIM_OC3_SetConfig+0x124>)
 800852c:	f7f8 fe46 	bl	80011bc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008538:	d008      	beq.n	800854c <TIM_OC3_SetConfig+0xd4>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d004      	beq.n	800854c <TIM_OC3_SetConfig+0xd4>
 8008542:	f641 316b 	movw	r1, #7019	; 0x1b6b
 8008546:	4815      	ldr	r0, [pc, #84]	; (800859c <TIM_OC3_SetConfig+0x124>)
 8008548:	f7f8 fe38 	bl	80011bc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800855a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	011b      	lsls	r3, r3, #4
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	4313      	orrs	r3, r2
 8008566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	4313      	orrs	r3, r2
 8008572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	621a      	str	r2, [r3, #32]
}
 800858e:	bf00      	nop
 8008590:	3718      	adds	r7, #24
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	40010000 	.word	0x40010000
 800859c:	080115a4 	.word	0x080115a4

080085a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	021b      	lsls	r3, r3, #8
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	031b      	lsls	r3, r3, #12
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a16      	ldr	r2, [pc, #88]	; (8008654 <TIM_OC4_SetConfig+0xb4>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d117      	bne.n	8008630 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008608:	d008      	beq.n	800861c <TIM_OC4_SetConfig+0x7c>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d004      	beq.n	800861c <TIM_OC4_SetConfig+0x7c>
 8008612:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 8008616:	4810      	ldr	r0, [pc, #64]	; (8008658 <TIM_OC4_SetConfig+0xb8>)
 8008618:	f7f8 fdd0 	bl	80011bc <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	019b      	lsls	r3, r3, #6
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	4313      	orrs	r3, r2
 800862e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	621a      	str	r2, [r3, #32]
}
 800864a:	bf00      	nop
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	40010000 	.word	0x40010000
 8008658:	080115a4 	.word	0x080115a4

0800865c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6a1b      	ldr	r3, [r3, #32]
 800866c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	f023 0201 	bic.w	r2, r3, #1
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	011b      	lsls	r3, r3, #4
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	4313      	orrs	r3, r2
 8008690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f023 030a 	bic.w	r3, r3, #10
 8008698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4313      	orrs	r3, r2
 80086a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	621a      	str	r2, [r3, #32]
}
 80086ae:	bf00      	nop
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b087      	sub	sp, #28
 80086be:	af00      	add	r7, sp, #0
 80086c0:	60f8      	str	r0, [r7, #12]
 80086c2:	60b9      	str	r1, [r7, #8]
 80086c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	f023 0210 	bic.w	r2, r3, #16
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	031b      	lsls	r3, r3, #12
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	011b      	lsls	r3, r3, #4
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	4313      	orrs	r3, r2
 8008700:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	621a      	str	r2, [r3, #32]
}
 800870e:	bf00      	nop
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800871a:	b480      	push	{r7}
 800871c:	b085      	sub	sp, #20
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	4313      	orrs	r3, r2
 8008738:	f043 0307 	orr.w	r3, r3, #7
 800873c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	609a      	str	r2, [r3, #8]
}
 8008744:	bf00      	nop
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008750:	b480      	push	{r7}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800876a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	021a      	lsls	r2, r3, #8
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	431a      	orrs	r2, r3
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	4313      	orrs	r3, r2
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	4313      	orrs	r3, r2
 800877c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	609a      	str	r2, [r3, #8]
}
 8008784:	bf00      	nop
 8008786:	371c      	adds	r7, #28
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	4a2a      	ldr	r2, [pc, #168]	; (8008848 <TIM_CCxChannelCmd+0xb8>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d020      	beq.n	80087e6 <TIM_CCxChannelCmd+0x56>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087aa:	d01c      	beq.n	80087e6 <TIM_CCxChannelCmd+0x56>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4a27      	ldr	r2, [pc, #156]	; (800884c <TIM_CCxChannelCmd+0xbc>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d018      	beq.n	80087e6 <TIM_CCxChannelCmd+0x56>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4a26      	ldr	r2, [pc, #152]	; (8008850 <TIM_CCxChannelCmd+0xc0>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d014      	beq.n	80087e6 <TIM_CCxChannelCmd+0x56>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	4a25      	ldr	r2, [pc, #148]	; (8008854 <TIM_CCxChannelCmd+0xc4>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d010      	beq.n	80087e6 <TIM_CCxChannelCmd+0x56>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4a24      	ldr	r2, [pc, #144]	; (8008858 <TIM_CCxChannelCmd+0xc8>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d00c      	beq.n	80087e6 <TIM_CCxChannelCmd+0x56>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4a23      	ldr	r2, [pc, #140]	; (800885c <TIM_CCxChannelCmd+0xcc>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d008      	beq.n	80087e6 <TIM_CCxChannelCmd+0x56>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4a22      	ldr	r2, [pc, #136]	; (8008860 <TIM_CCxChannelCmd+0xd0>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d004      	beq.n	80087e6 <TIM_CCxChannelCmd+0x56>
 80087dc:	f641 5194 	movw	r1, #7572	; 0x1d94
 80087e0:	4820      	ldr	r0, [pc, #128]	; (8008864 <TIM_CCxChannelCmd+0xd4>)
 80087e2:	f7f8 fceb 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d010      	beq.n	800880e <TIM_CCxChannelCmd+0x7e>
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d00d      	beq.n	800880e <TIM_CCxChannelCmd+0x7e>
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b08      	cmp	r3, #8
 80087f6:	d00a      	beq.n	800880e <TIM_CCxChannelCmd+0x7e>
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	2b0c      	cmp	r3, #12
 80087fc:	d007      	beq.n	800880e <TIM_CCxChannelCmd+0x7e>
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b3c      	cmp	r3, #60	; 0x3c
 8008802:	d004      	beq.n	800880e <TIM_CCxChannelCmd+0x7e>
 8008804:	f641 5195 	movw	r1, #7573	; 0x1d95
 8008808:	4816      	ldr	r0, [pc, #88]	; (8008864 <TIM_CCxChannelCmd+0xd4>)
 800880a:	f7f8 fcd7 	bl	80011bc <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f003 031f 	and.w	r3, r3, #31
 8008814:	2201      	movs	r2, #1
 8008816:	fa02 f303 	lsl.w	r3, r2, r3
 800881a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6a1a      	ldr	r2, [r3, #32]
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	43db      	mvns	r3, r3
 8008824:	401a      	ands	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a1a      	ldr	r2, [r3, #32]
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	f003 031f 	and.w	r3, r3, #31
 8008834:	6879      	ldr	r1, [r7, #4]
 8008836:	fa01 f303 	lsl.w	r3, r1, r3
 800883a:	431a      	orrs	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	621a      	str	r2, [r3, #32]
}
 8008840:	bf00      	nop
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	40010000 	.word	0x40010000
 800884c:	40000400 	.word	0x40000400
 8008850:	40000800 	.word	0x40000800
 8008854:	40000c00 	.word	0x40000c00
 8008858:	40014000 	.word	0x40014000
 800885c:	40014400 	.word	0x40014400
 8008860:	40014800 	.word	0x40014800
 8008864:	080115a4 	.word	0x080115a4

08008868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a55      	ldr	r2, [pc, #340]	; (80089cc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d018      	beq.n	80088ae <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008884:	d013      	beq.n	80088ae <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a51      	ldr	r2, [pc, #324]	; (80089d0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d00e      	beq.n	80088ae <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a4f      	ldr	r2, [pc, #316]	; (80089d4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d009      	beq.n	80088ae <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a4e      	ldr	r2, [pc, #312]	; (80089d8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d004      	beq.n	80088ae <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80088a4:	f240 71b1 	movw	r1, #1969	; 0x7b1
 80088a8:	484c      	ldr	r0, [pc, #304]	; (80089dc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80088aa:	f7f8 fc87 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d020      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b10      	cmp	r3, #16
 80088bc:	d01c      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b20      	cmp	r3, #32
 80088c4:	d018      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b30      	cmp	r3, #48	; 0x30
 80088cc:	d014      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b40      	cmp	r3, #64	; 0x40
 80088d4:	d010      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b50      	cmp	r3, #80	; 0x50
 80088dc:	d00c      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b60      	cmp	r3, #96	; 0x60
 80088e4:	d008      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b70      	cmp	r3, #112	; 0x70
 80088ec:	d004      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80088ee:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80088f2:	483a      	ldr	r0, [pc, #232]	; (80089dc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80088f4:	f7f8 fc62 	bl	80011bc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	2b80      	cmp	r3, #128	; 0x80
 80088fe:	d008      	beq.n	8008912 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d004      	beq.n	8008912 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8008908:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800890c:	4833      	ldr	r0, [pc, #204]	; (80089dc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800890e:	f7f8 fc55 	bl	80011bc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008918:	2b01      	cmp	r3, #1
 800891a:	d101      	bne.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800891c:	2302      	movs	r3, #2
 800891e:	e050      	b.n	80089c2 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2202      	movs	r2, #2
 800892c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	4313      	orrs	r3, r2
 8008950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a1b      	ldr	r2, [pc, #108]	; (80089cc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d018      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800896c:	d013      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a17      	ldr	r2, [pc, #92]	; (80089d0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00e      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a15      	ldr	r2, [pc, #84]	; (80089d4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d009      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a14      	ldr	r2, [pc, #80]	; (80089d8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d004      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a13      	ldr	r2, [pc, #76]	; (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d10c      	bne.n	80089b0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800899c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	40010000 	.word	0x40010000
 80089d0:	40000400 	.word	0x40000400
 80089d4:	40000800 	.word	0x40000800
 80089d8:	40000c00 	.word	0x40000c00
 80089dc:	080115dc 	.word	0x080115dc
 80089e0:	40014000 	.word	0x40014000

080089e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	f107 001c 	add.w	r0, r7, #28
 8008a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d122      	bne.n	8008a6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d105      	bne.n	8008a5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 fbee 	bl	800a240 <USB_CoreReset>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]
 8008a68:	e01a      	b.n	8008aa0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f001 fbe2 	bl	800a240 <USB_CoreReset>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d106      	bne.n	8008a94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	639a      	str	r2, [r3, #56]	; 0x38
 8008a92:	e005      	b.n	8008aa0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d10b      	bne.n	8008abe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f043 0206 	orr.w	r2, r3, #6
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f043 0220 	orr.w	r2, r3, #32
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008aca:	b004      	add	sp, #16
 8008acc:	4770      	bx	lr
	...

08008ad0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	4613      	mov	r3, r2
 8008adc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d165      	bne.n	8008bb0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	4a41      	ldr	r2, [pc, #260]	; (8008bec <USB_SetTurnaroundTime+0x11c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d906      	bls.n	8008afa <USB_SetTurnaroundTime+0x2a>
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	4a40      	ldr	r2, [pc, #256]	; (8008bf0 <USB_SetTurnaroundTime+0x120>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d202      	bcs.n	8008afa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008af4:	230f      	movs	r3, #15
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	e062      	b.n	8008bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4a3c      	ldr	r2, [pc, #240]	; (8008bf0 <USB_SetTurnaroundTime+0x120>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d306      	bcc.n	8008b10 <USB_SetTurnaroundTime+0x40>
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4a3b      	ldr	r2, [pc, #236]	; (8008bf4 <USB_SetTurnaroundTime+0x124>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d202      	bcs.n	8008b10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b0a:	230e      	movs	r3, #14
 8008b0c:	617b      	str	r3, [r7, #20]
 8008b0e:	e057      	b.n	8008bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	4a38      	ldr	r2, [pc, #224]	; (8008bf4 <USB_SetTurnaroundTime+0x124>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d306      	bcc.n	8008b26 <USB_SetTurnaroundTime+0x56>
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	4a37      	ldr	r2, [pc, #220]	; (8008bf8 <USB_SetTurnaroundTime+0x128>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d202      	bcs.n	8008b26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b20:	230d      	movs	r3, #13
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	e04c      	b.n	8008bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	4a33      	ldr	r2, [pc, #204]	; (8008bf8 <USB_SetTurnaroundTime+0x128>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d306      	bcc.n	8008b3c <USB_SetTurnaroundTime+0x6c>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	4a32      	ldr	r2, [pc, #200]	; (8008bfc <USB_SetTurnaroundTime+0x12c>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d802      	bhi.n	8008b3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b36:	230c      	movs	r3, #12
 8008b38:	617b      	str	r3, [r7, #20]
 8008b3a:	e041      	b.n	8008bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	4a2f      	ldr	r2, [pc, #188]	; (8008bfc <USB_SetTurnaroundTime+0x12c>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d906      	bls.n	8008b52 <USB_SetTurnaroundTime+0x82>
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	4a2e      	ldr	r2, [pc, #184]	; (8008c00 <USB_SetTurnaroundTime+0x130>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d802      	bhi.n	8008b52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b4c:	230b      	movs	r3, #11
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	e036      	b.n	8008bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	4a2a      	ldr	r2, [pc, #168]	; (8008c00 <USB_SetTurnaroundTime+0x130>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d906      	bls.n	8008b68 <USB_SetTurnaroundTime+0x98>
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	4a29      	ldr	r2, [pc, #164]	; (8008c04 <USB_SetTurnaroundTime+0x134>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d802      	bhi.n	8008b68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b62:	230a      	movs	r3, #10
 8008b64:	617b      	str	r3, [r7, #20]
 8008b66:	e02b      	b.n	8008bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	4a26      	ldr	r2, [pc, #152]	; (8008c04 <USB_SetTurnaroundTime+0x134>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d906      	bls.n	8008b7e <USB_SetTurnaroundTime+0xae>
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	4a25      	ldr	r2, [pc, #148]	; (8008c08 <USB_SetTurnaroundTime+0x138>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d202      	bcs.n	8008b7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b78:	2309      	movs	r3, #9
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	e020      	b.n	8008bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	4a21      	ldr	r2, [pc, #132]	; (8008c08 <USB_SetTurnaroundTime+0x138>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d306      	bcc.n	8008b94 <USB_SetTurnaroundTime+0xc4>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	4a20      	ldr	r2, [pc, #128]	; (8008c0c <USB_SetTurnaroundTime+0x13c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d802      	bhi.n	8008b94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b8e:	2308      	movs	r3, #8
 8008b90:	617b      	str	r3, [r7, #20]
 8008b92:	e015      	b.n	8008bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4a1d      	ldr	r2, [pc, #116]	; (8008c0c <USB_SetTurnaroundTime+0x13c>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d906      	bls.n	8008baa <USB_SetTurnaroundTime+0xda>
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4a1c      	ldr	r2, [pc, #112]	; (8008c10 <USB_SetTurnaroundTime+0x140>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d202      	bcs.n	8008baa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008ba4:	2307      	movs	r3, #7
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	e00a      	b.n	8008bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008baa:	2306      	movs	r3, #6
 8008bac:	617b      	str	r3, [r7, #20]
 8008bae:	e007      	b.n	8008bc0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008bb0:	79fb      	ldrb	r3, [r7, #7]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d102      	bne.n	8008bbc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008bb6:	2309      	movs	r3, #9
 8008bb8:	617b      	str	r3, [r7, #20]
 8008bba:	e001      	b.n	8008bc0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bbc:	2309      	movs	r3, #9
 8008bbe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	029b      	lsls	r3, r3, #10
 8008bd4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008bd8:	431a      	orrs	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	00d8acbf 	.word	0x00d8acbf
 8008bf0:	00e4e1c0 	.word	0x00e4e1c0
 8008bf4:	00f42400 	.word	0x00f42400
 8008bf8:	01067380 	.word	0x01067380
 8008bfc:	011a499f 	.word	0x011a499f
 8008c00:	01312cff 	.word	0x01312cff
 8008c04:	014ca43f 	.word	0x014ca43f
 8008c08:	016e3600 	.word	0x016e3600
 8008c0c:	01a6ab1f 	.word	0x01a6ab1f
 8008c10:	01e84800 	.word	0x01e84800

08008c14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f043 0201 	orr.w	r2, r3, #1
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f023 0201 	bic.w	r2, r3, #1
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d115      	bne.n	8008ca6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c86:	2001      	movs	r0, #1
 8008c88:	f7f9 fa58 	bl	800213c <HAL_Delay>
      ms++;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f001 fa45 	bl	800a122 <USB_GetMode>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d01e      	beq.n	8008cdc <USB_SetCurrentMode+0x84>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2b31      	cmp	r3, #49	; 0x31
 8008ca2:	d9f0      	bls.n	8008c86 <USB_SetCurrentMode+0x2e>
 8008ca4:	e01a      	b.n	8008cdc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d115      	bne.n	8008cd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cb8:	2001      	movs	r0, #1
 8008cba:	f7f9 fa3f 	bl	800213c <HAL_Delay>
      ms++;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f001 fa2c 	bl	800a122 <USB_GetMode>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d005      	beq.n	8008cdc <USB_SetCurrentMode+0x84>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b31      	cmp	r3, #49	; 0x31
 8008cd4:	d9f0      	bls.n	8008cb8 <USB_SetCurrentMode+0x60>
 8008cd6:	e001      	b.n	8008cdc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e005      	b.n	8008ce8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2b32      	cmp	r3, #50	; 0x32
 8008ce0:	d101      	bne.n	8008ce6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e000      	b.n	8008ce8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b086      	sub	sp, #24
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	613b      	str	r3, [r7, #16]
 8008d0e:	e009      	b.n	8008d24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	3340      	adds	r3, #64	; 0x40
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	3301      	adds	r3, #1
 8008d22:	613b      	str	r3, [r7, #16]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	2b0e      	cmp	r3, #14
 8008d28:	d9f2      	bls.n	8008d10 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d11c      	bne.n	8008d6a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d3e:	f043 0302 	orr.w	r3, r3, #2
 8008d42:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d54:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d60:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	639a      	str	r2, [r3, #56]	; 0x38
 8008d68:	e00b      	b.n	8008d82 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d88:	461a      	mov	r2, r3
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d94:	4619      	mov	r1, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	680b      	ldr	r3, [r1, #0]
 8008da0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d10c      	bne.n	8008dc2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d104      	bne.n	8008db8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008dae:	2100      	movs	r1, #0
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f965 	bl	8009080 <USB_SetDevSpeed>
 8008db6:	e008      	b.n	8008dca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008db8:	2101      	movs	r1, #1
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f960 	bl	8009080 <USB_SetDevSpeed>
 8008dc0:	e003      	b.n	8008dca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008dc2:	2103      	movs	r1, #3
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f95b 	bl	8009080 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dca:	2110      	movs	r1, #16
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f8f3 	bl	8008fb8 <USB_FlushTxFifo>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f91f 	bl	8009020 <USB_FlushRxFifo>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df2:	461a      	mov	r2, r3
 8008df4:	2300      	movs	r3, #0
 8008df6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfe:	461a      	mov	r2, r3
 8008e00:	2300      	movs	r3, #0
 8008e02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e10:	2300      	movs	r3, #0
 8008e12:	613b      	str	r3, [r7, #16]
 8008e14:	e043      	b.n	8008e9e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e2c:	d118      	bne.n	8008e60 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e40:	461a      	mov	r2, r3
 8008e42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	e013      	b.n	8008e72 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e56:	461a      	mov	r2, r3
 8008e58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e5c:	6013      	str	r3, [r2, #0]
 8008e5e:	e008      	b.n	8008e72 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	2300      	movs	r3, #0
 8008e70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7e:	461a      	mov	r2, r3
 8008e80:	2300      	movs	r3, #0
 8008e82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	015a      	lsls	r2, r3, #5
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e90:	461a      	mov	r2, r3
 8008e92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	613b      	str	r3, [r7, #16]
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d3b7      	bcc.n	8008e16 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	613b      	str	r3, [r7, #16]
 8008eaa:	e043      	b.n	8008f34 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ec2:	d118      	bne.n	8008ef6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10a      	bne.n	8008ee0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	e013      	b.n	8008f08 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eec:	461a      	mov	r2, r3
 8008eee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ef2:	6013      	str	r3, [r2, #0]
 8008ef4:	e008      	b.n	8008f08 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f02:	461a      	mov	r2, r3
 8008f04:	2300      	movs	r3, #0
 8008f06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f14:	461a      	mov	r2, r3
 8008f16:	2300      	movs	r3, #0
 8008f18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f26:	461a      	mov	r2, r3
 8008f28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	3301      	adds	r3, #1
 8008f32:	613b      	str	r3, [r7, #16]
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d3b7      	bcc.n	8008eac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d105      	bne.n	8008f70 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	f043 0210 	orr.w	r2, r3, #16
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	699a      	ldr	r2, [r3, #24]
 8008f74:	4b0f      	ldr	r3, [pc, #60]	; (8008fb4 <USB_DevInit+0x2c4>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d005      	beq.n	8008f8e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	f043 0208 	orr.w	r2, r3, #8
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d107      	bne.n	8008fa4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f9c:	f043 0304 	orr.w	r3, r3, #4
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fb0:	b004      	add	sp, #16
 8008fb2:	4770      	bx	lr
 8008fb4:	803c3800 	.word	0x803c3800

08008fb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4a13      	ldr	r2, [pc, #76]	; (800901c <USB_FlushTxFifo+0x64>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d901      	bls.n	8008fd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e01b      	b.n	8009010 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	daf2      	bge.n	8008fc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	019b      	lsls	r3, r3, #6
 8008fe8:	f043 0220 	orr.w	r2, r3, #32
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	4a08      	ldr	r2, [pc, #32]	; (800901c <USB_FlushTxFifo+0x64>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d901      	bls.n	8009002 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e006      	b.n	8009010 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b20      	cmp	r3, #32
 800900c:	d0f0      	beq.n	8008ff0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	00030d40 	.word	0x00030d40

08009020 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	3301      	adds	r3, #1
 8009030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	4a11      	ldr	r2, [pc, #68]	; (800907c <USB_FlushRxFifo+0x5c>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d901      	bls.n	800903e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e018      	b.n	8009070 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	daf2      	bge.n	800902c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009046:	2300      	movs	r3, #0
 8009048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2210      	movs	r2, #16
 800904e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3301      	adds	r3, #1
 8009054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	4a08      	ldr	r2, [pc, #32]	; (800907c <USB_FlushRxFifo+0x5c>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d901      	bls.n	8009062 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e006      	b.n	8009070 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	f003 0310 	and.w	r3, r3, #16
 800906a:	2b10      	cmp	r3, #16
 800906c:	d0f0      	beq.n	8009050 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	00030d40 	.word	0x00030d40

08009080 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	68f9      	ldr	r1, [r7, #12]
 800909c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090a0:	4313      	orrs	r3, r2
 80090a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b087      	sub	sp, #28
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f003 0306 	and.w	r3, r3, #6
 80090ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d102      	bne.n	80090d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80090d2:	2300      	movs	r3, #0
 80090d4:	75fb      	strb	r3, [r7, #23]
 80090d6:	e00a      	b.n	80090ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d002      	beq.n	80090e4 <USB_GetDevSpeed+0x32>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b06      	cmp	r3, #6
 80090e2:	d102      	bne.n	80090ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80090e4:	2302      	movs	r3, #2
 80090e6:	75fb      	strb	r3, [r7, #23]
 80090e8:	e001      	b.n	80090ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80090ea:	230f      	movs	r3, #15
 80090ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	371c      	adds	r7, #28
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	785b      	ldrb	r3, [r3, #1]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d13a      	bne.n	800918e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911e:	69da      	ldr	r2, [r3, #28]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	f003 030f 	and.w	r3, r3, #15
 8009128:	2101      	movs	r1, #1
 800912a:	fa01 f303 	lsl.w	r3, r1, r3
 800912e:	b29b      	uxth	r3, r3
 8009130:	68f9      	ldr	r1, [r7, #12]
 8009132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009136:	4313      	orrs	r3, r2
 8009138:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d155      	bne.n	80091fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4413      	add	r3, r2
 8009158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	791b      	ldrb	r3, [r3, #4]
 800916a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800916c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	059b      	lsls	r3, r3, #22
 8009172:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009174:	4313      	orrs	r3, r2
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	0151      	lsls	r1, r2, #5
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	440a      	add	r2, r1
 800917e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	e036      	b.n	80091fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009194:	69da      	ldr	r2, [r3, #28]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	f003 030f 	and.w	r3, r3, #15
 800919e:	2101      	movs	r1, #1
 80091a0:	fa01 f303 	lsl.w	r3, r1, r3
 80091a4:	041b      	lsls	r3, r3, #16
 80091a6:	68f9      	ldr	r1, [r7, #12]
 80091a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091ac:	4313      	orrs	r3, r2
 80091ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d11a      	bne.n	80091fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	791b      	ldrb	r3, [r3, #4]
 80091e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091e2:	430b      	orrs	r3, r1
 80091e4:	4313      	orrs	r3, r2
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	0151      	lsls	r1, r2, #5
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	440a      	add	r2, r1
 80091ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
	...

0800920c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	785b      	ldrb	r3, [r3, #1]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d161      	bne.n	80092ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800923a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800923e:	d11f      	bne.n	8009280 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	440a      	add	r2, r1
 8009256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800925a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800925e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	440a      	add	r2, r1
 8009276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800927a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800927e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	f003 030f 	and.w	r3, r3, #15
 8009290:	2101      	movs	r1, #1
 8009292:	fa01 f303 	lsl.w	r3, r1, r3
 8009296:	b29b      	uxth	r3, r3
 8009298:	43db      	mvns	r3, r3
 800929a:	68f9      	ldr	r1, [r7, #12]
 800929c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092a0:	4013      	ands	r3, r2
 80092a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092aa:	69da      	ldr	r2, [r3, #28]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	f003 030f 	and.w	r3, r3, #15
 80092b4:	2101      	movs	r1, #1
 80092b6:	fa01 f303 	lsl.w	r3, r1, r3
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	43db      	mvns	r3, r3
 80092be:	68f9      	ldr	r1, [r7, #12]
 80092c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092c4:	4013      	ands	r3, r2
 80092c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	0159      	lsls	r1, r3, #5
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	440b      	add	r3, r1
 80092de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e2:	4619      	mov	r1, r3
 80092e4:	4b35      	ldr	r3, [pc, #212]	; (80093bc <USB_DeactivateEndpoint+0x1b0>)
 80092e6:	4013      	ands	r3, r2
 80092e8:	600b      	str	r3, [r1, #0]
 80092ea:	e060      	b.n	80093ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009302:	d11f      	bne.n	8009344 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	0151      	lsls	r1, r2, #5
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	440a      	add	r2, r1
 800931a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800931e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009322:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800933e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009342:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800934a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	f003 030f 	and.w	r3, r3, #15
 8009354:	2101      	movs	r1, #1
 8009356:	fa01 f303 	lsl.w	r3, r1, r3
 800935a:	041b      	lsls	r3, r3, #16
 800935c:	43db      	mvns	r3, r3
 800935e:	68f9      	ldr	r1, [r7, #12]
 8009360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009364:	4013      	ands	r3, r2
 8009366:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936e:	69da      	ldr	r2, [r3, #28]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	f003 030f 	and.w	r3, r3, #15
 8009378:	2101      	movs	r1, #1
 800937a:	fa01 f303 	lsl.w	r3, r1, r3
 800937e:	041b      	lsls	r3, r3, #16
 8009380:	43db      	mvns	r3, r3
 8009382:	68f9      	ldr	r1, [r7, #12]
 8009384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009388:	4013      	ands	r3, r2
 800938a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	0159      	lsls	r1, r3, #5
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	440b      	add	r3, r1
 80093a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a6:	4619      	mov	r1, r3
 80093a8:	4b05      	ldr	r3, [pc, #20]	; (80093c0 <USB_DeactivateEndpoint+0x1b4>)
 80093aa:	4013      	ands	r3, r2
 80093ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	ec337800 	.word	0xec337800
 80093c0:	eff37800 	.word	0xeff37800

080093c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08a      	sub	sp, #40	; 0x28
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	4613      	mov	r3, r2
 80093d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	785b      	ldrb	r3, [r3, #1]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	f040 815c 	bne.w	800969e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d132      	bne.n	8009454 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	0151      	lsls	r1, r2, #5
 8009400:	69fa      	ldr	r2, [r7, #28]
 8009402:	440a      	add	r2, r1
 8009404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009408:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800940c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009410:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	0151      	lsls	r1, r2, #5
 8009424:	69fa      	ldr	r2, [r7, #28]
 8009426:	440a      	add	r2, r1
 8009428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800942c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	0151      	lsls	r1, r2, #5
 8009444:	69fa      	ldr	r2, [r7, #28]
 8009446:	440a      	add	r2, r1
 8009448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800944c:	0cdb      	lsrs	r3, r3, #19
 800944e:	04db      	lsls	r3, r3, #19
 8009450:	6113      	str	r3, [r2, #16]
 8009452:	e074      	b.n	800953e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	4413      	add	r3, r2
 800945c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	0151      	lsls	r1, r2, #5
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	440a      	add	r2, r1
 800946a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800946e:	0cdb      	lsrs	r3, r3, #19
 8009470:	04db      	lsls	r3, r3, #19
 8009472:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	0151      	lsls	r1, r2, #5
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	440a      	add	r2, r1
 800948a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800948e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009492:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009496:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	015a      	lsls	r2, r3, #5
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	4413      	add	r3, r2
 80094a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	6999      	ldr	r1, [r3, #24]
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	440b      	add	r3, r1
 80094b0:	1e59      	subs	r1, r3, #1
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80094ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094bc:	4b9d      	ldr	r3, [pc, #628]	; (8009734 <USB_EPStartXfer+0x370>)
 80094be:	400b      	ands	r3, r1
 80094c0:	69b9      	ldr	r1, [r7, #24]
 80094c2:	0148      	lsls	r0, r1, #5
 80094c4:	69f9      	ldr	r1, [r7, #28]
 80094c6:	4401      	add	r1, r0
 80094c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094cc:	4313      	orrs	r3, r2
 80094ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094dc:	691a      	ldr	r2, [r3, #16]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094e6:	69b9      	ldr	r1, [r7, #24]
 80094e8:	0148      	lsls	r0, r1, #5
 80094ea:	69f9      	ldr	r1, [r7, #28]
 80094ec:	4401      	add	r1, r0
 80094ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094f2:	4313      	orrs	r3, r2
 80094f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	791b      	ldrb	r3, [r3, #4]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d11f      	bne.n	800953e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	4413      	add	r3, r2
 8009506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	69ba      	ldr	r2, [r7, #24]
 800950e:	0151      	lsls	r1, r2, #5
 8009510:	69fa      	ldr	r2, [r7, #28]
 8009512:	440a      	add	r2, r1
 8009514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009518:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800951c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	4413      	add	r3, r2
 8009526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	0151      	lsls	r1, r2, #5
 8009530:	69fa      	ldr	r2, [r7, #28]
 8009532:	440a      	add	r2, r1
 8009534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009538:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800953c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d14b      	bne.n	80095dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d009      	beq.n	8009560 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	4413      	add	r3, r2
 8009554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009558:	461a      	mov	r2, r3
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	791b      	ldrb	r3, [r3, #4]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d128      	bne.n	80095ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009574:	2b00      	cmp	r3, #0
 8009576:	d110      	bne.n	800959a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69ba      	ldr	r2, [r7, #24]
 8009588:	0151      	lsls	r1, r2, #5
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	440a      	add	r2, r1
 800958e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009592:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	e00f      	b.n	80095ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	0151      	lsls	r1, r2, #5
 80095ac:	69fa      	ldr	r2, [r7, #28]
 80095ae:	440a      	add	r2, r1
 80095b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	015a      	lsls	r2, r3, #5
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	0151      	lsls	r1, r2, #5
 80095cc:	69fa      	ldr	r2, [r7, #28]
 80095ce:	440a      	add	r2, r1
 80095d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	e133      	b.n	8009844 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	015a      	lsls	r2, r3, #5
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	4413      	add	r3, r2
 80095e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	69ba      	ldr	r2, [r7, #24]
 80095ec:	0151      	lsls	r1, r2, #5
 80095ee:	69fa      	ldr	r2, [r7, #28]
 80095f0:	440a      	add	r2, r1
 80095f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	791b      	ldrb	r3, [r3, #4]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d015      	beq.n	8009630 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 811b 	beq.w	8009844 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	f003 030f 	and.w	r3, r3, #15
 800961e:	2101      	movs	r1, #1
 8009620:	fa01 f303 	lsl.w	r3, r1, r3
 8009624:	69f9      	ldr	r1, [r7, #28]
 8009626:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800962a:	4313      	orrs	r3, r2
 800962c:	634b      	str	r3, [r1, #52]	; 0x34
 800962e:	e109      	b.n	8009844 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800963c:	2b00      	cmp	r3, #0
 800963e:	d110      	bne.n	8009662 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	0151      	lsls	r1, r2, #5
 8009652:	69fa      	ldr	r2, [r7, #28]
 8009654:	440a      	add	r2, r1
 8009656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800965a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	e00f      	b.n	8009682 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	4413      	add	r3, r2
 800966a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	69ba      	ldr	r2, [r7, #24]
 8009672:	0151      	lsls	r1, r2, #5
 8009674:	69fa      	ldr	r2, [r7, #28]
 8009676:	440a      	add	r2, r1
 8009678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800967c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009680:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	6919      	ldr	r1, [r3, #16]
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	781a      	ldrb	r2, [r3, #0]
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	b298      	uxth	r0, r3
 8009690:	79fb      	ldrb	r3, [r7, #7]
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	4603      	mov	r3, r0
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 fade 	bl	8009c58 <USB_WritePacket>
 800969c:	e0d2      	b.n	8009844 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	015a      	lsls	r2, r3, #5
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	69ba      	ldr	r2, [r7, #24]
 80096ae:	0151      	lsls	r1, r2, #5
 80096b0:	69fa      	ldr	r2, [r7, #28]
 80096b2:	440a      	add	r2, r1
 80096b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096b8:	0cdb      	lsrs	r3, r3, #19
 80096ba:	04db      	lsls	r3, r3, #19
 80096bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	69ba      	ldr	r2, [r7, #24]
 80096ce:	0151      	lsls	r1, r2, #5
 80096d0:	69fa      	ldr	r2, [r7, #28]
 80096d2:	440a      	add	r2, r1
 80096d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d126      	bne.n	8009738 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f6:	691a      	ldr	r2, [r3, #16]
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009700:	69b9      	ldr	r1, [r7, #24]
 8009702:	0148      	lsls	r0, r1, #5
 8009704:	69f9      	ldr	r1, [r7, #28]
 8009706:	4401      	add	r1, r0
 8009708:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800970c:	4313      	orrs	r3, r2
 800970e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	69ba      	ldr	r2, [r7, #24]
 8009720:	0151      	lsls	r1, r2, #5
 8009722:	69fa      	ldr	r2, [r7, #28]
 8009724:	440a      	add	r2, r1
 8009726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800972a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800972e:	6113      	str	r3, [r2, #16]
 8009730:	e03a      	b.n	80097a8 <USB_EPStartXfer+0x3e4>
 8009732:	bf00      	nop
 8009734:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	699a      	ldr	r2, [r3, #24]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	4413      	add	r3, r2
 8009742:	1e5a      	subs	r2, r3, #1
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	fbb2 f3f3 	udiv	r3, r2, r3
 800974c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	8afa      	ldrh	r2, [r7, #22]
 8009754:	fb03 f202 	mul.w	r2, r3, r2
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009768:	691a      	ldr	r2, [r3, #16]
 800976a:	8afb      	ldrh	r3, [r7, #22]
 800976c:	04d9      	lsls	r1, r3, #19
 800976e:	4b38      	ldr	r3, [pc, #224]	; (8009850 <USB_EPStartXfer+0x48c>)
 8009770:	400b      	ands	r3, r1
 8009772:	69b9      	ldr	r1, [r7, #24]
 8009774:	0148      	lsls	r0, r1, #5
 8009776:	69f9      	ldr	r1, [r7, #28]
 8009778:	4401      	add	r1, r0
 800977a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800977e:	4313      	orrs	r3, r2
 8009780:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978e:	691a      	ldr	r2, [r3, #16]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	69db      	ldr	r3, [r3, #28]
 8009794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009798:	69b9      	ldr	r1, [r7, #24]
 800979a:	0148      	lsls	r0, r1, #5
 800979c:	69f9      	ldr	r1, [r7, #28]
 800979e:	4401      	add	r1, r0
 80097a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097a4:	4313      	orrs	r3, r2
 80097a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80097a8:	79fb      	ldrb	r3, [r7, #7]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d10d      	bne.n	80097ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d009      	beq.n	80097ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	6919      	ldr	r1, [r3, #16]
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c6:	460a      	mov	r2, r1
 80097c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	791b      	ldrb	r3, [r3, #4]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d128      	bne.n	8009824 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d110      	bne.n	8009804 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	015a      	lsls	r2, r3, #5
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	69ba      	ldr	r2, [r7, #24]
 80097f2:	0151      	lsls	r1, r2, #5
 80097f4:	69fa      	ldr	r2, [r7, #28]
 80097f6:	440a      	add	r2, r1
 80097f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	e00f      	b.n	8009824 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	015a      	lsls	r2, r3, #5
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	4413      	add	r3, r2
 800980c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	69ba      	ldr	r2, [r7, #24]
 8009814:	0151      	lsls	r1, r2, #5
 8009816:	69fa      	ldr	r2, [r7, #28]
 8009818:	440a      	add	r2, r1
 800981a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800981e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009822:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	4413      	add	r3, r2
 800982c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	0151      	lsls	r1, r2, #5
 8009836:	69fa      	ldr	r2, [r7, #28]
 8009838:	440a      	add	r2, r1
 800983a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800983e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009842:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3720      	adds	r7, #32
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	1ff80000 	.word	0x1ff80000

08009854 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009854:	b480      	push	{r7}
 8009856:	b087      	sub	sp, #28
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	4613      	mov	r3, r2
 8009860:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	785b      	ldrb	r3, [r3, #1]
 8009870:	2b01      	cmp	r3, #1
 8009872:	f040 80ce 	bne.w	8009a12 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d132      	bne.n	80098e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	4413      	add	r3, r2
 8009886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	0151      	lsls	r1, r2, #5
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	440a      	add	r2, r1
 8009894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009898:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800989c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	0151      	lsls	r1, r2, #5
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	440a      	add	r2, r1
 80098b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	0151      	lsls	r1, r2, #5
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	440a      	add	r2, r1
 80098d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098dc:	0cdb      	lsrs	r3, r3, #19
 80098de:	04db      	lsls	r3, r3, #19
 80098e0:	6113      	str	r3, [r2, #16]
 80098e2:	e04e      	b.n	8009982 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	015a      	lsls	r2, r3, #5
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	4413      	add	r3, r2
 80098ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	0151      	lsls	r1, r2, #5
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	440a      	add	r2, r1
 80098fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098fe:	0cdb      	lsrs	r3, r3, #19
 8009900:	04db      	lsls	r3, r3, #19
 8009902:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	4413      	add	r3, r2
 800990c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	0151      	lsls	r1, r2, #5
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	440a      	add	r2, r1
 800991a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800991e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009922:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009926:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	699a      	ldr	r2, [r3, #24]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	429a      	cmp	r2, r3
 8009932:	d903      	bls.n	800993c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	68da      	ldr	r2, [r3, #12]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	4413      	add	r3, r2
 8009944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	0151      	lsls	r1, r2, #5
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	440a      	add	r2, r1
 8009952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800995a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009968:	691a      	ldr	r2, [r3, #16]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009972:	6939      	ldr	r1, [r7, #16]
 8009974:	0148      	lsls	r0, r1, #5
 8009976:	6979      	ldr	r1, [r7, #20]
 8009978:	4401      	add	r1, r0
 800997a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800997e:	4313      	orrs	r3, r2
 8009980:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009982:	79fb      	ldrb	r3, [r7, #7]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d11e      	bne.n	80099c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d009      	beq.n	80099a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999c:	461a      	mov	r2, r3
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	0151      	lsls	r1, r2, #5
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	440a      	add	r2, r1
 80099ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	e097      	b.n	8009af6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	015a      	lsls	r2, r3, #5
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	4413      	add	r3, r2
 80099ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	0151      	lsls	r1, r2, #5
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	440a      	add	r2, r1
 80099dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 8083 	beq.w	8009af6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	f003 030f 	and.w	r3, r3, #15
 8009a00:	2101      	movs	r1, #1
 8009a02:	fa01 f303 	lsl.w	r3, r1, r3
 8009a06:	6979      	ldr	r1, [r7, #20]
 8009a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	634b      	str	r3, [r1, #52]	; 0x34
 8009a10:	e071      	b.n	8009af6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	015a      	lsls	r2, r3, #5
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	0151      	lsls	r1, r2, #5
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	440a      	add	r2, r1
 8009a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a2c:	0cdb      	lsrs	r3, r3, #19
 8009a2e:	04db      	lsls	r3, r3, #19
 8009a30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	015a      	lsls	r2, r3, #5
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	4413      	add	r3, r2
 8009a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	0151      	lsls	r1, r2, #5
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	440a      	add	r2, r1
 8009a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	68da      	ldr	r2, [r3, #12]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	0151      	lsls	r1, r2, #5
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	440a      	add	r2, r1
 8009a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9a:	691a      	ldr	r2, [r3, #16]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009aa4:	6939      	ldr	r1, [r7, #16]
 8009aa6:	0148      	lsls	r0, r1, #5
 8009aa8:	6979      	ldr	r1, [r7, #20]
 8009aaa:	4401      	add	r1, r0
 8009aac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d10d      	bne.n	8009ad6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d009      	beq.n	8009ad6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	6919      	ldr	r1, [r3, #16]
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad2:	460a      	mov	r2, r1
 8009ad4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	015a      	lsls	r2, r3, #5
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	4413      	add	r3, r2
 8009ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	0151      	lsls	r1, r2, #5
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	440a      	add	r2, r1
 8009aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009af0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009af4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	371c      	adds	r7, #28
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b087      	sub	sp, #28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	785b      	ldrb	r3, [r3, #1]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d14a      	bne.n	8009bb8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	015a      	lsls	r2, r3, #5
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b3a:	f040 8086 	bne.w	8009c4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	015a      	lsls	r2, r3, #5
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	7812      	ldrb	r2, [r2, #0]
 8009b52:	0151      	lsls	r1, r2, #5
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	440a      	add	r2, r1
 8009b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b60:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	015a      	lsls	r2, r3, #5
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	7812      	ldrb	r2, [r2, #0]
 8009b76:	0151      	lsls	r1, r2, #5
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	440a      	add	r2, r1
 8009b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d902      	bls.n	8009b9c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	75fb      	strb	r3, [r7, #23]
          break;
 8009b9a:	e056      	b.n	8009c4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	015a      	lsls	r2, r3, #5
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bb4:	d0e7      	beq.n	8009b86 <USB_EPStopXfer+0x82>
 8009bb6:	e048      	b.n	8009c4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	015a      	lsls	r2, r3, #5
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bd0:	d13b      	bne.n	8009c4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	7812      	ldrb	r2, [r2, #0]
 8009be6:	0151      	lsls	r1, r2, #5
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	440a      	add	r2, r1
 8009bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009bf4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	015a      	lsls	r2, r3, #5
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	7812      	ldrb	r2, [r2, #0]
 8009c0a:	0151      	lsls	r1, r2, #5
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	440a      	add	r2, r1
 8009c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d902      	bls.n	8009c30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	75fb      	strb	r3, [r7, #23]
          break;
 8009c2e:	e00c      	b.n	8009c4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	015a      	lsls	r2, r3, #5
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c48:	d0e7      	beq.n	8009c1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	371c      	adds	r7, #28
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b089      	sub	sp, #36	; 0x24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	4611      	mov	r1, r2
 8009c64:	461a      	mov	r2, r3
 8009c66:	460b      	mov	r3, r1
 8009c68:	71fb      	strb	r3, [r7, #7]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009c76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d123      	bne.n	8009cc6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009c7e:	88bb      	ldrh	r3, [r7, #4]
 8009c80:	3303      	adds	r3, #3
 8009c82:	089b      	lsrs	r3, r3, #2
 8009c84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009c86:	2300      	movs	r3, #0
 8009c88:	61bb      	str	r3, [r7, #24]
 8009c8a:	e018      	b.n	8009cbe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009c8c:	79fb      	ldrb	r3, [r7, #7]
 8009c8e:	031a      	lsls	r2, r3, #12
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c98:	461a      	mov	r2, r3
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	61bb      	str	r3, [r7, #24]
 8009cbe:	69ba      	ldr	r2, [r7, #24]
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d3e2      	bcc.n	8009c8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3724      	adds	r7, #36	; 0x24
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b08b      	sub	sp, #44	; 0x2c
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009cea:	88fb      	ldrh	r3, [r7, #6]
 8009cec:	089b      	lsrs	r3, r3, #2
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009cf2:	88fb      	ldrh	r3, [r7, #6]
 8009cf4:	f003 0303 	and.w	r3, r3, #3
 8009cf8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	623b      	str	r3, [r7, #32]
 8009cfe:	e014      	b.n	8009d2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	3301      	adds	r3, #1
 8009d10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d14:	3301      	adds	r3, #1
 8009d16:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	3301      	adds	r3, #1
 8009d22:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009d24:	6a3b      	ldr	r3, [r7, #32]
 8009d26:	3301      	adds	r3, #1
 8009d28:	623b      	str	r3, [r7, #32]
 8009d2a:	6a3a      	ldr	r2, [r7, #32]
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d3e6      	bcc.n	8009d00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d32:	8bfb      	ldrh	r3, [r7, #30]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d01e      	beq.n	8009d76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d42:	461a      	mov	r2, r3
 8009d44:	f107 0310 	add.w	r3, r7, #16
 8009d48:	6812      	ldr	r2, [r2, #0]
 8009d4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	00db      	lsls	r3, r3, #3
 8009d54:	fa22 f303 	lsr.w	r3, r2, r3
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	701a      	strb	r2, [r3, #0]
      i++;
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	3301      	adds	r3, #1
 8009d62:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	3301      	adds	r3, #1
 8009d68:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009d6a:	8bfb      	ldrh	r3, [r7, #30]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009d70:	8bfb      	ldrh	r3, [r7, #30]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1ea      	bne.n	8009d4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	372c      	adds	r7, #44	; 0x2c
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	785b      	ldrb	r3, [r3, #1]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d12c      	bne.n	8009dfa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	015a      	lsls	r2, r3, #5
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4413      	add	r3, r2
 8009da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	db12      	blt.n	8009dd8 <USB_EPSetStall+0x54>
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00f      	beq.n	8009dd8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	0151      	lsls	r1, r2, #5
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	440a      	add	r2, r1
 8009dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009dd6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	015a      	lsls	r2, r3, #5
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	0151      	lsls	r1, r2, #5
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	440a      	add	r2, r1
 8009dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009df2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009df6:	6013      	str	r3, [r2, #0]
 8009df8:	e02b      	b.n	8009e52 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	db12      	blt.n	8009e32 <USB_EPSetStall+0xae>
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00f      	beq.n	8009e32 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	0151      	lsls	r1, r2, #5
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	440a      	add	r2, r1
 8009e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e30:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	015a      	lsls	r2, r3, #5
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	4413      	add	r3, r2
 8009e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	0151      	lsls	r1, r2, #5
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	440a      	add	r2, r1
 8009e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	785b      	ldrb	r3, [r3, #1]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d128      	bne.n	8009ece <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	0151      	lsls	r1, r2, #5
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	440a      	add	r2, r1
 8009e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	791b      	ldrb	r3, [r3, #4]
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d003      	beq.n	8009eac <USB_EPClearStall+0x4c>
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	791b      	ldrb	r3, [r3, #4]
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d138      	bne.n	8009f1e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	015a      	lsls	r2, r3, #5
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	0151      	lsls	r1, r2, #5
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	440a      	add	r2, r1
 8009ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eca:	6013      	str	r3, [r2, #0]
 8009ecc:	e027      	b.n	8009f1e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	015a      	lsls	r2, r3, #5
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	0151      	lsls	r1, r2, #5
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	440a      	add	r2, r1
 8009ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ee8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009eec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	791b      	ldrb	r3, [r3, #4]
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d003      	beq.n	8009efe <USB_EPClearStall+0x9e>
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	791b      	ldrb	r3, [r3, #4]
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d10f      	bne.n	8009f1e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	0151      	lsls	r1, r2, #5
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	440a      	add	r2, r1
 8009f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f1c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009f4e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	78fb      	ldrb	r3, [r7, #3]
 8009f5a:	011b      	lsls	r3, r3, #4
 8009f5c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009f60:	68f9      	ldr	r1, [r7, #12]
 8009f62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f66:	4313      	orrs	r3, r2
 8009f68:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3714      	adds	r7, #20
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f92:	f023 0303 	bic.w	r3, r3, #3
 8009f96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fa6:	f023 0302 	bic.w	r3, r3, #2
 8009faa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3714      	adds	r7, #20
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b085      	sub	sp, #20
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fd4:	f023 0303 	bic.w	r3, r3, #3
 8009fd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fe8:	f043 0302 	orr.w	r3, r3, #2
 8009fec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	695b      	ldr	r3, [r3, #20]
 800a008:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	4013      	ands	r3, r2
 800a012:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a014:	68fb      	ldr	r3, [r7, #12]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a022:	b480      	push	{r7}
 800a024:	b085      	sub	sp, #20
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	68ba      	ldr	r2, [r7, #8]
 800a042:	4013      	ands	r3, r2
 800a044:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	0c1b      	lsrs	r3, r3, #16
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a056:	b480      	push	{r7}
 800a058:	b085      	sub	sp, #20
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	4013      	ands	r3, r2
 800a078:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	b29b      	uxth	r3, r3
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b085      	sub	sp, #20
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	460b      	mov	r3, r1
 800a094:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a09a:	78fb      	ldrb	r3, [r7, #3]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0b8:	68bb      	ldr	r3, [r7, #8]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0c6:	b480      	push	{r7}
 800a0c8:	b087      	sub	sp, #28
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a0ea:	78fb      	ldrb	r3, [r7, #3]
 800a0ec:	f003 030f 	and.w	r3, r3, #15
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f6:	01db      	lsls	r3, r3, #7
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a100:	78fb      	ldrb	r3, [r7, #3]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	4413      	add	r3, r2
 800a108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	4013      	ands	r3, r2
 800a112:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a114:	68bb      	ldr	r3, [r7, #8]
}
 800a116:	4618      	mov	r0, r3
 800a118:	371c      	adds	r7, #28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	f003 0301 	and.w	r3, r3, #1
}
 800a132:	4618      	mov	r0, r3
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a13e:	b480      	push	{r7}
 800a140:	b085      	sub	sp, #20
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a158:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a15c:	f023 0307 	bic.w	r3, r3, #7
 800a160:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a174:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	460b      	mov	r3, r1
 800a18e:	607a      	str	r2, [r7, #4]
 800a190:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	333c      	adds	r3, #60	; 0x3c
 800a19a:	3304      	adds	r3, #4
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	4a26      	ldr	r2, [pc, #152]	; (800a23c <USB_EP0_OutStart+0xb8>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d90a      	bls.n	800a1be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1b8:	d101      	bne.n	800a1be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	e037      	b.n	800a22e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	697a      	ldr	r2, [r7, #20]
 800a1d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1ec:	f043 0318 	orr.w	r3, r3, #24
 800a1f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a200:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a204:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a206:	7afb      	ldrb	r3, [r7, #11]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d10f      	bne.n	800a22c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a212:	461a      	mov	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	697a      	ldr	r2, [r7, #20]
 800a222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a226:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a22a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	371c      	adds	r7, #28
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	4f54300a 	.word	0x4f54300a

0800a240 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a248:	2300      	movs	r3, #0
 800a24a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3301      	adds	r3, #1
 800a250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	4a13      	ldr	r2, [pc, #76]	; (800a2a4 <USB_CoreReset+0x64>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d901      	bls.n	800a25e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e01b      	b.n	800a296 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	daf2      	bge.n	800a24c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	f043 0201 	orr.w	r2, r3, #1
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	3301      	adds	r3, #1
 800a27a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	4a09      	ldr	r2, [pc, #36]	; (800a2a4 <USB_CoreReset+0x64>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d901      	bls.n	800a288 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e006      	b.n	800a296 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	f003 0301 	and.w	r3, r3, #1
 800a290:	2b01      	cmp	r3, #1
 800a292:	d0f0      	beq.n	800a276 <USB_CoreReset+0x36>

  return HAL_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	00030d40 	.word	0x00030d40

0800a2a8 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency an desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 800a2b0:	4a18      	ldr	r2, [pc, #96]	; (800a314 <si5351_Init+0x6c>)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 800a2b6:	21ff      	movs	r1, #255	; 0xff
 800a2b8:	2003      	movs	r0, #3
 800a2ba:	f000 fa0d 	bl	800a6d8 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 800a2be:	2180      	movs	r1, #128	; 0x80
 800a2c0:	2010      	movs	r0, #16
 800a2c2:	f000 fa09 	bl	800a6d8 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 800a2c6:	2180      	movs	r1, #128	; 0x80
 800a2c8:	2011      	movs	r0, #17
 800a2ca:	f000 fa05 	bl	800a6d8 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 800a2ce:	2180      	movs	r1, #128	; 0x80
 800a2d0:	2012      	movs	r0, #18
 800a2d2:	f000 fa01 	bl	800a6d8 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 800a2d6:	2180      	movs	r1, #128	; 0x80
 800a2d8:	2013      	movs	r0, #19
 800a2da:	f000 f9fd 	bl	800a6d8 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 800a2de:	2180      	movs	r1, #128	; 0x80
 800a2e0:	2014      	movs	r0, #20
 800a2e2:	f000 f9f9 	bl	800a6d8 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 800a2e6:	2180      	movs	r1, #128	; 0x80
 800a2e8:	2015      	movs	r0, #21
 800a2ea:	f000 f9f5 	bl	800a6d8 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 800a2ee:	2180      	movs	r1, #128	; 0x80
 800a2f0:	2016      	movs	r0, #22
 800a2f2:	f000 f9f1 	bl	800a6d8 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 800a2f6:	2180      	movs	r1, #128	; 0x80
 800a2f8:	2017      	movs	r0, #23
 800a2fa:	f000 f9ed 	bl	800a6d8 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 800a2fe:	23c0      	movs	r3, #192	; 0xc0
 800a300:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	4619      	mov	r1, r3
 800a306:	20b7      	movs	r0, #183	; 0xb7
 800a308:	f000 f9e6 	bl	800a6d8 <si5351_write>
}
 800a30c:	bf00      	nop
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	200004bc 	.word	0x200004bc

0800a318 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08c      	sub	sp, #48	; 0x30
 800a31c:	af02      	add	r7, sp, #8
 800a31e:	4603      	mov	r3, r0
 800a320:	6039      	str	r1, [r7, #0]
 800a322:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t num = conf->num;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	01da      	lsls	r2, r3, #7
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	01d9      	lsls	r1, r3, #7
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	fb91 f3f3 	sdiv	r3, r1, r3
 800a344:	4413      	add	r3, r2
 800a346:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a34a:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	01db      	lsls	r3, r3, #7
 800a350:	69fa      	ldr	r2, [r7, #28]
 800a352:	fb93 f2f2 	sdiv	r2, r3, r2
 800a356:	69f9      	ldr	r1, [r7, #28]
 800a358:	fb01 f202 	mul.w	r2, r1, r2
 800a35c:	1a9b      	subs	r3, r3, r2
 800a35e:	617b      	str	r3, [r7, #20]
    P3 = denom;
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 800a364:	79fb      	ldrb	r3, [r7, #7]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <si5351_SetupPLL+0x56>
 800a36a:	231a      	movs	r3, #26
 800a36c:	e000      	b.n	800a370 <si5351_SetupPLL+0x58>
 800a36e:	2322      	movs	r3, #34	; 0x22
 800a370:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 800a372:	7bf8      	ldrb	r0, [r7, #15]
 800a374:	2300      	movs	r3, #0
 800a376:	9301      	str	r3, [sp, #4]
 800a378:	2300      	movs	r3, #0
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	697a      	ldr	r2, [r7, #20]
 800a380:	69b9      	ldr	r1, [r7, #24]
 800a382:	f000 f9d1 	bl	800a728 <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 800a386:	21a0      	movs	r1, #160	; 0xa0
 800a388:	20b1      	movs	r0, #177	; 0xb1
 800a38a:	f000 f9a5 	bl	800a6d8 <si5351_write>
}
 800a38e:	bf00      	nop
 800a390:	3728      	adds	r7, #40	; 0x28
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 800a396:	b580      	push	{r7, lr}
 800a398:	b08c      	sub	sp, #48	; 0x30
 800a39a:	af02      	add	r7, sp, #8
 800a39c:	603b      	str	r3, [r7, #0]
 800a39e:	4603      	mov	r3, r0
 800a3a0:	71fb      	strb	r3, [r7, #7]
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	71bb      	strb	r3, [r7, #6]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 800a3c2:	79fb      	ldrb	r3, [r7, #7]
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d901      	bls.n	800a3cc <si5351_SetupOutput+0x36>
        return 1;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e08d      	b.n	800a4e8 <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10a      	bne.n	800a3ea <si5351_SetupOutput+0x54>
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	2b07      	cmp	r3, #7
 800a3d8:	dd05      	ble.n	800a3e6 <si5351_SetupOutput+0x50>
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	2b08      	cmp	r3, #8
 800a3de:	d104      	bne.n	800a3ea <si5351_SetupOutput+0x54>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	e07e      	b.n	800a4e8 <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	2b04      	cmp	r3, #4
 800a3ee:	d109      	bne.n	800a404 <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	623b      	str	r3, [r7, #32]
        P2 = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a402:	e016      	b.n	800a432 <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	01da      	lsls	r2, r3, #7
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	01d9      	lsls	r1, r3, #7
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	fb91 f3f3 	sdiv	r3, r1, r3
 800a412:	4413      	add	r3, r2
 800a414:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a418:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	01db      	lsls	r3, r3, #7
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	fb93 f2f2 	sdiv	r2, r3, r2
 800a424:	68b9      	ldr	r1, [r7, #8]
 800a426:	fb01 f202 	mul.w	r2, r1, r2
 800a42a:	1a9b      	subs	r3, r3, r2
 800a42c:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 800a436:	2300      	movs	r3, #0
 800a438:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	757b      	strb	r3, [r7, #21]
    switch (output) {
 800a43e:	79fb      	ldrb	r3, [r7, #7]
 800a440:	2b02      	cmp	r3, #2
 800a442:	d014      	beq.n	800a46e <si5351_SetupOutput+0xd8>
 800a444:	2b02      	cmp	r3, #2
 800a446:	dc19      	bgt.n	800a47c <si5351_SetupOutput+0xe6>
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d002      	beq.n	800a452 <si5351_SetupOutput+0xbc>
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d007      	beq.n	800a460 <si5351_SetupOutput+0xca>
 800a450:	e014      	b.n	800a47c <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 800a452:	232a      	movs	r3, #42	; 0x2a
 800a454:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 800a456:	23a5      	movs	r3, #165	; 0xa5
 800a458:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 800a45a:	2310      	movs	r3, #16
 800a45c:	757b      	strb	r3, [r7, #21]
        break;
 800a45e:	e00d      	b.n	800a47c <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 800a460:	2332      	movs	r3, #50	; 0x32
 800a462:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 800a464:	23a6      	movs	r3, #166	; 0xa6
 800a466:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 800a468:	2311      	movs	r3, #17
 800a46a:	757b      	strb	r3, [r7, #21]
        break;
 800a46c:	e006      	b.n	800a47c <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 800a46e:	233a      	movs	r3, #58	; 0x3a
 800a470:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 800a472:	23a7      	movs	r3, #167	; 0xa7
 800a474:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 800a476:	2312      	movs	r3, #18
 800a478:	757b      	strb	r3, [r7, #21]
        break;
 800a47a:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 800a47c:	797b      	ldrb	r3, [r7, #5]
 800a47e:	f043 030c 	orr.w	r3, r3, #12
 800a482:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 800a484:	79bb      	ldrb	r3, [r7, #6]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d103      	bne.n	800a492 <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 800a48a:	7d3b      	ldrb	r3, [r7, #20]
 800a48c:	f043 0320 	orr.w	r3, r3, #32
 800a490:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d009      	beq.n	800a4ae <si5351_SetupOutput+0x118>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <si5351_SetupOutput+0x110>
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	2b04      	cmp	r3, #4
 800a4a4:	d103      	bne.n	800a4ae <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 800a4a6:	7d3b      	ldrb	r3, [r7, #20]
 800a4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ac:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 800a4ae:	7d3a      	ldrb	r2, [r7, #20]
 800a4b0:	7d7b      	ldrb	r3, [r7, #21]
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 f90f 	bl	800a6d8 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	7c1b      	ldrb	r3, [r3, #16]
 800a4be:	7df8      	ldrb	r0, [r7, #23]
 800a4c0:	9301      	str	r3, [sp, #4]
 800a4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	69fa      	ldr	r2, [r7, #28]
 800a4cc:	6a39      	ldr	r1, [r7, #32]
 800a4ce:	f000 f92b 	bl	800a728 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 800a4d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a4d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4da:	b2da      	uxtb	r2, r3
 800a4dc:	7dbb      	ldrb	r3, [r7, #22]
 800a4de:	4611      	mov	r1, r2
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 f8f9 	bl	800a6d8 <si5351_write>

    return 0;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3728      	adds	r7, #40	; 0x28
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 800a4f0:	b480      	push	{r7}
 800a4f2:	b08f      	sub	sp, #60	; 0x3c
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800a502:	da03      	bge.n	800a50c <si5351_Calc+0x1c>
 800a504:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800a508:	60fb      	str	r3, [r7, #12]
 800a50a:	e005      	b.n	800a518 <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4a4f      	ldr	r2, [pc, #316]	; (800a64c <si5351_Calc+0x15c>)
 800a510:	4293      	cmp	r3, r2
 800a512:	dd01      	ble.n	800a518 <si5351_Calc+0x28>
 800a514:	4b4d      	ldr	r3, [pc, #308]	; (800a64c <si5351_Calc+0x15c>)
 800a516:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4a4b      	ldr	r2, [pc, #300]	; (800a650 <si5351_Calc+0x160>)
 800a522:	4293      	cmp	r3, r2
 800a524:	dc06      	bgt.n	800a534 <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	019b      	lsls	r3, r3, #6
 800a52a:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2206      	movs	r2, #6
 800a530:	741a      	strb	r2, [r3, #16]
 800a532:	e002      	b.n	800a53a <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - ((Fclk/1000000)*si5351Correction)/100;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	4a45      	ldr	r2, [pc, #276]	; (800a654 <si5351_Calc+0x164>)
 800a53e:	fb82 1203 	smull	r1, r2, r2, r3
 800a542:	1492      	asrs	r2, r2, #18
 800a544:	17db      	asrs	r3, r3, #31
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	4a43      	ldr	r2, [pc, #268]	; (800a658 <si5351_Calc+0x168>)
 800a54a:	6812      	ldr	r2, [r2, #0]
 800a54c:	fb02 f303 	mul.w	r3, r2, r3
 800a550:	4a42      	ldr	r2, [pc, #264]	; (800a65c <si5351_Calc+0x16c>)
 800a552:	fb82 1203 	smull	r1, r2, r2, r3
 800a556:	1152      	asrs	r2, r2, #5
 800a558:	17db      	asrs	r3, r3, #31
 800a55a:	1a9b      	subs	r3, r3, r2
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	4413      	add	r3, r2
 800a560:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 800a562:	4b3f      	ldr	r3, [pc, #252]	; (800a660 <si5351_Calc+0x170>)
 800a564:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	4a3e      	ldr	r2, [pc, #248]	; (800a664 <si5351_Calc+0x174>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	dc22      	bgt.n	800a5b4 <si5351_Calc+0xc4>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 800a56e:	2324      	movs	r3, #36	; 0x24
 800a570:	637b      	str	r3, [r7, #52]	; 0x34
        b = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	633b      	str	r3, [r7, #48]	; 0x30
        c = 1;
 800a576:	2301      	movs	r3, #1
 800a578:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t Fpll = 900000000;
 800a57a:	4b3b      	ldr	r3, [pc, #236]	; (800a668 <si5351_Calc+0x178>)
 800a57c:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	fb92 f3f3 	sdiv	r3, r2, r3
 800a586:	62bb      	str	r3, [r7, #40]	; 0x28
        t = (Fclk >> 20) + 1;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	151b      	asrs	r3, r3, #20
 800a58c:	3301      	adds	r3, #1
 800a58e:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	fb93 f2f2 	sdiv	r2, r3, r2
 800a598:	68f9      	ldr	r1, [r7, #12]
 800a59a:	fb01 f202 	mul.w	r2, r1, r2
 800a59e:	1a9a      	subs	r2, r3, r2
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	fb92 f3f3 	sdiv	r3, r2, r3
 800a5a6:	627b      	str	r3, [r7, #36]	; 0x24
        z = Fclk / t;
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	fb92 f3f3 	sdiv	r3, r2, r3
 800a5b0:	623b      	str	r3, [r7, #32]
 800a5b2:	e032      	b.n	800a61a <si5351_Calc+0x12a>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	4a2d      	ldr	r2, [pc, #180]	; (800a66c <si5351_Calc+0x17c>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	dd02      	ble.n	800a5c2 <si5351_Calc+0xd2>
            x = 4;
 800a5bc:	2304      	movs	r3, #4
 800a5be:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5c0:	e008      	b.n	800a5d4 <si5351_Calc+0xe4>
        } else if (Fclk >= 100000000) {
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	4a2a      	ldr	r2, [pc, #168]	; (800a670 <si5351_Calc+0x180>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	dd02      	ble.n	800a5d0 <si5351_Calc+0xe0>
            x = 6;
 800a5ca:	2306      	movs	r3, #6
 800a5cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5ce:	e001      	b.n	800a5d4 <si5351_Calc+0xe4>
        } else {
            x = 8;
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        y = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	627b      	str	r3, [r7, #36]	; 0x24
        z = 1;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	623b      	str	r3, [r7, #32]
        
        int32_t numerator = x*Fclk;
 800a5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	fb02 f303 	mul.w	r3, r2, r3
 800a5e4:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 800a5e6:	69ba      	ldr	r2, [r7, #24]
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	fb92 f3f3 	sdiv	r3, r2, r3
 800a5ee:	637b      	str	r3, [r7, #52]	; 0x34
        t = (Fxtal >> 20) + 1;
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	151b      	asrs	r3, r3, #20
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	69fa      	ldr	r2, [r7, #28]
 800a5fc:	fb93 f2f2 	sdiv	r2, r3, r2
 800a600:	69f9      	ldr	r1, [r7, #28]
 800a602:	fb01 f202 	mul.w	r2, r1, r2
 800a606:	1a9a      	subs	r2, r3, r2
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	fb92 f3f3 	sdiv	r3, r2, r3
 800a60e:	633b      	str	r3, [r7, #48]	; 0x30
        c = Fxtal / t;
 800a610:	69fa      	ldr	r2, [r7, #28]
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	fb92 f3f3 	sdiv	r3, r2, r3
 800a618:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    pll_conf->mult = a;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a61e:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a624:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a62a:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a630:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a636:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a3a      	ldr	r2, [r7, #32]
 800a63c:	60da      	str	r2, [r3, #12]
}
 800a63e:	bf00      	nop
 800a640:	373c      	adds	r7, #60	; 0x3c
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	09896800 	.word	0x09896800
 800a650:	000f423f 	.word	0x000f423f
 800a654:	431bde83 	.word	0x431bde83
 800a658:	200004bc 	.word	0x200004bc
 800a65c:	51eb851f 	.word	0x51eb851f
 800a660:	017d7840 	.word	0x017d7840
 800a664:	04d3f63f 	.word	0x04d3f63f
 800a668:	35a4e900 	.word	0x35a4e900
 800a66c:	08f0d17f 	.word	0x08f0d17f
 800a670:	05f5e0ff 	.word	0x05f5e0ff

0800a674 <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 800a674:	b580      	push	{r7, lr}
 800a676:	b08c      	sub	sp, #48	; 0x30
 800a678:	af02      	add	r7, sp, #8
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 800a680:	f107 0208 	add.w	r2, r7, #8
 800a684:	f107 031c 	add.w	r3, r7, #28
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7ff ff30 	bl	800a4f0 <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 800a690:	f107 031c 	add.w	r3, r7, #28
 800a694:	4619      	mov	r1, r3
 800a696:	2000      	movs	r0, #0
 800a698:	f7ff fe3e 	bl	800a318 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 800a69c:	f107 0308 	add.w	r3, r7, #8
 800a6a0:	78fa      	ldrb	r2, [r7, #3]
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	9100      	str	r1, [sp, #0]
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	f7ff fe74 	bl	800a396 <si5351_SetupOutput>
}
 800a6ae:	bf00      	nop
 800a6b0:	3728      	adds	r7, #40	; 0x28
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	4603      	mov	r3, r0
 800a6be:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 800a6c0:	79fb      	ldrb	r3, [r7, #7]
 800a6c2:	43db      	mvns	r3, r3
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	2003      	movs	r0, #3
 800a6ca:	f000 f805 	bl	800a6d8 <si5351_write>
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
	...

0800a6d8 <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af04      	add	r7, sp, #16
 800a6de:	4603      	mov	r3, r0
 800a6e0:	460a      	mov	r2, r1
 800a6e2:	71fb      	strb	r3, [r7, #7]
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 800a6e8:	bf00      	nop
 800a6ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ee:	2203      	movs	r2, #3
 800a6f0:	21c0      	movs	r1, #192	; 0xc0
 800a6f2:	480c      	ldr	r0, [pc, #48]	; (800a724 <si5351_write+0x4c>)
 800a6f4:	f7f8 fc36 	bl	8002f64 <HAL_I2C_IsDeviceReady>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1f5      	bne.n	800a6ea <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 800a6fe:	79fb      	ldrb	r3, [r7, #7]
 800a700:	b29a      	uxth	r2, r3
 800a702:	f04f 33ff 	mov.w	r3, #4294967295
 800a706:	9302      	str	r3, [sp, #8]
 800a708:	2301      	movs	r3, #1
 800a70a:	9301      	str	r3, [sp, #4]
 800a70c:	1dbb      	adds	r3, r7, #6
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	2301      	movs	r3, #1
 800a712:	21c0      	movs	r1, #192	; 0xc0
 800a714:	4803      	ldr	r0, [pc, #12]	; (800a724 <si5351_write+0x4c>)
 800a716:	f7f8 fb1f 	bl	8002d58 <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 800a71a:	bf00      	nop
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	200002fc 	.word	0x200002fc

0800a728 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60b9      	str	r1, [r7, #8]
 800a730:	607a      	str	r2, [r7, #4]
 800a732:	603b      	str	r3, [r7, #0]
 800a734:	4603      	mov	r3, r0
 800a736:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	121b      	asrs	r3, r3, #8
 800a73c:	b2da      	uxtb	r2, r3
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
 800a740:	4611      	mov	r1, r2
 800a742:	4618      	mov	r0, r3
 800a744:	f7ff ffc8 	bl	800a6d8 <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 800a748:	7bfb      	ldrb	r3, [r7, #15]
 800a74a:	3301      	adds	r3, #1
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	683a      	ldr	r2, [r7, #0]
 800a750:	b2d2      	uxtb	r2, r2
 800a752:	4611      	mov	r1, r2
 800a754:	4618      	mov	r0, r3
 800a756:	f7ff ffbf 	bl	800a6d8 <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
 800a75c:	3302      	adds	r3, #2
 800a75e:	b2d8      	uxtb	r0, r3
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	141b      	asrs	r3, r3, #16
 800a764:	b25b      	sxtb	r3, r3
 800a766:	f003 0303 	and.w	r3, r3, #3
 800a76a:	b25a      	sxtb	r2, r3
 800a76c:	7e3b      	ldrb	r3, [r7, #24]
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	b25b      	sxtb	r3, r3
 800a772:	f003 030c 	and.w	r3, r3, #12
 800a776:	b25b      	sxtb	r3, r3
 800a778:	4313      	orrs	r3, r2
 800a77a:	b25a      	sxtb	r2, r3
 800a77c:	7f3b      	ldrb	r3, [r7, #28]
 800a77e:	011b      	lsls	r3, r3, #4
 800a780:	b25b      	sxtb	r3, r3
 800a782:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a786:	b25b      	sxtb	r3, r3
 800a788:	4313      	orrs	r3, r2
 800a78a:	b25b      	sxtb	r3, r3
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	4619      	mov	r1, r3
 800a790:	f7ff ffa2 	bl	800a6d8 <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 800a794:	7bfb      	ldrb	r3, [r7, #15]
 800a796:	3303      	adds	r3, #3
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	121b      	asrs	r3, r3, #8
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	f7ff ff98 	bl	800a6d8 <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	b2d2      	uxtb	r2, r2
 800a7b2:	4611      	mov	r1, r2
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff ff8f 	bl	800a6d8 <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 800a7ba:	7bfb      	ldrb	r3, [r7, #15]
 800a7bc:	3305      	adds	r3, #5
 800a7be:	b2d8      	uxtb	r0, r3
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	131b      	asrs	r3, r3, #12
 800a7c4:	b25b      	sxtb	r3, r3
 800a7c6:	f023 030f 	bic.w	r3, r3, #15
 800a7ca:	b25a      	sxtb	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	141b      	asrs	r3, r3, #16
 800a7d0:	b25b      	sxtb	r3, r3
 800a7d2:	f003 030f 	and.w	r3, r3, #15
 800a7d6:	b25b      	sxtb	r3, r3
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	b25b      	sxtb	r3, r3
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	4619      	mov	r1, r3
 800a7e0:	f7ff ff7a 	bl	800a6d8 <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 800a7e4:	7bfb      	ldrb	r3, [r7, #15]
 800a7e6:	3306      	adds	r3, #6
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	121b      	asrs	r3, r3, #8
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	f7ff ff70 	bl	800a6d8 <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
 800a7fa:	3307      	adds	r3, #7
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	b2d2      	uxtb	r2, r2
 800a802:	4611      	mov	r1, r2
 800a804:	4618      	mov	r0, r3
 800a806:	f7ff ff67 	bl	800a6d8 <si5351_write>
}
 800a80a:	bf00      	nop
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
	...

0800a814 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	460b      	mov	r3, r1
 800a81e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a820:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a824:	f005 fa86 	bl	800fd34 <USBD_static_malloc>
 800a828:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d109      	bne.n	800a844 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	32b0      	adds	r2, #176	; 0xb0
 800a83a:	2100      	movs	r1, #0
 800a83c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a840:	2302      	movs	r3, #2
 800a842:	e0d4      	b.n	800a9ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a844:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a848:	2100      	movs	r1, #0
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f005 fbf8 	bl	8010040 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	32b0      	adds	r2, #176	; 0xb0
 800a85a:	68f9      	ldr	r1, [r7, #12]
 800a85c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	32b0      	adds	r2, #176	; 0xb0
 800a86a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	7c1b      	ldrb	r3, [r3, #16]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d138      	bne.n	800a8ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a87c:	4b5e      	ldr	r3, [pc, #376]	; (800a9f8 <USBD_CDC_Init+0x1e4>)
 800a87e:	7819      	ldrb	r1, [r3, #0]
 800a880:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a884:	2202      	movs	r2, #2
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f005 f931 	bl	800faee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a88c:	4b5a      	ldr	r3, [pc, #360]	; (800a9f8 <USBD_CDC_Init+0x1e4>)
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	f003 020f 	and.w	r2, r3, #15
 800a894:	6879      	ldr	r1, [r7, #4]
 800a896:	4613      	mov	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	4413      	add	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	440b      	add	r3, r1
 800a8a0:	3324      	adds	r3, #36	; 0x24
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a8a6:	4b55      	ldr	r3, [pc, #340]	; (800a9fc <USBD_CDC_Init+0x1e8>)
 800a8a8:	7819      	ldrb	r1, [r3, #0]
 800a8aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f005 f91c 	bl	800faee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a8b6:	4b51      	ldr	r3, [pc, #324]	; (800a9fc <USBD_CDC_Init+0x1e8>)
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	f003 020f 	and.w	r2, r3, #15
 800a8be:	6879      	ldr	r1, [r7, #4]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	440b      	add	r3, r1
 800a8ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a8d2:	4b4b      	ldr	r3, [pc, #300]	; (800aa00 <USBD_CDC_Init+0x1ec>)
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	f003 020f 	and.w	r2, r3, #15
 800a8da:	6879      	ldr	r1, [r7, #4]
 800a8dc:	4613      	mov	r3, r2
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	440b      	add	r3, r1
 800a8e6:	3326      	adds	r3, #38	; 0x26
 800a8e8:	2210      	movs	r2, #16
 800a8ea:	801a      	strh	r2, [r3, #0]
 800a8ec:	e035      	b.n	800a95a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a8ee:	4b42      	ldr	r3, [pc, #264]	; (800a9f8 <USBD_CDC_Init+0x1e4>)
 800a8f0:	7819      	ldrb	r1, [r3, #0]
 800a8f2:	2340      	movs	r3, #64	; 0x40
 800a8f4:	2202      	movs	r2, #2
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f005 f8f9 	bl	800faee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a8fc:	4b3e      	ldr	r3, [pc, #248]	; (800a9f8 <USBD_CDC_Init+0x1e4>)
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	f003 020f 	and.w	r2, r3, #15
 800a904:	6879      	ldr	r1, [r7, #4]
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	440b      	add	r3, r1
 800a910:	3324      	adds	r3, #36	; 0x24
 800a912:	2201      	movs	r2, #1
 800a914:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a916:	4b39      	ldr	r3, [pc, #228]	; (800a9fc <USBD_CDC_Init+0x1e8>)
 800a918:	7819      	ldrb	r1, [r3, #0]
 800a91a:	2340      	movs	r3, #64	; 0x40
 800a91c:	2202      	movs	r2, #2
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f005 f8e5 	bl	800faee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a924:	4b35      	ldr	r3, [pc, #212]	; (800a9fc <USBD_CDC_Init+0x1e8>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	f003 020f 	and.w	r2, r3, #15
 800a92c:	6879      	ldr	r1, [r7, #4]
 800a92e:	4613      	mov	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	440b      	add	r3, r1
 800a938:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a93c:	2201      	movs	r2, #1
 800a93e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a940:	4b2f      	ldr	r3, [pc, #188]	; (800aa00 <USBD_CDC_Init+0x1ec>)
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	f003 020f 	and.w	r2, r3, #15
 800a948:	6879      	ldr	r1, [r7, #4]
 800a94a:	4613      	mov	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4413      	add	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	440b      	add	r3, r1
 800a954:	3326      	adds	r3, #38	; 0x26
 800a956:	2210      	movs	r2, #16
 800a958:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a95a:	4b29      	ldr	r3, [pc, #164]	; (800aa00 <USBD_CDC_Init+0x1ec>)
 800a95c:	7819      	ldrb	r1, [r3, #0]
 800a95e:	2308      	movs	r3, #8
 800a960:	2203      	movs	r2, #3
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f005 f8c3 	bl	800faee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a968:	4b25      	ldr	r3, [pc, #148]	; (800aa00 <USBD_CDC_Init+0x1ec>)
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	f003 020f 	and.w	r2, r3, #15
 800a970:	6879      	ldr	r1, [r7, #4]
 800a972:	4613      	mov	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4413      	add	r3, r2
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	440b      	add	r3, r1
 800a97c:	3324      	adds	r3, #36	; 0x24
 800a97e:	2201      	movs	r2, #1
 800a980:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	33b0      	adds	r3, #176	; 0xb0
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	e018      	b.n	800a9ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	7c1b      	ldrb	r3, [r3, #16]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10a      	bne.n	800a9da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9c4:	4b0d      	ldr	r3, [pc, #52]	; (800a9fc <USBD_CDC_Init+0x1e8>)
 800a9c6:	7819      	ldrb	r1, [r3, #0]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f005 f97a 	bl	800fccc <USBD_LL_PrepareReceive>
 800a9d8:	e008      	b.n	800a9ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9da:	4b08      	ldr	r3, [pc, #32]	; (800a9fc <USBD_CDC_Init+0x1e8>)
 800a9dc:	7819      	ldrb	r1, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9e4:	2340      	movs	r3, #64	; 0x40
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f005 f970 	bl	800fccc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	200001e3 	.word	0x200001e3
 800a9fc:	200001e4 	.word	0x200001e4
 800aa00:	200001e5 	.word	0x200001e5

0800aa04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aa10:	4b3a      	ldr	r3, [pc, #232]	; (800aafc <USBD_CDC_DeInit+0xf8>)
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f005 f88f 	bl	800fb3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aa1c:	4b37      	ldr	r3, [pc, #220]	; (800aafc <USBD_CDC_DeInit+0xf8>)
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	f003 020f 	and.w	r2, r3, #15
 800aa24:	6879      	ldr	r1, [r7, #4]
 800aa26:	4613      	mov	r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4413      	add	r3, r2
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	440b      	add	r3, r1
 800aa30:	3324      	adds	r3, #36	; 0x24
 800aa32:	2200      	movs	r2, #0
 800aa34:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aa36:	4b32      	ldr	r3, [pc, #200]	; (800ab00 <USBD_CDC_DeInit+0xfc>)
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f005 f87c 	bl	800fb3a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aa42:	4b2f      	ldr	r3, [pc, #188]	; (800ab00 <USBD_CDC_DeInit+0xfc>)
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	f003 020f 	and.w	r2, r3, #15
 800aa4a:	6879      	ldr	r1, [r7, #4]
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	4413      	add	r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	440b      	add	r3, r1
 800aa56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aa5e:	4b29      	ldr	r3, [pc, #164]	; (800ab04 <USBD_CDC_DeInit+0x100>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f005 f868 	bl	800fb3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aa6a:	4b26      	ldr	r3, [pc, #152]	; (800ab04 <USBD_CDC_DeInit+0x100>)
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	f003 020f 	and.w	r2, r3, #15
 800aa72:	6879      	ldr	r1, [r7, #4]
 800aa74:	4613      	mov	r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	4413      	add	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	440b      	add	r3, r1
 800aa7e:	3324      	adds	r3, #36	; 0x24
 800aa80:	2200      	movs	r2, #0
 800aa82:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aa84:	4b1f      	ldr	r3, [pc, #124]	; (800ab04 <USBD_CDC_DeInit+0x100>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	f003 020f 	and.w	r2, r3, #15
 800aa8c:	6879      	ldr	r1, [r7, #4]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4413      	add	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	440b      	add	r3, r1
 800aa98:	3326      	adds	r3, #38	; 0x26
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	32b0      	adds	r2, #176	; 0xb0
 800aaa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d01f      	beq.n	800aaf0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	33b0      	adds	r3, #176	; 0xb0
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	4413      	add	r3, r2
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	32b0      	adds	r2, #176	; 0xb0
 800aace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f005 f93c 	bl	800fd50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	32b0      	adds	r2, #176	; 0xb0
 800aae2:	2100      	movs	r1, #0
 800aae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	200001e3 	.word	0x200001e3
 800ab00:	200001e4 	.word	0x200001e4
 800ab04:	200001e5 	.word	0x200001e5

0800ab08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	32b0      	adds	r2, #176	; 0xb0
 800ab1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ab22:	2300      	movs	r3, #0
 800ab24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ab26:	2300      	movs	r3, #0
 800ab28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ab34:	2303      	movs	r3, #3
 800ab36:	e0bf      	b.n	800acb8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d050      	beq.n	800abe6 <USBD_CDC_Setup+0xde>
 800ab44:	2b20      	cmp	r3, #32
 800ab46:	f040 80af 	bne.w	800aca8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	88db      	ldrh	r3, [r3, #6]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d03a      	beq.n	800abc8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	b25b      	sxtb	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	da1b      	bge.n	800ab94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	33b0      	adds	r3, #176	; 0xb0
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ab72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab74:	683a      	ldr	r2, [r7, #0]
 800ab76:	88d2      	ldrh	r2, [r2, #6]
 800ab78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	88db      	ldrh	r3, [r3, #6]
 800ab7e:	2b07      	cmp	r3, #7
 800ab80:	bf28      	it	cs
 800ab82:	2307      	movcs	r3, #7
 800ab84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	89fa      	ldrh	r2, [r7, #14]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f001 fda5 	bl	800c6dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ab92:	e090      	b.n	800acb6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	785a      	ldrb	r2, [r3, #1]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	88db      	ldrh	r3, [r3, #6]
 800aba2:	2b3f      	cmp	r3, #63	; 0x3f
 800aba4:	d803      	bhi.n	800abae <USBD_CDC_Setup+0xa6>
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	88db      	ldrh	r3, [r3, #6]
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	e000      	b.n	800abb0 <USBD_CDC_Setup+0xa8>
 800abae:	2240      	movs	r2, #64	; 0x40
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800abb6:	6939      	ldr	r1, [r7, #16]
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800abbe:	461a      	mov	r2, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f001 fdb7 	bl	800c734 <USBD_CtlPrepareRx>
      break;
 800abc6:	e076      	b.n	800acb6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	33b0      	adds	r3, #176	; 0xb0
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	7850      	ldrb	r0, [r2, #1]
 800abde:	2200      	movs	r2, #0
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	4798      	blx	r3
      break;
 800abe4:	e067      	b.n	800acb6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	785b      	ldrb	r3, [r3, #1]
 800abea:	2b0b      	cmp	r3, #11
 800abec:	d851      	bhi.n	800ac92 <USBD_CDC_Setup+0x18a>
 800abee:	a201      	add	r2, pc, #4	; (adr r2, 800abf4 <USBD_CDC_Setup+0xec>)
 800abf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf4:	0800ac25 	.word	0x0800ac25
 800abf8:	0800aca1 	.word	0x0800aca1
 800abfc:	0800ac93 	.word	0x0800ac93
 800ac00:	0800ac93 	.word	0x0800ac93
 800ac04:	0800ac93 	.word	0x0800ac93
 800ac08:	0800ac93 	.word	0x0800ac93
 800ac0c:	0800ac93 	.word	0x0800ac93
 800ac10:	0800ac93 	.word	0x0800ac93
 800ac14:	0800ac93 	.word	0x0800ac93
 800ac18:	0800ac93 	.word	0x0800ac93
 800ac1c:	0800ac4f 	.word	0x0800ac4f
 800ac20:	0800ac79 	.word	0x0800ac79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	2b03      	cmp	r3, #3
 800ac2e:	d107      	bne.n	800ac40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ac30:	f107 030a 	add.w	r3, r7, #10
 800ac34:	2202      	movs	r2, #2
 800ac36:	4619      	mov	r1, r3
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f001 fd4f 	bl	800c6dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac3e:	e032      	b.n	800aca6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f001 fcd9 	bl	800c5fa <USBD_CtlError>
            ret = USBD_FAIL;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	75fb      	strb	r3, [r7, #23]
          break;
 800ac4c:	e02b      	b.n	800aca6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	d107      	bne.n	800ac6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ac5a:	f107 030d 	add.w	r3, r7, #13
 800ac5e:	2201      	movs	r2, #1
 800ac60:	4619      	mov	r1, r3
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f001 fd3a 	bl	800c6dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac68:	e01d      	b.n	800aca6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac6a:	6839      	ldr	r1, [r7, #0]
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f001 fcc4 	bl	800c5fa <USBD_CtlError>
            ret = USBD_FAIL;
 800ac72:	2303      	movs	r3, #3
 800ac74:	75fb      	strb	r3, [r7, #23]
          break;
 800ac76:	e016      	b.n	800aca6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b03      	cmp	r3, #3
 800ac82:	d00f      	beq.n	800aca4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ac84:	6839      	ldr	r1, [r7, #0]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f001 fcb7 	bl	800c5fa <USBD_CtlError>
            ret = USBD_FAIL;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ac90:	e008      	b.n	800aca4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f001 fcb0 	bl	800c5fa <USBD_CtlError>
          ret = USBD_FAIL;
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	75fb      	strb	r3, [r7, #23]
          break;
 800ac9e:	e002      	b.n	800aca6 <USBD_CDC_Setup+0x19e>
          break;
 800aca0:	bf00      	nop
 800aca2:	e008      	b.n	800acb6 <USBD_CDC_Setup+0x1ae>
          break;
 800aca4:	bf00      	nop
      }
      break;
 800aca6:	e006      	b.n	800acb6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f001 fca5 	bl	800c5fa <USBD_CtlError>
      ret = USBD_FAIL;
 800acb0:	2303      	movs	r3, #3
 800acb2:	75fb      	strb	r3, [r7, #23]
      break;
 800acb4:	bf00      	nop
  }

  return (uint8_t)ret;
 800acb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3718      	adds	r7, #24
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	460b      	mov	r3, r1
 800acca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	32b0      	adds	r2, #176	; 0xb0
 800acde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ace6:	2303      	movs	r3, #3
 800ace8:	e065      	b.n	800adb6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	32b0      	adds	r2, #176	; 0xb0
 800acf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800acfa:	78fb      	ldrb	r3, [r7, #3]
 800acfc:	f003 020f 	and.w	r2, r3, #15
 800ad00:	6879      	ldr	r1, [r7, #4]
 800ad02:	4613      	mov	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	440b      	add	r3, r1
 800ad0c:	3318      	adds	r3, #24
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d02f      	beq.n	800ad74 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ad14:	78fb      	ldrb	r3, [r7, #3]
 800ad16:	f003 020f 	and.w	r2, r3, #15
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	440b      	add	r3, r1
 800ad26:	3318      	adds	r3, #24
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	78fb      	ldrb	r3, [r7, #3]
 800ad2c:	f003 010f 	and.w	r1, r3, #15
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	460b      	mov	r3, r1
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	440b      	add	r3, r1
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4403      	add	r3, r0
 800ad3c:	3348      	adds	r3, #72	; 0x48
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad44:	fb01 f303 	mul.w	r3, r1, r3
 800ad48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d112      	bne.n	800ad74 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ad4e:	78fb      	ldrb	r3, [r7, #3]
 800ad50:	f003 020f 	and.w	r2, r3, #15
 800ad54:	6879      	ldr	r1, [r7, #4]
 800ad56:	4613      	mov	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4413      	add	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	440b      	add	r3, r1
 800ad60:	3318      	adds	r3, #24
 800ad62:	2200      	movs	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ad66:	78f9      	ldrb	r1, [r7, #3]
 800ad68:	2300      	movs	r3, #0
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f004 ff8c 	bl	800fc8a <USBD_LL_Transmit>
 800ad72:	e01f      	b.n	800adb4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	33b0      	adds	r3, #176	; 0xb0
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d010      	beq.n	800adb4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	33b0      	adds	r3, #176	; 0xb0
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	4413      	add	r3, r2
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800adb0:	78fa      	ldrb	r2, [r7, #3]
 800adb2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	460b      	mov	r3, r1
 800adc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	32b0      	adds	r2, #176	; 0xb0
 800add4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	32b0      	adds	r2, #176	; 0xb0
 800ade4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d101      	bne.n	800adf0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800adec:	2303      	movs	r3, #3
 800adee:	e01a      	b.n	800ae26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800adf0:	78fb      	ldrb	r3, [r7, #3]
 800adf2:	4619      	mov	r1, r3
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f004 ff8a 	bl	800fd0e <USBD_LL_GetRxDataSize>
 800adfa:	4602      	mov	r2, r0
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	33b0      	adds	r3, #176	; 0xb0
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ae20:	4611      	mov	r1, r2
 800ae22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b084      	sub	sp, #16
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	32b0      	adds	r2, #176	; 0xb0
 800ae40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e025      	b.n	800ae9c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	33b0      	adds	r3, #176	; 0xb0
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	4413      	add	r3, r2
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d01a      	beq.n	800ae9a <USBD_CDC_EP0_RxReady+0x6c>
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ae6a:	2bff      	cmp	r3, #255	; 0xff
 800ae6c:	d015      	beq.n	800ae9a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	33b0      	adds	r3, #176	; 0xb0
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4413      	add	r3, r2
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ae86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae8e:	b292      	uxth	r2, r2
 800ae90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	22ff      	movs	r2, #255	; 0xff
 800ae96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aeac:	2182      	movs	r1, #130	; 0x82
 800aeae:	4818      	ldr	r0, [pc, #96]	; (800af10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aeb0:	f000 fd6b 	bl	800b98a <USBD_GetEpDesc>
 800aeb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aeb6:	2101      	movs	r1, #1
 800aeb8:	4815      	ldr	r0, [pc, #84]	; (800af10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aeba:	f000 fd66 	bl	800b98a <USBD_GetEpDesc>
 800aebe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aec0:	2181      	movs	r1, #129	; 0x81
 800aec2:	4813      	ldr	r0, [pc, #76]	; (800af10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aec4:	f000 fd61 	bl	800b98a <USBD_GetEpDesc>
 800aec8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	2210      	movs	r2, #16
 800aed4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d006      	beq.n	800aeea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	2200      	movs	r2, #0
 800aee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aee4:	711a      	strb	r2, [r3, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d006      	beq.n	800aefe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aef8:	711a      	strb	r2, [r3, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2243      	movs	r2, #67	; 0x43
 800af02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af04:	4b02      	ldr	r3, [pc, #8]	; (800af10 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800af06:	4618      	mov	r0, r3
 800af08:	3718      	adds	r7, #24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	200001a0 	.word	0x200001a0

0800af14 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af1c:	2182      	movs	r1, #130	; 0x82
 800af1e:	4818      	ldr	r0, [pc, #96]	; (800af80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af20:	f000 fd33 	bl	800b98a <USBD_GetEpDesc>
 800af24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af26:	2101      	movs	r1, #1
 800af28:	4815      	ldr	r0, [pc, #84]	; (800af80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af2a:	f000 fd2e 	bl	800b98a <USBD_GetEpDesc>
 800af2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af30:	2181      	movs	r1, #129	; 0x81
 800af32:	4813      	ldr	r0, [pc, #76]	; (800af80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af34:	f000 fd29 	bl	800b98a <USBD_GetEpDesc>
 800af38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2210      	movs	r2, #16
 800af44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d006      	beq.n	800af5a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	2200      	movs	r2, #0
 800af50:	711a      	strb	r2, [r3, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f042 0202 	orr.w	r2, r2, #2
 800af58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d006      	beq.n	800af6e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	711a      	strb	r2, [r3, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	f042 0202 	orr.w	r2, r2, #2
 800af6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2243      	movs	r2, #67	; 0x43
 800af72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af74:	4b02      	ldr	r3, [pc, #8]	; (800af80 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	200001a0 	.word	0x200001a0

0800af84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af8c:	2182      	movs	r1, #130	; 0x82
 800af8e:	4818      	ldr	r0, [pc, #96]	; (800aff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af90:	f000 fcfb 	bl	800b98a <USBD_GetEpDesc>
 800af94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af96:	2101      	movs	r1, #1
 800af98:	4815      	ldr	r0, [pc, #84]	; (800aff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af9a:	f000 fcf6 	bl	800b98a <USBD_GetEpDesc>
 800af9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800afa0:	2181      	movs	r1, #129	; 0x81
 800afa2:	4813      	ldr	r0, [pc, #76]	; (800aff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800afa4:	f000 fcf1 	bl	800b98a <USBD_GetEpDesc>
 800afa8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d002      	beq.n	800afb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	2210      	movs	r2, #16
 800afb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d006      	beq.n	800afca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afc4:	711a      	strb	r2, [r3, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d006      	beq.n	800afde <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afd8:	711a      	strb	r2, [r3, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2243      	movs	r2, #67	; 0x43
 800afe2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800afe4:	4b02      	ldr	r3, [pc, #8]	; (800aff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	200001a0 	.word	0x200001a0

0800aff4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	220a      	movs	r2, #10
 800b000:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b002:	4b03      	ldr	r3, [pc, #12]	; (800b010 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b004:	4618      	mov	r0, r3
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr
 800b010:	2000015c 	.word	0x2000015c

0800b014 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d101      	bne.n	800b028 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b024:	2303      	movs	r3, #3
 800b026:	e009      	b.n	800b03c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	33b0      	adds	r3, #176	; 0xb0
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	683a      	ldr	r2, [r7, #0]
 800b038:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b048:	b480      	push	{r7}
 800b04a:	b087      	sub	sp, #28
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	32b0      	adds	r2, #176	; 0xb0
 800b05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b062:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d101      	bne.n	800b06e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b06a:	2303      	movs	r3, #3
 800b06c:	e008      	b.n	800b080 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	371c      	adds	r7, #28
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	32b0      	adds	r2, #176	; 0xb0
 800b0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e004      	b.n	800b0ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	683a      	ldr	r2, [r7, #0]
 800b0b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3714      	adds	r7, #20
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
	...

0800b0c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	32b0      	adds	r2, #176	; 0xb0
 800b0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	32b0      	adds	r2, #176	; 0xb0
 800b0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	e025      	b.n	800b146 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b100:	2b00      	cmp	r3, #0
 800b102:	d11f      	bne.n	800b144 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	2201      	movs	r2, #1
 800b108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b10c:	4b10      	ldr	r3, [pc, #64]	; (800b150 <USBD_CDC_TransmitPacket+0x88>)
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	f003 020f 	and.w	r2, r3, #15
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4403      	add	r3, r0
 800b126:	3318      	adds	r3, #24
 800b128:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b12a:	4b09      	ldr	r3, [pc, #36]	; (800b150 <USBD_CDC_TransmitPacket+0x88>)
 800b12c:	7819      	ldrb	r1, [r3, #0]
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f004 fda5 	bl	800fc8a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b144:	7bfb      	ldrb	r3, [r7, #15]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	200001e3 	.word	0x200001e3

0800b154 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	32b0      	adds	r2, #176	; 0xb0
 800b166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b16a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	32b0      	adds	r2, #176	; 0xb0
 800b176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d101      	bne.n	800b182 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b17e:	2303      	movs	r3, #3
 800b180:	e018      	b.n	800b1b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	7c1b      	ldrb	r3, [r3, #16]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10a      	bne.n	800b1a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b18a:	4b0c      	ldr	r3, [pc, #48]	; (800b1bc <USBD_CDC_ReceivePacket+0x68>)
 800b18c:	7819      	ldrb	r1, [r3, #0]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b194:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f004 fd97 	bl	800fccc <USBD_LL_PrepareReceive>
 800b19e:	e008      	b.n	800b1b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1a0:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <USBD_CDC_ReceivePacket+0x68>)
 800b1a2:	7819      	ldrb	r1, [r3, #0]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1aa:	2340      	movs	r3, #64	; 0x40
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f004 fd8d 	bl	800fccc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3710      	adds	r7, #16
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	200001e4 	.word	0x200001e4

0800b1c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	4613      	mov	r3, r2
 800b1cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10a      	bne.n	800b1ea <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800b1d4:	4817      	ldr	r0, [pc, #92]	; (800b234 <USBD_Init+0x74>)
 800b1d6:	f005 f81b 	bl	8010210 <iprintf>
 800b1da:	4817      	ldr	r0, [pc, #92]	; (800b238 <USBD_Init+0x78>)
 800b1dc:	f005 f818 	bl	8010210 <iprintf>
 800b1e0:	200a      	movs	r0, #10
 800b1e2:	f005 f82d 	bl	8010240 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	e01f      	b.n	800b22a <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d003      	beq.n	800b210 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	79fa      	ldrb	r2, [r7, #7]
 800b21c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f004 fbfe 	bl	800fa20 <USBD_LL_Init>
 800b224:	4603      	mov	r3, r0
 800b226:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b228:	7dfb      	ldrb	r3, [r7, #23]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3718      	adds	r7, #24
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	08011618 	.word	0x08011618
 800b238:	08011620 	.word	0x08011620

0800b23c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b246:	2300      	movs	r3, #0
 800b248:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10a      	bne.n	800b266 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800b250:	481a      	ldr	r0, [pc, #104]	; (800b2bc <USBD_RegisterClass+0x80>)
 800b252:	f004 ffdd 	bl	8010210 <iprintf>
 800b256:	481a      	ldr	r0, [pc, #104]	; (800b2c0 <USBD_RegisterClass+0x84>)
 800b258:	f004 ffda 	bl	8010210 <iprintf>
 800b25c:	200a      	movs	r0, #10
 800b25e:	f004 ffef 	bl	8010240 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b262:	2303      	movs	r3, #3
 800b264:	e025      	b.n	800b2b2 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	683a      	ldr	r2, [r7, #0]
 800b26a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	32ae      	adds	r2, #174	; 0xae
 800b278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00f      	beq.n	800b2a2 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	32ae      	adds	r2, #174	; 0xae
 800b28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b292:	f107 020e 	add.w	r2, r7, #14
 800b296:	4610      	mov	r0, r2
 800b298:	4798      	blx	r3
 800b29a:	4602      	mov	r2, r0
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b2a8:	1c5a      	adds	r2, r3, #1
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	08011618 	.word	0x08011618
 800b2c0:	08011638 	.word	0x08011638

0800b2c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f004 fbf3 	bl	800fab8 <USBD_LL_Start>
 800b2d2:	4603      	mov	r3, r0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2fe:	2300      	movs	r3, #0
 800b300:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d009      	beq.n	800b320 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	78fa      	ldrb	r2, [r7, #3]
 800b316:	4611      	mov	r1, r2
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	4798      	blx	r3
 800b31c:	4603      	mov	r3, r0
 800b31e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b320:	7bfb      	ldrb	r3, [r7, #15]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b084      	sub	sp, #16
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	460b      	mov	r3, r1
 800b334:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	78fa      	ldrb	r2, [r7, #3]
 800b344:	4611      	mov	r1, r2
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	4798      	blx	r3
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b350:	2303      	movs	r3, #3
 800b352:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b354:	7bfb      	ldrb	r3, [r7, #15]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b084      	sub	sp, #16
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b36e:	6839      	ldr	r1, [r7, #0]
 800b370:	4618      	mov	r0, r3
 800b372:	f001 f908 	bl	800c586 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2201      	movs	r2, #1
 800b37a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b384:	461a      	mov	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b392:	f003 031f 	and.w	r3, r3, #31
 800b396:	2b02      	cmp	r3, #2
 800b398:	d01a      	beq.n	800b3d0 <USBD_LL_SetupStage+0x72>
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d822      	bhi.n	800b3e4 <USBD_LL_SetupStage+0x86>
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d002      	beq.n	800b3a8 <USBD_LL_SetupStage+0x4a>
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d00a      	beq.n	800b3bc <USBD_LL_SetupStage+0x5e>
 800b3a6:	e01d      	b.n	800b3e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fb5f 	bl	800ba74 <USBD_StdDevReq>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b3ba:	e020      	b.n	800b3fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fbc7 	bl	800bb58 <USBD_StdItfReq>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b3ce:	e016      	b.n	800b3fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fc29 	bl	800bc30 <USBD_StdEPReq>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b3e2:	e00c      	b.n	800b3fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b3ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f004 fbc0 	bl	800fb78 <USBD_LL_StallEP>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b3fc:	bf00      	nop
  }

  return ret;
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3710      	adds	r7, #16
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	460b      	mov	r3, r1
 800b412:	607a      	str	r2, [r7, #4]
 800b414:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b416:	2300      	movs	r3, #0
 800b418:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b41a:	7afb      	ldrb	r3, [r7, #11]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d16e      	bne.n	800b4fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b426:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b42e:	2b03      	cmp	r3, #3
 800b430:	f040 8098 	bne.w	800b564 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	689a      	ldr	r2, [r3, #8]
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d913      	bls.n	800b468 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	689a      	ldr	r2, [r3, #8]
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	1ad2      	subs	r2, r2, r3
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	68da      	ldr	r2, [r3, #12]
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	4293      	cmp	r3, r2
 800b458:	bf28      	it	cs
 800b45a:	4613      	movcs	r3, r2
 800b45c:	461a      	mov	r2, r3
 800b45e:	6879      	ldr	r1, [r7, #4]
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f001 f984 	bl	800c76e <USBD_CtlContinueRx>
 800b466:	e07d      	b.n	800b564 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b46e:	f003 031f 	and.w	r3, r3, #31
 800b472:	2b02      	cmp	r3, #2
 800b474:	d014      	beq.n	800b4a0 <USBD_LL_DataOutStage+0x98>
 800b476:	2b02      	cmp	r3, #2
 800b478:	d81d      	bhi.n	800b4b6 <USBD_LL_DataOutStage+0xae>
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <USBD_LL_DataOutStage+0x7c>
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d003      	beq.n	800b48a <USBD_LL_DataOutStage+0x82>
 800b482:	e018      	b.n	800b4b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b484:	2300      	movs	r3, #0
 800b486:	75bb      	strb	r3, [r7, #22]
            break;
 800b488:	e018      	b.n	800b4bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b490:	b2db      	uxtb	r3, r3
 800b492:	4619      	mov	r1, r3
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f000 fa5e 	bl	800b956 <USBD_CoreFindIF>
 800b49a:	4603      	mov	r3, r0
 800b49c:	75bb      	strb	r3, [r7, #22]
            break;
 800b49e:	e00d      	b.n	800b4bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f000 fa60 	bl	800b970 <USBD_CoreFindEP>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	75bb      	strb	r3, [r7, #22]
            break;
 800b4b4:	e002      	b.n	800b4bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	75bb      	strb	r3, [r7, #22]
            break;
 800b4ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b4bc:	7dbb      	ldrb	r3, [r7, #22]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d119      	bne.n	800b4f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	d113      	bne.n	800b4f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b4ce:	7dba      	ldrb	r2, [r7, #22]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	32ae      	adds	r2, #174	; 0xae
 800b4d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00b      	beq.n	800b4f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b4de:	7dba      	ldrb	r2, [r7, #22]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b4e6:	7dba      	ldrb	r2, [r7, #22]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	32ae      	adds	r2, #174	; 0xae
 800b4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f001 f94a 	bl	800c790 <USBD_CtlSendStatus>
 800b4fc:	e032      	b.n	800b564 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b4fe:	7afb      	ldrb	r3, [r7, #11]
 800b500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b504:	b2db      	uxtb	r3, r3
 800b506:	4619      	mov	r1, r3
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 fa31 	bl	800b970 <USBD_CoreFindEP>
 800b50e:	4603      	mov	r3, r0
 800b510:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b512:	7dbb      	ldrb	r3, [r7, #22]
 800b514:	2bff      	cmp	r3, #255	; 0xff
 800b516:	d025      	beq.n	800b564 <USBD_LL_DataOutStage+0x15c>
 800b518:	7dbb      	ldrb	r3, [r7, #22]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d122      	bne.n	800b564 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b03      	cmp	r3, #3
 800b528:	d117      	bne.n	800b55a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b52a:	7dba      	ldrb	r2, [r7, #22]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	32ae      	adds	r2, #174	; 0xae
 800b530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00f      	beq.n	800b55a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b53a:	7dba      	ldrb	r2, [r7, #22]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b542:	7dba      	ldrb	r2, [r7, #22]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	32ae      	adds	r2, #174	; 0xae
 800b548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	7afa      	ldrb	r2, [r7, #11]
 800b550:	4611      	mov	r1, r2
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	4798      	blx	r3
 800b556:	4603      	mov	r3, r0
 800b558:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b55a:	7dfb      	ldrb	r3, [r7, #23]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d001      	beq.n	800b564 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b560:	7dfb      	ldrb	r3, [r7, #23]
 800b562:	e000      	b.n	800b566 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b086      	sub	sp, #24
 800b572:	af00      	add	r7, sp, #0
 800b574:	60f8      	str	r0, [r7, #12]
 800b576:	460b      	mov	r3, r1
 800b578:	607a      	str	r2, [r7, #4]
 800b57a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b57c:	7afb      	ldrb	r3, [r7, #11]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d16f      	bne.n	800b662 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	3314      	adds	r3, #20
 800b586:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b58e:	2b02      	cmp	r3, #2
 800b590:	d15a      	bne.n	800b648 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	689a      	ldr	r2, [r3, #8]
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d914      	bls.n	800b5c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	689a      	ldr	r2, [r3, #8]
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	1ad2      	subs	r2, r2, r3
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	6879      	ldr	r1, [r7, #4]
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f001 f8ac 	bl	800c712 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	2200      	movs	r2, #0
 800b5be:	2100      	movs	r1, #0
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f004 fb83 	bl	800fccc <USBD_LL_PrepareReceive>
 800b5c6:	e03f      	b.n	800b648 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	68da      	ldr	r2, [r3, #12]
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d11c      	bne.n	800b60e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	685a      	ldr	r2, [r3, #4]
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d316      	bcc.n	800b60e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	685a      	ldr	r2, [r3, #4]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d20f      	bcs.n	800b60e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f001 f88d 	bl	800c712 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b600:	2300      	movs	r3, #0
 800b602:	2200      	movs	r2, #0
 800b604:	2100      	movs	r1, #0
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f004 fb60 	bl	800fccc <USBD_LL_PrepareReceive>
 800b60c:	e01c      	b.n	800b648 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b614:	b2db      	uxtb	r3, r3
 800b616:	2b03      	cmp	r3, #3
 800b618:	d10f      	bne.n	800b63a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d009      	beq.n	800b63a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2200      	movs	r2, #0
 800b62a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b63a:	2180      	movs	r1, #128	; 0x80
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f004 fa9b 	bl	800fb78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f001 f8b7 	bl	800c7b6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d03a      	beq.n	800b6c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f7ff fe42 	bl	800b2dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b660:	e032      	b.n	800b6c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b662:	7afb      	ldrb	r3, [r7, #11]
 800b664:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	4619      	mov	r1, r3
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f000 f97f 	bl	800b970 <USBD_CoreFindEP>
 800b672:	4603      	mov	r3, r0
 800b674:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b676:	7dfb      	ldrb	r3, [r7, #23]
 800b678:	2bff      	cmp	r3, #255	; 0xff
 800b67a:	d025      	beq.n	800b6c8 <USBD_LL_DataInStage+0x15a>
 800b67c:	7dfb      	ldrb	r3, [r7, #23]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d122      	bne.n	800b6c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	2b03      	cmp	r3, #3
 800b68c:	d11c      	bne.n	800b6c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b68e:	7dfa      	ldrb	r2, [r7, #23]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	32ae      	adds	r2, #174	; 0xae
 800b694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d014      	beq.n	800b6c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b69e:	7dfa      	ldrb	r2, [r7, #23]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b6a6:	7dfa      	ldrb	r2, [r7, #23]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	32ae      	adds	r2, #174	; 0xae
 800b6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b0:	695b      	ldr	r3, [r3, #20]
 800b6b2:	7afa      	ldrb	r2, [r7, #11]
 800b6b4:	4611      	mov	r1, r2
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	4798      	blx	r3
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b6be:	7dbb      	ldrb	r3, [r7, #22]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d001      	beq.n	800b6c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b6c4:	7dbb      	ldrb	r3, [r7, #22]
 800b6c6:	e000      	b.n	800b6ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3718      	adds	r7, #24
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b084      	sub	sp, #16
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d014      	beq.n	800b738 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00e      	beq.n	800b738 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	6852      	ldr	r2, [r2, #4]
 800b726:	b2d2      	uxtb	r2, r2
 800b728:	4611      	mov	r1, r2
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	4798      	blx	r3
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b734:	2303      	movs	r3, #3
 800b736:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b738:	2340      	movs	r3, #64	; 0x40
 800b73a:	2200      	movs	r2, #0
 800b73c:	2100      	movs	r1, #0
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f004 f9d5 	bl	800faee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2240      	movs	r2, #64	; 0x40
 800b750:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b754:	2340      	movs	r3, #64	; 0x40
 800b756:	2200      	movs	r2, #0
 800b758:	2180      	movs	r1, #128	; 0x80
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f004 f9c7 	bl	800faee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2240      	movs	r2, #64	; 0x40
 800b76a:	621a      	str	r2, [r3, #32]

  return ret;
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	460b      	mov	r3, r1
 800b780:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	78fa      	ldrb	r2, [r7, #3]
 800b786:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	370c      	adds	r7, #12
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b796:	b480      	push	{r7}
 800b798:	b083      	sub	sp, #12
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7a4:	b2da      	uxtb	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2204      	movs	r2, #4
 800b7b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	370c      	adds	r7, #12
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b083      	sub	sp, #12
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	d106      	bne.n	800b7e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b7dc:	b2da      	uxtb	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b800:	b2db      	uxtb	r3, r3
 800b802:	2b03      	cmp	r3, #3
 800b804:	d110      	bne.n	800b828 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00b      	beq.n	800b828 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b816:	69db      	ldr	r3, [r3, #28]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d005      	beq.n	800b828 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b822:	69db      	ldr	r3, [r3, #28]
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b082      	sub	sp, #8
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
 800b83a:	460b      	mov	r3, r1
 800b83c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	32ae      	adds	r2, #174	; 0xae
 800b848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b850:	2303      	movs	r3, #3
 800b852:	e01c      	b.n	800b88e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b03      	cmp	r3, #3
 800b85e:	d115      	bne.n	800b88c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	32ae      	adds	r2, #174	; 0xae
 800b86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86e:	6a1b      	ldr	r3, [r3, #32]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00b      	beq.n	800b88c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	32ae      	adds	r2, #174	; 0xae
 800b87e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b882:	6a1b      	ldr	r3, [r3, #32]
 800b884:	78fa      	ldrb	r2, [r7, #3]
 800b886:	4611      	mov	r1, r2
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	460b      	mov	r3, r1
 800b8a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	32ae      	adds	r2, #174	; 0xae
 800b8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e01c      	b.n	800b8f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	2b03      	cmp	r3, #3
 800b8c2:	d115      	bne.n	800b8f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	32ae      	adds	r2, #174	; 0xae
 800b8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00b      	beq.n	800b8f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	32ae      	adds	r2, #174	; 0xae
 800b8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e8:	78fa      	ldrb	r2, [r7, #3]
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	b083      	sub	sp, #12
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00e      	beq.n	800b94c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	6852      	ldr	r2, [r2, #4]
 800b93a:	b2d2      	uxtb	r2, r2
 800b93c:	4611      	mov	r1, r2
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	4798      	blx	r3
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d001      	beq.n	800b94c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b948:	2303      	movs	r3, #3
 800b94a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b956:	b480      	push	{r7}
 800b958:	b083      	sub	sp, #12
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	460b      	mov	r3, r1
 800b960:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b962:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b964:	4618      	mov	r0, r3
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	460b      	mov	r3, r1
 800b97a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b97c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b97e:	4618      	mov	r0, r3
 800b980:	370c      	adds	r7, #12
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b086      	sub	sp, #24
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
 800b992:	460b      	mov	r3, r1
 800b994:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	885b      	ldrh	r3, [r3, #2]
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d920      	bls.n	800b9f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b9ba:	e013      	b.n	800b9e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b9bc:	f107 030a 	add.w	r3, r7, #10
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	6978      	ldr	r0, [r7, #20]
 800b9c4:	f000 f81b 	bl	800b9fe <USBD_GetNextDesc>
 800b9c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	785b      	ldrb	r3, [r3, #1]
 800b9ce:	2b05      	cmp	r3, #5
 800b9d0:	d108      	bne.n	800b9e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	789b      	ldrb	r3, [r3, #2]
 800b9da:	78fa      	ldrb	r2, [r7, #3]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d008      	beq.n	800b9f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	885b      	ldrh	r3, [r3, #2]
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	897b      	ldrh	r3, [r7, #10]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d8e5      	bhi.n	800b9bc <USBD_GetEpDesc+0x32>
 800b9f0:	e000      	b.n	800b9f4 <USBD_GetEpDesc+0x6a>
          break;
 800b9f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b9f4:	693b      	ldr	r3, [r7, #16]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3718      	adds	r7, #24
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b085      	sub	sp, #20
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	881a      	ldrh	r2, [r3, #0]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	4413      	add	r3, r2
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	461a      	mov	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4413      	add	r3, r2
 800ba28:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ba56:	8a3b      	ldrh	r3, [r7, #16]
 800ba58:	021b      	lsls	r3, r3, #8
 800ba5a:	b21a      	sxth	r2, r3
 800ba5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	b21b      	sxth	r3, r3
 800ba64:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ba66:	89fb      	ldrh	r3, [r7, #14]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	371c      	adds	r7, #28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba8a:	2b40      	cmp	r3, #64	; 0x40
 800ba8c:	d005      	beq.n	800ba9a <USBD_StdDevReq+0x26>
 800ba8e:	2b40      	cmp	r3, #64	; 0x40
 800ba90:	d857      	bhi.n	800bb42 <USBD_StdDevReq+0xce>
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00f      	beq.n	800bab6 <USBD_StdDevReq+0x42>
 800ba96:	2b20      	cmp	r3, #32
 800ba98:	d153      	bne.n	800bb42 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	32ae      	adds	r2, #174	; 0xae
 800baa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	4798      	blx	r3
 800bab0:	4603      	mov	r3, r0
 800bab2:	73fb      	strb	r3, [r7, #15]
      break;
 800bab4:	e04a      	b.n	800bb4c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	785b      	ldrb	r3, [r3, #1]
 800baba:	2b09      	cmp	r3, #9
 800babc:	d83b      	bhi.n	800bb36 <USBD_StdDevReq+0xc2>
 800babe:	a201      	add	r2, pc, #4	; (adr r2, 800bac4 <USBD_StdDevReq+0x50>)
 800bac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac4:	0800bb19 	.word	0x0800bb19
 800bac8:	0800bb2d 	.word	0x0800bb2d
 800bacc:	0800bb37 	.word	0x0800bb37
 800bad0:	0800bb23 	.word	0x0800bb23
 800bad4:	0800bb37 	.word	0x0800bb37
 800bad8:	0800baf7 	.word	0x0800baf7
 800badc:	0800baed 	.word	0x0800baed
 800bae0:	0800bb37 	.word	0x0800bb37
 800bae4:	0800bb0f 	.word	0x0800bb0f
 800bae8:	0800bb01 	.word	0x0800bb01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 fa3c 	bl	800bf6c <USBD_GetDescriptor>
          break;
 800baf4:	e024      	b.n	800bb40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fba1 	bl	800c240 <USBD_SetAddress>
          break;
 800bafe:	e01f      	b.n	800bb40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fbe0 	bl	800c2c8 <USBD_SetConfig>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	73fb      	strb	r3, [r7, #15]
          break;
 800bb0c:	e018      	b.n	800bb40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bb0e:	6839      	ldr	r1, [r7, #0]
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 fc83 	bl	800c41c <USBD_GetConfig>
          break;
 800bb16:	e013      	b.n	800bb40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb18:	6839      	ldr	r1, [r7, #0]
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 fcb4 	bl	800c488 <USBD_GetStatus>
          break;
 800bb20:	e00e      	b.n	800bb40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb22:	6839      	ldr	r1, [r7, #0]
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 fce3 	bl	800c4f0 <USBD_SetFeature>
          break;
 800bb2a:	e009      	b.n	800bb40 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fd07 	bl	800c542 <USBD_ClrFeature>
          break;
 800bb34:	e004      	b.n	800bb40 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fd5e 	bl	800c5fa <USBD_CtlError>
          break;
 800bb3e:	bf00      	nop
      }
      break;
 800bb40:	e004      	b.n	800bb4c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 fd58 	bl	800c5fa <USBD_CtlError>
      break;
 800bb4a:	bf00      	nop
  }

  return ret;
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop

0800bb58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb6e:	2b40      	cmp	r3, #64	; 0x40
 800bb70:	d005      	beq.n	800bb7e <USBD_StdItfReq+0x26>
 800bb72:	2b40      	cmp	r3, #64	; 0x40
 800bb74:	d852      	bhi.n	800bc1c <USBD_StdItfReq+0xc4>
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <USBD_StdItfReq+0x26>
 800bb7a:	2b20      	cmp	r3, #32
 800bb7c:	d14e      	bne.n	800bc1c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	3b01      	subs	r3, #1
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d840      	bhi.n	800bc0e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	889b      	ldrh	r3, [r3, #4]
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d836      	bhi.n	800bc04 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	889b      	ldrh	r3, [r3, #4]
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7ff fed9 	bl	800b956 <USBD_CoreFindIF>
 800bba4:	4603      	mov	r3, r0
 800bba6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bba8:	7bbb      	ldrb	r3, [r7, #14]
 800bbaa:	2bff      	cmp	r3, #255	; 0xff
 800bbac:	d01d      	beq.n	800bbea <USBD_StdItfReq+0x92>
 800bbae:	7bbb      	ldrb	r3, [r7, #14]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d11a      	bne.n	800bbea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bbb4:	7bba      	ldrb	r2, [r7, #14]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	32ae      	adds	r2, #174	; 0xae
 800bbba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00f      	beq.n	800bbe4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bbc4:	7bba      	ldrb	r2, [r7, #14]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bbcc:	7bba      	ldrb	r2, [r7, #14]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	32ae      	adds	r2, #174	; 0xae
 800bbd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	6839      	ldr	r1, [r7, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	4798      	blx	r3
 800bbde:	4603      	mov	r3, r0
 800bbe0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bbe2:	e004      	b.n	800bbee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bbe4:	2303      	movs	r3, #3
 800bbe6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bbe8:	e001      	b.n	800bbee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bbea:	2303      	movs	r3, #3
 800bbec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	88db      	ldrh	r3, [r3, #6]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d110      	bne.n	800bc18 <USBD_StdItfReq+0xc0>
 800bbf6:	7bfb      	ldrb	r3, [r7, #15]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10d      	bne.n	800bc18 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 fdc7 	bl	800c790 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc02:	e009      	b.n	800bc18 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fcf7 	bl	800c5fa <USBD_CtlError>
          break;
 800bc0c:	e004      	b.n	800bc18 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bc0e:	6839      	ldr	r1, [r7, #0]
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 fcf2 	bl	800c5fa <USBD_CtlError>
          break;
 800bc16:	e000      	b.n	800bc1a <USBD_StdItfReq+0xc2>
          break;
 800bc18:	bf00      	nop
      }
      break;
 800bc1a:	e004      	b.n	800bc26 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bc1c:	6839      	ldr	r1, [r7, #0]
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 fceb 	bl	800c5fa <USBD_CtlError>
      break;
 800bc24:	bf00      	nop
  }

  return ret;
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	889b      	ldrh	r3, [r3, #4]
 800bc42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc4c:	2b40      	cmp	r3, #64	; 0x40
 800bc4e:	d007      	beq.n	800bc60 <USBD_StdEPReq+0x30>
 800bc50:	2b40      	cmp	r3, #64	; 0x40
 800bc52:	f200 817f 	bhi.w	800bf54 <USBD_StdEPReq+0x324>
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d02a      	beq.n	800bcb0 <USBD_StdEPReq+0x80>
 800bc5a:	2b20      	cmp	r3, #32
 800bc5c:	f040 817a 	bne.w	800bf54 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc60:	7bbb      	ldrb	r3, [r7, #14]
 800bc62:	4619      	mov	r1, r3
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7ff fe83 	bl	800b970 <USBD_CoreFindEP>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc6e:	7b7b      	ldrb	r3, [r7, #13]
 800bc70:	2bff      	cmp	r3, #255	; 0xff
 800bc72:	f000 8174 	beq.w	800bf5e <USBD_StdEPReq+0x32e>
 800bc76:	7b7b      	ldrb	r3, [r7, #13]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f040 8170 	bne.w	800bf5e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bc7e:	7b7a      	ldrb	r2, [r7, #13]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bc86:	7b7a      	ldrb	r2, [r7, #13]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	32ae      	adds	r2, #174	; 0xae
 800bc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f000 8163 	beq.w	800bf5e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bc98:	7b7a      	ldrb	r2, [r7, #13]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	32ae      	adds	r2, #174	; 0xae
 800bc9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	4798      	blx	r3
 800bcaa:	4603      	mov	r3, r0
 800bcac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bcae:	e156      	b.n	800bf5e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	785b      	ldrb	r3, [r3, #1]
 800bcb4:	2b03      	cmp	r3, #3
 800bcb6:	d008      	beq.n	800bcca <USBD_StdEPReq+0x9a>
 800bcb8:	2b03      	cmp	r3, #3
 800bcba:	f300 8145 	bgt.w	800bf48 <USBD_StdEPReq+0x318>
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f000 809b 	beq.w	800bdfa <USBD_StdEPReq+0x1ca>
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d03c      	beq.n	800bd42 <USBD_StdEPReq+0x112>
 800bcc8:	e13e      	b.n	800bf48 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d002      	beq.n	800bcdc <USBD_StdEPReq+0xac>
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	d016      	beq.n	800bd08 <USBD_StdEPReq+0xd8>
 800bcda:	e02c      	b.n	800bd36 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcdc:	7bbb      	ldrb	r3, [r7, #14]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00d      	beq.n	800bcfe <USBD_StdEPReq+0xce>
 800bce2:	7bbb      	ldrb	r3, [r7, #14]
 800bce4:	2b80      	cmp	r3, #128	; 0x80
 800bce6:	d00a      	beq.n	800bcfe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bce8:	7bbb      	ldrb	r3, [r7, #14]
 800bcea:	4619      	mov	r1, r3
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f003 ff43 	bl	800fb78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcf2:	2180      	movs	r1, #128	; 0x80
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f003 ff3f 	bl	800fb78 <USBD_LL_StallEP>
 800bcfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bcfc:	e020      	b.n	800bd40 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bcfe:	6839      	ldr	r1, [r7, #0]
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fc7a 	bl	800c5fa <USBD_CtlError>
              break;
 800bd06:	e01b      	b.n	800bd40 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	885b      	ldrh	r3, [r3, #2]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10e      	bne.n	800bd2e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bd10:	7bbb      	ldrb	r3, [r7, #14]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00b      	beq.n	800bd2e <USBD_StdEPReq+0xfe>
 800bd16:	7bbb      	ldrb	r3, [r7, #14]
 800bd18:	2b80      	cmp	r3, #128	; 0x80
 800bd1a:	d008      	beq.n	800bd2e <USBD_StdEPReq+0xfe>
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	88db      	ldrh	r3, [r3, #6]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d104      	bne.n	800bd2e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd24:	7bbb      	ldrb	r3, [r7, #14]
 800bd26:	4619      	mov	r1, r3
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f003 ff25 	bl	800fb78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fd2e 	bl	800c790 <USBD_CtlSendStatus>

              break;
 800bd34:	e004      	b.n	800bd40 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 fc5e 	bl	800c5fa <USBD_CtlError>
              break;
 800bd3e:	bf00      	nop
          }
          break;
 800bd40:	e107      	b.n	800bf52 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d002      	beq.n	800bd54 <USBD_StdEPReq+0x124>
 800bd4e:	2b03      	cmp	r3, #3
 800bd50:	d016      	beq.n	800bd80 <USBD_StdEPReq+0x150>
 800bd52:	e04b      	b.n	800bdec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd54:	7bbb      	ldrb	r3, [r7, #14]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00d      	beq.n	800bd76 <USBD_StdEPReq+0x146>
 800bd5a:	7bbb      	ldrb	r3, [r7, #14]
 800bd5c:	2b80      	cmp	r3, #128	; 0x80
 800bd5e:	d00a      	beq.n	800bd76 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd60:	7bbb      	ldrb	r3, [r7, #14]
 800bd62:	4619      	mov	r1, r3
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f003 ff07 	bl	800fb78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd6a:	2180      	movs	r1, #128	; 0x80
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f003 ff03 	bl	800fb78 <USBD_LL_StallEP>
 800bd72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd74:	e040      	b.n	800bdf8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fc3e 	bl	800c5fa <USBD_CtlError>
              break;
 800bd7e:	e03b      	b.n	800bdf8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	885b      	ldrh	r3, [r3, #2]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d136      	bne.n	800bdf6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd88:	7bbb      	ldrb	r3, [r7, #14]
 800bd8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d004      	beq.n	800bd9c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd92:	7bbb      	ldrb	r3, [r7, #14]
 800bd94:	4619      	mov	r1, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f003 ff0d 	bl	800fbb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fcf7 	bl	800c790 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bda2:	7bbb      	ldrb	r3, [r7, #14]
 800bda4:	4619      	mov	r1, r3
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f7ff fde2 	bl	800b970 <USBD_CoreFindEP>
 800bdac:	4603      	mov	r3, r0
 800bdae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdb0:	7b7b      	ldrb	r3, [r7, #13]
 800bdb2:	2bff      	cmp	r3, #255	; 0xff
 800bdb4:	d01f      	beq.n	800bdf6 <USBD_StdEPReq+0x1c6>
 800bdb6:	7b7b      	ldrb	r3, [r7, #13]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d11c      	bne.n	800bdf6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bdbc:	7b7a      	ldrb	r2, [r7, #13]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bdc4:	7b7a      	ldrb	r2, [r7, #13]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	32ae      	adds	r2, #174	; 0xae
 800bdca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d010      	beq.n	800bdf6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bdd4:	7b7a      	ldrb	r2, [r7, #13]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	32ae      	adds	r2, #174	; 0xae
 800bdda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	6839      	ldr	r1, [r7, #0]
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	4798      	blx	r3
 800bde6:	4603      	mov	r3, r0
 800bde8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bdea:	e004      	b.n	800bdf6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bdec:	6839      	ldr	r1, [r7, #0]
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fc03 	bl	800c5fa <USBD_CtlError>
              break;
 800bdf4:	e000      	b.n	800bdf8 <USBD_StdEPReq+0x1c8>
              break;
 800bdf6:	bf00      	nop
          }
          break;
 800bdf8:	e0ab      	b.n	800bf52 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be00:	b2db      	uxtb	r3, r3
 800be02:	2b02      	cmp	r3, #2
 800be04:	d002      	beq.n	800be0c <USBD_StdEPReq+0x1dc>
 800be06:	2b03      	cmp	r3, #3
 800be08:	d032      	beq.n	800be70 <USBD_StdEPReq+0x240>
 800be0a:	e097      	b.n	800bf3c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be0c:	7bbb      	ldrb	r3, [r7, #14]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d007      	beq.n	800be22 <USBD_StdEPReq+0x1f2>
 800be12:	7bbb      	ldrb	r3, [r7, #14]
 800be14:	2b80      	cmp	r3, #128	; 0x80
 800be16:	d004      	beq.n	800be22 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800be18:	6839      	ldr	r1, [r7, #0]
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 fbed 	bl	800c5fa <USBD_CtlError>
                break;
 800be20:	e091      	b.n	800bf46 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be26:	2b00      	cmp	r3, #0
 800be28:	da0b      	bge.n	800be42 <USBD_StdEPReq+0x212>
 800be2a:	7bbb      	ldrb	r3, [r7, #14]
 800be2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be30:	4613      	mov	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	3310      	adds	r3, #16
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	4413      	add	r3, r2
 800be3e:	3304      	adds	r3, #4
 800be40:	e00b      	b.n	800be5a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be42:	7bbb      	ldrb	r3, [r7, #14]
 800be44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be48:	4613      	mov	r3, r2
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4413      	add	r3, r2
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	4413      	add	r3, r2
 800be58:	3304      	adds	r3, #4
 800be5a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	2200      	movs	r2, #0
 800be60:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	2202      	movs	r2, #2
 800be66:	4619      	mov	r1, r3
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fc37 	bl	800c6dc <USBD_CtlSendData>
              break;
 800be6e:	e06a      	b.n	800bf46 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800be70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be74:	2b00      	cmp	r3, #0
 800be76:	da11      	bge.n	800be9c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be78:	7bbb      	ldrb	r3, [r7, #14]
 800be7a:	f003 020f 	and.w	r2, r3, #15
 800be7e:	6879      	ldr	r1, [r7, #4]
 800be80:	4613      	mov	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4413      	add	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	440b      	add	r3, r1
 800be8a:	3324      	adds	r3, #36	; 0x24
 800be8c:	881b      	ldrh	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d117      	bne.n	800bec2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800be92:	6839      	ldr	r1, [r7, #0]
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 fbb0 	bl	800c5fa <USBD_CtlError>
                  break;
 800be9a:	e054      	b.n	800bf46 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be9c:	7bbb      	ldrb	r3, [r7, #14]
 800be9e:	f003 020f 	and.w	r2, r3, #15
 800bea2:	6879      	ldr	r1, [r7, #4]
 800bea4:	4613      	mov	r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	440b      	add	r3, r1
 800beae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800beb2:	881b      	ldrh	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d104      	bne.n	800bec2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800beb8:	6839      	ldr	r1, [r7, #0]
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 fb9d 	bl	800c5fa <USBD_CtlError>
                  break;
 800bec0:	e041      	b.n	800bf46 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bec2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	da0b      	bge.n	800bee2 <USBD_StdEPReq+0x2b2>
 800beca:	7bbb      	ldrb	r3, [r7, #14]
 800becc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bed0:	4613      	mov	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	3310      	adds	r3, #16
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	4413      	add	r3, r2
 800bede:	3304      	adds	r3, #4
 800bee0:	e00b      	b.n	800befa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bee2:	7bbb      	ldrb	r3, [r7, #14]
 800bee4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bee8:	4613      	mov	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	4413      	add	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	4413      	add	r3, r2
 800bef8:	3304      	adds	r3, #4
 800befa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800befc:	7bbb      	ldrb	r3, [r7, #14]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d002      	beq.n	800bf08 <USBD_StdEPReq+0x2d8>
 800bf02:	7bbb      	ldrb	r3, [r7, #14]
 800bf04:	2b80      	cmp	r3, #128	; 0x80
 800bf06:	d103      	bne.n	800bf10 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	601a      	str	r2, [r3, #0]
 800bf0e:	e00e      	b.n	800bf2e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f003 fe6d 	bl	800fbf4 <USBD_LL_IsStallEP>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d003      	beq.n	800bf28 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	2201      	movs	r2, #1
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	e002      	b.n	800bf2e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	2202      	movs	r2, #2
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fbd1 	bl	800c6dc <USBD_CtlSendData>
              break;
 800bf3a:	e004      	b.n	800bf46 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fb5b 	bl	800c5fa <USBD_CtlError>
              break;
 800bf44:	bf00      	nop
          }
          break;
 800bf46:	e004      	b.n	800bf52 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 fb55 	bl	800c5fa <USBD_CtlError>
          break;
 800bf50:	bf00      	nop
      }
      break;
 800bf52:	e005      	b.n	800bf60 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fb4f 	bl	800c5fa <USBD_CtlError>
      break;
 800bf5c:	e000      	b.n	800bf60 <USBD_StdEPReq+0x330>
      break;
 800bf5e:	bf00      	nop
  }

  return ret;
 800bf60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
	...

0800bf6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf76:	2300      	movs	r3, #0
 800bf78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	885b      	ldrh	r3, [r3, #2]
 800bf86:	0a1b      	lsrs	r3, r3, #8
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	2b06      	cmp	r3, #6
 800bf8e:	f200 8128 	bhi.w	800c1e2 <USBD_GetDescriptor+0x276>
 800bf92:	a201      	add	r2, pc, #4	; (adr r2, 800bf98 <USBD_GetDescriptor+0x2c>)
 800bf94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf98:	0800bfb5 	.word	0x0800bfb5
 800bf9c:	0800bfcd 	.word	0x0800bfcd
 800bfa0:	0800c00d 	.word	0x0800c00d
 800bfa4:	0800c1e3 	.word	0x0800c1e3
 800bfa8:	0800c1e3 	.word	0x0800c1e3
 800bfac:	0800c183 	.word	0x0800c183
 800bfb0:	0800c1af 	.word	0x0800c1af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	7c12      	ldrb	r2, [r2, #16]
 800bfc0:	f107 0108 	add.w	r1, r7, #8
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	4798      	blx	r3
 800bfc8:	60f8      	str	r0, [r7, #12]
      break;
 800bfca:	e112      	b.n	800c1f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	7c1b      	ldrb	r3, [r3, #16]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10d      	bne.n	800bff0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfdc:	f107 0208 	add.w	r2, r7, #8
 800bfe0:	4610      	mov	r0, r2
 800bfe2:	4798      	blx	r3
 800bfe4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	2202      	movs	r2, #2
 800bfec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bfee:	e100      	b.n	800c1f2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff8:	f107 0208 	add.w	r2, r7, #8
 800bffc:	4610      	mov	r0, r2
 800bffe:	4798      	blx	r3
 800c000:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3301      	adds	r3, #1
 800c006:	2202      	movs	r2, #2
 800c008:	701a      	strb	r2, [r3, #0]
      break;
 800c00a:	e0f2      	b.n	800c1f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	885b      	ldrh	r3, [r3, #2]
 800c010:	b2db      	uxtb	r3, r3
 800c012:	2b05      	cmp	r3, #5
 800c014:	f200 80ac 	bhi.w	800c170 <USBD_GetDescriptor+0x204>
 800c018:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <USBD_GetDescriptor+0xb4>)
 800c01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c01e:	bf00      	nop
 800c020:	0800c039 	.word	0x0800c039
 800c024:	0800c06d 	.word	0x0800c06d
 800c028:	0800c0a1 	.word	0x0800c0a1
 800c02c:	0800c0d5 	.word	0x0800c0d5
 800c030:	0800c109 	.word	0x0800c109
 800c034:	0800c13d 	.word	0x0800c13d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00b      	beq.n	800c05c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	7c12      	ldrb	r2, [r2, #16]
 800c050:	f107 0108 	add.w	r1, r7, #8
 800c054:	4610      	mov	r0, r2
 800c056:	4798      	blx	r3
 800c058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c05a:	e091      	b.n	800c180 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 facb 	bl	800c5fa <USBD_CtlError>
            err++;
 800c064:	7afb      	ldrb	r3, [r7, #11]
 800c066:	3301      	adds	r3, #1
 800c068:	72fb      	strb	r3, [r7, #11]
          break;
 800c06a:	e089      	b.n	800c180 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00b      	beq.n	800c090 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	7c12      	ldrb	r2, [r2, #16]
 800c084:	f107 0108 	add.w	r1, r7, #8
 800c088:	4610      	mov	r0, r2
 800c08a:	4798      	blx	r3
 800c08c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c08e:	e077      	b.n	800c180 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fab1 	bl	800c5fa <USBD_CtlError>
            err++;
 800c098:	7afb      	ldrb	r3, [r7, #11]
 800c09a:	3301      	adds	r3, #1
 800c09c:	72fb      	strb	r3, [r7, #11]
          break;
 800c09e:	e06f      	b.n	800c180 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00b      	beq.n	800c0c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	7c12      	ldrb	r2, [r2, #16]
 800c0b8:	f107 0108 	add.w	r1, r7, #8
 800c0bc:	4610      	mov	r0, r2
 800c0be:	4798      	blx	r3
 800c0c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0c2:	e05d      	b.n	800c180 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fa97 	bl	800c5fa <USBD_CtlError>
            err++;
 800c0cc:	7afb      	ldrb	r3, [r7, #11]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	72fb      	strb	r3, [r7, #11]
          break;
 800c0d2:	e055      	b.n	800c180 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00b      	beq.n	800c0f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	7c12      	ldrb	r2, [r2, #16]
 800c0ec:	f107 0108 	add.w	r1, r7, #8
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	4798      	blx	r3
 800c0f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0f6:	e043      	b.n	800c180 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0f8:	6839      	ldr	r1, [r7, #0]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 fa7d 	bl	800c5fa <USBD_CtlError>
            err++;
 800c100:	7afb      	ldrb	r3, [r7, #11]
 800c102:	3301      	adds	r3, #1
 800c104:	72fb      	strb	r3, [r7, #11]
          break;
 800c106:	e03b      	b.n	800c180 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00b      	beq.n	800c12c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c11a:	695b      	ldr	r3, [r3, #20]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	7c12      	ldrb	r2, [r2, #16]
 800c120:	f107 0108 	add.w	r1, r7, #8
 800c124:	4610      	mov	r0, r2
 800c126:	4798      	blx	r3
 800c128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c12a:	e029      	b.n	800c180 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 fa63 	bl	800c5fa <USBD_CtlError>
            err++;
 800c134:	7afb      	ldrb	r3, [r7, #11]
 800c136:	3301      	adds	r3, #1
 800c138:	72fb      	strb	r3, [r7, #11]
          break;
 800c13a:	e021      	b.n	800c180 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c142:	699b      	ldr	r3, [r3, #24]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d00b      	beq.n	800c160 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	7c12      	ldrb	r2, [r2, #16]
 800c154:	f107 0108 	add.w	r1, r7, #8
 800c158:	4610      	mov	r0, r2
 800c15a:	4798      	blx	r3
 800c15c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c15e:	e00f      	b.n	800c180 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c160:	6839      	ldr	r1, [r7, #0]
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fa49 	bl	800c5fa <USBD_CtlError>
            err++;
 800c168:	7afb      	ldrb	r3, [r7, #11]
 800c16a:	3301      	adds	r3, #1
 800c16c:	72fb      	strb	r3, [r7, #11]
          break;
 800c16e:	e007      	b.n	800c180 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fa41 	bl	800c5fa <USBD_CtlError>
          err++;
 800c178:	7afb      	ldrb	r3, [r7, #11]
 800c17a:	3301      	adds	r3, #1
 800c17c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c17e:	bf00      	nop
      }
      break;
 800c180:	e037      	b.n	800c1f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	7c1b      	ldrb	r3, [r3, #16]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d109      	bne.n	800c19e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c192:	f107 0208 	add.w	r2, r7, #8
 800c196:	4610      	mov	r0, r2
 800c198:	4798      	blx	r3
 800c19a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c19c:	e029      	b.n	800c1f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fa2a 	bl	800c5fa <USBD_CtlError>
        err++;
 800c1a6:	7afb      	ldrb	r3, [r7, #11]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	72fb      	strb	r3, [r7, #11]
      break;
 800c1ac:	e021      	b.n	800c1f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	7c1b      	ldrb	r3, [r3, #16]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10d      	bne.n	800c1d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1be:	f107 0208 	add.w	r2, r7, #8
 800c1c2:	4610      	mov	r0, r2
 800c1c4:	4798      	blx	r3
 800c1c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	2207      	movs	r2, #7
 800c1ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1d0:	e00f      	b.n	800c1f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fa10 	bl	800c5fa <USBD_CtlError>
        err++;
 800c1da:	7afb      	ldrb	r3, [r7, #11]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	72fb      	strb	r3, [r7, #11]
      break;
 800c1e0:	e007      	b.n	800c1f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 fa08 	bl	800c5fa <USBD_CtlError>
      err++;
 800c1ea:	7afb      	ldrb	r3, [r7, #11]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	72fb      	strb	r3, [r7, #11]
      break;
 800c1f0:	bf00      	nop
  }

  if (err != 0U)
 800c1f2:	7afb      	ldrb	r3, [r7, #11]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d11e      	bne.n	800c236 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	88db      	ldrh	r3, [r3, #6]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d016      	beq.n	800c22e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c200:	893b      	ldrh	r3, [r7, #8]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00e      	beq.n	800c224 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	88da      	ldrh	r2, [r3, #6]
 800c20a:	893b      	ldrh	r3, [r7, #8]
 800c20c:	4293      	cmp	r3, r2
 800c20e:	bf28      	it	cs
 800c210:	4613      	movcs	r3, r2
 800c212:	b29b      	uxth	r3, r3
 800c214:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c216:	893b      	ldrh	r3, [r7, #8]
 800c218:	461a      	mov	r2, r3
 800c21a:	68f9      	ldr	r1, [r7, #12]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fa5d 	bl	800c6dc <USBD_CtlSendData>
 800c222:	e009      	b.n	800c238 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f9e7 	bl	800c5fa <USBD_CtlError>
 800c22c:	e004      	b.n	800c238 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 faae 	bl	800c790 <USBD_CtlSendStatus>
 800c234:	e000      	b.n	800c238 <USBD_GetDescriptor+0x2cc>
    return;
 800c236:	bf00      	nop
  }
}
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop

0800c240 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	889b      	ldrh	r3, [r3, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d131      	bne.n	800c2b6 <USBD_SetAddress+0x76>
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	88db      	ldrh	r3, [r3, #6]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d12d      	bne.n	800c2b6 <USBD_SetAddress+0x76>
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	885b      	ldrh	r3, [r3, #2]
 800c25e:	2b7f      	cmp	r3, #127	; 0x7f
 800c260:	d829      	bhi.n	800c2b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	885b      	ldrh	r3, [r3, #2]
 800c266:	b2db      	uxtb	r3, r3
 800c268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c26c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c274:	b2db      	uxtb	r3, r3
 800c276:	2b03      	cmp	r3, #3
 800c278:	d104      	bne.n	800c284 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c27a:	6839      	ldr	r1, [r7, #0]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f9bc 	bl	800c5fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c282:	e01d      	b.n	800c2c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	7bfa      	ldrb	r2, [r7, #15]
 800c288:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c28c:	7bfb      	ldrb	r3, [r7, #15]
 800c28e:	4619      	mov	r1, r3
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f003 fcdb 	bl	800fc4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 fa7a 	bl	800c790 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d004      	beq.n	800c2ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2202      	movs	r2, #2
 800c2a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2aa:	e009      	b.n	800c2c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2b4:	e004      	b.n	800c2c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c2b6:	6839      	ldr	r1, [r7, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f99e 	bl	800c5fa <USBD_CtlError>
  }
}
 800c2be:	bf00      	nop
 800c2c0:	bf00      	nop
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	885b      	ldrh	r3, [r3, #2]
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	4b4e      	ldr	r3, [pc, #312]	; (800c418 <USBD_SetConfig+0x150>)
 800c2de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c2e0:	4b4d      	ldr	r3, [pc, #308]	; (800c418 <USBD_SetConfig+0x150>)
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d905      	bls.n	800c2f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 f985 	bl	800c5fa <USBD_CtlError>
    return USBD_FAIL;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e08c      	b.n	800c40e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d002      	beq.n	800c306 <USBD_SetConfig+0x3e>
 800c300:	2b03      	cmp	r3, #3
 800c302:	d029      	beq.n	800c358 <USBD_SetConfig+0x90>
 800c304:	e075      	b.n	800c3f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c306:	4b44      	ldr	r3, [pc, #272]	; (800c418 <USBD_SetConfig+0x150>)
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d020      	beq.n	800c350 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c30e:	4b42      	ldr	r3, [pc, #264]	; (800c418 <USBD_SetConfig+0x150>)
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c318:	4b3f      	ldr	r3, [pc, #252]	; (800c418 <USBD_SetConfig+0x150>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	4619      	mov	r1, r3
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7fe ffe7 	bl	800b2f2 <USBD_SetClassConfig>
 800c324:	4603      	mov	r3, r0
 800c326:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c328:	7bfb      	ldrb	r3, [r7, #15]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d008      	beq.n	800c340 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 f962 	bl	800c5fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2202      	movs	r2, #2
 800c33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c33e:	e065      	b.n	800c40c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fa25 	bl	800c790 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2203      	movs	r2, #3
 800c34a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c34e:	e05d      	b.n	800c40c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fa1d 	bl	800c790 <USBD_CtlSendStatus>
      break;
 800c356:	e059      	b.n	800c40c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c358:	4b2f      	ldr	r3, [pc, #188]	; (800c418 <USBD_SetConfig+0x150>)
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d112      	bne.n	800c386 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2202      	movs	r2, #2
 800c364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c368:	4b2b      	ldr	r3, [pc, #172]	; (800c418 <USBD_SetConfig+0x150>)
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	461a      	mov	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c372:	4b29      	ldr	r3, [pc, #164]	; (800c418 <USBD_SetConfig+0x150>)
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	4619      	mov	r1, r3
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7fe ffd6 	bl	800b32a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 fa06 	bl	800c790 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c384:	e042      	b.n	800c40c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c386:	4b24      	ldr	r3, [pc, #144]	; (800c418 <USBD_SetConfig+0x150>)
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	461a      	mov	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	429a      	cmp	r2, r3
 800c392:	d02a      	beq.n	800c3ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	4619      	mov	r1, r3
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7fe ffc4 	bl	800b32a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c3a2:	4b1d      	ldr	r3, [pc, #116]	; (800c418 <USBD_SetConfig+0x150>)
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3ac:	4b1a      	ldr	r3, [pc, #104]	; (800c418 <USBD_SetConfig+0x150>)
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f7fe ff9d 	bl	800b2f2 <USBD_SetClassConfig>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00f      	beq.n	800c3e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 f918 	bl	800c5fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7fe ffa9 	bl	800b32a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2202      	movs	r2, #2
 800c3dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c3e0:	e014      	b.n	800c40c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f9d4 	bl	800c790 <USBD_CtlSendStatus>
      break;
 800c3e8:	e010      	b.n	800c40c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 f9d0 	bl	800c790 <USBD_CtlSendStatus>
      break;
 800c3f0:	e00c      	b.n	800c40c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c3f2:	6839      	ldr	r1, [r7, #0]
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 f900 	bl	800c5fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3fa:	4b07      	ldr	r3, [pc, #28]	; (800c418 <USBD_SetConfig+0x150>)
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	4619      	mov	r1, r3
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f7fe ff92 	bl	800b32a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c406:	2303      	movs	r3, #3
 800c408:	73fb      	strb	r3, [r7, #15]
      break;
 800c40a:	bf00      	nop
  }

  return ret;
 800c40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	200004c0 	.word	0x200004c0

0800c41c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	88db      	ldrh	r3, [r3, #6]
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d004      	beq.n	800c438 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 f8e2 	bl	800c5fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c436:	e023      	b.n	800c480 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b02      	cmp	r3, #2
 800c442:	dc02      	bgt.n	800c44a <USBD_GetConfig+0x2e>
 800c444:	2b00      	cmp	r3, #0
 800c446:	dc03      	bgt.n	800c450 <USBD_GetConfig+0x34>
 800c448:	e015      	b.n	800c476 <USBD_GetConfig+0x5a>
 800c44a:	2b03      	cmp	r3, #3
 800c44c:	d00b      	beq.n	800c466 <USBD_GetConfig+0x4a>
 800c44e:	e012      	b.n	800c476 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3308      	adds	r3, #8
 800c45a:	2201      	movs	r2, #1
 800c45c:	4619      	mov	r1, r3
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 f93c 	bl	800c6dc <USBD_CtlSendData>
        break;
 800c464:	e00c      	b.n	800c480 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	3304      	adds	r3, #4
 800c46a:	2201      	movs	r2, #1
 800c46c:	4619      	mov	r1, r3
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f934 	bl	800c6dc <USBD_CtlSendData>
        break;
 800c474:	e004      	b.n	800c480 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c476:	6839      	ldr	r1, [r7, #0]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 f8be 	bl	800c5fa <USBD_CtlError>
        break;
 800c47e:	bf00      	nop
}
 800c480:	bf00      	nop
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	3b01      	subs	r3, #1
 800c49c:	2b02      	cmp	r3, #2
 800c49e:	d81e      	bhi.n	800c4de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	88db      	ldrh	r3, [r3, #6]
 800c4a4:	2b02      	cmp	r3, #2
 800c4a6:	d004      	beq.n	800c4b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c4a8:	6839      	ldr	r1, [r7, #0]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f8a5 	bl	800c5fa <USBD_CtlError>
        break;
 800c4b0:	e01a      	b.n	800c4e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d005      	beq.n	800c4ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	f043 0202 	orr.w	r2, r3, #2
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	330c      	adds	r3, #12
 800c4d2:	2202      	movs	r2, #2
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f900 	bl	800c6dc <USBD_CtlSendData>
      break;
 800c4dc:	e004      	b.n	800c4e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c4de:	6839      	ldr	r1, [r7, #0]
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 f88a 	bl	800c5fa <USBD_CtlError>
      break;
 800c4e6:	bf00      	nop
  }
}
 800c4e8:	bf00      	nop
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	885b      	ldrh	r3, [r3, #2]
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d107      	bne.n	800c512 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2201      	movs	r2, #1
 800c506:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 f940 	bl	800c790 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c510:	e013      	b.n	800c53a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	885b      	ldrh	r3, [r3, #2]
 800c516:	2b02      	cmp	r3, #2
 800c518:	d10b      	bne.n	800c532 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	889b      	ldrh	r3, [r3, #4]
 800c51e:	0a1b      	lsrs	r3, r3, #8
 800c520:	b29b      	uxth	r3, r3
 800c522:	b2da      	uxtb	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f930 	bl	800c790 <USBD_CtlSendStatus>
}
 800c530:	e003      	b.n	800c53a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f860 	bl	800c5fa <USBD_CtlError>
}
 800c53a:	bf00      	nop
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b082      	sub	sp, #8
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c552:	b2db      	uxtb	r3, r3
 800c554:	3b01      	subs	r3, #1
 800c556:	2b02      	cmp	r3, #2
 800c558:	d80b      	bhi.n	800c572 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	885b      	ldrh	r3, [r3, #2]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d10c      	bne.n	800c57c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 f910 	bl	800c790 <USBD_CtlSendStatus>
      }
      break;
 800c570:	e004      	b.n	800c57c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c572:	6839      	ldr	r1, [r7, #0]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f840 	bl	800c5fa <USBD_CtlError>
      break;
 800c57a:	e000      	b.n	800c57e <USBD_ClrFeature+0x3c>
      break;
 800c57c:	bf00      	nop
  }
}
 800c57e:	bf00      	nop
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b084      	sub	sp, #16
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	781a      	ldrb	r2, [r3, #0]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	781a      	ldrb	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f7ff fa41 	bl	800ba38 <SWAPBYTE>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f7ff fa34 	bl	800ba38 <SWAPBYTE>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c5e4:	68f8      	ldr	r0, [r7, #12]
 800c5e6:	f7ff fa27 	bl	800ba38 <SWAPBYTE>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	80da      	strh	r2, [r3, #6]
}
 800c5f2:	bf00      	nop
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b082      	sub	sp, #8
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
 800c602:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c604:	2180      	movs	r1, #128	; 0x80
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f003 fab6 	bl	800fb78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c60c:	2100      	movs	r1, #0
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f003 fab2 	bl	800fb78 <USBD_LL_StallEP>
}
 800c614:	bf00      	nop
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b086      	sub	sp, #24
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c628:	2300      	movs	r3, #0
 800c62a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d036      	beq.n	800c6a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c636:	6938      	ldr	r0, [r7, #16]
 800c638:	f000 f836 	bl	800c6a8 <USBD_GetLen>
 800c63c:	4603      	mov	r3, r0
 800c63e:	3301      	adds	r3, #1
 800c640:	b29b      	uxth	r3, r3
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	b29a      	uxth	r2, r3
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c64a:	7dfb      	ldrb	r3, [r7, #23]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	4413      	add	r3, r2
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	7812      	ldrb	r2, [r2, #0]
 800c654:	701a      	strb	r2, [r3, #0]
  idx++;
 800c656:	7dfb      	ldrb	r3, [r7, #23]
 800c658:	3301      	adds	r3, #1
 800c65a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c65c:	7dfb      	ldrb	r3, [r7, #23]
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	4413      	add	r3, r2
 800c662:	2203      	movs	r2, #3
 800c664:	701a      	strb	r2, [r3, #0]
  idx++;
 800c666:	7dfb      	ldrb	r3, [r7, #23]
 800c668:	3301      	adds	r3, #1
 800c66a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c66c:	e013      	b.n	800c696 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c66e:	7dfb      	ldrb	r3, [r7, #23]
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	4413      	add	r3, r2
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	7812      	ldrb	r2, [r2, #0]
 800c678:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	3301      	adds	r3, #1
 800c67e:	613b      	str	r3, [r7, #16]
    idx++;
 800c680:	7dfb      	ldrb	r3, [r7, #23]
 800c682:	3301      	adds	r3, #1
 800c684:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c686:	7dfb      	ldrb	r3, [r7, #23]
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	4413      	add	r3, r2
 800c68c:	2200      	movs	r2, #0
 800c68e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c690:	7dfb      	ldrb	r3, [r7, #23]
 800c692:	3301      	adds	r3, #1
 800c694:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d1e7      	bne.n	800c66e <USBD_GetString+0x52>
 800c69e:	e000      	b.n	800c6a2 <USBD_GetString+0x86>
    return;
 800c6a0:	bf00      	nop
  }
}
 800c6a2:	3718      	adds	r7, #24
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c6b8:	e005      	b.n	800c6c6 <USBD_GetLen+0x1e>
  {
    len++;
 800c6ba:	7bfb      	ldrb	r3, [r7, #15]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d1f5      	bne.n	800c6ba <USBD_GetLen+0x12>
  }

  return len;
 800c6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	2100      	movs	r1, #0
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f003 fac1 	bl	800fc8a <USBD_LL_Transmit>

  return USBD_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b084      	sub	sp, #16
 800c716:	af00      	add	r7, sp, #0
 800c718:	60f8      	str	r0, [r7, #12]
 800c71a:	60b9      	str	r1, [r7, #8]
 800c71c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	2100      	movs	r1, #0
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f003 fab0 	bl	800fc8a <USBD_LL_Transmit>

  return USBD_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2203      	movs	r2, #3
 800c744:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	2100      	movs	r1, #0
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f003 fab4 	bl	800fccc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c764:	2300      	movs	r3, #0
}
 800c766:	4618      	mov	r0, r3
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}

0800c76e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c76e:	b580      	push	{r7, lr}
 800c770:	b084      	sub	sp, #16
 800c772:	af00      	add	r7, sp, #0
 800c774:	60f8      	str	r0, [r7, #12]
 800c776:	60b9      	str	r1, [r7, #8]
 800c778:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	2100      	movs	r1, #0
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f003 faa3 	bl	800fccc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2204      	movs	r2, #4
 800c79c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f003 fa6f 	bl	800fc8a <USBD_LL_Transmit>

  return USBD_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2205      	movs	r2, #5
 800c7c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f003 fa7d 	bl	800fccc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <__NVIC_SetPriority>:
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	6039      	str	r1, [r7, #0]
 800c7e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c7e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	db0a      	blt.n	800c806 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	b2da      	uxtb	r2, r3
 800c7f4:	490c      	ldr	r1, [pc, #48]	; (800c828 <__NVIC_SetPriority+0x4c>)
 800c7f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7fa:	0112      	lsls	r2, r2, #4
 800c7fc:	b2d2      	uxtb	r2, r2
 800c7fe:	440b      	add	r3, r1
 800c800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c804:	e00a      	b.n	800c81c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	4908      	ldr	r1, [pc, #32]	; (800c82c <__NVIC_SetPriority+0x50>)
 800c80c:	79fb      	ldrb	r3, [r7, #7]
 800c80e:	f003 030f 	and.w	r3, r3, #15
 800c812:	3b04      	subs	r3, #4
 800c814:	0112      	lsls	r2, r2, #4
 800c816:	b2d2      	uxtb	r2, r2
 800c818:	440b      	add	r3, r1
 800c81a:	761a      	strb	r2, [r3, #24]
}
 800c81c:	bf00      	nop
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr
 800c828:	e000e100 	.word	0xe000e100
 800c82c:	e000ed00 	.word	0xe000ed00

0800c830 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c830:	b580      	push	{r7, lr}
 800c832:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c834:	4b05      	ldr	r3, [pc, #20]	; (800c84c <SysTick_Handler+0x1c>)
 800c836:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c838:	f001 fd4c 	bl	800e2d4 <xTaskGetSchedulerState>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d001      	beq.n	800c846 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c842:	f002 fb31 	bl	800eea8 <xPortSysTickHandler>
  }
}
 800c846:	bf00      	nop
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	e000e010 	.word	0xe000e010

0800c850 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c850:	b580      	push	{r7, lr}
 800c852:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c854:	2100      	movs	r1, #0
 800c856:	f06f 0004 	mvn.w	r0, #4
 800c85a:	f7ff ffbf 	bl	800c7dc <__NVIC_SetPriority>
#endif
}
 800c85e:	bf00      	nop
 800c860:	bd80      	pop	{r7, pc}
	...

0800c864 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c86a:	f3ef 8305 	mrs	r3, IPSR
 800c86e:	603b      	str	r3, [r7, #0]
  return(result);
 800c870:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c872:	2b00      	cmp	r3, #0
 800c874:	d003      	beq.n	800c87e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c876:	f06f 0305 	mvn.w	r3, #5
 800c87a:	607b      	str	r3, [r7, #4]
 800c87c:	e00c      	b.n	800c898 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c87e:	4b0a      	ldr	r3, [pc, #40]	; (800c8a8 <osKernelInitialize+0x44>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d105      	bne.n	800c892 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c886:	4b08      	ldr	r3, [pc, #32]	; (800c8a8 <osKernelInitialize+0x44>)
 800c888:	2201      	movs	r2, #1
 800c88a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c88c:	2300      	movs	r3, #0
 800c88e:	607b      	str	r3, [r7, #4]
 800c890:	e002      	b.n	800c898 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c892:	f04f 33ff 	mov.w	r3, #4294967295
 800c896:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c898:	687b      	ldr	r3, [r7, #4]
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	370c      	adds	r7, #12
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	200004c4 	.word	0x200004c4

0800c8ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8b2:	f3ef 8305 	mrs	r3, IPSR
 800c8b6:	603b      	str	r3, [r7, #0]
  return(result);
 800c8b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d003      	beq.n	800c8c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c8be:	f06f 0305 	mvn.w	r3, #5
 800c8c2:	607b      	str	r3, [r7, #4]
 800c8c4:	e010      	b.n	800c8e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c8c6:	4b0b      	ldr	r3, [pc, #44]	; (800c8f4 <osKernelStart+0x48>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d109      	bne.n	800c8e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c8ce:	f7ff ffbf 	bl	800c850 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c8d2:	4b08      	ldr	r3, [pc, #32]	; (800c8f4 <osKernelStart+0x48>)
 800c8d4:	2202      	movs	r2, #2
 800c8d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c8d8:	f001 f880 	bl	800d9dc <vTaskStartScheduler>
      stat = osOK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	607b      	str	r3, [r7, #4]
 800c8e0:	e002      	b.n	800c8e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c8e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c8e8:	687b      	ldr	r3, [r7, #4]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	200004c4 	.word	0x200004c4

0800c8f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08e      	sub	sp, #56	; 0x38
 800c8fc:	af04      	add	r7, sp, #16
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c904:	2300      	movs	r3, #0
 800c906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c908:	f3ef 8305 	mrs	r3, IPSR
 800c90c:	617b      	str	r3, [r7, #20]
  return(result);
 800c90e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c910:	2b00      	cmp	r3, #0
 800c912:	d17e      	bne.n	800ca12 <osThreadNew+0x11a>
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d07b      	beq.n	800ca12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c91a:	2380      	movs	r3, #128	; 0x80
 800c91c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c91e:	2318      	movs	r3, #24
 800c920:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c922:	2300      	movs	r3, #0
 800c924:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c926:	f04f 33ff 	mov.w	r3, #4294967295
 800c92a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d045      	beq.n	800c9be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d002      	beq.n	800c940 <osThreadNew+0x48>
        name = attr->name;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	699b      	ldr	r3, [r3, #24]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d002      	beq.n	800c94e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	699b      	ldr	r3, [r3, #24]
 800c94c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c94e:	69fb      	ldr	r3, [r7, #28]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d008      	beq.n	800c966 <osThreadNew+0x6e>
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	2b38      	cmp	r3, #56	; 0x38
 800c958:	d805      	bhi.n	800c966 <osThreadNew+0x6e>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	f003 0301 	and.w	r3, r3, #1
 800c962:	2b00      	cmp	r3, #0
 800c964:	d001      	beq.n	800c96a <osThreadNew+0x72>
        return (NULL);
 800c966:	2300      	movs	r3, #0
 800c968:	e054      	b.n	800ca14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	695b      	ldr	r3, [r3, #20]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d003      	beq.n	800c97a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	695b      	ldr	r3, [r3, #20]
 800c976:	089b      	lsrs	r3, r3, #2
 800c978:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00e      	beq.n	800c9a0 <osThreadNew+0xa8>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	2bbf      	cmp	r3, #191	; 0xbf
 800c988:	d90a      	bls.n	800c9a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d006      	beq.n	800c9a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	695b      	ldr	r3, [r3, #20]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d002      	beq.n	800c9a0 <osThreadNew+0xa8>
        mem = 1;
 800c99a:	2301      	movs	r3, #1
 800c99c:	61bb      	str	r3, [r7, #24]
 800c99e:	e010      	b.n	800c9c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10c      	bne.n	800c9c2 <osThreadNew+0xca>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d108      	bne.n	800c9c2 <osThreadNew+0xca>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d104      	bne.n	800c9c2 <osThreadNew+0xca>
          mem = 0;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	61bb      	str	r3, [r7, #24]
 800c9bc:	e001      	b.n	800c9c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d110      	bne.n	800c9ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c9d0:	9202      	str	r2, [sp, #8]
 800c9d2:	9301      	str	r3, [sp, #4]
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	6a3a      	ldr	r2, [r7, #32]
 800c9dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 fe0c 	bl	800d5fc <xTaskCreateStatic>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	613b      	str	r3, [r7, #16]
 800c9e8:	e013      	b.n	800ca12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d110      	bne.n	800ca12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c9f0:	6a3b      	ldr	r3, [r7, #32]
 800c9f2:	b29a      	uxth	r2, r3
 800c9f4:	f107 0310 	add.w	r3, r7, #16
 800c9f8:	9301      	str	r3, [sp, #4]
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	9300      	str	r3, [sp, #0]
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f000 fe57 	bl	800d6b6 <xTaskCreate>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d001      	beq.n	800ca12 <osThreadNew+0x11a>
            hTask = NULL;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ca12:	693b      	ldr	r3, [r7, #16]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3728      	adds	r7, #40	; 0x28
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca24:	f3ef 8305 	mrs	r3, IPSR
 800ca28:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d003      	beq.n	800ca38 <osDelay+0x1c>
    stat = osErrorISR;
 800ca30:	f06f 0305 	mvn.w	r3, #5
 800ca34:	60fb      	str	r3, [r7, #12]
 800ca36:	e007      	b.n	800ca48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d002      	beq.n	800ca48 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 ff96 	bl	800d974 <vTaskDelay>
    }
  }

  return (stat);
 800ca48:	68fb      	ldr	r3, [r7, #12]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3710      	adds	r7, #16
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
	...

0800ca54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	4a07      	ldr	r2, [pc, #28]	; (800ca80 <vApplicationGetIdleTaskMemory+0x2c>)
 800ca64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	4a06      	ldr	r2, [pc, #24]	; (800ca84 <vApplicationGetIdleTaskMemory+0x30>)
 800ca6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2280      	movs	r2, #128	; 0x80
 800ca70:	601a      	str	r2, [r3, #0]
}
 800ca72:	bf00      	nop
 800ca74:	3714      	adds	r7, #20
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	200004c8 	.word	0x200004c8
 800ca84:	20000588 	.word	0x20000588

0800ca88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	4a07      	ldr	r2, [pc, #28]	; (800cab4 <vApplicationGetTimerTaskMemory+0x2c>)
 800ca98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	4a06      	ldr	r2, [pc, #24]	; (800cab8 <vApplicationGetTimerTaskMemory+0x30>)
 800ca9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800caa6:	601a      	str	r2, [r3, #0]
}
 800caa8:	bf00      	nop
 800caaa:	3714      	adds	r7, #20
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr
 800cab4:	20000788 	.word	0x20000788
 800cab8:	20000848 	.word	0x20000848

0800cabc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f103 0208 	add.w	r2, r3, #8
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f04f 32ff 	mov.w	r2, #4294967295
 800cad4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f103 0208 	add.w	r2, r3, #8
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f103 0208 	add.w	r2, r3, #8
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800caf0:	bf00      	nop
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb0a:	bf00      	nop
 800cb0c:	370c      	adds	r7, #12
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr

0800cb16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb16:	b480      	push	{r7}
 800cb18:	b085      	sub	sp, #20
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
 800cb1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	689a      	ldr	r2, [r3, #8]
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	683a      	ldr	r2, [r7, #0]
 800cb3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	683a      	ldr	r2, [r7, #0]
 800cb40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	1c5a      	adds	r2, r3, #1
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	601a      	str	r2, [r3, #0]
}
 800cb52:	bf00      	nop
 800cb54:	3714      	adds	r7, #20
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr

0800cb5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb5e:	b480      	push	{r7}
 800cb60:	b085      	sub	sp, #20
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb74:	d103      	bne.n	800cb7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	691b      	ldr	r3, [r3, #16]
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	e00c      	b.n	800cb98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	3308      	adds	r3, #8
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	e002      	b.n	800cb8c <vListInsert+0x2e>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	60fb      	str	r3, [r7, #12]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	68ba      	ldr	r2, [r7, #8]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d2f6      	bcs.n	800cb86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	683a      	ldr	r2, [r7, #0]
 800cba6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	683a      	ldr	r2, [r7, #0]
 800cbb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	1c5a      	adds	r2, r3, #1
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	601a      	str	r2, [r3, #0]
}
 800cbc4:	bf00      	nop
 800cbc6:	3714      	adds	r7, #20
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	691b      	ldr	r3, [r3, #16]
 800cbdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	6892      	ldr	r2, [r2, #8]
 800cbe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	6852      	ldr	r2, [r2, #4]
 800cbf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d103      	bne.n	800cc04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	689a      	ldr	r2, [r3, #8]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	1e5a      	subs	r2, r3, #1
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3714      	adds	r7, #20
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10a      	bne.n	800cc4e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3c:	f383 8811 	msr	BASEPRI, r3
 800cc40:	f3bf 8f6f 	isb	sy
 800cc44:	f3bf 8f4f 	dsb	sy
 800cc48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cc4a:	bf00      	nop
 800cc4c:	e7fe      	b.n	800cc4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cc4e:	f002 f899 	bl	800ed84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc5a:	68f9      	ldr	r1, [r7, #12]
 800cc5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc5e:	fb01 f303 	mul.w	r3, r1, r3
 800cc62:	441a      	add	r2, r3
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	68f9      	ldr	r1, [r7, #12]
 800cc82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc84:	fb01 f303 	mul.w	r3, r1, r3
 800cc88:	441a      	add	r2, r3
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	22ff      	movs	r2, #255	; 0xff
 800cc92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	22ff      	movs	r2, #255	; 0xff
 800cc9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d114      	bne.n	800ccce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d01a      	beq.n	800cce2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	3310      	adds	r3, #16
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f001 f94b 	bl	800df4c <xTaskRemoveFromEventList>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d012      	beq.n	800cce2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ccbc:	4b0c      	ldr	r3, [pc, #48]	; (800ccf0 <xQueueGenericReset+0xcc>)
 800ccbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	f3bf 8f4f 	dsb	sy
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	e009      	b.n	800cce2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	3310      	adds	r3, #16
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7ff fef2 	bl	800cabc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	3324      	adds	r3, #36	; 0x24
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7ff feed 	bl	800cabc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cce2:	f002 f87f 	bl	800ede4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cce6:	2301      	movs	r3, #1
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	e000ed04 	.word	0xe000ed04

0800ccf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b08e      	sub	sp, #56	; 0x38
 800ccf8:	af02      	add	r7, sp, #8
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
 800cd00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d10a      	bne.n	800cd1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0c:	f383 8811 	msr	BASEPRI, r3
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd1a:	bf00      	nop
 800cd1c:	e7fe      	b.n	800cd1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10a      	bne.n	800cd3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd36:	bf00      	nop
 800cd38:	e7fe      	b.n	800cd38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <xQueueGenericCreateStatic+0x52>
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d001      	beq.n	800cd4a <xQueueGenericCreateStatic+0x56>
 800cd46:	2301      	movs	r3, #1
 800cd48:	e000      	b.n	800cd4c <xQueueGenericCreateStatic+0x58>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10a      	bne.n	800cd66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	623b      	str	r3, [r7, #32]
}
 800cd62:	bf00      	nop
 800cd64:	e7fe      	b.n	800cd64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d102      	bne.n	800cd72 <xQueueGenericCreateStatic+0x7e>
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d101      	bne.n	800cd76 <xQueueGenericCreateStatic+0x82>
 800cd72:	2301      	movs	r3, #1
 800cd74:	e000      	b.n	800cd78 <xQueueGenericCreateStatic+0x84>
 800cd76:	2300      	movs	r3, #0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10a      	bne.n	800cd92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd80:	f383 8811 	msr	BASEPRI, r3
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	61fb      	str	r3, [r7, #28]
}
 800cd8e:	bf00      	nop
 800cd90:	e7fe      	b.n	800cd90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd92:	2350      	movs	r3, #80	; 0x50
 800cd94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	2b50      	cmp	r3, #80	; 0x50
 800cd9a:	d00a      	beq.n	800cdb2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	61bb      	str	r3, [r7, #24]
}
 800cdae:	bf00      	nop
 800cdb0:	e7fe      	b.n	800cdb0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cdb2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00d      	beq.n	800cdda <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdcc:	9300      	str	r3, [sp, #0]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	68b9      	ldr	r1, [r7, #8]
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f000 f805 	bl	800cde4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3730      	adds	r7, #48	; 0x30
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	607a      	str	r2, [r7, #4]
 800cdf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d103      	bne.n	800ce00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	69ba      	ldr	r2, [r7, #24]
 800cdfc:	601a      	str	r2, [r3, #0]
 800cdfe:	e002      	b.n	800ce06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce12:	2101      	movs	r1, #1
 800ce14:	69b8      	ldr	r0, [r7, #24]
 800ce16:	f7ff ff05 	bl	800cc24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	78fa      	ldrb	r2, [r7, #3]
 800ce1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce22:	bf00      	nop
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
	...

0800ce2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b08e      	sub	sp, #56	; 0x38
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
 800ce38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ce42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10a      	bne.n	800ce5e <xQueueGenericSend+0x32>
	__asm volatile
 800ce48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4c:	f383 8811 	msr	BASEPRI, r3
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce5a:	bf00      	nop
 800ce5c:	e7fe      	b.n	800ce5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d103      	bne.n	800ce6c <xQueueGenericSend+0x40>
 800ce64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d101      	bne.n	800ce70 <xQueueGenericSend+0x44>
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e000      	b.n	800ce72 <xQueueGenericSend+0x46>
 800ce70:	2300      	movs	r3, #0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d10a      	bne.n	800ce8c <xQueueGenericSend+0x60>
	__asm volatile
 800ce76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7a:	f383 8811 	msr	BASEPRI, r3
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce88:	bf00      	nop
 800ce8a:	e7fe      	b.n	800ce8a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d103      	bne.n	800ce9a <xQueueGenericSend+0x6e>
 800ce92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d101      	bne.n	800ce9e <xQueueGenericSend+0x72>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e000      	b.n	800cea0 <xQueueGenericSend+0x74>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10a      	bne.n	800ceba <xQueueGenericSend+0x8e>
	__asm volatile
 800cea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea8:	f383 8811 	msr	BASEPRI, r3
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	623b      	str	r3, [r7, #32]
}
 800ceb6:	bf00      	nop
 800ceb8:	e7fe      	b.n	800ceb8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ceba:	f001 fa0b 	bl	800e2d4 <xTaskGetSchedulerState>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d102      	bne.n	800ceca <xQueueGenericSend+0x9e>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d101      	bne.n	800cece <xQueueGenericSend+0xa2>
 800ceca:	2301      	movs	r3, #1
 800cecc:	e000      	b.n	800ced0 <xQueueGenericSend+0xa4>
 800cece:	2300      	movs	r3, #0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10a      	bne.n	800ceea <xQueueGenericSend+0xbe>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	61fb      	str	r3, [r7, #28]
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ceea:	f001 ff4b 	bl	800ed84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ceee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d302      	bcc.n	800cf00 <xQueueGenericSend+0xd4>
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	d129      	bne.n	800cf54 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf00:	683a      	ldr	r2, [r7, #0]
 800cf02:	68b9      	ldr	r1, [r7, #8]
 800cf04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf06:	f000 fa0b 	bl	800d320 <prvCopyDataToQueue>
 800cf0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d010      	beq.n	800cf36 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf16:	3324      	adds	r3, #36	; 0x24
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f001 f817 	bl	800df4c <xTaskRemoveFromEventList>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d013      	beq.n	800cf4c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cf24:	4b3f      	ldr	r3, [pc, #252]	; (800d024 <xQueueGenericSend+0x1f8>)
 800cf26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf2a:	601a      	str	r2, [r3, #0]
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	f3bf 8f6f 	isb	sy
 800cf34:	e00a      	b.n	800cf4c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d007      	beq.n	800cf4c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cf3c:	4b39      	ldr	r3, [pc, #228]	; (800d024 <xQueueGenericSend+0x1f8>)
 800cf3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf42:	601a      	str	r2, [r3, #0]
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cf4c:	f001 ff4a 	bl	800ede4 <vPortExitCritical>
				return pdPASS;
 800cf50:	2301      	movs	r3, #1
 800cf52:	e063      	b.n	800d01c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d103      	bne.n	800cf62 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf5a:	f001 ff43 	bl	800ede4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	e05c      	b.n	800d01c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d106      	bne.n	800cf76 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf68:	f107 0314 	add.w	r3, r7, #20
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f001 f851 	bl	800e014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf72:	2301      	movs	r3, #1
 800cf74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf76:	f001 ff35 	bl	800ede4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf7a:	f000 fda1 	bl	800dac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf7e:	f001 ff01 	bl	800ed84 <vPortEnterCritical>
 800cf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf88:	b25b      	sxtb	r3, r3
 800cf8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf8e:	d103      	bne.n	800cf98 <xQueueGenericSend+0x16c>
 800cf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf9e:	b25b      	sxtb	r3, r3
 800cfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa4:	d103      	bne.n	800cfae <xQueueGenericSend+0x182>
 800cfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfae:	f001 ff19 	bl	800ede4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfb2:	1d3a      	adds	r2, r7, #4
 800cfb4:	f107 0314 	add.w	r3, r7, #20
 800cfb8:	4611      	mov	r1, r2
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f001 f840 	bl	800e040 <xTaskCheckForTimeOut>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d124      	bne.n	800d010 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cfc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfc8:	f000 faa2 	bl	800d510 <prvIsQueueFull>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d018      	beq.n	800d004 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd4:	3310      	adds	r3, #16
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	4611      	mov	r1, r2
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 ff66 	bl	800deac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cfe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfe2:	f000 fa2d 	bl	800d440 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cfe6:	f000 fd79 	bl	800dadc <xTaskResumeAll>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f47f af7c 	bne.w	800ceea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cff2:	4b0c      	ldr	r3, [pc, #48]	; (800d024 <xQueueGenericSend+0x1f8>)
 800cff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cff8:	601a      	str	r2, [r3, #0]
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	e772      	b.n	800ceea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d006:	f000 fa1b 	bl	800d440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d00a:	f000 fd67 	bl	800dadc <xTaskResumeAll>
 800d00e:	e76c      	b.n	800ceea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d012:	f000 fa15 	bl	800d440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d016:	f000 fd61 	bl	800dadc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d01a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3738      	adds	r7, #56	; 0x38
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	e000ed04 	.word	0xe000ed04

0800d028 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b090      	sub	sp, #64	; 0x40
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]
 800d034:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10a      	bne.n	800d056 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d052:	bf00      	nop
 800d054:	e7fe      	b.n	800d054 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d103      	bne.n	800d064 <xQueueGenericSendFromISR+0x3c>
 800d05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d060:	2b00      	cmp	r3, #0
 800d062:	d101      	bne.n	800d068 <xQueueGenericSendFromISR+0x40>
 800d064:	2301      	movs	r3, #1
 800d066:	e000      	b.n	800d06a <xQueueGenericSendFromISR+0x42>
 800d068:	2300      	movs	r3, #0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d10a      	bne.n	800d084 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d080:	bf00      	nop
 800d082:	e7fe      	b.n	800d082 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	2b02      	cmp	r3, #2
 800d088:	d103      	bne.n	800d092 <xQueueGenericSendFromISR+0x6a>
 800d08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d101      	bne.n	800d096 <xQueueGenericSendFromISR+0x6e>
 800d092:	2301      	movs	r3, #1
 800d094:	e000      	b.n	800d098 <xQueueGenericSendFromISR+0x70>
 800d096:	2300      	movs	r3, #0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10a      	bne.n	800d0b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	623b      	str	r3, [r7, #32]
}
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0b2:	f001 ff49 	bl	800ef48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d0b6:	f3ef 8211 	mrs	r2, BASEPRI
 800d0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	61fa      	str	r2, [r7, #28]
 800d0cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d0ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d302      	bcc.n	800d0e4 <xQueueGenericSendFromISR+0xbc>
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b02      	cmp	r3, #2
 800d0e2:	d12f      	bne.n	800d144 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0f4:	683a      	ldr	r2, [r7, #0]
 800d0f6:	68b9      	ldr	r1, [r7, #8]
 800d0f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0fa:	f000 f911 	bl	800d320 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d0fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d106:	d112      	bne.n	800d12e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d016      	beq.n	800d13e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d112:	3324      	adds	r3, #36	; 0x24
 800d114:	4618      	mov	r0, r3
 800d116:	f000 ff19 	bl	800df4c <xTaskRemoveFromEventList>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00e      	beq.n	800d13e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00b      	beq.n	800d13e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2201      	movs	r2, #1
 800d12a:	601a      	str	r2, [r3, #0]
 800d12c:	e007      	b.n	800d13e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d12e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d132:	3301      	adds	r3, #1
 800d134:	b2db      	uxtb	r3, r3
 800d136:	b25a      	sxtb	r2, r3
 800d138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d13e:	2301      	movs	r3, #1
 800d140:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d142:	e001      	b.n	800d148 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d144:	2300      	movs	r3, #0
 800d146:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d14a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d152:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d156:	4618      	mov	r0, r3
 800d158:	3740      	adds	r7, #64	; 0x40
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
	...

0800d160 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b08c      	sub	sp, #48	; 0x30
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d16c:	2300      	movs	r3, #0
 800d16e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	2b00      	cmp	r3, #0
 800d178:	d10a      	bne.n	800d190 <xQueueReceive+0x30>
	__asm volatile
 800d17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17e:	f383 8811 	msr	BASEPRI, r3
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	623b      	str	r3, [r7, #32]
}
 800d18c:	bf00      	nop
 800d18e:	e7fe      	b.n	800d18e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d103      	bne.n	800d19e <xQueueReceive+0x3e>
 800d196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d101      	bne.n	800d1a2 <xQueueReceive+0x42>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e000      	b.n	800d1a4 <xQueueReceive+0x44>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10a      	bne.n	800d1be <xQueueReceive+0x5e>
	__asm volatile
 800d1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ac:	f383 8811 	msr	BASEPRI, r3
 800d1b0:	f3bf 8f6f 	isb	sy
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	61fb      	str	r3, [r7, #28]
}
 800d1ba:	bf00      	nop
 800d1bc:	e7fe      	b.n	800d1bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1be:	f001 f889 	bl	800e2d4 <xTaskGetSchedulerState>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d102      	bne.n	800d1ce <xQueueReceive+0x6e>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d101      	bne.n	800d1d2 <xQueueReceive+0x72>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e000      	b.n	800d1d4 <xQueueReceive+0x74>
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d10a      	bne.n	800d1ee <xQueueReceive+0x8e>
	__asm volatile
 800d1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1dc:	f383 8811 	msr	BASEPRI, r3
 800d1e0:	f3bf 8f6f 	isb	sy
 800d1e4:	f3bf 8f4f 	dsb	sy
 800d1e8:	61bb      	str	r3, [r7, #24]
}
 800d1ea:	bf00      	nop
 800d1ec:	e7fe      	b.n	800d1ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1ee:	f001 fdc9 	bl	800ed84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d01f      	beq.n	800d23e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1fe:	68b9      	ldr	r1, [r7, #8]
 800d200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d202:	f000 f8f7 	bl	800d3f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d208:	1e5a      	subs	r2, r3, #1
 800d20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d210:	691b      	ldr	r3, [r3, #16]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00f      	beq.n	800d236 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d218:	3310      	adds	r3, #16
 800d21a:	4618      	mov	r0, r3
 800d21c:	f000 fe96 	bl	800df4c <xTaskRemoveFromEventList>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d007      	beq.n	800d236 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d226:	4b3d      	ldr	r3, [pc, #244]	; (800d31c <xQueueReceive+0x1bc>)
 800d228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d22c:	601a      	str	r2, [r3, #0]
 800d22e:	f3bf 8f4f 	dsb	sy
 800d232:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d236:	f001 fdd5 	bl	800ede4 <vPortExitCritical>
				return pdPASS;
 800d23a:	2301      	movs	r3, #1
 800d23c:	e069      	b.n	800d312 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d103      	bne.n	800d24c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d244:	f001 fdce 	bl	800ede4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d248:	2300      	movs	r3, #0
 800d24a:	e062      	b.n	800d312 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d106      	bne.n	800d260 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d252:	f107 0310 	add.w	r3, r7, #16
 800d256:	4618      	mov	r0, r3
 800d258:	f000 fedc 	bl	800e014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d25c:	2301      	movs	r3, #1
 800d25e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d260:	f001 fdc0 	bl	800ede4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d264:	f000 fc2c 	bl	800dac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d268:	f001 fd8c 	bl	800ed84 <vPortEnterCritical>
 800d26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d272:	b25b      	sxtb	r3, r3
 800d274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d278:	d103      	bne.n	800d282 <xQueueReceive+0x122>
 800d27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27c:	2200      	movs	r2, #0
 800d27e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d288:	b25b      	sxtb	r3, r3
 800d28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28e:	d103      	bne.n	800d298 <xQueueReceive+0x138>
 800d290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d292:	2200      	movs	r2, #0
 800d294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d298:	f001 fda4 	bl	800ede4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d29c:	1d3a      	adds	r2, r7, #4
 800d29e:	f107 0310 	add.w	r3, r7, #16
 800d2a2:	4611      	mov	r1, r2
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 fecb 	bl	800e040 <xTaskCheckForTimeOut>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d123      	bne.n	800d2f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2b2:	f000 f917 	bl	800d4e4 <prvIsQueueEmpty>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d017      	beq.n	800d2ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2be:	3324      	adds	r3, #36	; 0x24
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	4611      	mov	r1, r2
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f000 fdf1 	bl	800deac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d2ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2cc:	f000 f8b8 	bl	800d440 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d2d0:	f000 fc04 	bl	800dadc <xTaskResumeAll>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d189      	bne.n	800d1ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d2da:	4b10      	ldr	r3, [pc, #64]	; (800d31c <xQueueReceive+0x1bc>)
 800d2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2e0:	601a      	str	r2, [r3, #0]
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	e780      	b.n	800d1ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d2ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2ee:	f000 f8a7 	bl	800d440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2f2:	f000 fbf3 	bl	800dadc <xTaskResumeAll>
 800d2f6:	e77a      	b.n	800d1ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d2f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2fa:	f000 f8a1 	bl	800d440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2fe:	f000 fbed 	bl	800dadc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d304:	f000 f8ee 	bl	800d4e4 <prvIsQueueEmpty>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f43f af6f 	beq.w	800d1ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d310:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d312:	4618      	mov	r0, r3
 800d314:	3730      	adds	r7, #48	; 0x30
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	e000ed04 	.word	0xe000ed04

0800d320 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d32c:	2300      	movs	r3, #0
 800d32e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d334:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d10d      	bne.n	800d35a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d14d      	bne.n	800d3e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	4618      	mov	r0, r3
 800d34c:	f000 ffe0 	bl	800e310 <xTaskPriorityDisinherit>
 800d350:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2200      	movs	r2, #0
 800d356:	609a      	str	r2, [r3, #8]
 800d358:	e043      	b.n	800d3e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d119      	bne.n	800d394 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6858      	ldr	r0, [r3, #4]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d368:	461a      	mov	r2, r3
 800d36a:	68b9      	ldr	r1, [r7, #8]
 800d36c:	f002 fe5a 	bl	8010024 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	685a      	ldr	r2, [r3, #4]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d378:	441a      	add	r2, r3
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	685a      	ldr	r2, [r3, #4]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	429a      	cmp	r2, r3
 800d388:	d32b      	bcc.n	800d3e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	605a      	str	r2, [r3, #4]
 800d392:	e026      	b.n	800d3e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	68d8      	ldr	r0, [r3, #12]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d39c:	461a      	mov	r2, r3
 800d39e:	68b9      	ldr	r1, [r7, #8]
 800d3a0:	f002 fe40 	bl	8010024 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	68da      	ldr	r2, [r3, #12]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ac:	425b      	negs	r3, r3
 800d3ae:	441a      	add	r2, r3
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	68da      	ldr	r2, [r3, #12]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d207      	bcs.n	800d3d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	689a      	ldr	r2, [r3, #8]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c8:	425b      	negs	r3, r3
 800d3ca:	441a      	add	r2, r3
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d105      	bne.n	800d3e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	1c5a      	adds	r2, r3, #1
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d3ea:	697b      	ldr	r3, [r7, #20]
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3718      	adds	r7, #24
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d402:	2b00      	cmp	r3, #0
 800d404:	d018      	beq.n	800d438 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	68da      	ldr	r2, [r3, #12]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d40e:	441a      	add	r2, r3
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	68da      	ldr	r2, [r3, #12]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	689b      	ldr	r3, [r3, #8]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d303      	bcc.n	800d428 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	68d9      	ldr	r1, [r3, #12]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d430:	461a      	mov	r2, r3
 800d432:	6838      	ldr	r0, [r7, #0]
 800d434:	f002 fdf6 	bl	8010024 <memcpy>
	}
}
 800d438:	bf00      	nop
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d448:	f001 fc9c 	bl	800ed84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d452:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d454:	e011      	b.n	800d47a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d012      	beq.n	800d484 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	3324      	adds	r3, #36	; 0x24
 800d462:	4618      	mov	r0, r3
 800d464:	f000 fd72 	bl	800df4c <xTaskRemoveFromEventList>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d46e:	f000 fe49 	bl	800e104 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d472:	7bfb      	ldrb	r3, [r7, #15]
 800d474:	3b01      	subs	r3, #1
 800d476:	b2db      	uxtb	r3, r3
 800d478:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d47a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	dce9      	bgt.n	800d456 <prvUnlockQueue+0x16>
 800d482:	e000      	b.n	800d486 <prvUnlockQueue+0x46>
					break;
 800d484:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	22ff      	movs	r2, #255	; 0xff
 800d48a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d48e:	f001 fca9 	bl	800ede4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d492:	f001 fc77 	bl	800ed84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d49c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d49e:	e011      	b.n	800d4c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	691b      	ldr	r3, [r3, #16]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d012      	beq.n	800d4ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	3310      	adds	r3, #16
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f000 fd4d 	bl	800df4c <xTaskRemoveFromEventList>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d001      	beq.n	800d4bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d4b8:	f000 fe24 	bl	800e104 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d4bc:	7bbb      	ldrb	r3, [r7, #14]
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	b2db      	uxtb	r3, r3
 800d4c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	dce9      	bgt.n	800d4a0 <prvUnlockQueue+0x60>
 800d4cc:	e000      	b.n	800d4d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d4ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	22ff      	movs	r2, #255	; 0xff
 800d4d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d4d8:	f001 fc84 	bl	800ede4 <vPortExitCritical>
}
 800d4dc:	bf00      	nop
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4ec:	f001 fc4a 	bl	800ed84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d102      	bne.n	800d4fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	60fb      	str	r3, [r7, #12]
 800d4fc:	e001      	b.n	800d502 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d4fe:	2300      	movs	r3, #0
 800d500:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d502:	f001 fc6f 	bl	800ede4 <vPortExitCritical>

	return xReturn;
 800d506:	68fb      	ldr	r3, [r7, #12]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d518:	f001 fc34 	bl	800ed84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d524:	429a      	cmp	r2, r3
 800d526:	d102      	bne.n	800d52e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d528:	2301      	movs	r3, #1
 800d52a:	60fb      	str	r3, [r7, #12]
 800d52c:	e001      	b.n	800d532 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d52e:	2300      	movs	r3, #0
 800d530:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d532:	f001 fc57 	bl	800ede4 <vPortExitCritical>

	return xReturn;
 800d536:	68fb      	ldr	r3, [r7, #12]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3710      	adds	r7, #16
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d540:	b480      	push	{r7}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d54a:	2300      	movs	r3, #0
 800d54c:	60fb      	str	r3, [r7, #12]
 800d54e:	e014      	b.n	800d57a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d550:	4a0f      	ldr	r2, [pc, #60]	; (800d590 <vQueueAddToRegistry+0x50>)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d10b      	bne.n	800d574 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d55c:	490c      	ldr	r1, [pc, #48]	; (800d590 <vQueueAddToRegistry+0x50>)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	683a      	ldr	r2, [r7, #0]
 800d562:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d566:	4a0a      	ldr	r2, [pc, #40]	; (800d590 <vQueueAddToRegistry+0x50>)
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	00db      	lsls	r3, r3, #3
 800d56c:	4413      	add	r3, r2
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d572:	e006      	b.n	800d582 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	3301      	adds	r3, #1
 800d578:	60fb      	str	r3, [r7, #12]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2b07      	cmp	r3, #7
 800d57e:	d9e7      	bls.n	800d550 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d580:	bf00      	nop
 800d582:	bf00      	nop
 800d584:	3714      	adds	r7, #20
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	20000c48 	.word	0x20000c48

0800d594 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d594:	b580      	push	{r7, lr}
 800d596:	b086      	sub	sp, #24
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d5a4:	f001 fbee 	bl	800ed84 <vPortEnterCritical>
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5ae:	b25b      	sxtb	r3, r3
 800d5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b4:	d103      	bne.n	800d5be <vQueueWaitForMessageRestricted+0x2a>
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5c4:	b25b      	sxtb	r3, r3
 800d5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ca:	d103      	bne.n	800d5d4 <vQueueWaitForMessageRestricted+0x40>
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5d4:	f001 fc06 	bl	800ede4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d106      	bne.n	800d5ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	3324      	adds	r3, #36	; 0x24
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	68b9      	ldr	r1, [r7, #8]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f000 fc83 	bl	800def4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d5ee:	6978      	ldr	r0, [r7, #20]
 800d5f0:	f7ff ff26 	bl	800d440 <prvUnlockQueue>
	}
 800d5f4:	bf00      	nop
 800d5f6:	3718      	adds	r7, #24
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b08e      	sub	sp, #56	; 0x38
 800d600:	af04      	add	r7, sp, #16
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	607a      	str	r2, [r7, #4]
 800d608:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d10a      	bne.n	800d626 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d614:	f383 8811 	msr	BASEPRI, r3
 800d618:	f3bf 8f6f 	isb	sy
 800d61c:	f3bf 8f4f 	dsb	sy
 800d620:	623b      	str	r3, [r7, #32]
}
 800d622:	bf00      	nop
 800d624:	e7fe      	b.n	800d624 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d10a      	bne.n	800d642 <xTaskCreateStatic+0x46>
	__asm volatile
 800d62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d630:	f383 8811 	msr	BASEPRI, r3
 800d634:	f3bf 8f6f 	isb	sy
 800d638:	f3bf 8f4f 	dsb	sy
 800d63c:	61fb      	str	r3, [r7, #28]
}
 800d63e:	bf00      	nop
 800d640:	e7fe      	b.n	800d640 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d642:	23c0      	movs	r3, #192	; 0xc0
 800d644:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	2bc0      	cmp	r3, #192	; 0xc0
 800d64a:	d00a      	beq.n	800d662 <xTaskCreateStatic+0x66>
	__asm volatile
 800d64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d650:	f383 8811 	msr	BASEPRI, r3
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	61bb      	str	r3, [r7, #24]
}
 800d65e:	bf00      	nop
 800d660:	e7fe      	b.n	800d660 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d662:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d666:	2b00      	cmp	r3, #0
 800d668:	d01e      	beq.n	800d6a8 <xTaskCreateStatic+0xac>
 800d66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d01b      	beq.n	800d6a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d672:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d678:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	2202      	movs	r2, #2
 800d67e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d682:	2300      	movs	r3, #0
 800d684:	9303      	str	r3, [sp, #12]
 800d686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d688:	9302      	str	r3, [sp, #8]
 800d68a:	f107 0314 	add.w	r3, r7, #20
 800d68e:	9301      	str	r3, [sp, #4]
 800d690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d692:	9300      	str	r3, [sp, #0]
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	68b9      	ldr	r1, [r7, #8]
 800d69a:	68f8      	ldr	r0, [r7, #12]
 800d69c:	f000 f850 	bl	800d740 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6a2:	f000 f8f7 	bl	800d894 <prvAddNewTaskToReadyList>
 800d6a6:	e001      	b.n	800d6ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d6ac:	697b      	ldr	r3, [r7, #20]
	}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3728      	adds	r7, #40	; 0x28
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b08c      	sub	sp, #48	; 0x30
 800d6ba:	af04      	add	r7, sp, #16
 800d6bc:	60f8      	str	r0, [r7, #12]
 800d6be:	60b9      	str	r1, [r7, #8]
 800d6c0:	603b      	str	r3, [r7, #0]
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d6c6:	88fb      	ldrh	r3, [r7, #6]
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f001 fc7c 	bl	800efc8 <pvPortMalloc>
 800d6d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d00e      	beq.n	800d6f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d6d8:	20c0      	movs	r0, #192	; 0xc0
 800d6da:	f001 fc75 	bl	800efc8 <pvPortMalloc>
 800d6de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d003      	beq.n	800d6ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	697a      	ldr	r2, [r7, #20]
 800d6ea:	631a      	str	r2, [r3, #48]	; 0x30
 800d6ec:	e005      	b.n	800d6fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d6ee:	6978      	ldr	r0, [r7, #20]
 800d6f0:	f001 fd36 	bl	800f160 <vPortFree>
 800d6f4:	e001      	b.n	800d6fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d017      	beq.n	800d730 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	2200      	movs	r2, #0
 800d704:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d708:	88fa      	ldrh	r2, [r7, #6]
 800d70a:	2300      	movs	r3, #0
 800d70c:	9303      	str	r3, [sp, #12]
 800d70e:	69fb      	ldr	r3, [r7, #28]
 800d710:	9302      	str	r3, [sp, #8]
 800d712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d714:	9301      	str	r3, [sp, #4]
 800d716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d718:	9300      	str	r3, [sp, #0]
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	68b9      	ldr	r1, [r7, #8]
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f000 f80e 	bl	800d740 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d724:	69f8      	ldr	r0, [r7, #28]
 800d726:	f000 f8b5 	bl	800d894 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d72a:	2301      	movs	r3, #1
 800d72c:	61bb      	str	r3, [r7, #24]
 800d72e:	e002      	b.n	800d736 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d730:	f04f 33ff 	mov.w	r3, #4294967295
 800d734:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d736:	69bb      	ldr	r3, [r7, #24]
	}
 800d738:	4618      	mov	r0, r3
 800d73a:	3720      	adds	r7, #32
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b088      	sub	sp, #32
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	607a      	str	r2, [r7, #4]
 800d74c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d750:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	461a      	mov	r2, r3
 800d758:	21a5      	movs	r1, #165	; 0xa5
 800d75a:	f002 fc71 	bl	8010040 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d768:	3b01      	subs	r3, #1
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	4413      	add	r3, r2
 800d76e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	f023 0307 	bic.w	r3, r3, #7
 800d776:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	f003 0307 	and.w	r3, r3, #7
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00a      	beq.n	800d798 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d786:	f383 8811 	msr	BASEPRI, r3
 800d78a:	f3bf 8f6f 	isb	sy
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	617b      	str	r3, [r7, #20]
}
 800d794:	bf00      	nop
 800d796:	e7fe      	b.n	800d796 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d01f      	beq.n	800d7de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d79e:	2300      	movs	r3, #0
 800d7a0:	61fb      	str	r3, [r7, #28]
 800d7a2:	e012      	b.n	800d7ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	7819      	ldrb	r1, [r3, #0]
 800d7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	4413      	add	r3, r2
 800d7b2:	3334      	adds	r3, #52	; 0x34
 800d7b4:	460a      	mov	r2, r1
 800d7b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d7b8:	68ba      	ldr	r2, [r7, #8]
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	4413      	add	r3, r2
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d006      	beq.n	800d7d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	61fb      	str	r3, [r7, #28]
 800d7ca:	69fb      	ldr	r3, [r7, #28]
 800d7cc:	2b0f      	cmp	r3, #15
 800d7ce:	d9e9      	bls.n	800d7a4 <prvInitialiseNewTask+0x64>
 800d7d0:	e000      	b.n	800d7d4 <prvInitialiseNewTask+0x94>
			{
				break;
 800d7d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d7dc:	e003      	b.n	800d7e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e8:	2b37      	cmp	r3, #55	; 0x37
 800d7ea:	d901      	bls.n	800d7f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d7ec:	2337      	movs	r3, #55	; 0x37
 800d7ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fe:	2200      	movs	r2, #0
 800d800:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d804:	3304      	adds	r3, #4
 800d806:	4618      	mov	r0, r3
 800d808:	f7ff f978 	bl	800cafc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80e:	3318      	adds	r3, #24
 800d810:	4618      	mov	r0, r3
 800d812:	f7ff f973 	bl	800cafc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d81a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d82a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82e:	2200      	movs	r2, #0
 800d830:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	2200      	movs	r2, #0
 800d836:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d844:	3358      	adds	r3, #88	; 0x58
 800d846:	2260      	movs	r2, #96	; 0x60
 800d848:	2100      	movs	r1, #0
 800d84a:	4618      	mov	r0, r3
 800d84c:	f002 fbf8 	bl	8010040 <memset>
 800d850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d852:	4a0d      	ldr	r2, [pc, #52]	; (800d888 <prvInitialiseNewTask+0x148>)
 800d854:	65da      	str	r2, [r3, #92]	; 0x5c
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	4a0c      	ldr	r2, [pc, #48]	; (800d88c <prvInitialiseNewTask+0x14c>)
 800d85a:	661a      	str	r2, [r3, #96]	; 0x60
 800d85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85e:	4a0c      	ldr	r2, [pc, #48]	; (800d890 <prvInitialiseNewTask+0x150>)
 800d860:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d862:	683a      	ldr	r2, [r7, #0]
 800d864:	68f9      	ldr	r1, [r7, #12]
 800d866:	69b8      	ldr	r0, [r7, #24]
 800d868:	f001 f962 	bl	800eb30 <pxPortInitialiseStack>
 800d86c:	4602      	mov	r2, r0
 800d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d870:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d874:	2b00      	cmp	r3, #0
 800d876:	d002      	beq.n	800d87e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d87c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d87e:	bf00      	nop
 800d880:	3720      	adds	r7, #32
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	08014008 	.word	0x08014008
 800d88c:	08014028 	.word	0x08014028
 800d890:	08013fe8 	.word	0x08013fe8

0800d894 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d89c:	f001 fa72 	bl	800ed84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d8a0:	4b2d      	ldr	r3, [pc, #180]	; (800d958 <prvAddNewTaskToReadyList+0xc4>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	4a2c      	ldr	r2, [pc, #176]	; (800d958 <prvAddNewTaskToReadyList+0xc4>)
 800d8a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d8aa:	4b2c      	ldr	r3, [pc, #176]	; (800d95c <prvAddNewTaskToReadyList+0xc8>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d109      	bne.n	800d8c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d8b2:	4a2a      	ldr	r2, [pc, #168]	; (800d95c <prvAddNewTaskToReadyList+0xc8>)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d8b8:	4b27      	ldr	r3, [pc, #156]	; (800d958 <prvAddNewTaskToReadyList+0xc4>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d110      	bne.n	800d8e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d8c0:	f000 fc46 	bl	800e150 <prvInitialiseTaskLists>
 800d8c4:	e00d      	b.n	800d8e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d8c6:	4b26      	ldr	r3, [pc, #152]	; (800d960 <prvAddNewTaskToReadyList+0xcc>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d109      	bne.n	800d8e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d8ce:	4b23      	ldr	r3, [pc, #140]	; (800d95c <prvAddNewTaskToReadyList+0xc8>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d802      	bhi.n	800d8e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d8dc:	4a1f      	ldr	r2, [pc, #124]	; (800d95c <prvAddNewTaskToReadyList+0xc8>)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d8e2:	4b20      	ldr	r3, [pc, #128]	; (800d964 <prvAddNewTaskToReadyList+0xd0>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	4a1e      	ldr	r2, [pc, #120]	; (800d964 <prvAddNewTaskToReadyList+0xd0>)
 800d8ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d8ec:	4b1d      	ldr	r3, [pc, #116]	; (800d964 <prvAddNewTaskToReadyList+0xd0>)
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f8:	4b1b      	ldr	r3, [pc, #108]	; (800d968 <prvAddNewTaskToReadyList+0xd4>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d903      	bls.n	800d908 <prvAddNewTaskToReadyList+0x74>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d904:	4a18      	ldr	r2, [pc, #96]	; (800d968 <prvAddNewTaskToReadyList+0xd4>)
 800d906:	6013      	str	r3, [r2, #0]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d90c:	4613      	mov	r3, r2
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	4413      	add	r3, r2
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	4a15      	ldr	r2, [pc, #84]	; (800d96c <prvAddNewTaskToReadyList+0xd8>)
 800d916:	441a      	add	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	3304      	adds	r3, #4
 800d91c:	4619      	mov	r1, r3
 800d91e:	4610      	mov	r0, r2
 800d920:	f7ff f8f9 	bl	800cb16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d924:	f001 fa5e 	bl	800ede4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d928:	4b0d      	ldr	r3, [pc, #52]	; (800d960 <prvAddNewTaskToReadyList+0xcc>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00e      	beq.n	800d94e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d930:	4b0a      	ldr	r3, [pc, #40]	; (800d95c <prvAddNewTaskToReadyList+0xc8>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d207      	bcs.n	800d94e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d93e:	4b0c      	ldr	r3, [pc, #48]	; (800d970 <prvAddNewTaskToReadyList+0xdc>)
 800d940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d944:	601a      	str	r2, [r3, #0]
 800d946:	f3bf 8f4f 	dsb	sy
 800d94a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d94e:	bf00      	nop
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	2000115c 	.word	0x2000115c
 800d95c:	20000c88 	.word	0x20000c88
 800d960:	20001168 	.word	0x20001168
 800d964:	20001178 	.word	0x20001178
 800d968:	20001164 	.word	0x20001164
 800d96c:	20000c8c 	.word	0x20000c8c
 800d970:	e000ed04 	.word	0xe000ed04

0800d974 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d97c:	2300      	movs	r3, #0
 800d97e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d017      	beq.n	800d9b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d986:	4b13      	ldr	r3, [pc, #76]	; (800d9d4 <vTaskDelay+0x60>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00a      	beq.n	800d9a4 <vTaskDelay+0x30>
	__asm volatile
 800d98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	60bb      	str	r3, [r7, #8]
}
 800d9a0:	bf00      	nop
 800d9a2:	e7fe      	b.n	800d9a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d9a4:	f000 f88c 	bl	800dac0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 fd1e 	bl	800e3ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d9b0:	f000 f894 	bl	800dadc <xTaskResumeAll>
 800d9b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d107      	bne.n	800d9cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d9bc:	4b06      	ldr	r3, [pc, #24]	; (800d9d8 <vTaskDelay+0x64>)
 800d9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9c2:	601a      	str	r2, [r3, #0]
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d9cc:	bf00      	nop
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	20001184 	.word	0x20001184
 800d9d8:	e000ed04 	.word	0xe000ed04

0800d9dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b08a      	sub	sp, #40	; 0x28
 800d9e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d9ea:	463a      	mov	r2, r7
 800d9ec:	1d39      	adds	r1, r7, #4
 800d9ee:	f107 0308 	add.w	r3, r7, #8
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7ff f82e 	bl	800ca54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d9f8:	6839      	ldr	r1, [r7, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	68ba      	ldr	r2, [r7, #8]
 800d9fe:	9202      	str	r2, [sp, #8]
 800da00:	9301      	str	r3, [sp, #4]
 800da02:	2300      	movs	r3, #0
 800da04:	9300      	str	r3, [sp, #0]
 800da06:	2300      	movs	r3, #0
 800da08:	460a      	mov	r2, r1
 800da0a:	4925      	ldr	r1, [pc, #148]	; (800daa0 <vTaskStartScheduler+0xc4>)
 800da0c:	4825      	ldr	r0, [pc, #148]	; (800daa4 <vTaskStartScheduler+0xc8>)
 800da0e:	f7ff fdf5 	bl	800d5fc <xTaskCreateStatic>
 800da12:	4603      	mov	r3, r0
 800da14:	4a24      	ldr	r2, [pc, #144]	; (800daa8 <vTaskStartScheduler+0xcc>)
 800da16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800da18:	4b23      	ldr	r3, [pc, #140]	; (800daa8 <vTaskStartScheduler+0xcc>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d002      	beq.n	800da26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800da20:	2301      	movs	r3, #1
 800da22:	617b      	str	r3, [r7, #20]
 800da24:	e001      	b.n	800da2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800da26:	2300      	movs	r3, #0
 800da28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d102      	bne.n	800da36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800da30:	f000 fd30 	bl	800e494 <xTimerCreateTimerTask>
 800da34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d11d      	bne.n	800da78 <vTaskStartScheduler+0x9c>
	__asm volatile
 800da3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da40:	f383 8811 	msr	BASEPRI, r3
 800da44:	f3bf 8f6f 	isb	sy
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	613b      	str	r3, [r7, #16]
}
 800da4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800da50:	4b16      	ldr	r3, [pc, #88]	; (800daac <vTaskStartScheduler+0xd0>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	3358      	adds	r3, #88	; 0x58
 800da56:	4a16      	ldr	r2, [pc, #88]	; (800dab0 <vTaskStartScheduler+0xd4>)
 800da58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800da5a:	4b16      	ldr	r3, [pc, #88]	; (800dab4 <vTaskStartScheduler+0xd8>)
 800da5c:	f04f 32ff 	mov.w	r2, #4294967295
 800da60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800da62:	4b15      	ldr	r3, [pc, #84]	; (800dab8 <vTaskStartScheduler+0xdc>)
 800da64:	2201      	movs	r2, #1
 800da66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800da68:	4b14      	ldr	r3, [pc, #80]	; (800dabc <vTaskStartScheduler+0xe0>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800da6e:	f7f2 fed4 	bl	800081a <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800da72:	f001 f8e5 	bl	800ec40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800da76:	e00e      	b.n	800da96 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da7e:	d10a      	bne.n	800da96 <vTaskStartScheduler+0xba>
	__asm volatile
 800da80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	60fb      	str	r3, [r7, #12]
}
 800da92:	bf00      	nop
 800da94:	e7fe      	b.n	800da94 <vTaskStartScheduler+0xb8>
}
 800da96:	bf00      	nop
 800da98:	3718      	adds	r7, #24
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	08011650 	.word	0x08011650
 800daa4:	0800e11d 	.word	0x0800e11d
 800daa8:	20001180 	.word	0x20001180
 800daac:	20000c88 	.word	0x20000c88
 800dab0:	20000250 	.word	0x20000250
 800dab4:	2000117c 	.word	0x2000117c
 800dab8:	20001168 	.word	0x20001168
 800dabc:	20001160 	.word	0x20001160

0800dac0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dac0:	b480      	push	{r7}
 800dac2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dac4:	4b04      	ldr	r3, [pc, #16]	; (800dad8 <vTaskSuspendAll+0x18>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	3301      	adds	r3, #1
 800daca:	4a03      	ldr	r2, [pc, #12]	; (800dad8 <vTaskSuspendAll+0x18>)
 800dacc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dace:	bf00      	nop
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	20001184 	.word	0x20001184

0800dadc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dae2:	2300      	movs	r3, #0
 800dae4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dae6:	2300      	movs	r3, #0
 800dae8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800daea:	4b42      	ldr	r3, [pc, #264]	; (800dbf4 <xTaskResumeAll+0x118>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d10a      	bne.n	800db08 <xTaskResumeAll+0x2c>
	__asm volatile
 800daf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf6:	f383 8811 	msr	BASEPRI, r3
 800dafa:	f3bf 8f6f 	isb	sy
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	603b      	str	r3, [r7, #0]
}
 800db04:	bf00      	nop
 800db06:	e7fe      	b.n	800db06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800db08:	f001 f93c 	bl	800ed84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800db0c:	4b39      	ldr	r3, [pc, #228]	; (800dbf4 <xTaskResumeAll+0x118>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	3b01      	subs	r3, #1
 800db12:	4a38      	ldr	r2, [pc, #224]	; (800dbf4 <xTaskResumeAll+0x118>)
 800db14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db16:	4b37      	ldr	r3, [pc, #220]	; (800dbf4 <xTaskResumeAll+0x118>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d162      	bne.n	800dbe4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db1e:	4b36      	ldr	r3, [pc, #216]	; (800dbf8 <xTaskResumeAll+0x11c>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d05e      	beq.n	800dbe4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db26:	e02f      	b.n	800db88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db28:	4b34      	ldr	r3, [pc, #208]	; (800dbfc <xTaskResumeAll+0x120>)
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	3318      	adds	r3, #24
 800db34:	4618      	mov	r0, r3
 800db36:	f7ff f84b 	bl	800cbd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	3304      	adds	r3, #4
 800db3e:	4618      	mov	r0, r3
 800db40:	f7ff f846 	bl	800cbd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db48:	4b2d      	ldr	r3, [pc, #180]	; (800dc00 <xTaskResumeAll+0x124>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d903      	bls.n	800db58 <xTaskResumeAll+0x7c>
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db54:	4a2a      	ldr	r2, [pc, #168]	; (800dc00 <xTaskResumeAll+0x124>)
 800db56:	6013      	str	r3, [r2, #0]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db5c:	4613      	mov	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	4413      	add	r3, r2
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	4a27      	ldr	r2, [pc, #156]	; (800dc04 <xTaskResumeAll+0x128>)
 800db66:	441a      	add	r2, r3
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	3304      	adds	r3, #4
 800db6c:	4619      	mov	r1, r3
 800db6e:	4610      	mov	r0, r2
 800db70:	f7fe ffd1 	bl	800cb16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db78:	4b23      	ldr	r3, [pc, #140]	; (800dc08 <xTaskResumeAll+0x12c>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db7e:	429a      	cmp	r2, r3
 800db80:	d302      	bcc.n	800db88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800db82:	4b22      	ldr	r3, [pc, #136]	; (800dc0c <xTaskResumeAll+0x130>)
 800db84:	2201      	movs	r2, #1
 800db86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db88:	4b1c      	ldr	r3, [pc, #112]	; (800dbfc <xTaskResumeAll+0x120>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d1cb      	bne.n	800db28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d001      	beq.n	800db9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db96:	f000 fb7d 	bl	800e294 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db9a:	4b1d      	ldr	r3, [pc, #116]	; (800dc10 <xTaskResumeAll+0x134>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d010      	beq.n	800dbc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dba6:	f000 f847 	bl	800dc38 <xTaskIncrementTick>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d002      	beq.n	800dbb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dbb0:	4b16      	ldr	r3, [pc, #88]	; (800dc0c <xTaskResumeAll+0x130>)
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d1f1      	bne.n	800dba6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dbc2:	4b13      	ldr	r3, [pc, #76]	; (800dc10 <xTaskResumeAll+0x134>)
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dbc8:	4b10      	ldr	r3, [pc, #64]	; (800dc0c <xTaskResumeAll+0x130>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d009      	beq.n	800dbe4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dbd4:	4b0f      	ldr	r3, [pc, #60]	; (800dc14 <xTaskResumeAll+0x138>)
 800dbd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbda:	601a      	str	r2, [r3, #0]
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dbe4:	f001 f8fe 	bl	800ede4 <vPortExitCritical>

	return xAlreadyYielded;
 800dbe8:	68bb      	ldr	r3, [r7, #8]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	20001184 	.word	0x20001184
 800dbf8:	2000115c 	.word	0x2000115c
 800dbfc:	2000111c 	.word	0x2000111c
 800dc00:	20001164 	.word	0x20001164
 800dc04:	20000c8c 	.word	0x20000c8c
 800dc08:	20000c88 	.word	0x20000c88
 800dc0c:	20001170 	.word	0x20001170
 800dc10:	2000116c 	.word	0x2000116c
 800dc14:	e000ed04 	.word	0xe000ed04

0800dc18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dc1e:	4b05      	ldr	r3, [pc, #20]	; (800dc34 <xTaskGetTickCount+0x1c>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dc24:	687b      	ldr	r3, [r7, #4]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	370c      	adds	r7, #12
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	20001160 	.word	0x20001160

0800dc38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b086      	sub	sp, #24
 800dc3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc42:	4b4f      	ldr	r3, [pc, #316]	; (800dd80 <xTaskIncrementTick+0x148>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	f040 808f 	bne.w	800dd6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc4c:	4b4d      	ldr	r3, [pc, #308]	; (800dd84 <xTaskIncrementTick+0x14c>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	3301      	adds	r3, #1
 800dc52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc54:	4a4b      	ldr	r2, [pc, #300]	; (800dd84 <xTaskIncrementTick+0x14c>)
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d120      	bne.n	800dca2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dc60:	4b49      	ldr	r3, [pc, #292]	; (800dd88 <xTaskIncrementTick+0x150>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00a      	beq.n	800dc80 <xTaskIncrementTick+0x48>
	__asm volatile
 800dc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6e:	f383 8811 	msr	BASEPRI, r3
 800dc72:	f3bf 8f6f 	isb	sy
 800dc76:	f3bf 8f4f 	dsb	sy
 800dc7a:	603b      	str	r3, [r7, #0]
}
 800dc7c:	bf00      	nop
 800dc7e:	e7fe      	b.n	800dc7e <xTaskIncrementTick+0x46>
 800dc80:	4b41      	ldr	r3, [pc, #260]	; (800dd88 <xTaskIncrementTick+0x150>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	60fb      	str	r3, [r7, #12]
 800dc86:	4b41      	ldr	r3, [pc, #260]	; (800dd8c <xTaskIncrementTick+0x154>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a3f      	ldr	r2, [pc, #252]	; (800dd88 <xTaskIncrementTick+0x150>)
 800dc8c:	6013      	str	r3, [r2, #0]
 800dc8e:	4a3f      	ldr	r2, [pc, #252]	; (800dd8c <xTaskIncrementTick+0x154>)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6013      	str	r3, [r2, #0]
 800dc94:	4b3e      	ldr	r3, [pc, #248]	; (800dd90 <xTaskIncrementTick+0x158>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3301      	adds	r3, #1
 800dc9a:	4a3d      	ldr	r2, [pc, #244]	; (800dd90 <xTaskIncrementTick+0x158>)
 800dc9c:	6013      	str	r3, [r2, #0]
 800dc9e:	f000 faf9 	bl	800e294 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dca2:	4b3c      	ldr	r3, [pc, #240]	; (800dd94 <xTaskIncrementTick+0x15c>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	693a      	ldr	r2, [r7, #16]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d349      	bcc.n	800dd40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcac:	4b36      	ldr	r3, [pc, #216]	; (800dd88 <xTaskIncrementTick+0x150>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d104      	bne.n	800dcc0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcb6:	4b37      	ldr	r3, [pc, #220]	; (800dd94 <xTaskIncrementTick+0x15c>)
 800dcb8:	f04f 32ff 	mov.w	r2, #4294967295
 800dcbc:	601a      	str	r2, [r3, #0]
					break;
 800dcbe:	e03f      	b.n	800dd40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcc0:	4b31      	ldr	r3, [pc, #196]	; (800dd88 <xTaskIncrementTick+0x150>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	68db      	ldr	r3, [r3, #12]
 800dcc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dcd0:	693a      	ldr	r2, [r7, #16]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d203      	bcs.n	800dce0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dcd8:	4a2e      	ldr	r2, [pc, #184]	; (800dd94 <xTaskIncrementTick+0x15c>)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dcde:	e02f      	b.n	800dd40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	3304      	adds	r3, #4
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7fe ff73 	bl	800cbd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d004      	beq.n	800dcfc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	3318      	adds	r3, #24
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fe ff6a 	bl	800cbd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd00:	4b25      	ldr	r3, [pc, #148]	; (800dd98 <xTaskIncrementTick+0x160>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d903      	bls.n	800dd10 <xTaskIncrementTick+0xd8>
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd0c:	4a22      	ldr	r2, [pc, #136]	; (800dd98 <xTaskIncrementTick+0x160>)
 800dd0e:	6013      	str	r3, [r2, #0]
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd14:	4613      	mov	r3, r2
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	4413      	add	r3, r2
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	4a1f      	ldr	r2, [pc, #124]	; (800dd9c <xTaskIncrementTick+0x164>)
 800dd1e:	441a      	add	r2, r3
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	3304      	adds	r3, #4
 800dd24:	4619      	mov	r1, r3
 800dd26:	4610      	mov	r0, r2
 800dd28:	f7fe fef5 	bl	800cb16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd30:	4b1b      	ldr	r3, [pc, #108]	; (800dda0 <xTaskIncrementTick+0x168>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d3b8      	bcc.n	800dcac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd3e:	e7b5      	b.n	800dcac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dd40:	4b17      	ldr	r3, [pc, #92]	; (800dda0 <xTaskIncrementTick+0x168>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd46:	4915      	ldr	r1, [pc, #84]	; (800dd9c <xTaskIncrementTick+0x164>)
 800dd48:	4613      	mov	r3, r2
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	4413      	add	r3, r2
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	440b      	add	r3, r1
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d901      	bls.n	800dd5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dd5c:	4b11      	ldr	r3, [pc, #68]	; (800dda4 <xTaskIncrementTick+0x16c>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d007      	beq.n	800dd74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dd64:	2301      	movs	r3, #1
 800dd66:	617b      	str	r3, [r7, #20]
 800dd68:	e004      	b.n	800dd74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dd6a:	4b0f      	ldr	r3, [pc, #60]	; (800dda8 <xTaskIncrementTick+0x170>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	4a0d      	ldr	r2, [pc, #52]	; (800dda8 <xTaskIncrementTick+0x170>)
 800dd72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dd74:	697b      	ldr	r3, [r7, #20]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3718      	adds	r7, #24
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	20001184 	.word	0x20001184
 800dd84:	20001160 	.word	0x20001160
 800dd88:	20001114 	.word	0x20001114
 800dd8c:	20001118 	.word	0x20001118
 800dd90:	20001174 	.word	0x20001174
 800dd94:	2000117c 	.word	0x2000117c
 800dd98:	20001164 	.word	0x20001164
 800dd9c:	20000c8c 	.word	0x20000c8c
 800dda0:	20000c88 	.word	0x20000c88
 800dda4:	20001170 	.word	0x20001170
 800dda8:	2000116c 	.word	0x2000116c

0800ddac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ddb2:	4b36      	ldr	r3, [pc, #216]	; (800de8c <vTaskSwitchContext+0xe0>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d003      	beq.n	800ddc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ddba:	4b35      	ldr	r3, [pc, #212]	; (800de90 <vTaskSwitchContext+0xe4>)
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ddc0:	e05f      	b.n	800de82 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800ddc2:	4b33      	ldr	r3, [pc, #204]	; (800de90 <vTaskSwitchContext+0xe4>)
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ddc8:	f7f2 fd2e 	bl	8000828 <getRunTimeCounterValue>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	4a31      	ldr	r2, [pc, #196]	; (800de94 <vTaskSwitchContext+0xe8>)
 800ddd0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ddd2:	4b30      	ldr	r3, [pc, #192]	; (800de94 <vTaskSwitchContext+0xe8>)
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	4b30      	ldr	r3, [pc, #192]	; (800de98 <vTaskSwitchContext+0xec>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d909      	bls.n	800ddf2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ddde:	4b2f      	ldr	r3, [pc, #188]	; (800de9c <vTaskSwitchContext+0xf0>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dde4:	4a2b      	ldr	r2, [pc, #172]	; (800de94 <vTaskSwitchContext+0xe8>)
 800dde6:	6810      	ldr	r0, [r2, #0]
 800dde8:	4a2b      	ldr	r2, [pc, #172]	; (800de98 <vTaskSwitchContext+0xec>)
 800ddea:	6812      	ldr	r2, [r2, #0]
 800ddec:	1a82      	subs	r2, r0, r2
 800ddee:	440a      	add	r2, r1
 800ddf0:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800ddf2:	4b28      	ldr	r3, [pc, #160]	; (800de94 <vTaskSwitchContext+0xe8>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4a28      	ldr	r2, [pc, #160]	; (800de98 <vTaskSwitchContext+0xec>)
 800ddf8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddfa:	4b29      	ldr	r3, [pc, #164]	; (800dea0 <vTaskSwitchContext+0xf4>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	60fb      	str	r3, [r7, #12]
 800de00:	e010      	b.n	800de24 <vTaskSwitchContext+0x78>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d10a      	bne.n	800de1e <vTaskSwitchContext+0x72>
	__asm volatile
 800de08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0c:	f383 8811 	msr	BASEPRI, r3
 800de10:	f3bf 8f6f 	isb	sy
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	607b      	str	r3, [r7, #4]
}
 800de1a:	bf00      	nop
 800de1c:	e7fe      	b.n	800de1c <vTaskSwitchContext+0x70>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	3b01      	subs	r3, #1
 800de22:	60fb      	str	r3, [r7, #12]
 800de24:	491f      	ldr	r1, [pc, #124]	; (800dea4 <vTaskSwitchContext+0xf8>)
 800de26:	68fa      	ldr	r2, [r7, #12]
 800de28:	4613      	mov	r3, r2
 800de2a:	009b      	lsls	r3, r3, #2
 800de2c:	4413      	add	r3, r2
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	440b      	add	r3, r1
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d0e4      	beq.n	800de02 <vTaskSwitchContext+0x56>
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	4613      	mov	r3, r2
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	4413      	add	r3, r2
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	4a18      	ldr	r2, [pc, #96]	; (800dea4 <vTaskSwitchContext+0xf8>)
 800de44:	4413      	add	r3, r2
 800de46:	60bb      	str	r3, [r7, #8]
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	685b      	ldr	r3, [r3, #4]
 800de4c:	685a      	ldr	r2, [r3, #4]
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	605a      	str	r2, [r3, #4]
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	685a      	ldr	r2, [r3, #4]
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	3308      	adds	r3, #8
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d104      	bne.n	800de68 <vTaskSwitchContext+0xbc>
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	685a      	ldr	r2, [r3, #4]
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	605a      	str	r2, [r3, #4]
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	68db      	ldr	r3, [r3, #12]
 800de6e:	4a0b      	ldr	r2, [pc, #44]	; (800de9c <vTaskSwitchContext+0xf0>)
 800de70:	6013      	str	r3, [r2, #0]
 800de72:	4a0b      	ldr	r2, [pc, #44]	; (800dea0 <vTaskSwitchContext+0xf4>)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800de78:	4b08      	ldr	r3, [pc, #32]	; (800de9c <vTaskSwitchContext+0xf0>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	3358      	adds	r3, #88	; 0x58
 800de7e:	4a0a      	ldr	r2, [pc, #40]	; (800dea8 <vTaskSwitchContext+0xfc>)
 800de80:	6013      	str	r3, [r2, #0]
}
 800de82:	bf00      	nop
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	20001184 	.word	0x20001184
 800de90:	20001170 	.word	0x20001170
 800de94:	2000118c 	.word	0x2000118c
 800de98:	20001188 	.word	0x20001188
 800de9c:	20000c88 	.word	0x20000c88
 800dea0:	20001164 	.word	0x20001164
 800dea4:	20000c8c 	.word	0x20000c8c
 800dea8:	20000250 	.word	0x20000250

0800deac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d10a      	bne.n	800ded2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800debc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec0:	f383 8811 	msr	BASEPRI, r3
 800dec4:	f3bf 8f6f 	isb	sy
 800dec8:	f3bf 8f4f 	dsb	sy
 800decc:	60fb      	str	r3, [r7, #12]
}
 800dece:	bf00      	nop
 800ded0:	e7fe      	b.n	800ded0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ded2:	4b07      	ldr	r3, [pc, #28]	; (800def0 <vTaskPlaceOnEventList+0x44>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	3318      	adds	r3, #24
 800ded8:	4619      	mov	r1, r3
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f7fe fe3f 	bl	800cb5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dee0:	2101      	movs	r1, #1
 800dee2:	6838      	ldr	r0, [r7, #0]
 800dee4:	f000 fa82 	bl	800e3ec <prvAddCurrentTaskToDelayedList>
}
 800dee8:	bf00      	nop
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	20000c88 	.word	0x20000c88

0800def4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d10a      	bne.n	800df1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800df06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0a:	f383 8811 	msr	BASEPRI, r3
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	f3bf 8f4f 	dsb	sy
 800df16:	617b      	str	r3, [r7, #20]
}
 800df18:	bf00      	nop
 800df1a:	e7fe      	b.n	800df1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df1c:	4b0a      	ldr	r3, [pc, #40]	; (800df48 <vTaskPlaceOnEventListRestricted+0x54>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	3318      	adds	r3, #24
 800df22:	4619      	mov	r1, r3
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f7fe fdf6 	bl	800cb16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800df30:	f04f 33ff 	mov.w	r3, #4294967295
 800df34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800df36:	6879      	ldr	r1, [r7, #4]
 800df38:	68b8      	ldr	r0, [r7, #8]
 800df3a:	f000 fa57 	bl	800e3ec <prvAddCurrentTaskToDelayedList>
	}
 800df3e:	bf00      	nop
 800df40:	3718      	adds	r7, #24
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	20000c88 	.word	0x20000c88

0800df4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b086      	sub	sp, #24
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10a      	bne.n	800df78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800df62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	60fb      	str	r3, [r7, #12]
}
 800df74:	bf00      	nop
 800df76:	e7fe      	b.n	800df76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	3318      	adds	r3, #24
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7fe fe27 	bl	800cbd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df82:	4b1e      	ldr	r3, [pc, #120]	; (800dffc <xTaskRemoveFromEventList+0xb0>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d11d      	bne.n	800dfc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	3304      	adds	r3, #4
 800df8e:	4618      	mov	r0, r3
 800df90:	f7fe fe1e 	bl	800cbd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df98:	4b19      	ldr	r3, [pc, #100]	; (800e000 <xTaskRemoveFromEventList+0xb4>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d903      	bls.n	800dfa8 <xTaskRemoveFromEventList+0x5c>
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa4:	4a16      	ldr	r2, [pc, #88]	; (800e000 <xTaskRemoveFromEventList+0xb4>)
 800dfa6:	6013      	str	r3, [r2, #0]
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfac:	4613      	mov	r3, r2
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	4413      	add	r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	4a13      	ldr	r2, [pc, #76]	; (800e004 <xTaskRemoveFromEventList+0xb8>)
 800dfb6:	441a      	add	r2, r3
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	3304      	adds	r3, #4
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	4610      	mov	r0, r2
 800dfc0:	f7fe fda9 	bl	800cb16 <vListInsertEnd>
 800dfc4:	e005      	b.n	800dfd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	3318      	adds	r3, #24
 800dfca:	4619      	mov	r1, r3
 800dfcc:	480e      	ldr	r0, [pc, #56]	; (800e008 <xTaskRemoveFromEventList+0xbc>)
 800dfce:	f7fe fda2 	bl	800cb16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd6:	4b0d      	ldr	r3, [pc, #52]	; (800e00c <xTaskRemoveFromEventList+0xc0>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d905      	bls.n	800dfec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dfe4:	4b0a      	ldr	r3, [pc, #40]	; (800e010 <xTaskRemoveFromEventList+0xc4>)
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	601a      	str	r2, [r3, #0]
 800dfea:	e001      	b.n	800dff0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dfec:	2300      	movs	r3, #0
 800dfee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dff0:	697b      	ldr	r3, [r7, #20]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3718      	adds	r7, #24
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	20001184 	.word	0x20001184
 800e000:	20001164 	.word	0x20001164
 800e004:	20000c8c 	.word	0x20000c8c
 800e008:	2000111c 	.word	0x2000111c
 800e00c:	20000c88 	.word	0x20000c88
 800e010:	20001170 	.word	0x20001170

0800e014 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e01c:	4b06      	ldr	r3, [pc, #24]	; (800e038 <vTaskInternalSetTimeOutState+0x24>)
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e024:	4b05      	ldr	r3, [pc, #20]	; (800e03c <vTaskInternalSetTimeOutState+0x28>)
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	605a      	str	r2, [r3, #4]
}
 800e02c:	bf00      	nop
 800e02e:	370c      	adds	r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	20001174 	.word	0x20001174
 800e03c:	20001160 	.word	0x20001160

0800e040 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b088      	sub	sp, #32
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d10a      	bne.n	800e066 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e054:	f383 8811 	msr	BASEPRI, r3
 800e058:	f3bf 8f6f 	isb	sy
 800e05c:	f3bf 8f4f 	dsb	sy
 800e060:	613b      	str	r3, [r7, #16]
}
 800e062:	bf00      	nop
 800e064:	e7fe      	b.n	800e064 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d10a      	bne.n	800e082 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e070:	f383 8811 	msr	BASEPRI, r3
 800e074:	f3bf 8f6f 	isb	sy
 800e078:	f3bf 8f4f 	dsb	sy
 800e07c:	60fb      	str	r3, [r7, #12]
}
 800e07e:	bf00      	nop
 800e080:	e7fe      	b.n	800e080 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e082:	f000 fe7f 	bl	800ed84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e086:	4b1d      	ldr	r3, [pc, #116]	; (800e0fc <xTaskCheckForTimeOut+0xbc>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	69ba      	ldr	r2, [r7, #24]
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e09e:	d102      	bne.n	800e0a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	61fb      	str	r3, [r7, #28]
 800e0a4:	e023      	b.n	800e0ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	4b15      	ldr	r3, [pc, #84]	; (800e100 <xTaskCheckForTimeOut+0xc0>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d007      	beq.n	800e0c2 <xTaskCheckForTimeOut+0x82>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	69ba      	ldr	r2, [r7, #24]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d302      	bcc.n	800e0c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	61fb      	str	r3, [r7, #28]
 800e0c0:	e015      	b.n	800e0ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	697a      	ldr	r2, [r7, #20]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d20b      	bcs.n	800e0e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	1ad2      	subs	r2, r2, r3
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f7ff ff9b 	bl	800e014 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	61fb      	str	r3, [r7, #28]
 800e0e2:	e004      	b.n	800e0ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e0ee:	f000 fe79 	bl	800ede4 <vPortExitCritical>

	return xReturn;
 800e0f2:	69fb      	ldr	r3, [r7, #28]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3720      	adds	r7, #32
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	20001160 	.word	0x20001160
 800e100:	20001174 	.word	0x20001174

0800e104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e104:	b480      	push	{r7}
 800e106:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e108:	4b03      	ldr	r3, [pc, #12]	; (800e118 <vTaskMissedYield+0x14>)
 800e10a:	2201      	movs	r2, #1
 800e10c:	601a      	str	r2, [r3, #0]
}
 800e10e:	bf00      	nop
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr
 800e118:	20001170 	.word	0x20001170

0800e11c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e124:	f000 f854 	bl	800e1d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e128:	4b07      	ldr	r3, [pc, #28]	; (800e148 <prvIdleTask+0x2c>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d907      	bls.n	800e140 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e130:	4b06      	ldr	r3, [pc, #24]	; (800e14c <prvIdleTask+0x30>)
 800e132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e136:	601a      	str	r2, [r3, #0]
 800e138:	f3bf 8f4f 	dsb	sy
 800e13c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e140:	f7f2 fb7e 	bl	8000840 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e144:	e7ee      	b.n	800e124 <prvIdleTask+0x8>
 800e146:	bf00      	nop
 800e148:	20000c8c 	.word	0x20000c8c
 800e14c:	e000ed04 	.word	0xe000ed04

0800e150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e156:	2300      	movs	r3, #0
 800e158:	607b      	str	r3, [r7, #4]
 800e15a:	e00c      	b.n	800e176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	4613      	mov	r3, r2
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	4413      	add	r3, r2
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	4a12      	ldr	r2, [pc, #72]	; (800e1b0 <prvInitialiseTaskLists+0x60>)
 800e168:	4413      	add	r3, r2
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fe fca6 	bl	800cabc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	3301      	adds	r3, #1
 800e174:	607b      	str	r3, [r7, #4]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2b37      	cmp	r3, #55	; 0x37
 800e17a:	d9ef      	bls.n	800e15c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e17c:	480d      	ldr	r0, [pc, #52]	; (800e1b4 <prvInitialiseTaskLists+0x64>)
 800e17e:	f7fe fc9d 	bl	800cabc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e182:	480d      	ldr	r0, [pc, #52]	; (800e1b8 <prvInitialiseTaskLists+0x68>)
 800e184:	f7fe fc9a 	bl	800cabc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e188:	480c      	ldr	r0, [pc, #48]	; (800e1bc <prvInitialiseTaskLists+0x6c>)
 800e18a:	f7fe fc97 	bl	800cabc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e18e:	480c      	ldr	r0, [pc, #48]	; (800e1c0 <prvInitialiseTaskLists+0x70>)
 800e190:	f7fe fc94 	bl	800cabc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e194:	480b      	ldr	r0, [pc, #44]	; (800e1c4 <prvInitialiseTaskLists+0x74>)
 800e196:	f7fe fc91 	bl	800cabc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e19a:	4b0b      	ldr	r3, [pc, #44]	; (800e1c8 <prvInitialiseTaskLists+0x78>)
 800e19c:	4a05      	ldr	r2, [pc, #20]	; (800e1b4 <prvInitialiseTaskLists+0x64>)
 800e19e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e1a0:	4b0a      	ldr	r3, [pc, #40]	; (800e1cc <prvInitialiseTaskLists+0x7c>)
 800e1a2:	4a05      	ldr	r2, [pc, #20]	; (800e1b8 <prvInitialiseTaskLists+0x68>)
 800e1a4:	601a      	str	r2, [r3, #0]
}
 800e1a6:	bf00      	nop
 800e1a8:	3708      	adds	r7, #8
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	20000c8c 	.word	0x20000c8c
 800e1b4:	200010ec 	.word	0x200010ec
 800e1b8:	20001100 	.word	0x20001100
 800e1bc:	2000111c 	.word	0x2000111c
 800e1c0:	20001130 	.word	0x20001130
 800e1c4:	20001148 	.word	0x20001148
 800e1c8:	20001114 	.word	0x20001114
 800e1cc:	20001118 	.word	0x20001118

0800e1d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e1d6:	e019      	b.n	800e20c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e1d8:	f000 fdd4 	bl	800ed84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1dc:	4b10      	ldr	r3, [pc, #64]	; (800e220 <prvCheckTasksWaitingTermination+0x50>)
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fe fcf1 	bl	800cbd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e1ee:	4b0d      	ldr	r3, [pc, #52]	; (800e224 <prvCheckTasksWaitingTermination+0x54>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	3b01      	subs	r3, #1
 800e1f4:	4a0b      	ldr	r2, [pc, #44]	; (800e224 <prvCheckTasksWaitingTermination+0x54>)
 800e1f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e1f8:	4b0b      	ldr	r3, [pc, #44]	; (800e228 <prvCheckTasksWaitingTermination+0x58>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	3b01      	subs	r3, #1
 800e1fe:	4a0a      	ldr	r2, [pc, #40]	; (800e228 <prvCheckTasksWaitingTermination+0x58>)
 800e200:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e202:	f000 fdef 	bl	800ede4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 f810 	bl	800e22c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e20c:	4b06      	ldr	r3, [pc, #24]	; (800e228 <prvCheckTasksWaitingTermination+0x58>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d1e1      	bne.n	800e1d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e214:	bf00      	nop
 800e216:	bf00      	nop
 800e218:	3708      	adds	r7, #8
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	20001130 	.word	0x20001130
 800e224:	2000115c 	.word	0x2000115c
 800e228:	20001144 	.word	0x20001144

0800e22c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	3358      	adds	r3, #88	; 0x58
 800e238:	4618      	mov	r0, r3
 800e23a:	f002 f825 	bl	8010288 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e244:	2b00      	cmp	r3, #0
 800e246:	d108      	bne.n	800e25a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e24c:	4618      	mov	r0, r3
 800e24e:	f000 ff87 	bl	800f160 <vPortFree>
				vPortFree( pxTCB );
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 ff84 	bl	800f160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e258:	e018      	b.n	800e28c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e260:	2b01      	cmp	r3, #1
 800e262:	d103      	bne.n	800e26c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 ff7b 	bl	800f160 <vPortFree>
	}
 800e26a:	e00f      	b.n	800e28c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e272:	2b02      	cmp	r3, #2
 800e274:	d00a      	beq.n	800e28c <prvDeleteTCB+0x60>
	__asm volatile
 800e276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27a:	f383 8811 	msr	BASEPRI, r3
 800e27e:	f3bf 8f6f 	isb	sy
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	60fb      	str	r3, [r7, #12]
}
 800e288:	bf00      	nop
 800e28a:	e7fe      	b.n	800e28a <prvDeleteTCB+0x5e>
	}
 800e28c:	bf00      	nop
 800e28e:	3710      	adds	r7, #16
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e29a:	4b0c      	ldr	r3, [pc, #48]	; (800e2cc <prvResetNextTaskUnblockTime+0x38>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d104      	bne.n	800e2ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e2a4:	4b0a      	ldr	r3, [pc, #40]	; (800e2d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e2aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e2ac:	e008      	b.n	800e2c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ae:	4b07      	ldr	r3, [pc, #28]	; (800e2cc <prvResetNextTaskUnblockTime+0x38>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	4a04      	ldr	r2, [pc, #16]	; (800e2d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e2be:	6013      	str	r3, [r2, #0]
}
 800e2c0:	bf00      	nop
 800e2c2:	370c      	adds	r7, #12
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr
 800e2cc:	20001114 	.word	0x20001114
 800e2d0:	2000117c 	.word	0x2000117c

0800e2d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e2da:	4b0b      	ldr	r3, [pc, #44]	; (800e308 <xTaskGetSchedulerState+0x34>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d102      	bne.n	800e2e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	607b      	str	r3, [r7, #4]
 800e2e6:	e008      	b.n	800e2fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2e8:	4b08      	ldr	r3, [pc, #32]	; (800e30c <xTaskGetSchedulerState+0x38>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d102      	bne.n	800e2f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e2f0:	2302      	movs	r3, #2
 800e2f2:	607b      	str	r3, [r7, #4]
 800e2f4:	e001      	b.n	800e2fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e2fa:	687b      	ldr	r3, [r7, #4]
	}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr
 800e308:	20001168 	.word	0x20001168
 800e30c:	20001184 	.word	0x20001184

0800e310 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e310:	b580      	push	{r7, lr}
 800e312:	b086      	sub	sp, #24
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e31c:	2300      	movs	r3, #0
 800e31e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d056      	beq.n	800e3d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e326:	4b2e      	ldr	r3, [pc, #184]	; (800e3e0 <xTaskPriorityDisinherit+0xd0>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	693a      	ldr	r2, [r7, #16]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d00a      	beq.n	800e346 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	60fb      	str	r3, [r7, #12]
}
 800e342:	bf00      	nop
 800e344:	e7fe      	b.n	800e344 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d10a      	bne.n	800e364 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e352:	f383 8811 	msr	BASEPRI, r3
 800e356:	f3bf 8f6f 	isb	sy
 800e35a:	f3bf 8f4f 	dsb	sy
 800e35e:	60bb      	str	r3, [r7, #8]
}
 800e360:	bf00      	nop
 800e362:	e7fe      	b.n	800e362 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e368:	1e5a      	subs	r2, r3, #1
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e376:	429a      	cmp	r2, r3
 800e378:	d02c      	beq.n	800e3d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d128      	bne.n	800e3d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	3304      	adds	r3, #4
 800e386:	4618      	mov	r0, r3
 800e388:	f7fe fc22 	bl	800cbd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e398:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3a4:	4b0f      	ldr	r3, [pc, #60]	; (800e3e4 <xTaskPriorityDisinherit+0xd4>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d903      	bls.n	800e3b4 <xTaskPriorityDisinherit+0xa4>
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b0:	4a0c      	ldr	r2, [pc, #48]	; (800e3e4 <xTaskPriorityDisinherit+0xd4>)
 800e3b2:	6013      	str	r3, [r2, #0]
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	4413      	add	r3, r2
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	4a09      	ldr	r2, [pc, #36]	; (800e3e8 <xTaskPriorityDisinherit+0xd8>)
 800e3c2:	441a      	add	r2, r3
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	3304      	adds	r3, #4
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	4610      	mov	r0, r2
 800e3cc:	f7fe fba3 	bl	800cb16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e3d4:	697b      	ldr	r3, [r7, #20]
	}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3718      	adds	r7, #24
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	20000c88 	.word	0x20000c88
 800e3e4:	20001164 	.word	0x20001164
 800e3e8:	20000c8c 	.word	0x20000c8c

0800e3ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e3f6:	4b21      	ldr	r3, [pc, #132]	; (800e47c <prvAddCurrentTaskToDelayedList+0x90>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3fc:	4b20      	ldr	r3, [pc, #128]	; (800e480 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	3304      	adds	r3, #4
 800e402:	4618      	mov	r0, r3
 800e404:	f7fe fbe4 	bl	800cbd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40e:	d10a      	bne.n	800e426 <prvAddCurrentTaskToDelayedList+0x3a>
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d007      	beq.n	800e426 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e416:	4b1a      	ldr	r3, [pc, #104]	; (800e480 <prvAddCurrentTaskToDelayedList+0x94>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	3304      	adds	r3, #4
 800e41c:	4619      	mov	r1, r3
 800e41e:	4819      	ldr	r0, [pc, #100]	; (800e484 <prvAddCurrentTaskToDelayedList+0x98>)
 800e420:	f7fe fb79 	bl	800cb16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e424:	e026      	b.n	800e474 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	4413      	add	r3, r2
 800e42c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e42e:	4b14      	ldr	r3, [pc, #80]	; (800e480 <prvAddCurrentTaskToDelayedList+0x94>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	68ba      	ldr	r2, [r7, #8]
 800e434:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e436:	68ba      	ldr	r2, [r7, #8]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d209      	bcs.n	800e452 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e43e:	4b12      	ldr	r3, [pc, #72]	; (800e488 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e440:	681a      	ldr	r2, [r3, #0]
 800e442:	4b0f      	ldr	r3, [pc, #60]	; (800e480 <prvAddCurrentTaskToDelayedList+0x94>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	3304      	adds	r3, #4
 800e448:	4619      	mov	r1, r3
 800e44a:	4610      	mov	r0, r2
 800e44c:	f7fe fb87 	bl	800cb5e <vListInsert>
}
 800e450:	e010      	b.n	800e474 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e452:	4b0e      	ldr	r3, [pc, #56]	; (800e48c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	4b0a      	ldr	r3, [pc, #40]	; (800e480 <prvAddCurrentTaskToDelayedList+0x94>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	3304      	adds	r3, #4
 800e45c:	4619      	mov	r1, r3
 800e45e:	4610      	mov	r0, r2
 800e460:	f7fe fb7d 	bl	800cb5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e464:	4b0a      	ldr	r3, [pc, #40]	; (800e490 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	68ba      	ldr	r2, [r7, #8]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d202      	bcs.n	800e474 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e46e:	4a08      	ldr	r2, [pc, #32]	; (800e490 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	6013      	str	r3, [r2, #0]
}
 800e474:	bf00      	nop
 800e476:	3710      	adds	r7, #16
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	20001160 	.word	0x20001160
 800e480:	20000c88 	.word	0x20000c88
 800e484:	20001148 	.word	0x20001148
 800e488:	20001118 	.word	0x20001118
 800e48c:	20001114 	.word	0x20001114
 800e490:	2000117c 	.word	0x2000117c

0800e494 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b08a      	sub	sp, #40	; 0x28
 800e498:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e49a:	2300      	movs	r3, #0
 800e49c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e49e:	f000 fb07 	bl	800eab0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e4a2:	4b1c      	ldr	r3, [pc, #112]	; (800e514 <xTimerCreateTimerTask+0x80>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d021      	beq.n	800e4ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e4b2:	1d3a      	adds	r2, r7, #4
 800e4b4:	f107 0108 	add.w	r1, r7, #8
 800e4b8:	f107 030c 	add.w	r3, r7, #12
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7fe fae3 	bl	800ca88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e4c2:	6879      	ldr	r1, [r7, #4]
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	68fa      	ldr	r2, [r7, #12]
 800e4c8:	9202      	str	r2, [sp, #8]
 800e4ca:	9301      	str	r3, [sp, #4]
 800e4cc:	2302      	movs	r3, #2
 800e4ce:	9300      	str	r3, [sp, #0]
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	460a      	mov	r2, r1
 800e4d4:	4910      	ldr	r1, [pc, #64]	; (800e518 <xTimerCreateTimerTask+0x84>)
 800e4d6:	4811      	ldr	r0, [pc, #68]	; (800e51c <xTimerCreateTimerTask+0x88>)
 800e4d8:	f7ff f890 	bl	800d5fc <xTaskCreateStatic>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	4a10      	ldr	r2, [pc, #64]	; (800e520 <xTimerCreateTimerTask+0x8c>)
 800e4e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e4e2:	4b0f      	ldr	r3, [pc, #60]	; (800e520 <xTimerCreateTimerTask+0x8c>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d001      	beq.n	800e4ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d10a      	bne.n	800e50a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f8:	f383 8811 	msr	BASEPRI, r3
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	613b      	str	r3, [r7, #16]
}
 800e506:	bf00      	nop
 800e508:	e7fe      	b.n	800e508 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e50a:	697b      	ldr	r3, [r7, #20]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3718      	adds	r7, #24
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	200011c0 	.word	0x200011c0
 800e518:	08011680 	.word	0x08011680
 800e51c:	0800e659 	.word	0x0800e659
 800e520:	200011c4 	.word	0x200011c4

0800e524 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b08a      	sub	sp, #40	; 0x28
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	607a      	str	r2, [r7, #4]
 800e530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e532:	2300      	movs	r3, #0
 800e534:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d10a      	bne.n	800e552 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e540:	f383 8811 	msr	BASEPRI, r3
 800e544:	f3bf 8f6f 	isb	sy
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	623b      	str	r3, [r7, #32]
}
 800e54e:	bf00      	nop
 800e550:	e7fe      	b.n	800e550 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e552:	4b1a      	ldr	r3, [pc, #104]	; (800e5bc <xTimerGenericCommand+0x98>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d02a      	beq.n	800e5b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	2b05      	cmp	r3, #5
 800e56a:	dc18      	bgt.n	800e59e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e56c:	f7ff feb2 	bl	800e2d4 <xTaskGetSchedulerState>
 800e570:	4603      	mov	r3, r0
 800e572:	2b02      	cmp	r3, #2
 800e574:	d109      	bne.n	800e58a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e576:	4b11      	ldr	r3, [pc, #68]	; (800e5bc <xTimerGenericCommand+0x98>)
 800e578:	6818      	ldr	r0, [r3, #0]
 800e57a:	f107 0110 	add.w	r1, r7, #16
 800e57e:	2300      	movs	r3, #0
 800e580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e582:	f7fe fc53 	bl	800ce2c <xQueueGenericSend>
 800e586:	6278      	str	r0, [r7, #36]	; 0x24
 800e588:	e012      	b.n	800e5b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e58a:	4b0c      	ldr	r3, [pc, #48]	; (800e5bc <xTimerGenericCommand+0x98>)
 800e58c:	6818      	ldr	r0, [r3, #0]
 800e58e:	f107 0110 	add.w	r1, r7, #16
 800e592:	2300      	movs	r3, #0
 800e594:	2200      	movs	r2, #0
 800e596:	f7fe fc49 	bl	800ce2c <xQueueGenericSend>
 800e59a:	6278      	str	r0, [r7, #36]	; 0x24
 800e59c:	e008      	b.n	800e5b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e59e:	4b07      	ldr	r3, [pc, #28]	; (800e5bc <xTimerGenericCommand+0x98>)
 800e5a0:	6818      	ldr	r0, [r3, #0]
 800e5a2:	f107 0110 	add.w	r1, r7, #16
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	683a      	ldr	r2, [r7, #0]
 800e5aa:	f7fe fd3d 	bl	800d028 <xQueueGenericSendFromISR>
 800e5ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3728      	adds	r7, #40	; 0x28
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	200011c0 	.word	0x200011c0

0800e5c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b088      	sub	sp, #32
 800e5c4:	af02      	add	r7, sp, #8
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5ca:	4b22      	ldr	r3, [pc, #136]	; (800e654 <prvProcessExpiredTimer+0x94>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	68db      	ldr	r3, [r3, #12]
 800e5d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	3304      	adds	r3, #4
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7fe faf9 	bl	800cbd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5e4:	f003 0304 	and.w	r3, r3, #4
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d022      	beq.n	800e632 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	699a      	ldr	r2, [r3, #24]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	18d1      	adds	r1, r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	683a      	ldr	r2, [r7, #0]
 800e5f8:	6978      	ldr	r0, [r7, #20]
 800e5fa:	f000 f8d1 	bl	800e7a0 <prvInsertTimerInActiveList>
 800e5fe:	4603      	mov	r3, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d01f      	beq.n	800e644 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e604:	2300      	movs	r3, #0
 800e606:	9300      	str	r3, [sp, #0]
 800e608:	2300      	movs	r3, #0
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	2100      	movs	r1, #0
 800e60e:	6978      	ldr	r0, [r7, #20]
 800e610:	f7ff ff88 	bl	800e524 <xTimerGenericCommand>
 800e614:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d113      	bne.n	800e644 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e620:	f383 8811 	msr	BASEPRI, r3
 800e624:	f3bf 8f6f 	isb	sy
 800e628:	f3bf 8f4f 	dsb	sy
 800e62c:	60fb      	str	r3, [r7, #12]
}
 800e62e:	bf00      	nop
 800e630:	e7fe      	b.n	800e630 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e638:	f023 0301 	bic.w	r3, r3, #1
 800e63c:	b2da      	uxtb	r2, r3
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	6a1b      	ldr	r3, [r3, #32]
 800e648:	6978      	ldr	r0, [r7, #20]
 800e64a:	4798      	blx	r3
}
 800e64c:	bf00      	nop
 800e64e:	3718      	adds	r7, #24
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}
 800e654:	200011b8 	.word	0x200011b8

0800e658 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e660:	f107 0308 	add.w	r3, r7, #8
 800e664:	4618      	mov	r0, r3
 800e666:	f000 f857 	bl	800e718 <prvGetNextExpireTime>
 800e66a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	4619      	mov	r1, r3
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	f000 f803 	bl	800e67c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e676:	f000 f8d5 	bl	800e824 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e67a:	e7f1      	b.n	800e660 <prvTimerTask+0x8>

0800e67c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e686:	f7ff fa1b 	bl	800dac0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e68a:	f107 0308 	add.w	r3, r7, #8
 800e68e:	4618      	mov	r0, r3
 800e690:	f000 f866 	bl	800e760 <prvSampleTimeNow>
 800e694:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d130      	bne.n	800e6fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d10a      	bne.n	800e6b8 <prvProcessTimerOrBlockTask+0x3c>
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d806      	bhi.n	800e6b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e6aa:	f7ff fa17 	bl	800dadc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e6ae:	68f9      	ldr	r1, [r7, #12]
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f7ff ff85 	bl	800e5c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e6b6:	e024      	b.n	800e702 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d008      	beq.n	800e6d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e6be:	4b13      	ldr	r3, [pc, #76]	; (800e70c <prvProcessTimerOrBlockTask+0x90>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d101      	bne.n	800e6cc <prvProcessTimerOrBlockTask+0x50>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	e000      	b.n	800e6ce <prvProcessTimerOrBlockTask+0x52>
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e6d0:	4b0f      	ldr	r3, [pc, #60]	; (800e710 <prvProcessTimerOrBlockTask+0x94>)
 800e6d2:	6818      	ldr	r0, [r3, #0]
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	1ad3      	subs	r3, r2, r3
 800e6da:	683a      	ldr	r2, [r7, #0]
 800e6dc:	4619      	mov	r1, r3
 800e6de:	f7fe ff59 	bl	800d594 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e6e2:	f7ff f9fb 	bl	800dadc <xTaskResumeAll>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d10a      	bne.n	800e702 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e6ec:	4b09      	ldr	r3, [pc, #36]	; (800e714 <prvProcessTimerOrBlockTask+0x98>)
 800e6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6f2:	601a      	str	r2, [r3, #0]
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	f3bf 8f6f 	isb	sy
}
 800e6fc:	e001      	b.n	800e702 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e6fe:	f7ff f9ed 	bl	800dadc <xTaskResumeAll>
}
 800e702:	bf00      	nop
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	200011bc 	.word	0x200011bc
 800e710:	200011c0 	.word	0x200011c0
 800e714:	e000ed04 	.word	0xe000ed04

0800e718 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e718:	b480      	push	{r7}
 800e71a:	b085      	sub	sp, #20
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e720:	4b0e      	ldr	r3, [pc, #56]	; (800e75c <prvGetNextExpireTime+0x44>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d101      	bne.n	800e72e <prvGetNextExpireTime+0x16>
 800e72a:	2201      	movs	r2, #1
 800e72c:	e000      	b.n	800e730 <prvGetNextExpireTime+0x18>
 800e72e:	2200      	movs	r2, #0
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d105      	bne.n	800e748 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e73c:	4b07      	ldr	r3, [pc, #28]	; (800e75c <prvGetNextExpireTime+0x44>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	60fb      	str	r3, [r7, #12]
 800e746:	e001      	b.n	800e74c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e748:	2300      	movs	r3, #0
 800e74a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e74c:	68fb      	ldr	r3, [r7, #12]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3714      	adds	r7, #20
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	200011b8 	.word	0x200011b8

0800e760 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e768:	f7ff fa56 	bl	800dc18 <xTaskGetTickCount>
 800e76c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e76e:	4b0b      	ldr	r3, [pc, #44]	; (800e79c <prvSampleTimeNow+0x3c>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	429a      	cmp	r2, r3
 800e776:	d205      	bcs.n	800e784 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e778:	f000 f936 	bl	800e9e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2201      	movs	r2, #1
 800e780:	601a      	str	r2, [r3, #0]
 800e782:	e002      	b.n	800e78a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2200      	movs	r2, #0
 800e788:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e78a:	4a04      	ldr	r2, [pc, #16]	; (800e79c <prvSampleTimeNow+0x3c>)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e790:	68fb      	ldr	r3, [r7, #12]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3710      	adds	r7, #16
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	200011c8 	.word	0x200011c8

0800e7a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b086      	sub	sp, #24
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	60b9      	str	r1, [r7, #8]
 800e7aa:	607a      	str	r2, [r7, #4]
 800e7ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	68ba      	ldr	r2, [r7, #8]
 800e7b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	68fa      	ldr	r2, [r7, #12]
 800e7bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e7be:	68ba      	ldr	r2, [r7, #8]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d812      	bhi.n	800e7ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	1ad2      	subs	r2, r2, r3
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	699b      	ldr	r3, [r3, #24]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d302      	bcc.n	800e7da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	617b      	str	r3, [r7, #20]
 800e7d8:	e01b      	b.n	800e812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e7da:	4b10      	ldr	r3, [pc, #64]	; (800e81c <prvInsertTimerInActiveList+0x7c>)
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	4610      	mov	r0, r2
 800e7e6:	f7fe f9ba 	bl	800cb5e <vListInsert>
 800e7ea:	e012      	b.n	800e812 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d206      	bcs.n	800e802 <prvInsertTimerInActiveList+0x62>
 800e7f4:	68ba      	ldr	r2, [r7, #8]
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d302      	bcc.n	800e802 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	617b      	str	r3, [r7, #20]
 800e800:	e007      	b.n	800e812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e802:	4b07      	ldr	r3, [pc, #28]	; (800e820 <prvInsertTimerInActiveList+0x80>)
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	3304      	adds	r3, #4
 800e80a:	4619      	mov	r1, r3
 800e80c:	4610      	mov	r0, r2
 800e80e:	f7fe f9a6 	bl	800cb5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e812:	697b      	ldr	r3, [r7, #20]
}
 800e814:	4618      	mov	r0, r3
 800e816:	3718      	adds	r7, #24
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	200011bc 	.word	0x200011bc
 800e820:	200011b8 	.word	0x200011b8

0800e824 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b08e      	sub	sp, #56	; 0x38
 800e828:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e82a:	e0ca      	b.n	800e9c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	da18      	bge.n	800e864 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e832:	1d3b      	adds	r3, r7, #4
 800e834:	3304      	adds	r3, #4
 800e836:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d10a      	bne.n	800e854 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e842:	f383 8811 	msr	BASEPRI, r3
 800e846:	f3bf 8f6f 	isb	sy
 800e84a:	f3bf 8f4f 	dsb	sy
 800e84e:	61fb      	str	r3, [r7, #28]
}
 800e850:	bf00      	nop
 800e852:	e7fe      	b.n	800e852 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e85a:	6850      	ldr	r0, [r2, #4]
 800e85c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e85e:	6892      	ldr	r2, [r2, #8]
 800e860:	4611      	mov	r1, r2
 800e862:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	f2c0 80aa 	blt.w	800e9c0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	695b      	ldr	r3, [r3, #20]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d004      	beq.n	800e882 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87a:	3304      	adds	r3, #4
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7fe f9a7 	bl	800cbd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e882:	463b      	mov	r3, r7
 800e884:	4618      	mov	r0, r3
 800e886:	f7ff ff6b 	bl	800e760 <prvSampleTimeNow>
 800e88a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2b09      	cmp	r3, #9
 800e890:	f200 8097 	bhi.w	800e9c2 <prvProcessReceivedCommands+0x19e>
 800e894:	a201      	add	r2, pc, #4	; (adr r2, 800e89c <prvProcessReceivedCommands+0x78>)
 800e896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e89a:	bf00      	nop
 800e89c:	0800e8c5 	.word	0x0800e8c5
 800e8a0:	0800e8c5 	.word	0x0800e8c5
 800e8a4:	0800e8c5 	.word	0x0800e8c5
 800e8a8:	0800e939 	.word	0x0800e939
 800e8ac:	0800e94d 	.word	0x0800e94d
 800e8b0:	0800e997 	.word	0x0800e997
 800e8b4:	0800e8c5 	.word	0x0800e8c5
 800e8b8:	0800e8c5 	.word	0x0800e8c5
 800e8bc:	0800e939 	.word	0x0800e939
 800e8c0:	0800e94d 	.word	0x0800e94d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8ca:	f043 0301 	orr.w	r3, r3, #1
 800e8ce:	b2da      	uxtb	r2, r3
 800e8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e8d6:	68ba      	ldr	r2, [r7, #8]
 800e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8da:	699b      	ldr	r3, [r3, #24]
 800e8dc:	18d1      	adds	r1, r2, r3
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8e4:	f7ff ff5c 	bl	800e7a0 <prvInsertTimerInActiveList>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d069      	beq.n	800e9c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f0:	6a1b      	ldr	r3, [r3, #32]
 800e8f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8fc:	f003 0304 	and.w	r3, r3, #4
 800e900:	2b00      	cmp	r3, #0
 800e902:	d05e      	beq.n	800e9c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e904:	68ba      	ldr	r2, [r7, #8]
 800e906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e908:	699b      	ldr	r3, [r3, #24]
 800e90a:	441a      	add	r2, r3
 800e90c:	2300      	movs	r3, #0
 800e90e:	9300      	str	r3, [sp, #0]
 800e910:	2300      	movs	r3, #0
 800e912:	2100      	movs	r1, #0
 800e914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e916:	f7ff fe05 	bl	800e524 <xTimerGenericCommand>
 800e91a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e91c:	6a3b      	ldr	r3, [r7, #32]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d14f      	bne.n	800e9c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e926:	f383 8811 	msr	BASEPRI, r3
 800e92a:	f3bf 8f6f 	isb	sy
 800e92e:	f3bf 8f4f 	dsb	sy
 800e932:	61bb      	str	r3, [r7, #24]
}
 800e934:	bf00      	nop
 800e936:	e7fe      	b.n	800e936 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e93e:	f023 0301 	bic.w	r3, r3, #1
 800e942:	b2da      	uxtb	r2, r3
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e94a:	e03a      	b.n	800e9c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e952:	f043 0301 	orr.w	r3, r3, #1
 800e956:	b2da      	uxtb	r2, r3
 800e958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e95e:	68ba      	ldr	r2, [r7, #8]
 800e960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e962:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e966:	699b      	ldr	r3, [r3, #24]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d10a      	bne.n	800e982 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e970:	f383 8811 	msr	BASEPRI, r3
 800e974:	f3bf 8f6f 	isb	sy
 800e978:	f3bf 8f4f 	dsb	sy
 800e97c:	617b      	str	r3, [r7, #20]
}
 800e97e:	bf00      	nop
 800e980:	e7fe      	b.n	800e980 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e984:	699a      	ldr	r2, [r3, #24]
 800e986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e988:	18d1      	adds	r1, r2, r3
 800e98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e98e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e990:	f7ff ff06 	bl	800e7a0 <prvInsertTimerInActiveList>
					break;
 800e994:	e015      	b.n	800e9c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e99c:	f003 0302 	and.w	r3, r3, #2
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d103      	bne.n	800e9ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e9a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9a6:	f000 fbdb 	bl	800f160 <vPortFree>
 800e9aa:	e00a      	b.n	800e9c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9b2:	f023 0301 	bic.w	r3, r3, #1
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e9be:	e000      	b.n	800e9c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e9c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e9c2:	4b08      	ldr	r3, [pc, #32]	; (800e9e4 <prvProcessReceivedCommands+0x1c0>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	1d39      	adds	r1, r7, #4
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fe fbc8 	bl	800d160 <xQueueReceive>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f47f af2a 	bne.w	800e82c <prvProcessReceivedCommands+0x8>
	}
}
 800e9d8:	bf00      	nop
 800e9da:	bf00      	nop
 800e9dc:	3730      	adds	r7, #48	; 0x30
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	200011c0 	.word	0x200011c0

0800e9e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b088      	sub	sp, #32
 800e9ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9ee:	e048      	b.n	800ea82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e9f0:	4b2d      	ldr	r3, [pc, #180]	; (800eaa8 <prvSwitchTimerLists+0xc0>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	68db      	ldr	r3, [r3, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9fa:	4b2b      	ldr	r3, [pc, #172]	; (800eaa8 <prvSwitchTimerLists+0xc0>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	68db      	ldr	r3, [r3, #12]
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	3304      	adds	r3, #4
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7fe f8e1 	bl	800cbd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6a1b      	ldr	r3, [r3, #32]
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea1c:	f003 0304 	and.w	r3, r3, #4
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d02e      	beq.n	800ea82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	699b      	ldr	r3, [r3, #24]
 800ea28:	693a      	ldr	r2, [r7, #16]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d90e      	bls.n	800ea54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	68ba      	ldr	r2, [r7, #8]
 800ea3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	68fa      	ldr	r2, [r7, #12]
 800ea40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ea42:	4b19      	ldr	r3, [pc, #100]	; (800eaa8 <prvSwitchTimerLists+0xc0>)
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	3304      	adds	r3, #4
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	4610      	mov	r0, r2
 800ea4e:	f7fe f886 	bl	800cb5e <vListInsert>
 800ea52:	e016      	b.n	800ea82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea54:	2300      	movs	r3, #0
 800ea56:	9300      	str	r3, [sp, #0]
 800ea58:	2300      	movs	r3, #0
 800ea5a:	693a      	ldr	r2, [r7, #16]
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	68f8      	ldr	r0, [r7, #12]
 800ea60:	f7ff fd60 	bl	800e524 <xTimerGenericCommand>
 800ea64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d10a      	bne.n	800ea82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ea6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea70:	f383 8811 	msr	BASEPRI, r3
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	603b      	str	r3, [r7, #0]
}
 800ea7e:	bf00      	nop
 800ea80:	e7fe      	b.n	800ea80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea82:	4b09      	ldr	r3, [pc, #36]	; (800eaa8 <prvSwitchTimerLists+0xc0>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1b1      	bne.n	800e9f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ea8c:	4b06      	ldr	r3, [pc, #24]	; (800eaa8 <prvSwitchTimerLists+0xc0>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ea92:	4b06      	ldr	r3, [pc, #24]	; (800eaac <prvSwitchTimerLists+0xc4>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4a04      	ldr	r2, [pc, #16]	; (800eaa8 <prvSwitchTimerLists+0xc0>)
 800ea98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ea9a:	4a04      	ldr	r2, [pc, #16]	; (800eaac <prvSwitchTimerLists+0xc4>)
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	6013      	str	r3, [r2, #0]
}
 800eaa0:	bf00      	nop
 800eaa2:	3718      	adds	r7, #24
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	200011b8 	.word	0x200011b8
 800eaac:	200011bc 	.word	0x200011bc

0800eab0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eab6:	f000 f965 	bl	800ed84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eaba:	4b15      	ldr	r3, [pc, #84]	; (800eb10 <prvCheckForValidListAndQueue+0x60>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d120      	bne.n	800eb04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eac2:	4814      	ldr	r0, [pc, #80]	; (800eb14 <prvCheckForValidListAndQueue+0x64>)
 800eac4:	f7fd fffa 	bl	800cabc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eac8:	4813      	ldr	r0, [pc, #76]	; (800eb18 <prvCheckForValidListAndQueue+0x68>)
 800eaca:	f7fd fff7 	bl	800cabc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eace:	4b13      	ldr	r3, [pc, #76]	; (800eb1c <prvCheckForValidListAndQueue+0x6c>)
 800ead0:	4a10      	ldr	r2, [pc, #64]	; (800eb14 <prvCheckForValidListAndQueue+0x64>)
 800ead2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ead4:	4b12      	ldr	r3, [pc, #72]	; (800eb20 <prvCheckForValidListAndQueue+0x70>)
 800ead6:	4a10      	ldr	r2, [pc, #64]	; (800eb18 <prvCheckForValidListAndQueue+0x68>)
 800ead8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eada:	2300      	movs	r3, #0
 800eadc:	9300      	str	r3, [sp, #0]
 800eade:	4b11      	ldr	r3, [pc, #68]	; (800eb24 <prvCheckForValidListAndQueue+0x74>)
 800eae0:	4a11      	ldr	r2, [pc, #68]	; (800eb28 <prvCheckForValidListAndQueue+0x78>)
 800eae2:	2110      	movs	r1, #16
 800eae4:	200a      	movs	r0, #10
 800eae6:	f7fe f905 	bl	800ccf4 <xQueueGenericCreateStatic>
 800eaea:	4603      	mov	r3, r0
 800eaec:	4a08      	ldr	r2, [pc, #32]	; (800eb10 <prvCheckForValidListAndQueue+0x60>)
 800eaee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eaf0:	4b07      	ldr	r3, [pc, #28]	; (800eb10 <prvCheckForValidListAndQueue+0x60>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d005      	beq.n	800eb04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eaf8:	4b05      	ldr	r3, [pc, #20]	; (800eb10 <prvCheckForValidListAndQueue+0x60>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	490b      	ldr	r1, [pc, #44]	; (800eb2c <prvCheckForValidListAndQueue+0x7c>)
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fe fd1e 	bl	800d540 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb04:	f000 f96e 	bl	800ede4 <vPortExitCritical>
}
 800eb08:	bf00      	nop
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	200011c0 	.word	0x200011c0
 800eb14:	20001190 	.word	0x20001190
 800eb18:	200011a4 	.word	0x200011a4
 800eb1c:	200011b8 	.word	0x200011b8
 800eb20:	200011bc 	.word	0x200011bc
 800eb24:	2000126c 	.word	0x2000126c
 800eb28:	200011cc 	.word	0x200011cc
 800eb2c:	08011688 	.word	0x08011688

0800eb30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eb30:	b480      	push	{r7}
 800eb32:	b085      	sub	sp, #20
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	3b04      	subs	r3, #4
 800eb40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eb48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	3b04      	subs	r3, #4
 800eb4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	f023 0201 	bic.w	r2, r3, #1
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	3b04      	subs	r3, #4
 800eb5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eb60:	4a0c      	ldr	r2, [pc, #48]	; (800eb94 <pxPortInitialiseStack+0x64>)
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	3b14      	subs	r3, #20
 800eb6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	3b04      	subs	r3, #4
 800eb76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f06f 0202 	mvn.w	r2, #2
 800eb7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	3b20      	subs	r3, #32
 800eb84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eb86:	68fb      	ldr	r3, [r7, #12]
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3714      	adds	r7, #20
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr
 800eb94:	0800eb99 	.word	0x0800eb99

0800eb98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eba2:	4b12      	ldr	r3, [pc, #72]	; (800ebec <prvTaskExitError+0x54>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebaa:	d00a      	beq.n	800ebc2 <prvTaskExitError+0x2a>
	__asm volatile
 800ebac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb0:	f383 8811 	msr	BASEPRI, r3
 800ebb4:	f3bf 8f6f 	isb	sy
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	60fb      	str	r3, [r7, #12]
}
 800ebbe:	bf00      	nop
 800ebc0:	e7fe      	b.n	800ebc0 <prvTaskExitError+0x28>
	__asm volatile
 800ebc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc6:	f383 8811 	msr	BASEPRI, r3
 800ebca:	f3bf 8f6f 	isb	sy
 800ebce:	f3bf 8f4f 	dsb	sy
 800ebd2:	60bb      	str	r3, [r7, #8]
}
 800ebd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ebd6:	bf00      	nop
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d0fc      	beq.n	800ebd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ebde:	bf00      	nop
 800ebe0:	bf00      	nop
 800ebe2:	3714      	adds	r7, #20
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr
 800ebec:	200001e8 	.word	0x200001e8

0800ebf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ebf0:	4b07      	ldr	r3, [pc, #28]	; (800ec10 <pxCurrentTCBConst2>)
 800ebf2:	6819      	ldr	r1, [r3, #0]
 800ebf4:	6808      	ldr	r0, [r1, #0]
 800ebf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfa:	f380 8809 	msr	PSP, r0
 800ebfe:	f3bf 8f6f 	isb	sy
 800ec02:	f04f 0000 	mov.w	r0, #0
 800ec06:	f380 8811 	msr	BASEPRI, r0
 800ec0a:	4770      	bx	lr
 800ec0c:	f3af 8000 	nop.w

0800ec10 <pxCurrentTCBConst2>:
 800ec10:	20000c88 	.word	0x20000c88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ec14:	bf00      	nop
 800ec16:	bf00      	nop

0800ec18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ec18:	4808      	ldr	r0, [pc, #32]	; (800ec3c <prvPortStartFirstTask+0x24>)
 800ec1a:	6800      	ldr	r0, [r0, #0]
 800ec1c:	6800      	ldr	r0, [r0, #0]
 800ec1e:	f380 8808 	msr	MSP, r0
 800ec22:	f04f 0000 	mov.w	r0, #0
 800ec26:	f380 8814 	msr	CONTROL, r0
 800ec2a:	b662      	cpsie	i
 800ec2c:	b661      	cpsie	f
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	f3bf 8f6f 	isb	sy
 800ec36:	df00      	svc	0
 800ec38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ec3a:	bf00      	nop
 800ec3c:	e000ed08 	.word	0xe000ed08

0800ec40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b086      	sub	sp, #24
 800ec44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ec46:	4b46      	ldr	r3, [pc, #280]	; (800ed60 <xPortStartScheduler+0x120>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4a46      	ldr	r2, [pc, #280]	; (800ed64 <xPortStartScheduler+0x124>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d10a      	bne.n	800ec66 <xPortStartScheduler+0x26>
	__asm volatile
 800ec50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec54:	f383 8811 	msr	BASEPRI, r3
 800ec58:	f3bf 8f6f 	isb	sy
 800ec5c:	f3bf 8f4f 	dsb	sy
 800ec60:	613b      	str	r3, [r7, #16]
}
 800ec62:	bf00      	nop
 800ec64:	e7fe      	b.n	800ec64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ec66:	4b3e      	ldr	r3, [pc, #248]	; (800ed60 <xPortStartScheduler+0x120>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a3f      	ldr	r2, [pc, #252]	; (800ed68 <xPortStartScheduler+0x128>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d10a      	bne.n	800ec86 <xPortStartScheduler+0x46>
	__asm volatile
 800ec70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec74:	f383 8811 	msr	BASEPRI, r3
 800ec78:	f3bf 8f6f 	isb	sy
 800ec7c:	f3bf 8f4f 	dsb	sy
 800ec80:	60fb      	str	r3, [r7, #12]
}
 800ec82:	bf00      	nop
 800ec84:	e7fe      	b.n	800ec84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ec86:	4b39      	ldr	r3, [pc, #228]	; (800ed6c <xPortStartScheduler+0x12c>)
 800ec88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	22ff      	movs	r2, #255	; 0xff
 800ec96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eca0:	78fb      	ldrb	r3, [r7, #3]
 800eca2:	b2db      	uxtb	r3, r3
 800eca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eca8:	b2da      	uxtb	r2, r3
 800ecaa:	4b31      	ldr	r3, [pc, #196]	; (800ed70 <xPortStartScheduler+0x130>)
 800ecac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ecae:	4b31      	ldr	r3, [pc, #196]	; (800ed74 <xPortStartScheduler+0x134>)
 800ecb0:	2207      	movs	r2, #7
 800ecb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ecb4:	e009      	b.n	800ecca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ecb6:	4b2f      	ldr	r3, [pc, #188]	; (800ed74 <xPortStartScheduler+0x134>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	3b01      	subs	r3, #1
 800ecbc:	4a2d      	ldr	r2, [pc, #180]	; (800ed74 <xPortStartScheduler+0x134>)
 800ecbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ecc0:	78fb      	ldrb	r3, [r7, #3]
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	005b      	lsls	r3, r3, #1
 800ecc6:	b2db      	uxtb	r3, r3
 800ecc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ecca:	78fb      	ldrb	r3, [r7, #3]
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecd2:	2b80      	cmp	r3, #128	; 0x80
 800ecd4:	d0ef      	beq.n	800ecb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ecd6:	4b27      	ldr	r3, [pc, #156]	; (800ed74 <xPortStartScheduler+0x134>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f1c3 0307 	rsb	r3, r3, #7
 800ecde:	2b04      	cmp	r3, #4
 800ece0:	d00a      	beq.n	800ecf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ece2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece6:	f383 8811 	msr	BASEPRI, r3
 800ecea:	f3bf 8f6f 	isb	sy
 800ecee:	f3bf 8f4f 	dsb	sy
 800ecf2:	60bb      	str	r3, [r7, #8]
}
 800ecf4:	bf00      	nop
 800ecf6:	e7fe      	b.n	800ecf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ecf8:	4b1e      	ldr	r3, [pc, #120]	; (800ed74 <xPortStartScheduler+0x134>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	021b      	lsls	r3, r3, #8
 800ecfe:	4a1d      	ldr	r2, [pc, #116]	; (800ed74 <xPortStartScheduler+0x134>)
 800ed00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed02:	4b1c      	ldr	r3, [pc, #112]	; (800ed74 <xPortStartScheduler+0x134>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed0a:	4a1a      	ldr	r2, [pc, #104]	; (800ed74 <xPortStartScheduler+0x134>)
 800ed0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	b2da      	uxtb	r2, r3
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed16:	4b18      	ldr	r3, [pc, #96]	; (800ed78 <xPortStartScheduler+0x138>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	4a17      	ldr	r2, [pc, #92]	; (800ed78 <xPortStartScheduler+0x138>)
 800ed1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ed20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ed22:	4b15      	ldr	r3, [pc, #84]	; (800ed78 <xPortStartScheduler+0x138>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	4a14      	ldr	r2, [pc, #80]	; (800ed78 <xPortStartScheduler+0x138>)
 800ed28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ed2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ed2e:	f000 f8dd 	bl	800eeec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ed32:	4b12      	ldr	r3, [pc, #72]	; (800ed7c <xPortStartScheduler+0x13c>)
 800ed34:	2200      	movs	r2, #0
 800ed36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ed38:	f000 f8fc 	bl	800ef34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ed3c:	4b10      	ldr	r3, [pc, #64]	; (800ed80 <xPortStartScheduler+0x140>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a0f      	ldr	r2, [pc, #60]	; (800ed80 <xPortStartScheduler+0x140>)
 800ed42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ed46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ed48:	f7ff ff66 	bl	800ec18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ed4c:	f7ff f82e 	bl	800ddac <vTaskSwitchContext>
	prvTaskExitError();
 800ed50:	f7ff ff22 	bl	800eb98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ed54:	2300      	movs	r3, #0
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3718      	adds	r7, #24
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	e000ed00 	.word	0xe000ed00
 800ed64:	410fc271 	.word	0x410fc271
 800ed68:	410fc270 	.word	0x410fc270
 800ed6c:	e000e400 	.word	0xe000e400
 800ed70:	200012bc 	.word	0x200012bc
 800ed74:	200012c0 	.word	0x200012c0
 800ed78:	e000ed20 	.word	0xe000ed20
 800ed7c:	200001e8 	.word	0x200001e8
 800ed80:	e000ef34 	.word	0xe000ef34

0800ed84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ed84:	b480      	push	{r7}
 800ed86:	b083      	sub	sp, #12
 800ed88:	af00      	add	r7, sp, #0
	__asm volatile
 800ed8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed8e:	f383 8811 	msr	BASEPRI, r3
 800ed92:	f3bf 8f6f 	isb	sy
 800ed96:	f3bf 8f4f 	dsb	sy
 800ed9a:	607b      	str	r3, [r7, #4]
}
 800ed9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ed9e:	4b0f      	ldr	r3, [pc, #60]	; (800eddc <vPortEnterCritical+0x58>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	3301      	adds	r3, #1
 800eda4:	4a0d      	ldr	r2, [pc, #52]	; (800eddc <vPortEnterCritical+0x58>)
 800eda6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eda8:	4b0c      	ldr	r3, [pc, #48]	; (800eddc <vPortEnterCritical+0x58>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	2b01      	cmp	r3, #1
 800edae:	d10f      	bne.n	800edd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800edb0:	4b0b      	ldr	r3, [pc, #44]	; (800ede0 <vPortEnterCritical+0x5c>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d00a      	beq.n	800edd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800edba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edbe:	f383 8811 	msr	BASEPRI, r3
 800edc2:	f3bf 8f6f 	isb	sy
 800edc6:	f3bf 8f4f 	dsb	sy
 800edca:	603b      	str	r3, [r7, #0]
}
 800edcc:	bf00      	nop
 800edce:	e7fe      	b.n	800edce <vPortEnterCritical+0x4a>
	}
}
 800edd0:	bf00      	nop
 800edd2:	370c      	adds	r7, #12
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr
 800eddc:	200001e8 	.word	0x200001e8
 800ede0:	e000ed04 	.word	0xe000ed04

0800ede4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800edea:	4b12      	ldr	r3, [pc, #72]	; (800ee34 <vPortExitCritical+0x50>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d10a      	bne.n	800ee08 <vPortExitCritical+0x24>
	__asm volatile
 800edf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf6:	f383 8811 	msr	BASEPRI, r3
 800edfa:	f3bf 8f6f 	isb	sy
 800edfe:	f3bf 8f4f 	dsb	sy
 800ee02:	607b      	str	r3, [r7, #4]
}
 800ee04:	bf00      	nop
 800ee06:	e7fe      	b.n	800ee06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ee08:	4b0a      	ldr	r3, [pc, #40]	; (800ee34 <vPortExitCritical+0x50>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	4a09      	ldr	r2, [pc, #36]	; (800ee34 <vPortExitCritical+0x50>)
 800ee10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ee12:	4b08      	ldr	r3, [pc, #32]	; (800ee34 <vPortExitCritical+0x50>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d105      	bne.n	800ee26 <vPortExitCritical+0x42>
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	f383 8811 	msr	BASEPRI, r3
}
 800ee24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ee26:	bf00      	nop
 800ee28:	370c      	adds	r7, #12
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr
 800ee32:	bf00      	nop
 800ee34:	200001e8 	.word	0x200001e8
	...

0800ee40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ee40:	f3ef 8009 	mrs	r0, PSP
 800ee44:	f3bf 8f6f 	isb	sy
 800ee48:	4b15      	ldr	r3, [pc, #84]	; (800eea0 <pxCurrentTCBConst>)
 800ee4a:	681a      	ldr	r2, [r3, #0]
 800ee4c:	f01e 0f10 	tst.w	lr, #16
 800ee50:	bf08      	it	eq
 800ee52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ee56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee5a:	6010      	str	r0, [r2, #0]
 800ee5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ee60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ee64:	f380 8811 	msr	BASEPRI, r0
 800ee68:	f3bf 8f4f 	dsb	sy
 800ee6c:	f3bf 8f6f 	isb	sy
 800ee70:	f7fe ff9c 	bl	800ddac <vTaskSwitchContext>
 800ee74:	f04f 0000 	mov.w	r0, #0
 800ee78:	f380 8811 	msr	BASEPRI, r0
 800ee7c:	bc09      	pop	{r0, r3}
 800ee7e:	6819      	ldr	r1, [r3, #0]
 800ee80:	6808      	ldr	r0, [r1, #0]
 800ee82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee86:	f01e 0f10 	tst.w	lr, #16
 800ee8a:	bf08      	it	eq
 800ee8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ee90:	f380 8809 	msr	PSP, r0
 800ee94:	f3bf 8f6f 	isb	sy
 800ee98:	4770      	bx	lr
 800ee9a:	bf00      	nop
 800ee9c:	f3af 8000 	nop.w

0800eea0 <pxCurrentTCBConst>:
 800eea0:	20000c88 	.word	0x20000c88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eea4:	bf00      	nop
 800eea6:	bf00      	nop

0800eea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
	__asm volatile
 800eeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb2:	f383 8811 	msr	BASEPRI, r3
 800eeb6:	f3bf 8f6f 	isb	sy
 800eeba:	f3bf 8f4f 	dsb	sy
 800eebe:	607b      	str	r3, [r7, #4]
}
 800eec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eec2:	f7fe feb9 	bl	800dc38 <xTaskIncrementTick>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d003      	beq.n	800eed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eecc:	4b06      	ldr	r3, [pc, #24]	; (800eee8 <xPortSysTickHandler+0x40>)
 800eece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eed2:	601a      	str	r2, [r3, #0]
 800eed4:	2300      	movs	r3, #0
 800eed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	f383 8811 	msr	BASEPRI, r3
}
 800eede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eee0:	bf00      	nop
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	e000ed04 	.word	0xe000ed04

0800eeec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eeec:	b480      	push	{r7}
 800eeee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eef0:	4b0b      	ldr	r3, [pc, #44]	; (800ef20 <vPortSetupTimerInterrupt+0x34>)
 800eef2:	2200      	movs	r2, #0
 800eef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eef6:	4b0b      	ldr	r3, [pc, #44]	; (800ef24 <vPortSetupTimerInterrupt+0x38>)
 800eef8:	2200      	movs	r2, #0
 800eefa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eefc:	4b0a      	ldr	r3, [pc, #40]	; (800ef28 <vPortSetupTimerInterrupt+0x3c>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a0a      	ldr	r2, [pc, #40]	; (800ef2c <vPortSetupTimerInterrupt+0x40>)
 800ef02:	fba2 2303 	umull	r2, r3, r2, r3
 800ef06:	099b      	lsrs	r3, r3, #6
 800ef08:	4a09      	ldr	r2, [pc, #36]	; (800ef30 <vPortSetupTimerInterrupt+0x44>)
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ef0e:	4b04      	ldr	r3, [pc, #16]	; (800ef20 <vPortSetupTimerInterrupt+0x34>)
 800ef10:	2207      	movs	r2, #7
 800ef12:	601a      	str	r2, [r3, #0]
}
 800ef14:	bf00      	nop
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr
 800ef1e:	bf00      	nop
 800ef20:	e000e010 	.word	0xe000e010
 800ef24:	e000e018 	.word	0xe000e018
 800ef28:	20000150 	.word	0x20000150
 800ef2c:	10624dd3 	.word	0x10624dd3
 800ef30:	e000e014 	.word	0xe000e014

0800ef34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ef34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ef44 <vPortEnableVFP+0x10>
 800ef38:	6801      	ldr	r1, [r0, #0]
 800ef3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ef3e:	6001      	str	r1, [r0, #0]
 800ef40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ef42:	bf00      	nop
 800ef44:	e000ed88 	.word	0xe000ed88

0800ef48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ef48:	b480      	push	{r7}
 800ef4a:	b085      	sub	sp, #20
 800ef4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ef4e:	f3ef 8305 	mrs	r3, IPSR
 800ef52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2b0f      	cmp	r3, #15
 800ef58:	d914      	bls.n	800ef84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ef5a:	4a17      	ldr	r2, [pc, #92]	; (800efb8 <vPortValidateInterruptPriority+0x70>)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	4413      	add	r3, r2
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ef64:	4b15      	ldr	r3, [pc, #84]	; (800efbc <vPortValidateInterruptPriority+0x74>)
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	7afa      	ldrb	r2, [r7, #11]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d20a      	bcs.n	800ef84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ef6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	607b      	str	r3, [r7, #4]
}
 800ef80:	bf00      	nop
 800ef82:	e7fe      	b.n	800ef82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ef84:	4b0e      	ldr	r3, [pc, #56]	; (800efc0 <vPortValidateInterruptPriority+0x78>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ef8c:	4b0d      	ldr	r3, [pc, #52]	; (800efc4 <vPortValidateInterruptPriority+0x7c>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d90a      	bls.n	800efaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ef94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef98:	f383 8811 	msr	BASEPRI, r3
 800ef9c:	f3bf 8f6f 	isb	sy
 800efa0:	f3bf 8f4f 	dsb	sy
 800efa4:	603b      	str	r3, [r7, #0]
}
 800efa6:	bf00      	nop
 800efa8:	e7fe      	b.n	800efa8 <vPortValidateInterruptPriority+0x60>
	}
 800efaa:	bf00      	nop
 800efac:	3714      	adds	r7, #20
 800efae:	46bd      	mov	sp, r7
 800efb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb4:	4770      	bx	lr
 800efb6:	bf00      	nop
 800efb8:	e000e3f0 	.word	0xe000e3f0
 800efbc:	200012bc 	.word	0x200012bc
 800efc0:	e000ed0c 	.word	0xe000ed0c
 800efc4:	200012c0 	.word	0x200012c0

0800efc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b08a      	sub	sp, #40	; 0x28
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800efd0:	2300      	movs	r3, #0
 800efd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800efd4:	f7fe fd74 	bl	800dac0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800efd8:	4b5b      	ldr	r3, [pc, #364]	; (800f148 <pvPortMalloc+0x180>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d101      	bne.n	800efe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800efe0:	f000 f920 	bl	800f224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800efe4:	4b59      	ldr	r3, [pc, #356]	; (800f14c <pvPortMalloc+0x184>)
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4013      	ands	r3, r2
 800efec:	2b00      	cmp	r3, #0
 800efee:	f040 8093 	bne.w	800f118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d01d      	beq.n	800f034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eff8:	2208      	movs	r2, #8
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	4413      	add	r3, r2
 800effe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f003 0307 	and.w	r3, r3, #7
 800f006:	2b00      	cmp	r3, #0
 800f008:	d014      	beq.n	800f034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f023 0307 	bic.w	r3, r3, #7
 800f010:	3308      	adds	r3, #8
 800f012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f003 0307 	and.w	r3, r3, #7
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d00a      	beq.n	800f034 <pvPortMalloc+0x6c>
	__asm volatile
 800f01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f022:	f383 8811 	msr	BASEPRI, r3
 800f026:	f3bf 8f6f 	isb	sy
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	617b      	str	r3, [r7, #20]
}
 800f030:	bf00      	nop
 800f032:	e7fe      	b.n	800f032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d06e      	beq.n	800f118 <pvPortMalloc+0x150>
 800f03a:	4b45      	ldr	r3, [pc, #276]	; (800f150 <pvPortMalloc+0x188>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	429a      	cmp	r2, r3
 800f042:	d869      	bhi.n	800f118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f044:	4b43      	ldr	r3, [pc, #268]	; (800f154 <pvPortMalloc+0x18c>)
 800f046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f048:	4b42      	ldr	r3, [pc, #264]	; (800f154 <pvPortMalloc+0x18c>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f04e:	e004      	b.n	800f05a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	687a      	ldr	r2, [r7, #4]
 800f060:	429a      	cmp	r2, r3
 800f062:	d903      	bls.n	800f06c <pvPortMalloc+0xa4>
 800f064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1f1      	bne.n	800f050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f06c:	4b36      	ldr	r3, [pc, #216]	; (800f148 <pvPortMalloc+0x180>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f072:	429a      	cmp	r2, r3
 800f074:	d050      	beq.n	800f118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f076:	6a3b      	ldr	r3, [r7, #32]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2208      	movs	r2, #8
 800f07c:	4413      	add	r3, r2
 800f07e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	6a3b      	ldr	r3, [r7, #32]
 800f086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08a:	685a      	ldr	r2, [r3, #4]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	1ad2      	subs	r2, r2, r3
 800f090:	2308      	movs	r3, #8
 800f092:	005b      	lsls	r3, r3, #1
 800f094:	429a      	cmp	r2, r3
 800f096:	d91f      	bls.n	800f0d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	4413      	add	r3, r2
 800f09e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	f003 0307 	and.w	r3, r3, #7
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d00a      	beq.n	800f0c0 <pvPortMalloc+0xf8>
	__asm volatile
 800f0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ae:	f383 8811 	msr	BASEPRI, r3
 800f0b2:	f3bf 8f6f 	isb	sy
 800f0b6:	f3bf 8f4f 	dsb	sy
 800f0ba:	613b      	str	r3, [r7, #16]
}
 800f0bc:	bf00      	nop
 800f0be:	e7fe      	b.n	800f0be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c2:	685a      	ldr	r2, [r3, #4]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	1ad2      	subs	r2, r2, r3
 800f0c8:	69bb      	ldr	r3, [r7, #24]
 800f0ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f0d2:	69b8      	ldr	r0, [r7, #24]
 800f0d4:	f000 f908 	bl	800f2e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f0d8:	4b1d      	ldr	r3, [pc, #116]	; (800f150 <pvPortMalloc+0x188>)
 800f0da:	681a      	ldr	r2, [r3, #0]
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	1ad3      	subs	r3, r2, r3
 800f0e2:	4a1b      	ldr	r2, [pc, #108]	; (800f150 <pvPortMalloc+0x188>)
 800f0e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f0e6:	4b1a      	ldr	r3, [pc, #104]	; (800f150 <pvPortMalloc+0x188>)
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	4b1b      	ldr	r3, [pc, #108]	; (800f158 <pvPortMalloc+0x190>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d203      	bcs.n	800f0fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f0f2:	4b17      	ldr	r3, [pc, #92]	; (800f150 <pvPortMalloc+0x188>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	4a18      	ldr	r2, [pc, #96]	; (800f158 <pvPortMalloc+0x190>)
 800f0f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fc:	685a      	ldr	r2, [r3, #4]
 800f0fe:	4b13      	ldr	r3, [pc, #76]	; (800f14c <pvPortMalloc+0x184>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	431a      	orrs	r2, r3
 800f104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10a:	2200      	movs	r2, #0
 800f10c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f10e:	4b13      	ldr	r3, [pc, #76]	; (800f15c <pvPortMalloc+0x194>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	3301      	adds	r3, #1
 800f114:	4a11      	ldr	r2, [pc, #68]	; (800f15c <pvPortMalloc+0x194>)
 800f116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f118:	f7fe fce0 	bl	800dadc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	f003 0307 	and.w	r3, r3, #7
 800f122:	2b00      	cmp	r3, #0
 800f124:	d00a      	beq.n	800f13c <pvPortMalloc+0x174>
	__asm volatile
 800f126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f12a:	f383 8811 	msr	BASEPRI, r3
 800f12e:	f3bf 8f6f 	isb	sy
 800f132:	f3bf 8f4f 	dsb	sy
 800f136:	60fb      	str	r3, [r7, #12]
}
 800f138:	bf00      	nop
 800f13a:	e7fe      	b.n	800f13a <pvPortMalloc+0x172>
	return pvReturn;
 800f13c:	69fb      	ldr	r3, [r7, #28]
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3728      	adds	r7, #40	; 0x28
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	2001a2cc 	.word	0x2001a2cc
 800f14c:	2001a2e0 	.word	0x2001a2e0
 800f150:	2001a2d0 	.word	0x2001a2d0
 800f154:	2001a2c4 	.word	0x2001a2c4
 800f158:	2001a2d4 	.word	0x2001a2d4
 800f15c:	2001a2d8 	.word	0x2001a2d8

0800f160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b086      	sub	sp, #24
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d04d      	beq.n	800f20e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f172:	2308      	movs	r3, #8
 800f174:	425b      	negs	r3, r3
 800f176:	697a      	ldr	r2, [r7, #20]
 800f178:	4413      	add	r3, r2
 800f17a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	685a      	ldr	r2, [r3, #4]
 800f184:	4b24      	ldr	r3, [pc, #144]	; (800f218 <vPortFree+0xb8>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4013      	ands	r3, r2
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d10a      	bne.n	800f1a4 <vPortFree+0x44>
	__asm volatile
 800f18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f192:	f383 8811 	msr	BASEPRI, r3
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	60fb      	str	r3, [r7, #12]
}
 800f1a0:	bf00      	nop
 800f1a2:	e7fe      	b.n	800f1a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d00a      	beq.n	800f1c2 <vPortFree+0x62>
	__asm volatile
 800f1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b0:	f383 8811 	msr	BASEPRI, r3
 800f1b4:	f3bf 8f6f 	isb	sy
 800f1b8:	f3bf 8f4f 	dsb	sy
 800f1bc:	60bb      	str	r3, [r7, #8]
}
 800f1be:	bf00      	nop
 800f1c0:	e7fe      	b.n	800f1c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	685a      	ldr	r2, [r3, #4]
 800f1c6:	4b14      	ldr	r3, [pc, #80]	; (800f218 <vPortFree+0xb8>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4013      	ands	r3, r2
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d01e      	beq.n	800f20e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d11a      	bne.n	800f20e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	685a      	ldr	r2, [r3, #4]
 800f1dc:	4b0e      	ldr	r3, [pc, #56]	; (800f218 <vPortFree+0xb8>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	43db      	mvns	r3, r3
 800f1e2:	401a      	ands	r2, r3
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f1e8:	f7fe fc6a 	bl	800dac0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	685a      	ldr	r2, [r3, #4]
 800f1f0:	4b0a      	ldr	r3, [pc, #40]	; (800f21c <vPortFree+0xbc>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	4a09      	ldr	r2, [pc, #36]	; (800f21c <vPortFree+0xbc>)
 800f1f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f1fa:	6938      	ldr	r0, [r7, #16]
 800f1fc:	f000 f874 	bl	800f2e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f200:	4b07      	ldr	r3, [pc, #28]	; (800f220 <vPortFree+0xc0>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	3301      	adds	r3, #1
 800f206:	4a06      	ldr	r2, [pc, #24]	; (800f220 <vPortFree+0xc0>)
 800f208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f20a:	f7fe fc67 	bl	800dadc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f20e:	bf00      	nop
 800f210:	3718      	adds	r7, #24
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	2001a2e0 	.word	0x2001a2e0
 800f21c:	2001a2d0 	.word	0x2001a2d0
 800f220:	2001a2dc 	.word	0x2001a2dc

0800f224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f224:	b480      	push	{r7}
 800f226:	b085      	sub	sp, #20
 800f228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f22a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800f22e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f230:	4b27      	ldr	r3, [pc, #156]	; (800f2d0 <prvHeapInit+0xac>)
 800f232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f003 0307 	and.w	r3, r3, #7
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d00c      	beq.n	800f258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	3307      	adds	r3, #7
 800f242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f023 0307 	bic.w	r3, r3, #7
 800f24a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f24c:	68ba      	ldr	r2, [r7, #8]
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	1ad3      	subs	r3, r2, r3
 800f252:	4a1f      	ldr	r2, [pc, #124]	; (800f2d0 <prvHeapInit+0xac>)
 800f254:	4413      	add	r3, r2
 800f256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f25c:	4a1d      	ldr	r2, [pc, #116]	; (800f2d4 <prvHeapInit+0xb0>)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f262:	4b1c      	ldr	r3, [pc, #112]	; (800f2d4 <prvHeapInit+0xb0>)
 800f264:	2200      	movs	r2, #0
 800f266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	68ba      	ldr	r2, [r7, #8]
 800f26c:	4413      	add	r3, r2
 800f26e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f270:	2208      	movs	r2, #8
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	1a9b      	subs	r3, r3, r2
 800f276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f023 0307 	bic.w	r3, r3, #7
 800f27e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	4a15      	ldr	r2, [pc, #84]	; (800f2d8 <prvHeapInit+0xb4>)
 800f284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f286:	4b14      	ldr	r3, [pc, #80]	; (800f2d8 <prvHeapInit+0xb4>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2200      	movs	r2, #0
 800f28c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f28e:	4b12      	ldr	r3, [pc, #72]	; (800f2d8 <prvHeapInit+0xb4>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2200      	movs	r2, #0
 800f294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	68fa      	ldr	r2, [r7, #12]
 800f29e:	1ad2      	subs	r2, r2, r3
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f2a4:	4b0c      	ldr	r3, [pc, #48]	; (800f2d8 <prvHeapInit+0xb4>)
 800f2a6:	681a      	ldr	r2, [r3, #0]
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	4a0a      	ldr	r2, [pc, #40]	; (800f2dc <prvHeapInit+0xb8>)
 800f2b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	685b      	ldr	r3, [r3, #4]
 800f2b8:	4a09      	ldr	r2, [pc, #36]	; (800f2e0 <prvHeapInit+0xbc>)
 800f2ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f2bc:	4b09      	ldr	r3, [pc, #36]	; (800f2e4 <prvHeapInit+0xc0>)
 800f2be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f2c2:	601a      	str	r2, [r3, #0]
}
 800f2c4:	bf00      	nop
 800f2c6:	3714      	adds	r7, #20
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ce:	4770      	bx	lr
 800f2d0:	200012c4 	.word	0x200012c4
 800f2d4:	2001a2c4 	.word	0x2001a2c4
 800f2d8:	2001a2cc 	.word	0x2001a2cc
 800f2dc:	2001a2d4 	.word	0x2001a2d4
 800f2e0:	2001a2d0 	.word	0x2001a2d0
 800f2e4:	2001a2e0 	.word	0x2001a2e0

0800f2e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b085      	sub	sp, #20
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f2f0:	4b28      	ldr	r3, [pc, #160]	; (800f394 <prvInsertBlockIntoFreeList+0xac>)
 800f2f2:	60fb      	str	r3, [r7, #12]
 800f2f4:	e002      	b.n	800f2fc <prvInsertBlockIntoFreeList+0x14>
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	60fb      	str	r3, [r7, #12]
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	687a      	ldr	r2, [r7, #4]
 800f302:	429a      	cmp	r2, r3
 800f304:	d8f7      	bhi.n	800f2f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	68ba      	ldr	r2, [r7, #8]
 800f310:	4413      	add	r3, r2
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	429a      	cmp	r2, r3
 800f316:	d108      	bne.n	800f32a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	685a      	ldr	r2, [r3, #4]
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	441a      	add	r2, r3
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	68ba      	ldr	r2, [r7, #8]
 800f334:	441a      	add	r2, r3
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d118      	bne.n	800f370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	4b15      	ldr	r3, [pc, #84]	; (800f398 <prvInsertBlockIntoFreeList+0xb0>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	429a      	cmp	r2, r3
 800f348:	d00d      	beq.n	800f366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	685a      	ldr	r2, [r3, #4]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	441a      	add	r2, r3
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	601a      	str	r2, [r3, #0]
 800f364:	e008      	b.n	800f378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f366:	4b0c      	ldr	r3, [pc, #48]	; (800f398 <prvInsertBlockIntoFreeList+0xb0>)
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	601a      	str	r2, [r3, #0]
 800f36e:	e003      	b.n	800f378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f378:	68fa      	ldr	r2, [r7, #12]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d002      	beq.n	800f386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f386:	bf00      	nop
 800f388:	3714      	adds	r7, #20
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	2001a2c4 	.word	0x2001a2c4
 800f398:	2001a2cc 	.word	0x2001a2cc

0800f39c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	4912      	ldr	r1, [pc, #72]	; (800f3ec <MX_USB_DEVICE_Init+0x50>)
 800f3a4:	4812      	ldr	r0, [pc, #72]	; (800f3f0 <MX_USB_DEVICE_Init+0x54>)
 800f3a6:	f7fb ff0b 	bl	800b1c0 <USBD_Init>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d001      	beq.n	800f3b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f3b0:	f7f1 fefa 	bl	80011a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f3b4:	490f      	ldr	r1, [pc, #60]	; (800f3f4 <MX_USB_DEVICE_Init+0x58>)
 800f3b6:	480e      	ldr	r0, [pc, #56]	; (800f3f0 <MX_USB_DEVICE_Init+0x54>)
 800f3b8:	f7fb ff40 	bl	800b23c <USBD_RegisterClass>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d001      	beq.n	800f3c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f3c2:	f7f1 fef1 	bl	80011a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f3c6:	490c      	ldr	r1, [pc, #48]	; (800f3f8 <MX_USB_DEVICE_Init+0x5c>)
 800f3c8:	4809      	ldr	r0, [pc, #36]	; (800f3f0 <MX_USB_DEVICE_Init+0x54>)
 800f3ca:	f7fb fe23 	bl	800b014 <USBD_CDC_RegisterInterface>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d001      	beq.n	800f3d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f3d4:	f7f1 fee8 	bl	80011a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f3d8:	4805      	ldr	r0, [pc, #20]	; (800f3f0 <MX_USB_DEVICE_Init+0x54>)
 800f3da:	f7fb ff73 	bl	800b2c4 <USBD_Start>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d001      	beq.n	800f3e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f3e4:	f7f1 fee0 	bl	80011a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f3e8:	bf00      	nop
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	20000200 	.word	0x20000200
 800f3f0:	2001a2e4 	.word	0x2001a2e4
 800f3f4:	20000168 	.word	0x20000168
 800f3f8:	200001ec 	.word	0x200001ec

0800f3fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f400:	2200      	movs	r2, #0
 800f402:	4905      	ldr	r1, [pc, #20]	; (800f418 <CDC_Init_FS+0x1c>)
 800f404:	4805      	ldr	r0, [pc, #20]	; (800f41c <CDC_Init_FS+0x20>)
 800f406:	f7fb fe1f 	bl	800b048 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f40a:	4905      	ldr	r1, [pc, #20]	; (800f420 <CDC_Init_FS+0x24>)
 800f40c:	4803      	ldr	r0, [pc, #12]	; (800f41c <CDC_Init_FS+0x20>)
 800f40e:	f7fb fe3d 	bl	800b08c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f412:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f414:	4618      	mov	r0, r3
 800f416:	bd80      	pop	{r7, pc}
 800f418:	2001a7c0 	.word	0x2001a7c0
 800f41c:	2001a2e4 	.word	0x2001a2e4
 800f420:	2001a5c0 	.word	0x2001a5c0

0800f424 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f424:	b480      	push	{r7}
 800f426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f428:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	4603      	mov	r3, r0
 800f43c:	6039      	str	r1, [r7, #0]
 800f43e:	71fb      	strb	r3, [r7, #7]
 800f440:	4613      	mov	r3, r2
 800f442:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f444:	79fb      	ldrb	r3, [r7, #7]
 800f446:	2b23      	cmp	r3, #35	; 0x23
 800f448:	d84a      	bhi.n	800f4e0 <CDC_Control_FS+0xac>
 800f44a:	a201      	add	r2, pc, #4	; (adr r2, 800f450 <CDC_Control_FS+0x1c>)
 800f44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f450:	0800f4e1 	.word	0x0800f4e1
 800f454:	0800f4e1 	.word	0x0800f4e1
 800f458:	0800f4e1 	.word	0x0800f4e1
 800f45c:	0800f4e1 	.word	0x0800f4e1
 800f460:	0800f4e1 	.word	0x0800f4e1
 800f464:	0800f4e1 	.word	0x0800f4e1
 800f468:	0800f4e1 	.word	0x0800f4e1
 800f46c:	0800f4e1 	.word	0x0800f4e1
 800f470:	0800f4e1 	.word	0x0800f4e1
 800f474:	0800f4e1 	.word	0x0800f4e1
 800f478:	0800f4e1 	.word	0x0800f4e1
 800f47c:	0800f4e1 	.word	0x0800f4e1
 800f480:	0800f4e1 	.word	0x0800f4e1
 800f484:	0800f4e1 	.word	0x0800f4e1
 800f488:	0800f4e1 	.word	0x0800f4e1
 800f48c:	0800f4e1 	.word	0x0800f4e1
 800f490:	0800f4e1 	.word	0x0800f4e1
 800f494:	0800f4e1 	.word	0x0800f4e1
 800f498:	0800f4e1 	.word	0x0800f4e1
 800f49c:	0800f4e1 	.word	0x0800f4e1
 800f4a0:	0800f4e1 	.word	0x0800f4e1
 800f4a4:	0800f4e1 	.word	0x0800f4e1
 800f4a8:	0800f4e1 	.word	0x0800f4e1
 800f4ac:	0800f4e1 	.word	0x0800f4e1
 800f4b0:	0800f4e1 	.word	0x0800f4e1
 800f4b4:	0800f4e1 	.word	0x0800f4e1
 800f4b8:	0800f4e1 	.word	0x0800f4e1
 800f4bc:	0800f4e1 	.word	0x0800f4e1
 800f4c0:	0800f4e1 	.word	0x0800f4e1
 800f4c4:	0800f4e1 	.word	0x0800f4e1
 800f4c8:	0800f4e1 	.word	0x0800f4e1
 800f4cc:	0800f4e1 	.word	0x0800f4e1
 800f4d0:	0800f4e1 	.word	0x0800f4e1
 800f4d4:	0800f4e1 	.word	0x0800f4e1
 800f4d8:	0800f4e1 	.word	0x0800f4e1
 800f4dc:	0800f4e1 	.word	0x0800f4e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f4e0:	bf00      	nop
  }

  return (USBD_OK);
 800f4e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	370c      	adds	r7, #12
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr

0800f4f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f4fa:	6879      	ldr	r1, [r7, #4]
 800f4fc:	4805      	ldr	r0, [pc, #20]	; (800f514 <CDC_Receive_FS+0x24>)
 800f4fe:	f7fb fdc5 	bl	800b08c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f502:	4804      	ldr	r0, [pc, #16]	; (800f514 <CDC_Receive_FS+0x24>)
 800f504:	f7fb fe26 	bl	800b154 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f508:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3708      	adds	r7, #8
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
 800f512:	bf00      	nop
 800f514:	2001a2e4 	.word	0x2001a2e4

0800f518 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	460b      	mov	r3, r1
 800f522:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f524:	2300      	movs	r3, #0
 800f526:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f528:	4b0d      	ldr	r3, [pc, #52]	; (800f560 <CDC_Transmit_FS+0x48>)
 800f52a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f52e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f53a:	2301      	movs	r3, #1
 800f53c:	e00b      	b.n	800f556 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f53e:	887b      	ldrh	r3, [r7, #2]
 800f540:	461a      	mov	r2, r3
 800f542:	6879      	ldr	r1, [r7, #4]
 800f544:	4806      	ldr	r0, [pc, #24]	; (800f560 <CDC_Transmit_FS+0x48>)
 800f546:	f7fb fd7f 	bl	800b048 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f54a:	4805      	ldr	r0, [pc, #20]	; (800f560 <CDC_Transmit_FS+0x48>)
 800f54c:	f7fb fdbc 	bl	800b0c8 <USBD_CDC_TransmitPacket>
 800f550:	4603      	mov	r3, r0
 800f552:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f554:	7bfb      	ldrb	r3, [r7, #15]
}
 800f556:	4618      	mov	r0, r3
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	2001a2e4 	.word	0x2001a2e4

0800f564 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f564:	b480      	push	{r7}
 800f566:	b087      	sub	sp, #28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	4613      	mov	r3, r2
 800f570:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f572:	2300      	movs	r3, #0
 800f574:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f576:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	371c      	adds	r7, #28
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr
	...

0800f588 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f588:	b480      	push	{r7}
 800f58a:	b083      	sub	sp, #12
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	4603      	mov	r3, r0
 800f590:	6039      	str	r1, [r7, #0]
 800f592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	2212      	movs	r2, #18
 800f598:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f59a:	4b03      	ldr	r3, [pc, #12]	; (800f5a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr
 800f5a8:	2000021c 	.word	0x2000021c

0800f5ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	6039      	str	r1, [r7, #0]
 800f5b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	2204      	movs	r2, #4
 800f5bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f5be:	4b03      	ldr	r3, [pc, #12]	; (800f5cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	370c      	adds	r7, #12
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr
 800f5cc:	20000230 	.word	0x20000230

0800f5d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	6039      	str	r1, [r7, #0]
 800f5da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f5dc:	79fb      	ldrb	r3, [r7, #7]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d105      	bne.n	800f5ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f5e2:	683a      	ldr	r2, [r7, #0]
 800f5e4:	4907      	ldr	r1, [pc, #28]	; (800f604 <USBD_FS_ProductStrDescriptor+0x34>)
 800f5e6:	4808      	ldr	r0, [pc, #32]	; (800f608 <USBD_FS_ProductStrDescriptor+0x38>)
 800f5e8:	f7fd f818 	bl	800c61c <USBD_GetString>
 800f5ec:	e004      	b.n	800f5f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f5ee:	683a      	ldr	r2, [r7, #0]
 800f5f0:	4904      	ldr	r1, [pc, #16]	; (800f604 <USBD_FS_ProductStrDescriptor+0x34>)
 800f5f2:	4805      	ldr	r0, [pc, #20]	; (800f608 <USBD_FS_ProductStrDescriptor+0x38>)
 800f5f4:	f7fd f812 	bl	800c61c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5f8:	4b02      	ldr	r3, [pc, #8]	; (800f604 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3708      	adds	r7, #8
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	2001a9c0 	.word	0x2001a9c0
 800f608:	08011690 	.word	0x08011690

0800f60c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	4603      	mov	r3, r0
 800f614:	6039      	str	r1, [r7, #0]
 800f616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f618:	683a      	ldr	r2, [r7, #0]
 800f61a:	4904      	ldr	r1, [pc, #16]	; (800f62c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f61c:	4804      	ldr	r0, [pc, #16]	; (800f630 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f61e:	f7fc fffd 	bl	800c61c <USBD_GetString>
  return USBD_StrDesc;
 800f622:	4b02      	ldr	r3, [pc, #8]	; (800f62c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f624:	4618      	mov	r0, r3
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}
 800f62c:	2001a9c0 	.word	0x2001a9c0
 800f630:	080116a8 	.word	0x080116a8

0800f634 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	4603      	mov	r3, r0
 800f63c:	6039      	str	r1, [r7, #0]
 800f63e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	221a      	movs	r2, #26
 800f644:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f646:	f000 f843 	bl	800f6d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f64a:	4b02      	ldr	r3, [pc, #8]	; (800f654 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3708      	adds	r7, #8
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}
 800f654:	20000234 	.word	0x20000234

0800f658 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	4603      	mov	r3, r0
 800f660:	6039      	str	r1, [r7, #0]
 800f662:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f664:	79fb      	ldrb	r3, [r7, #7]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d105      	bne.n	800f676 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f66a:	683a      	ldr	r2, [r7, #0]
 800f66c:	4907      	ldr	r1, [pc, #28]	; (800f68c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f66e:	4808      	ldr	r0, [pc, #32]	; (800f690 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f670:	f7fc ffd4 	bl	800c61c <USBD_GetString>
 800f674:	e004      	b.n	800f680 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f676:	683a      	ldr	r2, [r7, #0]
 800f678:	4904      	ldr	r1, [pc, #16]	; (800f68c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f67a:	4805      	ldr	r0, [pc, #20]	; (800f690 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f67c:	f7fc ffce 	bl	800c61c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f680:	4b02      	ldr	r3, [pc, #8]	; (800f68c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f682:	4618      	mov	r0, r3
 800f684:	3708      	adds	r7, #8
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	2001a9c0 	.word	0x2001a9c0
 800f690:	080116bc 	.word	0x080116bc

0800f694 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
 800f69a:	4603      	mov	r3, r0
 800f69c:	6039      	str	r1, [r7, #0]
 800f69e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6a0:	79fb      	ldrb	r3, [r7, #7]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d105      	bne.n	800f6b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f6a6:	683a      	ldr	r2, [r7, #0]
 800f6a8:	4907      	ldr	r1, [pc, #28]	; (800f6c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f6aa:	4808      	ldr	r0, [pc, #32]	; (800f6cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f6ac:	f7fc ffb6 	bl	800c61c <USBD_GetString>
 800f6b0:	e004      	b.n	800f6bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f6b2:	683a      	ldr	r2, [r7, #0]
 800f6b4:	4904      	ldr	r1, [pc, #16]	; (800f6c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f6b6:	4805      	ldr	r0, [pc, #20]	; (800f6cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f6b8:	f7fc ffb0 	bl	800c61c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6bc:	4b02      	ldr	r3, [pc, #8]	; (800f6c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3708      	adds	r7, #8
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	2001a9c0 	.word	0x2001a9c0
 800f6cc:	080116c8 	.word	0x080116c8

0800f6d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f6d6:	4b0f      	ldr	r3, [pc, #60]	; (800f714 <Get_SerialNum+0x44>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f6dc:	4b0e      	ldr	r3, [pc, #56]	; (800f718 <Get_SerialNum+0x48>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f6e2:	4b0e      	ldr	r3, [pc, #56]	; (800f71c <Get_SerialNum+0x4c>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f6e8:	68fa      	ldr	r2, [r7, #12]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	4413      	add	r3, r2
 800f6ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d009      	beq.n	800f70a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f6f6:	2208      	movs	r2, #8
 800f6f8:	4909      	ldr	r1, [pc, #36]	; (800f720 <Get_SerialNum+0x50>)
 800f6fa:	68f8      	ldr	r0, [r7, #12]
 800f6fc:	f000 f814 	bl	800f728 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f700:	2204      	movs	r2, #4
 800f702:	4908      	ldr	r1, [pc, #32]	; (800f724 <Get_SerialNum+0x54>)
 800f704:	68b8      	ldr	r0, [r7, #8]
 800f706:	f000 f80f 	bl	800f728 <IntToUnicode>
  }
}
 800f70a:	bf00      	nop
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	1fff7a10 	.word	0x1fff7a10
 800f718:	1fff7a14 	.word	0x1fff7a14
 800f71c:	1fff7a18 	.word	0x1fff7a18
 800f720:	20000236 	.word	0x20000236
 800f724:	20000246 	.word	0x20000246

0800f728 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f728:	b480      	push	{r7}
 800f72a:	b087      	sub	sp, #28
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	60b9      	str	r1, [r7, #8]
 800f732:	4613      	mov	r3, r2
 800f734:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f736:	2300      	movs	r3, #0
 800f738:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f73a:	2300      	movs	r3, #0
 800f73c:	75fb      	strb	r3, [r7, #23]
 800f73e:	e027      	b.n	800f790 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	0f1b      	lsrs	r3, r3, #28
 800f744:	2b09      	cmp	r3, #9
 800f746:	d80b      	bhi.n	800f760 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	0f1b      	lsrs	r3, r3, #28
 800f74c:	b2da      	uxtb	r2, r3
 800f74e:	7dfb      	ldrb	r3, [r7, #23]
 800f750:	005b      	lsls	r3, r3, #1
 800f752:	4619      	mov	r1, r3
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	440b      	add	r3, r1
 800f758:	3230      	adds	r2, #48	; 0x30
 800f75a:	b2d2      	uxtb	r2, r2
 800f75c:	701a      	strb	r2, [r3, #0]
 800f75e:	e00a      	b.n	800f776 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	0f1b      	lsrs	r3, r3, #28
 800f764:	b2da      	uxtb	r2, r3
 800f766:	7dfb      	ldrb	r3, [r7, #23]
 800f768:	005b      	lsls	r3, r3, #1
 800f76a:	4619      	mov	r1, r3
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	440b      	add	r3, r1
 800f770:	3237      	adds	r2, #55	; 0x37
 800f772:	b2d2      	uxtb	r2, r2
 800f774:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	011b      	lsls	r3, r3, #4
 800f77a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f77c:	7dfb      	ldrb	r3, [r7, #23]
 800f77e:	005b      	lsls	r3, r3, #1
 800f780:	3301      	adds	r3, #1
 800f782:	68ba      	ldr	r2, [r7, #8]
 800f784:	4413      	add	r3, r2
 800f786:	2200      	movs	r2, #0
 800f788:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f78a:	7dfb      	ldrb	r3, [r7, #23]
 800f78c:	3301      	adds	r3, #1
 800f78e:	75fb      	strb	r3, [r7, #23]
 800f790:	7dfa      	ldrb	r2, [r7, #23]
 800f792:	79fb      	ldrb	r3, [r7, #7]
 800f794:	429a      	cmp	r2, r3
 800f796:	d3d3      	bcc.n	800f740 <IntToUnicode+0x18>
  }
}
 800f798:	bf00      	nop
 800f79a:	bf00      	nop
 800f79c:	371c      	adds	r7, #28
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr
	...

0800f7a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b08a      	sub	sp, #40	; 0x28
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f7b0:	f107 0314 	add.w	r3, r7, #20
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	601a      	str	r2, [r3, #0]
 800f7b8:	605a      	str	r2, [r3, #4]
 800f7ba:	609a      	str	r2, [r3, #8]
 800f7bc:	60da      	str	r2, [r3, #12]
 800f7be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f7c8:	d13a      	bne.n	800f840 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	613b      	str	r3, [r7, #16]
 800f7ce:	4b1e      	ldr	r3, [pc, #120]	; (800f848 <HAL_PCD_MspInit+0xa0>)
 800f7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7d2:	4a1d      	ldr	r2, [pc, #116]	; (800f848 <HAL_PCD_MspInit+0xa0>)
 800f7d4:	f043 0301 	orr.w	r3, r3, #1
 800f7d8:	6313      	str	r3, [r2, #48]	; 0x30
 800f7da:	4b1b      	ldr	r3, [pc, #108]	; (800f848 <HAL_PCD_MspInit+0xa0>)
 800f7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7de:	f003 0301 	and.w	r3, r3, #1
 800f7e2:	613b      	str	r3, [r7, #16]
 800f7e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f7e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f7ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7ec:	2302      	movs	r3, #2
 800f7ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7f4:	2303      	movs	r3, #3
 800f7f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f7f8:	230a      	movs	r3, #10
 800f7fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f7fc:	f107 0314 	add.w	r3, r7, #20
 800f800:	4619      	mov	r1, r3
 800f802:	4812      	ldr	r0, [pc, #72]	; (800f84c <HAL_PCD_MspInit+0xa4>)
 800f804:	f7f2 fdd0 	bl	80023a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f808:	4b0f      	ldr	r3, [pc, #60]	; (800f848 <HAL_PCD_MspInit+0xa0>)
 800f80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f80c:	4a0e      	ldr	r2, [pc, #56]	; (800f848 <HAL_PCD_MspInit+0xa0>)
 800f80e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f812:	6353      	str	r3, [r2, #52]	; 0x34
 800f814:	2300      	movs	r3, #0
 800f816:	60fb      	str	r3, [r7, #12]
 800f818:	4b0b      	ldr	r3, [pc, #44]	; (800f848 <HAL_PCD_MspInit+0xa0>)
 800f81a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f81c:	4a0a      	ldr	r2, [pc, #40]	; (800f848 <HAL_PCD_MspInit+0xa0>)
 800f81e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f822:	6453      	str	r3, [r2, #68]	; 0x44
 800f824:	4b08      	ldr	r3, [pc, #32]	; (800f848 <HAL_PCD_MspInit+0xa0>)
 800f826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f82c:	60fb      	str	r3, [r7, #12]
 800f82e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f830:	2200      	movs	r2, #0
 800f832:	2105      	movs	r1, #5
 800f834:	2043      	movs	r0, #67	; 0x43
 800f836:	f7f2 fd73 	bl	8002320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f83a:	2043      	movs	r0, #67	; 0x43
 800f83c:	f7f2 fd9c 	bl	8002378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f840:	bf00      	nop
 800f842:	3728      	adds	r7, #40	; 0x28
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	40023800 	.word	0x40023800
 800f84c:	40020000 	.word	0x40020000

0800f850 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f864:	4619      	mov	r1, r3
 800f866:	4610      	mov	r0, r2
 800f868:	f7fb fd79 	bl	800b35e <USBD_LL_SetupStage>
}
 800f86c:	bf00      	nop
 800f86e:	3708      	adds	r7, #8
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	460b      	mov	r3, r1
 800f87e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f886:	78fa      	ldrb	r2, [r7, #3]
 800f888:	6879      	ldr	r1, [r7, #4]
 800f88a:	4613      	mov	r3, r2
 800f88c:	00db      	lsls	r3, r3, #3
 800f88e:	4413      	add	r3, r2
 800f890:	009b      	lsls	r3, r3, #2
 800f892:	440b      	add	r3, r1
 800f894:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f898:	681a      	ldr	r2, [r3, #0]
 800f89a:	78fb      	ldrb	r3, [r7, #3]
 800f89c:	4619      	mov	r1, r3
 800f89e:	f7fb fdb3 	bl	800b408 <USBD_LL_DataOutStage>
}
 800f8a2:	bf00      	nop
 800f8a4:	3708      	adds	r7, #8
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b082      	sub	sp, #8
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
 800f8b2:	460b      	mov	r3, r1
 800f8b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f8bc:	78fa      	ldrb	r2, [r7, #3]
 800f8be:	6879      	ldr	r1, [r7, #4]
 800f8c0:	4613      	mov	r3, r2
 800f8c2:	00db      	lsls	r3, r3, #3
 800f8c4:	4413      	add	r3, r2
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	440b      	add	r3, r1
 800f8ca:	334c      	adds	r3, #76	; 0x4c
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	78fb      	ldrb	r3, [r7, #3]
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	f7fb fe4c 	bl	800b56e <USBD_LL_DataInStage>
}
 800f8d6:	bf00      	nop
 800f8d8:	3708      	adds	r7, #8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b082      	sub	sp, #8
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7fb ff80 	bl	800b7f2 <USBD_LL_SOF>
}
 800f8f2:	bf00      	nop
 800f8f4:	3708      	adds	r7, #8
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}

0800f8fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8fa:	b580      	push	{r7, lr}
 800f8fc:	b084      	sub	sp, #16
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f902:	2301      	movs	r3, #1
 800f904:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	2b02      	cmp	r3, #2
 800f90c:	d001      	beq.n	800f912 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f90e:	f7f1 fc4b 	bl	80011a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f918:	7bfa      	ldrb	r2, [r7, #15]
 800f91a:	4611      	mov	r1, r2
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fb ff2a 	bl	800b776 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fb fed2 	bl	800b6d2 <USBD_LL_Reset>
}
 800f92e:	bf00      	nop
 800f930:	3710      	adds	r7, #16
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
	...

0800f938 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f946:	4618      	mov	r0, r3
 800f948:	f7fb ff25 	bl	800b796 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	6812      	ldr	r2, [r2, #0]
 800f95a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f95e:	f043 0301 	orr.w	r3, r3, #1
 800f962:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6a1b      	ldr	r3, [r3, #32]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d005      	beq.n	800f978 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f96c:	4b04      	ldr	r3, [pc, #16]	; (800f980 <HAL_PCD_SuspendCallback+0x48>)
 800f96e:	691b      	ldr	r3, [r3, #16]
 800f970:	4a03      	ldr	r2, [pc, #12]	; (800f980 <HAL_PCD_SuspendCallback+0x48>)
 800f972:	f043 0306 	orr.w	r3, r3, #6
 800f976:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f978:	bf00      	nop
 800f97a:	3708      	adds	r7, #8
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	e000ed00 	.word	0xe000ed00

0800f984 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b082      	sub	sp, #8
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f992:	4618      	mov	r0, r3
 800f994:	f7fb ff15 	bl	800b7c2 <USBD_LL_Resume>
}
 800f998:	bf00      	nop
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b082      	sub	sp, #8
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9b2:	78fa      	ldrb	r2, [r7, #3]
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7fb ff6d 	bl	800b896 <USBD_LL_IsoOUTIncomplete>
}
 800f9bc:	bf00      	nop
 800f9be:	3708      	adds	r7, #8
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9d6:	78fa      	ldrb	r2, [r7, #3]
 800f9d8:	4611      	mov	r1, r2
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fb ff29 	bl	800b832 <USBD_LL_IsoINIncomplete>
}
 800f9e0:	bf00      	nop
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fb ff7f 	bl	800b8fa <USBD_LL_DevConnected>
}
 800f9fc:	bf00      	nop
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fb ff7c 	bl	800b910 <USBD_LL_DevDisconnected>
}
 800fa18:	bf00      	nop
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d13c      	bne.n	800faaa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fa30:	4a20      	ldr	r2, [pc, #128]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4a1e      	ldr	r2, [pc, #120]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa3c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fa40:	4b1c      	ldr	r3, [pc, #112]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fa46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fa48:	4b1a      	ldr	r3, [pc, #104]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa4a:	2204      	movs	r2, #4
 800fa4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fa4e:	4b19      	ldr	r3, [pc, #100]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa50:	2202      	movs	r2, #2
 800fa52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fa54:	4b17      	ldr	r3, [pc, #92]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa56:	2200      	movs	r2, #0
 800fa58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fa5a:	4b16      	ldr	r3, [pc, #88]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa5c:	2202      	movs	r2, #2
 800fa5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fa60:	4b14      	ldr	r3, [pc, #80]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa62:	2200      	movs	r2, #0
 800fa64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fa66:	4b13      	ldr	r3, [pc, #76]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa68:	2200      	movs	r2, #0
 800fa6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fa6c:	4b11      	ldr	r3, [pc, #68]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa6e:	2200      	movs	r2, #0
 800fa70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fa72:	4b10      	ldr	r3, [pc, #64]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa74:	2200      	movs	r2, #0
 800fa76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fa78:	4b0e      	ldr	r3, [pc, #56]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fa7e:	480d      	ldr	r0, [pc, #52]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa80:	f7f3 fdbc 	bl	80035fc <HAL_PCD_Init>
 800fa84:	4603      	mov	r3, r0
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d001      	beq.n	800fa8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fa8a:	f7f1 fb8d 	bl	80011a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fa8e:	2180      	movs	r1, #128	; 0x80
 800fa90:	4808      	ldr	r0, [pc, #32]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa92:	f7f5 f81e 	bl	8004ad2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fa96:	2240      	movs	r2, #64	; 0x40
 800fa98:	2100      	movs	r1, #0
 800fa9a:	4806      	ldr	r0, [pc, #24]	; (800fab4 <USBD_LL_Init+0x94>)
 800fa9c:	f7f4 ffd2 	bl	8004a44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800faa0:	2280      	movs	r2, #128	; 0x80
 800faa2:	2101      	movs	r1, #1
 800faa4:	4803      	ldr	r0, [pc, #12]	; (800fab4 <USBD_LL_Init+0x94>)
 800faa6:	f7f4 ffcd 	bl	8004a44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	2001abc0 	.word	0x2001abc0

0800fab8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac0:	2300      	movs	r3, #0
 800fac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fac4:	2300      	movs	r3, #0
 800fac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800face:	4618      	mov	r0, r3
 800fad0:	f7f3 febc 	bl	800384c <HAL_PCD_Start>
 800fad4:	4603      	mov	r3, r0
 800fad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fad8:	7bfb      	ldrb	r3, [r7, #15]
 800fada:	4618      	mov	r0, r3
 800fadc:	f000 f942 	bl	800fd64 <USBD_Get_USB_Status>
 800fae0:	4603      	mov	r3, r0
 800fae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fae4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800faee:	b580      	push	{r7, lr}
 800faf0:	b084      	sub	sp, #16
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
 800faf6:	4608      	mov	r0, r1
 800faf8:	4611      	mov	r1, r2
 800fafa:	461a      	mov	r2, r3
 800fafc:	4603      	mov	r3, r0
 800fafe:	70fb      	strb	r3, [r7, #3]
 800fb00:	460b      	mov	r3, r1
 800fb02:	70bb      	strb	r3, [r7, #2]
 800fb04:	4613      	mov	r3, r2
 800fb06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb16:	78bb      	ldrb	r3, [r7, #2]
 800fb18:	883a      	ldrh	r2, [r7, #0]
 800fb1a:	78f9      	ldrb	r1, [r7, #3]
 800fb1c:	f7f4 fb8d 	bl	800423a <HAL_PCD_EP_Open>
 800fb20:	4603      	mov	r3, r0
 800fb22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb24:	7bfb      	ldrb	r3, [r7, #15]
 800fb26:	4618      	mov	r0, r3
 800fb28:	f000 f91c 	bl	800fd64 <USBD_Get_USB_Status>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb30:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3710      	adds	r7, #16
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}

0800fb3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb3a:	b580      	push	{r7, lr}
 800fb3c:	b084      	sub	sp, #16
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	6078      	str	r0, [r7, #4]
 800fb42:	460b      	mov	r3, r1
 800fb44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb46:	2300      	movs	r3, #0
 800fb48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb54:	78fa      	ldrb	r2, [r7, #3]
 800fb56:	4611      	mov	r1, r2
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7f4 fbd6 	bl	800430a <HAL_PCD_EP_Close>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb62:	7bfb      	ldrb	r3, [r7, #15]
 800fb64:	4618      	mov	r0, r3
 800fb66:	f000 f8fd 	bl	800fd64 <USBD_Get_USB_Status>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3710      	adds	r7, #16
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	460b      	mov	r3, r1
 800fb82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb84:	2300      	movs	r3, #0
 800fb86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb92:	78fa      	ldrb	r2, [r7, #3]
 800fb94:	4611      	mov	r1, r2
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7f4 fcae 	bl	80044f8 <HAL_PCD_EP_SetStall>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fba0:	7bfb      	ldrb	r3, [r7, #15]
 800fba2:	4618      	mov	r0, r3
 800fba4:	f000 f8de 	bl	800fd64 <USBD_Get_USB_Status>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbac:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}

0800fbb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbb6:	b580      	push	{r7, lr}
 800fbb8:	b084      	sub	sp, #16
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
 800fbbe:	460b      	mov	r3, r1
 800fbc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbd0:	78fa      	ldrb	r2, [r7, #3]
 800fbd2:	4611      	mov	r1, r2
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7f4 fcf3 	bl	80045c0 <HAL_PCD_EP_ClrStall>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbde:	7bfb      	ldrb	r3, [r7, #15]
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f000 f8bf 	bl	800fd64 <USBD_Get_USB_Status>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbea:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3710      	adds	r7, #16
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b085      	sub	sp, #20
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fc08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	da0b      	bge.n	800fc28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fc10:	78fb      	ldrb	r3, [r7, #3]
 800fc12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc16:	68f9      	ldr	r1, [r7, #12]
 800fc18:	4613      	mov	r3, r2
 800fc1a:	00db      	lsls	r3, r3, #3
 800fc1c:	4413      	add	r3, r2
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	440b      	add	r3, r1
 800fc22:	333e      	adds	r3, #62	; 0x3e
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	e00b      	b.n	800fc40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fc28:	78fb      	ldrb	r3, [r7, #3]
 800fc2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc2e:	68f9      	ldr	r1, [r7, #12]
 800fc30:	4613      	mov	r3, r2
 800fc32:	00db      	lsls	r3, r3, #3
 800fc34:	4413      	add	r3, r2
 800fc36:	009b      	lsls	r3, r3, #2
 800fc38:	440b      	add	r3, r1
 800fc3a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fc3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3714      	adds	r7, #20
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b084      	sub	sp, #16
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	460b      	mov	r3, r1
 800fc56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc66:	78fa      	ldrb	r2, [r7, #3]
 800fc68:	4611      	mov	r1, r2
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7f4 fac0 	bl	80041f0 <HAL_PCD_SetAddress>
 800fc70:	4603      	mov	r3, r0
 800fc72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc74:	7bfb      	ldrb	r3, [r7, #15]
 800fc76:	4618      	mov	r0, r3
 800fc78:	f000 f874 	bl	800fd64 <USBD_Get_USB_Status>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc80:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b086      	sub	sp, #24
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	60f8      	str	r0, [r7, #12]
 800fc92:	607a      	str	r2, [r7, #4]
 800fc94:	603b      	str	r3, [r7, #0]
 800fc96:	460b      	mov	r3, r1
 800fc98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fca8:	7af9      	ldrb	r1, [r7, #11]
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	f7f4 fbd9 	bl	8004464 <HAL_PCD_EP_Transmit>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcb6:	7dfb      	ldrb	r3, [r7, #23]
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f000 f853 	bl	800fd64 <USBD_Get_USB_Status>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fcc2:	7dbb      	ldrb	r3, [r7, #22]
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3718      	adds	r7, #24
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b086      	sub	sp, #24
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	60f8      	str	r0, [r7, #12]
 800fcd4:	607a      	str	r2, [r7, #4]
 800fcd6:	603b      	str	r3, [r7, #0]
 800fcd8:	460b      	mov	r3, r1
 800fcda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fce0:	2300      	movs	r3, #0
 800fce2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fcea:	7af9      	ldrb	r1, [r7, #11]
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	687a      	ldr	r2, [r7, #4]
 800fcf0:	f7f4 fb55 	bl	800439e <HAL_PCD_EP_Receive>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcf8:	7dfb      	ldrb	r3, [r7, #23]
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f000 f832 	bl	800fd64 <USBD_Get_USB_Status>
 800fd00:	4603      	mov	r3, r0
 800fd02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd04:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3718      	adds	r7, #24
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b082      	sub	sp, #8
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
 800fd16:	460b      	mov	r3, r1
 800fd18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd20:	78fa      	ldrb	r2, [r7, #3]
 800fd22:	4611      	mov	r1, r2
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7f4 fb85 	bl	8004434 <HAL_PCD_EP_GetRxCount>
 800fd2a:	4603      	mov	r3, r0
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3708      	adds	r7, #8
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fd3c:	4b03      	ldr	r3, [pc, #12]	; (800fd4c <USBD_static_malloc+0x18>)
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	370c      	adds	r7, #12
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop
 800fd4c:	2001b0cc 	.word	0x2001b0cc

0800fd50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]

}
 800fd58:	bf00      	nop
 800fd5a:	370c      	adds	r7, #12
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b085      	sub	sp, #20
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fd72:	79fb      	ldrb	r3, [r7, #7]
 800fd74:	2b03      	cmp	r3, #3
 800fd76:	d817      	bhi.n	800fda8 <USBD_Get_USB_Status+0x44>
 800fd78:	a201      	add	r2, pc, #4	; (adr r2, 800fd80 <USBD_Get_USB_Status+0x1c>)
 800fd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd7e:	bf00      	nop
 800fd80:	0800fd91 	.word	0x0800fd91
 800fd84:	0800fd97 	.word	0x0800fd97
 800fd88:	0800fd9d 	.word	0x0800fd9d
 800fd8c:	0800fda3 	.word	0x0800fda3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fd90:	2300      	movs	r3, #0
 800fd92:	73fb      	strb	r3, [r7, #15]
    break;
 800fd94:	e00b      	b.n	800fdae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fd96:	2303      	movs	r3, #3
 800fd98:	73fb      	strb	r3, [r7, #15]
    break;
 800fd9a:	e008      	b.n	800fdae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	73fb      	strb	r3, [r7, #15]
    break;
 800fda0:	e005      	b.n	800fdae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fda2:	2303      	movs	r3, #3
 800fda4:	73fb      	strb	r3, [r7, #15]
    break;
 800fda6:	e002      	b.n	800fdae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fda8:	2303      	movs	r3, #3
 800fdaa:	73fb      	strb	r3, [r7, #15]
    break;
 800fdac:	bf00      	nop
  }
  return usb_status;
 800fdae:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3714      	adds	r7, #20
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr

0800fdbc <__errno>:
 800fdbc:	4b01      	ldr	r3, [pc, #4]	; (800fdc4 <__errno+0x8>)
 800fdbe:	6818      	ldr	r0, [r3, #0]
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop
 800fdc4:	20000250 	.word	0x20000250

0800fdc8 <std>:
 800fdc8:	2300      	movs	r3, #0
 800fdca:	b510      	push	{r4, lr}
 800fdcc:	4604      	mov	r4, r0
 800fdce:	e9c0 3300 	strd	r3, r3, [r0]
 800fdd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fdd6:	6083      	str	r3, [r0, #8]
 800fdd8:	8181      	strh	r1, [r0, #12]
 800fdda:	6643      	str	r3, [r0, #100]	; 0x64
 800fddc:	81c2      	strh	r2, [r0, #14]
 800fdde:	6183      	str	r3, [r0, #24]
 800fde0:	4619      	mov	r1, r3
 800fde2:	2208      	movs	r2, #8
 800fde4:	305c      	adds	r0, #92	; 0x5c
 800fde6:	f000 f92b 	bl	8010040 <memset>
 800fdea:	4b05      	ldr	r3, [pc, #20]	; (800fe00 <std+0x38>)
 800fdec:	6263      	str	r3, [r4, #36]	; 0x24
 800fdee:	4b05      	ldr	r3, [pc, #20]	; (800fe04 <std+0x3c>)
 800fdf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800fdf2:	4b05      	ldr	r3, [pc, #20]	; (800fe08 <std+0x40>)
 800fdf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fdf6:	4b05      	ldr	r3, [pc, #20]	; (800fe0c <std+0x44>)
 800fdf8:	6224      	str	r4, [r4, #32]
 800fdfa:	6323      	str	r3, [r4, #48]	; 0x30
 800fdfc:	bd10      	pop	{r4, pc}
 800fdfe:	bf00      	nop
 800fe00:	080103a1 	.word	0x080103a1
 800fe04:	080103c3 	.word	0x080103c3
 800fe08:	080103fb 	.word	0x080103fb
 800fe0c:	0801041f 	.word	0x0801041f

0800fe10 <_cleanup_r>:
 800fe10:	4901      	ldr	r1, [pc, #4]	; (800fe18 <_cleanup_r+0x8>)
 800fe12:	f000 b8af 	b.w	800ff74 <_fwalk_reent>
 800fe16:	bf00      	nop
 800fe18:	08010579 	.word	0x08010579

0800fe1c <__sfmoreglue>:
 800fe1c:	b570      	push	{r4, r5, r6, lr}
 800fe1e:	2268      	movs	r2, #104	; 0x68
 800fe20:	1e4d      	subs	r5, r1, #1
 800fe22:	4355      	muls	r5, r2
 800fe24:	460e      	mov	r6, r1
 800fe26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fe2a:	f000 f97d 	bl	8010128 <_malloc_r>
 800fe2e:	4604      	mov	r4, r0
 800fe30:	b140      	cbz	r0, 800fe44 <__sfmoreglue+0x28>
 800fe32:	2100      	movs	r1, #0
 800fe34:	e9c0 1600 	strd	r1, r6, [r0]
 800fe38:	300c      	adds	r0, #12
 800fe3a:	60a0      	str	r0, [r4, #8]
 800fe3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fe40:	f000 f8fe 	bl	8010040 <memset>
 800fe44:	4620      	mov	r0, r4
 800fe46:	bd70      	pop	{r4, r5, r6, pc}

0800fe48 <__sfp_lock_acquire>:
 800fe48:	4801      	ldr	r0, [pc, #4]	; (800fe50 <__sfp_lock_acquire+0x8>)
 800fe4a:	f000 b8d8 	b.w	800fffe <__retarget_lock_acquire_recursive>
 800fe4e:	bf00      	nop
 800fe50:	2001b2ed 	.word	0x2001b2ed

0800fe54 <__sfp_lock_release>:
 800fe54:	4801      	ldr	r0, [pc, #4]	; (800fe5c <__sfp_lock_release+0x8>)
 800fe56:	f000 b8d3 	b.w	8010000 <__retarget_lock_release_recursive>
 800fe5a:	bf00      	nop
 800fe5c:	2001b2ed 	.word	0x2001b2ed

0800fe60 <__sinit_lock_acquire>:
 800fe60:	4801      	ldr	r0, [pc, #4]	; (800fe68 <__sinit_lock_acquire+0x8>)
 800fe62:	f000 b8cc 	b.w	800fffe <__retarget_lock_acquire_recursive>
 800fe66:	bf00      	nop
 800fe68:	2001b2ee 	.word	0x2001b2ee

0800fe6c <__sinit_lock_release>:
 800fe6c:	4801      	ldr	r0, [pc, #4]	; (800fe74 <__sinit_lock_release+0x8>)
 800fe6e:	f000 b8c7 	b.w	8010000 <__retarget_lock_release_recursive>
 800fe72:	bf00      	nop
 800fe74:	2001b2ee 	.word	0x2001b2ee

0800fe78 <__sinit>:
 800fe78:	b510      	push	{r4, lr}
 800fe7a:	4604      	mov	r4, r0
 800fe7c:	f7ff fff0 	bl	800fe60 <__sinit_lock_acquire>
 800fe80:	69a3      	ldr	r3, [r4, #24]
 800fe82:	b11b      	cbz	r3, 800fe8c <__sinit+0x14>
 800fe84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe88:	f7ff bff0 	b.w	800fe6c <__sinit_lock_release>
 800fe8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fe90:	6523      	str	r3, [r4, #80]	; 0x50
 800fe92:	4b13      	ldr	r3, [pc, #76]	; (800fee0 <__sinit+0x68>)
 800fe94:	4a13      	ldr	r2, [pc, #76]	; (800fee4 <__sinit+0x6c>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	62a2      	str	r2, [r4, #40]	; 0x28
 800fe9a:	42a3      	cmp	r3, r4
 800fe9c:	bf04      	itt	eq
 800fe9e:	2301      	moveq	r3, #1
 800fea0:	61a3      	streq	r3, [r4, #24]
 800fea2:	4620      	mov	r0, r4
 800fea4:	f000 f820 	bl	800fee8 <__sfp>
 800fea8:	6060      	str	r0, [r4, #4]
 800feaa:	4620      	mov	r0, r4
 800feac:	f000 f81c 	bl	800fee8 <__sfp>
 800feb0:	60a0      	str	r0, [r4, #8]
 800feb2:	4620      	mov	r0, r4
 800feb4:	f000 f818 	bl	800fee8 <__sfp>
 800feb8:	2200      	movs	r2, #0
 800feba:	60e0      	str	r0, [r4, #12]
 800febc:	2104      	movs	r1, #4
 800febe:	6860      	ldr	r0, [r4, #4]
 800fec0:	f7ff ff82 	bl	800fdc8 <std>
 800fec4:	68a0      	ldr	r0, [r4, #8]
 800fec6:	2201      	movs	r2, #1
 800fec8:	2109      	movs	r1, #9
 800feca:	f7ff ff7d 	bl	800fdc8 <std>
 800fece:	68e0      	ldr	r0, [r4, #12]
 800fed0:	2202      	movs	r2, #2
 800fed2:	2112      	movs	r1, #18
 800fed4:	f7ff ff78 	bl	800fdc8 <std>
 800fed8:	2301      	movs	r3, #1
 800feda:	61a3      	str	r3, [r4, #24]
 800fedc:	e7d2      	b.n	800fe84 <__sinit+0xc>
 800fede:	bf00      	nop
 800fee0:	08014048 	.word	0x08014048
 800fee4:	0800fe11 	.word	0x0800fe11

0800fee8 <__sfp>:
 800fee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feea:	4607      	mov	r7, r0
 800feec:	f7ff ffac 	bl	800fe48 <__sfp_lock_acquire>
 800fef0:	4b1e      	ldr	r3, [pc, #120]	; (800ff6c <__sfp+0x84>)
 800fef2:	681e      	ldr	r6, [r3, #0]
 800fef4:	69b3      	ldr	r3, [r6, #24]
 800fef6:	b913      	cbnz	r3, 800fefe <__sfp+0x16>
 800fef8:	4630      	mov	r0, r6
 800fefa:	f7ff ffbd 	bl	800fe78 <__sinit>
 800fefe:	3648      	adds	r6, #72	; 0x48
 800ff00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ff04:	3b01      	subs	r3, #1
 800ff06:	d503      	bpl.n	800ff10 <__sfp+0x28>
 800ff08:	6833      	ldr	r3, [r6, #0]
 800ff0a:	b30b      	cbz	r3, 800ff50 <__sfp+0x68>
 800ff0c:	6836      	ldr	r6, [r6, #0]
 800ff0e:	e7f7      	b.n	800ff00 <__sfp+0x18>
 800ff10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ff14:	b9d5      	cbnz	r5, 800ff4c <__sfp+0x64>
 800ff16:	4b16      	ldr	r3, [pc, #88]	; (800ff70 <__sfp+0x88>)
 800ff18:	60e3      	str	r3, [r4, #12]
 800ff1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ff1e:	6665      	str	r5, [r4, #100]	; 0x64
 800ff20:	f000 f86c 	bl	800fffc <__retarget_lock_init_recursive>
 800ff24:	f7ff ff96 	bl	800fe54 <__sfp_lock_release>
 800ff28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ff2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ff30:	6025      	str	r5, [r4, #0]
 800ff32:	61a5      	str	r5, [r4, #24]
 800ff34:	2208      	movs	r2, #8
 800ff36:	4629      	mov	r1, r5
 800ff38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ff3c:	f000 f880 	bl	8010040 <memset>
 800ff40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ff44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ff48:	4620      	mov	r0, r4
 800ff4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff4c:	3468      	adds	r4, #104	; 0x68
 800ff4e:	e7d9      	b.n	800ff04 <__sfp+0x1c>
 800ff50:	2104      	movs	r1, #4
 800ff52:	4638      	mov	r0, r7
 800ff54:	f7ff ff62 	bl	800fe1c <__sfmoreglue>
 800ff58:	4604      	mov	r4, r0
 800ff5a:	6030      	str	r0, [r6, #0]
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	d1d5      	bne.n	800ff0c <__sfp+0x24>
 800ff60:	f7ff ff78 	bl	800fe54 <__sfp_lock_release>
 800ff64:	230c      	movs	r3, #12
 800ff66:	603b      	str	r3, [r7, #0]
 800ff68:	e7ee      	b.n	800ff48 <__sfp+0x60>
 800ff6a:	bf00      	nop
 800ff6c:	08014048 	.word	0x08014048
 800ff70:	ffff0001 	.word	0xffff0001

0800ff74 <_fwalk_reent>:
 800ff74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff78:	4606      	mov	r6, r0
 800ff7a:	4688      	mov	r8, r1
 800ff7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ff80:	2700      	movs	r7, #0
 800ff82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff86:	f1b9 0901 	subs.w	r9, r9, #1
 800ff8a:	d505      	bpl.n	800ff98 <_fwalk_reent+0x24>
 800ff8c:	6824      	ldr	r4, [r4, #0]
 800ff8e:	2c00      	cmp	r4, #0
 800ff90:	d1f7      	bne.n	800ff82 <_fwalk_reent+0xe>
 800ff92:	4638      	mov	r0, r7
 800ff94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff98:	89ab      	ldrh	r3, [r5, #12]
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d907      	bls.n	800ffae <_fwalk_reent+0x3a>
 800ff9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	d003      	beq.n	800ffae <_fwalk_reent+0x3a>
 800ffa6:	4629      	mov	r1, r5
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	47c0      	blx	r8
 800ffac:	4307      	orrs	r7, r0
 800ffae:	3568      	adds	r5, #104	; 0x68
 800ffb0:	e7e9      	b.n	800ff86 <_fwalk_reent+0x12>
	...

0800ffb4 <__libc_init_array>:
 800ffb4:	b570      	push	{r4, r5, r6, lr}
 800ffb6:	4d0d      	ldr	r5, [pc, #52]	; (800ffec <__libc_init_array+0x38>)
 800ffb8:	4c0d      	ldr	r4, [pc, #52]	; (800fff0 <__libc_init_array+0x3c>)
 800ffba:	1b64      	subs	r4, r4, r5
 800ffbc:	10a4      	asrs	r4, r4, #2
 800ffbe:	2600      	movs	r6, #0
 800ffc0:	42a6      	cmp	r6, r4
 800ffc2:	d109      	bne.n	800ffd8 <__libc_init_array+0x24>
 800ffc4:	4d0b      	ldr	r5, [pc, #44]	; (800fff4 <__libc_init_array+0x40>)
 800ffc6:	4c0c      	ldr	r4, [pc, #48]	; (800fff8 <__libc_init_array+0x44>)
 800ffc8:	f001 f96e 	bl	80112a8 <_init>
 800ffcc:	1b64      	subs	r4, r4, r5
 800ffce:	10a4      	asrs	r4, r4, #2
 800ffd0:	2600      	movs	r6, #0
 800ffd2:	42a6      	cmp	r6, r4
 800ffd4:	d105      	bne.n	800ffe2 <__libc_init_array+0x2e>
 800ffd6:	bd70      	pop	{r4, r5, r6, pc}
 800ffd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffdc:	4798      	blx	r3
 800ffde:	3601      	adds	r6, #1
 800ffe0:	e7ee      	b.n	800ffc0 <__libc_init_array+0xc>
 800ffe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffe6:	4798      	blx	r3
 800ffe8:	3601      	adds	r6, #1
 800ffea:	e7f2      	b.n	800ffd2 <__libc_init_array+0x1e>
 800ffec:	08014088 	.word	0x08014088
 800fff0:	08014088 	.word	0x08014088
 800fff4:	08014088 	.word	0x08014088
 800fff8:	0801408c 	.word	0x0801408c

0800fffc <__retarget_lock_init_recursive>:
 800fffc:	4770      	bx	lr

0800fffe <__retarget_lock_acquire_recursive>:
 800fffe:	4770      	bx	lr

08010000 <__retarget_lock_release_recursive>:
 8010000:	4770      	bx	lr
	...

08010004 <malloc>:
 8010004:	4b02      	ldr	r3, [pc, #8]	; (8010010 <malloc+0xc>)
 8010006:	4601      	mov	r1, r0
 8010008:	6818      	ldr	r0, [r3, #0]
 801000a:	f000 b88d 	b.w	8010128 <_malloc_r>
 801000e:	bf00      	nop
 8010010:	20000250 	.word	0x20000250

08010014 <free>:
 8010014:	4b02      	ldr	r3, [pc, #8]	; (8010020 <free+0xc>)
 8010016:	4601      	mov	r1, r0
 8010018:	6818      	ldr	r0, [r3, #0]
 801001a:	f000 b819 	b.w	8010050 <_free_r>
 801001e:	bf00      	nop
 8010020:	20000250 	.word	0x20000250

08010024 <memcpy>:
 8010024:	440a      	add	r2, r1
 8010026:	4291      	cmp	r1, r2
 8010028:	f100 33ff 	add.w	r3, r0, #4294967295
 801002c:	d100      	bne.n	8010030 <memcpy+0xc>
 801002e:	4770      	bx	lr
 8010030:	b510      	push	{r4, lr}
 8010032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010036:	f803 4f01 	strb.w	r4, [r3, #1]!
 801003a:	4291      	cmp	r1, r2
 801003c:	d1f9      	bne.n	8010032 <memcpy+0xe>
 801003e:	bd10      	pop	{r4, pc}

08010040 <memset>:
 8010040:	4402      	add	r2, r0
 8010042:	4603      	mov	r3, r0
 8010044:	4293      	cmp	r3, r2
 8010046:	d100      	bne.n	801004a <memset+0xa>
 8010048:	4770      	bx	lr
 801004a:	f803 1b01 	strb.w	r1, [r3], #1
 801004e:	e7f9      	b.n	8010044 <memset+0x4>

08010050 <_free_r>:
 8010050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010052:	2900      	cmp	r1, #0
 8010054:	d044      	beq.n	80100e0 <_free_r+0x90>
 8010056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801005a:	9001      	str	r0, [sp, #4]
 801005c:	2b00      	cmp	r3, #0
 801005e:	f1a1 0404 	sub.w	r4, r1, #4
 8010062:	bfb8      	it	lt
 8010064:	18e4      	addlt	r4, r4, r3
 8010066:	f000 fad5 	bl	8010614 <__malloc_lock>
 801006a:	4a1e      	ldr	r2, [pc, #120]	; (80100e4 <_free_r+0x94>)
 801006c:	9801      	ldr	r0, [sp, #4]
 801006e:	6813      	ldr	r3, [r2, #0]
 8010070:	b933      	cbnz	r3, 8010080 <_free_r+0x30>
 8010072:	6063      	str	r3, [r4, #4]
 8010074:	6014      	str	r4, [r2, #0]
 8010076:	b003      	add	sp, #12
 8010078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801007c:	f000 bad0 	b.w	8010620 <__malloc_unlock>
 8010080:	42a3      	cmp	r3, r4
 8010082:	d908      	bls.n	8010096 <_free_r+0x46>
 8010084:	6825      	ldr	r5, [r4, #0]
 8010086:	1961      	adds	r1, r4, r5
 8010088:	428b      	cmp	r3, r1
 801008a:	bf01      	itttt	eq
 801008c:	6819      	ldreq	r1, [r3, #0]
 801008e:	685b      	ldreq	r3, [r3, #4]
 8010090:	1949      	addeq	r1, r1, r5
 8010092:	6021      	streq	r1, [r4, #0]
 8010094:	e7ed      	b.n	8010072 <_free_r+0x22>
 8010096:	461a      	mov	r2, r3
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	b10b      	cbz	r3, 80100a0 <_free_r+0x50>
 801009c:	42a3      	cmp	r3, r4
 801009e:	d9fa      	bls.n	8010096 <_free_r+0x46>
 80100a0:	6811      	ldr	r1, [r2, #0]
 80100a2:	1855      	adds	r5, r2, r1
 80100a4:	42a5      	cmp	r5, r4
 80100a6:	d10b      	bne.n	80100c0 <_free_r+0x70>
 80100a8:	6824      	ldr	r4, [r4, #0]
 80100aa:	4421      	add	r1, r4
 80100ac:	1854      	adds	r4, r2, r1
 80100ae:	42a3      	cmp	r3, r4
 80100b0:	6011      	str	r1, [r2, #0]
 80100b2:	d1e0      	bne.n	8010076 <_free_r+0x26>
 80100b4:	681c      	ldr	r4, [r3, #0]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	6053      	str	r3, [r2, #4]
 80100ba:	4421      	add	r1, r4
 80100bc:	6011      	str	r1, [r2, #0]
 80100be:	e7da      	b.n	8010076 <_free_r+0x26>
 80100c0:	d902      	bls.n	80100c8 <_free_r+0x78>
 80100c2:	230c      	movs	r3, #12
 80100c4:	6003      	str	r3, [r0, #0]
 80100c6:	e7d6      	b.n	8010076 <_free_r+0x26>
 80100c8:	6825      	ldr	r5, [r4, #0]
 80100ca:	1961      	adds	r1, r4, r5
 80100cc:	428b      	cmp	r3, r1
 80100ce:	bf04      	itt	eq
 80100d0:	6819      	ldreq	r1, [r3, #0]
 80100d2:	685b      	ldreq	r3, [r3, #4]
 80100d4:	6063      	str	r3, [r4, #4]
 80100d6:	bf04      	itt	eq
 80100d8:	1949      	addeq	r1, r1, r5
 80100da:	6021      	streq	r1, [r4, #0]
 80100dc:	6054      	str	r4, [r2, #4]
 80100de:	e7ca      	b.n	8010076 <_free_r+0x26>
 80100e0:	b003      	add	sp, #12
 80100e2:	bd30      	pop	{r4, r5, pc}
 80100e4:	2001b2f0 	.word	0x2001b2f0

080100e8 <sbrk_aligned>:
 80100e8:	b570      	push	{r4, r5, r6, lr}
 80100ea:	4e0e      	ldr	r6, [pc, #56]	; (8010124 <sbrk_aligned+0x3c>)
 80100ec:	460c      	mov	r4, r1
 80100ee:	6831      	ldr	r1, [r6, #0]
 80100f0:	4605      	mov	r5, r0
 80100f2:	b911      	cbnz	r1, 80100fa <sbrk_aligned+0x12>
 80100f4:	f000 f924 	bl	8010340 <_sbrk_r>
 80100f8:	6030      	str	r0, [r6, #0]
 80100fa:	4621      	mov	r1, r4
 80100fc:	4628      	mov	r0, r5
 80100fe:	f000 f91f 	bl	8010340 <_sbrk_r>
 8010102:	1c43      	adds	r3, r0, #1
 8010104:	d00a      	beq.n	801011c <sbrk_aligned+0x34>
 8010106:	1cc4      	adds	r4, r0, #3
 8010108:	f024 0403 	bic.w	r4, r4, #3
 801010c:	42a0      	cmp	r0, r4
 801010e:	d007      	beq.n	8010120 <sbrk_aligned+0x38>
 8010110:	1a21      	subs	r1, r4, r0
 8010112:	4628      	mov	r0, r5
 8010114:	f000 f914 	bl	8010340 <_sbrk_r>
 8010118:	3001      	adds	r0, #1
 801011a:	d101      	bne.n	8010120 <sbrk_aligned+0x38>
 801011c:	f04f 34ff 	mov.w	r4, #4294967295
 8010120:	4620      	mov	r0, r4
 8010122:	bd70      	pop	{r4, r5, r6, pc}
 8010124:	2001b2f4 	.word	0x2001b2f4

08010128 <_malloc_r>:
 8010128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801012c:	1ccd      	adds	r5, r1, #3
 801012e:	f025 0503 	bic.w	r5, r5, #3
 8010132:	3508      	adds	r5, #8
 8010134:	2d0c      	cmp	r5, #12
 8010136:	bf38      	it	cc
 8010138:	250c      	movcc	r5, #12
 801013a:	2d00      	cmp	r5, #0
 801013c:	4607      	mov	r7, r0
 801013e:	db01      	blt.n	8010144 <_malloc_r+0x1c>
 8010140:	42a9      	cmp	r1, r5
 8010142:	d905      	bls.n	8010150 <_malloc_r+0x28>
 8010144:	230c      	movs	r3, #12
 8010146:	603b      	str	r3, [r7, #0]
 8010148:	2600      	movs	r6, #0
 801014a:	4630      	mov	r0, r6
 801014c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010150:	4e2e      	ldr	r6, [pc, #184]	; (801020c <_malloc_r+0xe4>)
 8010152:	f000 fa5f 	bl	8010614 <__malloc_lock>
 8010156:	6833      	ldr	r3, [r6, #0]
 8010158:	461c      	mov	r4, r3
 801015a:	bb34      	cbnz	r4, 80101aa <_malloc_r+0x82>
 801015c:	4629      	mov	r1, r5
 801015e:	4638      	mov	r0, r7
 8010160:	f7ff ffc2 	bl	80100e8 <sbrk_aligned>
 8010164:	1c43      	adds	r3, r0, #1
 8010166:	4604      	mov	r4, r0
 8010168:	d14d      	bne.n	8010206 <_malloc_r+0xde>
 801016a:	6834      	ldr	r4, [r6, #0]
 801016c:	4626      	mov	r6, r4
 801016e:	2e00      	cmp	r6, #0
 8010170:	d140      	bne.n	80101f4 <_malloc_r+0xcc>
 8010172:	6823      	ldr	r3, [r4, #0]
 8010174:	4631      	mov	r1, r6
 8010176:	4638      	mov	r0, r7
 8010178:	eb04 0803 	add.w	r8, r4, r3
 801017c:	f000 f8e0 	bl	8010340 <_sbrk_r>
 8010180:	4580      	cmp	r8, r0
 8010182:	d13a      	bne.n	80101fa <_malloc_r+0xd2>
 8010184:	6821      	ldr	r1, [r4, #0]
 8010186:	3503      	adds	r5, #3
 8010188:	1a6d      	subs	r5, r5, r1
 801018a:	f025 0503 	bic.w	r5, r5, #3
 801018e:	3508      	adds	r5, #8
 8010190:	2d0c      	cmp	r5, #12
 8010192:	bf38      	it	cc
 8010194:	250c      	movcc	r5, #12
 8010196:	4629      	mov	r1, r5
 8010198:	4638      	mov	r0, r7
 801019a:	f7ff ffa5 	bl	80100e8 <sbrk_aligned>
 801019e:	3001      	adds	r0, #1
 80101a0:	d02b      	beq.n	80101fa <_malloc_r+0xd2>
 80101a2:	6823      	ldr	r3, [r4, #0]
 80101a4:	442b      	add	r3, r5
 80101a6:	6023      	str	r3, [r4, #0]
 80101a8:	e00e      	b.n	80101c8 <_malloc_r+0xa0>
 80101aa:	6822      	ldr	r2, [r4, #0]
 80101ac:	1b52      	subs	r2, r2, r5
 80101ae:	d41e      	bmi.n	80101ee <_malloc_r+0xc6>
 80101b0:	2a0b      	cmp	r2, #11
 80101b2:	d916      	bls.n	80101e2 <_malloc_r+0xba>
 80101b4:	1961      	adds	r1, r4, r5
 80101b6:	42a3      	cmp	r3, r4
 80101b8:	6025      	str	r5, [r4, #0]
 80101ba:	bf18      	it	ne
 80101bc:	6059      	strne	r1, [r3, #4]
 80101be:	6863      	ldr	r3, [r4, #4]
 80101c0:	bf08      	it	eq
 80101c2:	6031      	streq	r1, [r6, #0]
 80101c4:	5162      	str	r2, [r4, r5]
 80101c6:	604b      	str	r3, [r1, #4]
 80101c8:	4638      	mov	r0, r7
 80101ca:	f104 060b 	add.w	r6, r4, #11
 80101ce:	f000 fa27 	bl	8010620 <__malloc_unlock>
 80101d2:	f026 0607 	bic.w	r6, r6, #7
 80101d6:	1d23      	adds	r3, r4, #4
 80101d8:	1af2      	subs	r2, r6, r3
 80101da:	d0b6      	beq.n	801014a <_malloc_r+0x22>
 80101dc:	1b9b      	subs	r3, r3, r6
 80101de:	50a3      	str	r3, [r4, r2]
 80101e0:	e7b3      	b.n	801014a <_malloc_r+0x22>
 80101e2:	6862      	ldr	r2, [r4, #4]
 80101e4:	42a3      	cmp	r3, r4
 80101e6:	bf0c      	ite	eq
 80101e8:	6032      	streq	r2, [r6, #0]
 80101ea:	605a      	strne	r2, [r3, #4]
 80101ec:	e7ec      	b.n	80101c8 <_malloc_r+0xa0>
 80101ee:	4623      	mov	r3, r4
 80101f0:	6864      	ldr	r4, [r4, #4]
 80101f2:	e7b2      	b.n	801015a <_malloc_r+0x32>
 80101f4:	4634      	mov	r4, r6
 80101f6:	6876      	ldr	r6, [r6, #4]
 80101f8:	e7b9      	b.n	801016e <_malloc_r+0x46>
 80101fa:	230c      	movs	r3, #12
 80101fc:	603b      	str	r3, [r7, #0]
 80101fe:	4638      	mov	r0, r7
 8010200:	f000 fa0e 	bl	8010620 <__malloc_unlock>
 8010204:	e7a1      	b.n	801014a <_malloc_r+0x22>
 8010206:	6025      	str	r5, [r4, #0]
 8010208:	e7de      	b.n	80101c8 <_malloc_r+0xa0>
 801020a:	bf00      	nop
 801020c:	2001b2f0 	.word	0x2001b2f0

08010210 <iprintf>:
 8010210:	b40f      	push	{r0, r1, r2, r3}
 8010212:	4b0a      	ldr	r3, [pc, #40]	; (801023c <iprintf+0x2c>)
 8010214:	b513      	push	{r0, r1, r4, lr}
 8010216:	681c      	ldr	r4, [r3, #0]
 8010218:	b124      	cbz	r4, 8010224 <iprintf+0x14>
 801021a:	69a3      	ldr	r3, [r4, #24]
 801021c:	b913      	cbnz	r3, 8010224 <iprintf+0x14>
 801021e:	4620      	mov	r0, r4
 8010220:	f7ff fe2a 	bl	800fe78 <__sinit>
 8010224:	ab05      	add	r3, sp, #20
 8010226:	9a04      	ldr	r2, [sp, #16]
 8010228:	68a1      	ldr	r1, [r4, #8]
 801022a:	9301      	str	r3, [sp, #4]
 801022c:	4620      	mov	r0, r4
 801022e:	f000 fb83 	bl	8010938 <_vfiprintf_r>
 8010232:	b002      	add	sp, #8
 8010234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010238:	b004      	add	sp, #16
 801023a:	4770      	bx	lr
 801023c:	20000250 	.word	0x20000250

08010240 <putchar>:
 8010240:	4b09      	ldr	r3, [pc, #36]	; (8010268 <putchar+0x28>)
 8010242:	b513      	push	{r0, r1, r4, lr}
 8010244:	681c      	ldr	r4, [r3, #0]
 8010246:	4601      	mov	r1, r0
 8010248:	b134      	cbz	r4, 8010258 <putchar+0x18>
 801024a:	69a3      	ldr	r3, [r4, #24]
 801024c:	b923      	cbnz	r3, 8010258 <putchar+0x18>
 801024e:	9001      	str	r0, [sp, #4]
 8010250:	4620      	mov	r0, r4
 8010252:	f7ff fe11 	bl	800fe78 <__sinit>
 8010256:	9901      	ldr	r1, [sp, #4]
 8010258:	68a2      	ldr	r2, [r4, #8]
 801025a:	4620      	mov	r0, r4
 801025c:	b002      	add	sp, #8
 801025e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010262:	f000 be2d 	b.w	8010ec0 <_putc_r>
 8010266:	bf00      	nop
 8010268:	20000250 	.word	0x20000250

0801026c <cleanup_glue>:
 801026c:	b538      	push	{r3, r4, r5, lr}
 801026e:	460c      	mov	r4, r1
 8010270:	6809      	ldr	r1, [r1, #0]
 8010272:	4605      	mov	r5, r0
 8010274:	b109      	cbz	r1, 801027a <cleanup_glue+0xe>
 8010276:	f7ff fff9 	bl	801026c <cleanup_glue>
 801027a:	4621      	mov	r1, r4
 801027c:	4628      	mov	r0, r5
 801027e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010282:	f7ff bee5 	b.w	8010050 <_free_r>
	...

08010288 <_reclaim_reent>:
 8010288:	4b2c      	ldr	r3, [pc, #176]	; (801033c <_reclaim_reent+0xb4>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	4283      	cmp	r3, r0
 801028e:	b570      	push	{r4, r5, r6, lr}
 8010290:	4604      	mov	r4, r0
 8010292:	d051      	beq.n	8010338 <_reclaim_reent+0xb0>
 8010294:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010296:	b143      	cbz	r3, 80102aa <_reclaim_reent+0x22>
 8010298:	68db      	ldr	r3, [r3, #12]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d14a      	bne.n	8010334 <_reclaim_reent+0xac>
 801029e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102a0:	6819      	ldr	r1, [r3, #0]
 80102a2:	b111      	cbz	r1, 80102aa <_reclaim_reent+0x22>
 80102a4:	4620      	mov	r0, r4
 80102a6:	f7ff fed3 	bl	8010050 <_free_r>
 80102aa:	6961      	ldr	r1, [r4, #20]
 80102ac:	b111      	cbz	r1, 80102b4 <_reclaim_reent+0x2c>
 80102ae:	4620      	mov	r0, r4
 80102b0:	f7ff fece 	bl	8010050 <_free_r>
 80102b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80102b6:	b111      	cbz	r1, 80102be <_reclaim_reent+0x36>
 80102b8:	4620      	mov	r0, r4
 80102ba:	f7ff fec9 	bl	8010050 <_free_r>
 80102be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80102c0:	b111      	cbz	r1, 80102c8 <_reclaim_reent+0x40>
 80102c2:	4620      	mov	r0, r4
 80102c4:	f7ff fec4 	bl	8010050 <_free_r>
 80102c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80102ca:	b111      	cbz	r1, 80102d2 <_reclaim_reent+0x4a>
 80102cc:	4620      	mov	r0, r4
 80102ce:	f7ff febf 	bl	8010050 <_free_r>
 80102d2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80102d4:	b111      	cbz	r1, 80102dc <_reclaim_reent+0x54>
 80102d6:	4620      	mov	r0, r4
 80102d8:	f7ff feba 	bl	8010050 <_free_r>
 80102dc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80102de:	b111      	cbz	r1, 80102e6 <_reclaim_reent+0x5e>
 80102e0:	4620      	mov	r0, r4
 80102e2:	f7ff feb5 	bl	8010050 <_free_r>
 80102e6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80102e8:	b111      	cbz	r1, 80102f0 <_reclaim_reent+0x68>
 80102ea:	4620      	mov	r0, r4
 80102ec:	f7ff feb0 	bl	8010050 <_free_r>
 80102f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102f2:	b111      	cbz	r1, 80102fa <_reclaim_reent+0x72>
 80102f4:	4620      	mov	r0, r4
 80102f6:	f7ff feab 	bl	8010050 <_free_r>
 80102fa:	69a3      	ldr	r3, [r4, #24]
 80102fc:	b1e3      	cbz	r3, 8010338 <_reclaim_reent+0xb0>
 80102fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010300:	4620      	mov	r0, r4
 8010302:	4798      	blx	r3
 8010304:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010306:	b1b9      	cbz	r1, 8010338 <_reclaim_reent+0xb0>
 8010308:	4620      	mov	r0, r4
 801030a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801030e:	f7ff bfad 	b.w	801026c <cleanup_glue>
 8010312:	5949      	ldr	r1, [r1, r5]
 8010314:	b941      	cbnz	r1, 8010328 <_reclaim_reent+0xa0>
 8010316:	3504      	adds	r5, #4
 8010318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801031a:	2d80      	cmp	r5, #128	; 0x80
 801031c:	68d9      	ldr	r1, [r3, #12]
 801031e:	d1f8      	bne.n	8010312 <_reclaim_reent+0x8a>
 8010320:	4620      	mov	r0, r4
 8010322:	f7ff fe95 	bl	8010050 <_free_r>
 8010326:	e7ba      	b.n	801029e <_reclaim_reent+0x16>
 8010328:	680e      	ldr	r6, [r1, #0]
 801032a:	4620      	mov	r0, r4
 801032c:	f7ff fe90 	bl	8010050 <_free_r>
 8010330:	4631      	mov	r1, r6
 8010332:	e7ef      	b.n	8010314 <_reclaim_reent+0x8c>
 8010334:	2500      	movs	r5, #0
 8010336:	e7ef      	b.n	8010318 <_reclaim_reent+0x90>
 8010338:	bd70      	pop	{r4, r5, r6, pc}
 801033a:	bf00      	nop
 801033c:	20000250 	.word	0x20000250

08010340 <_sbrk_r>:
 8010340:	b538      	push	{r3, r4, r5, lr}
 8010342:	4d06      	ldr	r5, [pc, #24]	; (801035c <_sbrk_r+0x1c>)
 8010344:	2300      	movs	r3, #0
 8010346:	4604      	mov	r4, r0
 8010348:	4608      	mov	r0, r1
 801034a:	602b      	str	r3, [r5, #0]
 801034c:	f7f1 fc84 	bl	8001c58 <_sbrk>
 8010350:	1c43      	adds	r3, r0, #1
 8010352:	d102      	bne.n	801035a <_sbrk_r+0x1a>
 8010354:	682b      	ldr	r3, [r5, #0]
 8010356:	b103      	cbz	r3, 801035a <_sbrk_r+0x1a>
 8010358:	6023      	str	r3, [r4, #0]
 801035a:	bd38      	pop	{r3, r4, r5, pc}
 801035c:	2001b2f8 	.word	0x2001b2f8

08010360 <siprintf>:
 8010360:	b40e      	push	{r1, r2, r3}
 8010362:	b500      	push	{lr}
 8010364:	b09c      	sub	sp, #112	; 0x70
 8010366:	ab1d      	add	r3, sp, #116	; 0x74
 8010368:	9002      	str	r0, [sp, #8]
 801036a:	9006      	str	r0, [sp, #24]
 801036c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010370:	4809      	ldr	r0, [pc, #36]	; (8010398 <siprintf+0x38>)
 8010372:	9107      	str	r1, [sp, #28]
 8010374:	9104      	str	r1, [sp, #16]
 8010376:	4909      	ldr	r1, [pc, #36]	; (801039c <siprintf+0x3c>)
 8010378:	f853 2b04 	ldr.w	r2, [r3], #4
 801037c:	9105      	str	r1, [sp, #20]
 801037e:	6800      	ldr	r0, [r0, #0]
 8010380:	9301      	str	r3, [sp, #4]
 8010382:	a902      	add	r1, sp, #8
 8010384:	f000 f9ae 	bl	80106e4 <_svfiprintf_r>
 8010388:	9b02      	ldr	r3, [sp, #8]
 801038a:	2200      	movs	r2, #0
 801038c:	701a      	strb	r2, [r3, #0]
 801038e:	b01c      	add	sp, #112	; 0x70
 8010390:	f85d eb04 	ldr.w	lr, [sp], #4
 8010394:	b003      	add	sp, #12
 8010396:	4770      	bx	lr
 8010398:	20000250 	.word	0x20000250
 801039c:	ffff0208 	.word	0xffff0208

080103a0 <__sread>:
 80103a0:	b510      	push	{r4, lr}
 80103a2:	460c      	mov	r4, r1
 80103a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103a8:	f000 fdd2 	bl	8010f50 <_read_r>
 80103ac:	2800      	cmp	r0, #0
 80103ae:	bfab      	itete	ge
 80103b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80103b2:	89a3      	ldrhlt	r3, [r4, #12]
 80103b4:	181b      	addge	r3, r3, r0
 80103b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80103ba:	bfac      	ite	ge
 80103bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80103be:	81a3      	strhlt	r3, [r4, #12]
 80103c0:	bd10      	pop	{r4, pc}

080103c2 <__swrite>:
 80103c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103c6:	461f      	mov	r7, r3
 80103c8:	898b      	ldrh	r3, [r1, #12]
 80103ca:	05db      	lsls	r3, r3, #23
 80103cc:	4605      	mov	r5, r0
 80103ce:	460c      	mov	r4, r1
 80103d0:	4616      	mov	r6, r2
 80103d2:	d505      	bpl.n	80103e0 <__swrite+0x1e>
 80103d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103d8:	2302      	movs	r3, #2
 80103da:	2200      	movs	r2, #0
 80103dc:	f000 f908 	bl	80105f0 <_lseek_r>
 80103e0:	89a3      	ldrh	r3, [r4, #12]
 80103e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80103ea:	81a3      	strh	r3, [r4, #12]
 80103ec:	4632      	mov	r2, r6
 80103ee:	463b      	mov	r3, r7
 80103f0:	4628      	mov	r0, r5
 80103f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103f6:	f000 b817 	b.w	8010428 <_write_r>

080103fa <__sseek>:
 80103fa:	b510      	push	{r4, lr}
 80103fc:	460c      	mov	r4, r1
 80103fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010402:	f000 f8f5 	bl	80105f0 <_lseek_r>
 8010406:	1c43      	adds	r3, r0, #1
 8010408:	89a3      	ldrh	r3, [r4, #12]
 801040a:	bf15      	itete	ne
 801040c:	6560      	strne	r0, [r4, #84]	; 0x54
 801040e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010416:	81a3      	strheq	r3, [r4, #12]
 8010418:	bf18      	it	ne
 801041a:	81a3      	strhne	r3, [r4, #12]
 801041c:	bd10      	pop	{r4, pc}

0801041e <__sclose>:
 801041e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010422:	f000 b813 	b.w	801044c <_close_r>
	...

08010428 <_write_r>:
 8010428:	b538      	push	{r3, r4, r5, lr}
 801042a:	4d07      	ldr	r5, [pc, #28]	; (8010448 <_write_r+0x20>)
 801042c:	4604      	mov	r4, r0
 801042e:	4608      	mov	r0, r1
 8010430:	4611      	mov	r1, r2
 8010432:	2200      	movs	r2, #0
 8010434:	602a      	str	r2, [r5, #0]
 8010436:	461a      	mov	r2, r3
 8010438:	f7f0 fe84 	bl	8001144 <_write>
 801043c:	1c43      	adds	r3, r0, #1
 801043e:	d102      	bne.n	8010446 <_write_r+0x1e>
 8010440:	682b      	ldr	r3, [r5, #0]
 8010442:	b103      	cbz	r3, 8010446 <_write_r+0x1e>
 8010444:	6023      	str	r3, [r4, #0]
 8010446:	bd38      	pop	{r3, r4, r5, pc}
 8010448:	2001b2f8 	.word	0x2001b2f8

0801044c <_close_r>:
 801044c:	b538      	push	{r3, r4, r5, lr}
 801044e:	4d06      	ldr	r5, [pc, #24]	; (8010468 <_close_r+0x1c>)
 8010450:	2300      	movs	r3, #0
 8010452:	4604      	mov	r4, r0
 8010454:	4608      	mov	r0, r1
 8010456:	602b      	str	r3, [r5, #0]
 8010458:	f7f1 fbc9 	bl	8001bee <_close>
 801045c:	1c43      	adds	r3, r0, #1
 801045e:	d102      	bne.n	8010466 <_close_r+0x1a>
 8010460:	682b      	ldr	r3, [r5, #0]
 8010462:	b103      	cbz	r3, 8010466 <_close_r+0x1a>
 8010464:	6023      	str	r3, [r4, #0]
 8010466:	bd38      	pop	{r3, r4, r5, pc}
 8010468:	2001b2f8 	.word	0x2001b2f8

0801046c <__sflush_r>:
 801046c:	898a      	ldrh	r2, [r1, #12]
 801046e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010472:	4605      	mov	r5, r0
 8010474:	0710      	lsls	r0, r2, #28
 8010476:	460c      	mov	r4, r1
 8010478:	d458      	bmi.n	801052c <__sflush_r+0xc0>
 801047a:	684b      	ldr	r3, [r1, #4]
 801047c:	2b00      	cmp	r3, #0
 801047e:	dc05      	bgt.n	801048c <__sflush_r+0x20>
 8010480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010482:	2b00      	cmp	r3, #0
 8010484:	dc02      	bgt.n	801048c <__sflush_r+0x20>
 8010486:	2000      	movs	r0, #0
 8010488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801048c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801048e:	2e00      	cmp	r6, #0
 8010490:	d0f9      	beq.n	8010486 <__sflush_r+0x1a>
 8010492:	2300      	movs	r3, #0
 8010494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010498:	682f      	ldr	r7, [r5, #0]
 801049a:	602b      	str	r3, [r5, #0]
 801049c:	d032      	beq.n	8010504 <__sflush_r+0x98>
 801049e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80104a0:	89a3      	ldrh	r3, [r4, #12]
 80104a2:	075a      	lsls	r2, r3, #29
 80104a4:	d505      	bpl.n	80104b2 <__sflush_r+0x46>
 80104a6:	6863      	ldr	r3, [r4, #4]
 80104a8:	1ac0      	subs	r0, r0, r3
 80104aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104ac:	b10b      	cbz	r3, 80104b2 <__sflush_r+0x46>
 80104ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104b0:	1ac0      	subs	r0, r0, r3
 80104b2:	2300      	movs	r3, #0
 80104b4:	4602      	mov	r2, r0
 80104b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104b8:	6a21      	ldr	r1, [r4, #32]
 80104ba:	4628      	mov	r0, r5
 80104bc:	47b0      	blx	r6
 80104be:	1c43      	adds	r3, r0, #1
 80104c0:	89a3      	ldrh	r3, [r4, #12]
 80104c2:	d106      	bne.n	80104d2 <__sflush_r+0x66>
 80104c4:	6829      	ldr	r1, [r5, #0]
 80104c6:	291d      	cmp	r1, #29
 80104c8:	d82c      	bhi.n	8010524 <__sflush_r+0xb8>
 80104ca:	4a2a      	ldr	r2, [pc, #168]	; (8010574 <__sflush_r+0x108>)
 80104cc:	40ca      	lsrs	r2, r1
 80104ce:	07d6      	lsls	r6, r2, #31
 80104d0:	d528      	bpl.n	8010524 <__sflush_r+0xb8>
 80104d2:	2200      	movs	r2, #0
 80104d4:	6062      	str	r2, [r4, #4]
 80104d6:	04d9      	lsls	r1, r3, #19
 80104d8:	6922      	ldr	r2, [r4, #16]
 80104da:	6022      	str	r2, [r4, #0]
 80104dc:	d504      	bpl.n	80104e8 <__sflush_r+0x7c>
 80104de:	1c42      	adds	r2, r0, #1
 80104e0:	d101      	bne.n	80104e6 <__sflush_r+0x7a>
 80104e2:	682b      	ldr	r3, [r5, #0]
 80104e4:	b903      	cbnz	r3, 80104e8 <__sflush_r+0x7c>
 80104e6:	6560      	str	r0, [r4, #84]	; 0x54
 80104e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104ea:	602f      	str	r7, [r5, #0]
 80104ec:	2900      	cmp	r1, #0
 80104ee:	d0ca      	beq.n	8010486 <__sflush_r+0x1a>
 80104f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104f4:	4299      	cmp	r1, r3
 80104f6:	d002      	beq.n	80104fe <__sflush_r+0x92>
 80104f8:	4628      	mov	r0, r5
 80104fa:	f7ff fda9 	bl	8010050 <_free_r>
 80104fe:	2000      	movs	r0, #0
 8010500:	6360      	str	r0, [r4, #52]	; 0x34
 8010502:	e7c1      	b.n	8010488 <__sflush_r+0x1c>
 8010504:	6a21      	ldr	r1, [r4, #32]
 8010506:	2301      	movs	r3, #1
 8010508:	4628      	mov	r0, r5
 801050a:	47b0      	blx	r6
 801050c:	1c41      	adds	r1, r0, #1
 801050e:	d1c7      	bne.n	80104a0 <__sflush_r+0x34>
 8010510:	682b      	ldr	r3, [r5, #0]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d0c4      	beq.n	80104a0 <__sflush_r+0x34>
 8010516:	2b1d      	cmp	r3, #29
 8010518:	d001      	beq.n	801051e <__sflush_r+0xb2>
 801051a:	2b16      	cmp	r3, #22
 801051c:	d101      	bne.n	8010522 <__sflush_r+0xb6>
 801051e:	602f      	str	r7, [r5, #0]
 8010520:	e7b1      	b.n	8010486 <__sflush_r+0x1a>
 8010522:	89a3      	ldrh	r3, [r4, #12]
 8010524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010528:	81a3      	strh	r3, [r4, #12]
 801052a:	e7ad      	b.n	8010488 <__sflush_r+0x1c>
 801052c:	690f      	ldr	r7, [r1, #16]
 801052e:	2f00      	cmp	r7, #0
 8010530:	d0a9      	beq.n	8010486 <__sflush_r+0x1a>
 8010532:	0793      	lsls	r3, r2, #30
 8010534:	680e      	ldr	r6, [r1, #0]
 8010536:	bf08      	it	eq
 8010538:	694b      	ldreq	r3, [r1, #20]
 801053a:	600f      	str	r7, [r1, #0]
 801053c:	bf18      	it	ne
 801053e:	2300      	movne	r3, #0
 8010540:	eba6 0807 	sub.w	r8, r6, r7
 8010544:	608b      	str	r3, [r1, #8]
 8010546:	f1b8 0f00 	cmp.w	r8, #0
 801054a:	dd9c      	ble.n	8010486 <__sflush_r+0x1a>
 801054c:	6a21      	ldr	r1, [r4, #32]
 801054e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010550:	4643      	mov	r3, r8
 8010552:	463a      	mov	r2, r7
 8010554:	4628      	mov	r0, r5
 8010556:	47b0      	blx	r6
 8010558:	2800      	cmp	r0, #0
 801055a:	dc06      	bgt.n	801056a <__sflush_r+0xfe>
 801055c:	89a3      	ldrh	r3, [r4, #12]
 801055e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010562:	81a3      	strh	r3, [r4, #12]
 8010564:	f04f 30ff 	mov.w	r0, #4294967295
 8010568:	e78e      	b.n	8010488 <__sflush_r+0x1c>
 801056a:	4407      	add	r7, r0
 801056c:	eba8 0800 	sub.w	r8, r8, r0
 8010570:	e7e9      	b.n	8010546 <__sflush_r+0xda>
 8010572:	bf00      	nop
 8010574:	20400001 	.word	0x20400001

08010578 <_fflush_r>:
 8010578:	b538      	push	{r3, r4, r5, lr}
 801057a:	690b      	ldr	r3, [r1, #16]
 801057c:	4605      	mov	r5, r0
 801057e:	460c      	mov	r4, r1
 8010580:	b913      	cbnz	r3, 8010588 <_fflush_r+0x10>
 8010582:	2500      	movs	r5, #0
 8010584:	4628      	mov	r0, r5
 8010586:	bd38      	pop	{r3, r4, r5, pc}
 8010588:	b118      	cbz	r0, 8010592 <_fflush_r+0x1a>
 801058a:	6983      	ldr	r3, [r0, #24]
 801058c:	b90b      	cbnz	r3, 8010592 <_fflush_r+0x1a>
 801058e:	f7ff fc73 	bl	800fe78 <__sinit>
 8010592:	4b14      	ldr	r3, [pc, #80]	; (80105e4 <_fflush_r+0x6c>)
 8010594:	429c      	cmp	r4, r3
 8010596:	d11b      	bne.n	80105d0 <_fflush_r+0x58>
 8010598:	686c      	ldr	r4, [r5, #4]
 801059a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d0ef      	beq.n	8010582 <_fflush_r+0xa>
 80105a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80105a4:	07d0      	lsls	r0, r2, #31
 80105a6:	d404      	bmi.n	80105b2 <_fflush_r+0x3a>
 80105a8:	0599      	lsls	r1, r3, #22
 80105aa:	d402      	bmi.n	80105b2 <_fflush_r+0x3a>
 80105ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105ae:	f7ff fd26 	bl	800fffe <__retarget_lock_acquire_recursive>
 80105b2:	4628      	mov	r0, r5
 80105b4:	4621      	mov	r1, r4
 80105b6:	f7ff ff59 	bl	801046c <__sflush_r>
 80105ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105bc:	07da      	lsls	r2, r3, #31
 80105be:	4605      	mov	r5, r0
 80105c0:	d4e0      	bmi.n	8010584 <_fflush_r+0xc>
 80105c2:	89a3      	ldrh	r3, [r4, #12]
 80105c4:	059b      	lsls	r3, r3, #22
 80105c6:	d4dd      	bmi.n	8010584 <_fflush_r+0xc>
 80105c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105ca:	f7ff fd19 	bl	8010000 <__retarget_lock_release_recursive>
 80105ce:	e7d9      	b.n	8010584 <_fflush_r+0xc>
 80105d0:	4b05      	ldr	r3, [pc, #20]	; (80105e8 <_fflush_r+0x70>)
 80105d2:	429c      	cmp	r4, r3
 80105d4:	d101      	bne.n	80105da <_fflush_r+0x62>
 80105d6:	68ac      	ldr	r4, [r5, #8]
 80105d8:	e7df      	b.n	801059a <_fflush_r+0x22>
 80105da:	4b04      	ldr	r3, [pc, #16]	; (80105ec <_fflush_r+0x74>)
 80105dc:	429c      	cmp	r4, r3
 80105de:	bf08      	it	eq
 80105e0:	68ec      	ldreq	r4, [r5, #12]
 80105e2:	e7da      	b.n	801059a <_fflush_r+0x22>
 80105e4:	08014008 	.word	0x08014008
 80105e8:	08014028 	.word	0x08014028
 80105ec:	08013fe8 	.word	0x08013fe8

080105f0 <_lseek_r>:
 80105f0:	b538      	push	{r3, r4, r5, lr}
 80105f2:	4d07      	ldr	r5, [pc, #28]	; (8010610 <_lseek_r+0x20>)
 80105f4:	4604      	mov	r4, r0
 80105f6:	4608      	mov	r0, r1
 80105f8:	4611      	mov	r1, r2
 80105fa:	2200      	movs	r2, #0
 80105fc:	602a      	str	r2, [r5, #0]
 80105fe:	461a      	mov	r2, r3
 8010600:	f7f1 fb1c 	bl	8001c3c <_lseek>
 8010604:	1c43      	adds	r3, r0, #1
 8010606:	d102      	bne.n	801060e <_lseek_r+0x1e>
 8010608:	682b      	ldr	r3, [r5, #0]
 801060a:	b103      	cbz	r3, 801060e <_lseek_r+0x1e>
 801060c:	6023      	str	r3, [r4, #0]
 801060e:	bd38      	pop	{r3, r4, r5, pc}
 8010610:	2001b2f8 	.word	0x2001b2f8

08010614 <__malloc_lock>:
 8010614:	4801      	ldr	r0, [pc, #4]	; (801061c <__malloc_lock+0x8>)
 8010616:	f7ff bcf2 	b.w	800fffe <__retarget_lock_acquire_recursive>
 801061a:	bf00      	nop
 801061c:	2001b2ec 	.word	0x2001b2ec

08010620 <__malloc_unlock>:
 8010620:	4801      	ldr	r0, [pc, #4]	; (8010628 <__malloc_unlock+0x8>)
 8010622:	f7ff bced 	b.w	8010000 <__retarget_lock_release_recursive>
 8010626:	bf00      	nop
 8010628:	2001b2ec 	.word	0x2001b2ec

0801062c <__ssputs_r>:
 801062c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010630:	688e      	ldr	r6, [r1, #8]
 8010632:	429e      	cmp	r6, r3
 8010634:	4682      	mov	sl, r0
 8010636:	460c      	mov	r4, r1
 8010638:	4690      	mov	r8, r2
 801063a:	461f      	mov	r7, r3
 801063c:	d838      	bhi.n	80106b0 <__ssputs_r+0x84>
 801063e:	898a      	ldrh	r2, [r1, #12]
 8010640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010644:	d032      	beq.n	80106ac <__ssputs_r+0x80>
 8010646:	6825      	ldr	r5, [r4, #0]
 8010648:	6909      	ldr	r1, [r1, #16]
 801064a:	eba5 0901 	sub.w	r9, r5, r1
 801064e:	6965      	ldr	r5, [r4, #20]
 8010650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010658:	3301      	adds	r3, #1
 801065a:	444b      	add	r3, r9
 801065c:	106d      	asrs	r5, r5, #1
 801065e:	429d      	cmp	r5, r3
 8010660:	bf38      	it	cc
 8010662:	461d      	movcc	r5, r3
 8010664:	0553      	lsls	r3, r2, #21
 8010666:	d531      	bpl.n	80106cc <__ssputs_r+0xa0>
 8010668:	4629      	mov	r1, r5
 801066a:	f7ff fd5d 	bl	8010128 <_malloc_r>
 801066e:	4606      	mov	r6, r0
 8010670:	b950      	cbnz	r0, 8010688 <__ssputs_r+0x5c>
 8010672:	230c      	movs	r3, #12
 8010674:	f8ca 3000 	str.w	r3, [sl]
 8010678:	89a3      	ldrh	r3, [r4, #12]
 801067a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801067e:	81a3      	strh	r3, [r4, #12]
 8010680:	f04f 30ff 	mov.w	r0, #4294967295
 8010684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010688:	6921      	ldr	r1, [r4, #16]
 801068a:	464a      	mov	r2, r9
 801068c:	f7ff fcca 	bl	8010024 <memcpy>
 8010690:	89a3      	ldrh	r3, [r4, #12]
 8010692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801069a:	81a3      	strh	r3, [r4, #12]
 801069c:	6126      	str	r6, [r4, #16]
 801069e:	6165      	str	r5, [r4, #20]
 80106a0:	444e      	add	r6, r9
 80106a2:	eba5 0509 	sub.w	r5, r5, r9
 80106a6:	6026      	str	r6, [r4, #0]
 80106a8:	60a5      	str	r5, [r4, #8]
 80106aa:	463e      	mov	r6, r7
 80106ac:	42be      	cmp	r6, r7
 80106ae:	d900      	bls.n	80106b2 <__ssputs_r+0x86>
 80106b0:	463e      	mov	r6, r7
 80106b2:	6820      	ldr	r0, [r4, #0]
 80106b4:	4632      	mov	r2, r6
 80106b6:	4641      	mov	r1, r8
 80106b8:	f000 fd82 	bl	80111c0 <memmove>
 80106bc:	68a3      	ldr	r3, [r4, #8]
 80106be:	1b9b      	subs	r3, r3, r6
 80106c0:	60a3      	str	r3, [r4, #8]
 80106c2:	6823      	ldr	r3, [r4, #0]
 80106c4:	4433      	add	r3, r6
 80106c6:	6023      	str	r3, [r4, #0]
 80106c8:	2000      	movs	r0, #0
 80106ca:	e7db      	b.n	8010684 <__ssputs_r+0x58>
 80106cc:	462a      	mov	r2, r5
 80106ce:	f000 fd91 	bl	80111f4 <_realloc_r>
 80106d2:	4606      	mov	r6, r0
 80106d4:	2800      	cmp	r0, #0
 80106d6:	d1e1      	bne.n	801069c <__ssputs_r+0x70>
 80106d8:	6921      	ldr	r1, [r4, #16]
 80106da:	4650      	mov	r0, sl
 80106dc:	f7ff fcb8 	bl	8010050 <_free_r>
 80106e0:	e7c7      	b.n	8010672 <__ssputs_r+0x46>
	...

080106e4 <_svfiprintf_r>:
 80106e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e8:	4698      	mov	r8, r3
 80106ea:	898b      	ldrh	r3, [r1, #12]
 80106ec:	061b      	lsls	r3, r3, #24
 80106ee:	b09d      	sub	sp, #116	; 0x74
 80106f0:	4607      	mov	r7, r0
 80106f2:	460d      	mov	r5, r1
 80106f4:	4614      	mov	r4, r2
 80106f6:	d50e      	bpl.n	8010716 <_svfiprintf_r+0x32>
 80106f8:	690b      	ldr	r3, [r1, #16]
 80106fa:	b963      	cbnz	r3, 8010716 <_svfiprintf_r+0x32>
 80106fc:	2140      	movs	r1, #64	; 0x40
 80106fe:	f7ff fd13 	bl	8010128 <_malloc_r>
 8010702:	6028      	str	r0, [r5, #0]
 8010704:	6128      	str	r0, [r5, #16]
 8010706:	b920      	cbnz	r0, 8010712 <_svfiprintf_r+0x2e>
 8010708:	230c      	movs	r3, #12
 801070a:	603b      	str	r3, [r7, #0]
 801070c:	f04f 30ff 	mov.w	r0, #4294967295
 8010710:	e0d1      	b.n	80108b6 <_svfiprintf_r+0x1d2>
 8010712:	2340      	movs	r3, #64	; 0x40
 8010714:	616b      	str	r3, [r5, #20]
 8010716:	2300      	movs	r3, #0
 8010718:	9309      	str	r3, [sp, #36]	; 0x24
 801071a:	2320      	movs	r3, #32
 801071c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010720:	f8cd 800c 	str.w	r8, [sp, #12]
 8010724:	2330      	movs	r3, #48	; 0x30
 8010726:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80108d0 <_svfiprintf_r+0x1ec>
 801072a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801072e:	f04f 0901 	mov.w	r9, #1
 8010732:	4623      	mov	r3, r4
 8010734:	469a      	mov	sl, r3
 8010736:	f813 2b01 	ldrb.w	r2, [r3], #1
 801073a:	b10a      	cbz	r2, 8010740 <_svfiprintf_r+0x5c>
 801073c:	2a25      	cmp	r2, #37	; 0x25
 801073e:	d1f9      	bne.n	8010734 <_svfiprintf_r+0x50>
 8010740:	ebba 0b04 	subs.w	fp, sl, r4
 8010744:	d00b      	beq.n	801075e <_svfiprintf_r+0x7a>
 8010746:	465b      	mov	r3, fp
 8010748:	4622      	mov	r2, r4
 801074a:	4629      	mov	r1, r5
 801074c:	4638      	mov	r0, r7
 801074e:	f7ff ff6d 	bl	801062c <__ssputs_r>
 8010752:	3001      	adds	r0, #1
 8010754:	f000 80aa 	beq.w	80108ac <_svfiprintf_r+0x1c8>
 8010758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801075a:	445a      	add	r2, fp
 801075c:	9209      	str	r2, [sp, #36]	; 0x24
 801075e:	f89a 3000 	ldrb.w	r3, [sl]
 8010762:	2b00      	cmp	r3, #0
 8010764:	f000 80a2 	beq.w	80108ac <_svfiprintf_r+0x1c8>
 8010768:	2300      	movs	r3, #0
 801076a:	f04f 32ff 	mov.w	r2, #4294967295
 801076e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010772:	f10a 0a01 	add.w	sl, sl, #1
 8010776:	9304      	str	r3, [sp, #16]
 8010778:	9307      	str	r3, [sp, #28]
 801077a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801077e:	931a      	str	r3, [sp, #104]	; 0x68
 8010780:	4654      	mov	r4, sl
 8010782:	2205      	movs	r2, #5
 8010784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010788:	4851      	ldr	r0, [pc, #324]	; (80108d0 <_svfiprintf_r+0x1ec>)
 801078a:	f7ef fd29 	bl	80001e0 <memchr>
 801078e:	9a04      	ldr	r2, [sp, #16]
 8010790:	b9d8      	cbnz	r0, 80107ca <_svfiprintf_r+0xe6>
 8010792:	06d0      	lsls	r0, r2, #27
 8010794:	bf44      	itt	mi
 8010796:	2320      	movmi	r3, #32
 8010798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801079c:	0711      	lsls	r1, r2, #28
 801079e:	bf44      	itt	mi
 80107a0:	232b      	movmi	r3, #43	; 0x2b
 80107a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107a6:	f89a 3000 	ldrb.w	r3, [sl]
 80107aa:	2b2a      	cmp	r3, #42	; 0x2a
 80107ac:	d015      	beq.n	80107da <_svfiprintf_r+0xf6>
 80107ae:	9a07      	ldr	r2, [sp, #28]
 80107b0:	4654      	mov	r4, sl
 80107b2:	2000      	movs	r0, #0
 80107b4:	f04f 0c0a 	mov.w	ip, #10
 80107b8:	4621      	mov	r1, r4
 80107ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107be:	3b30      	subs	r3, #48	; 0x30
 80107c0:	2b09      	cmp	r3, #9
 80107c2:	d94e      	bls.n	8010862 <_svfiprintf_r+0x17e>
 80107c4:	b1b0      	cbz	r0, 80107f4 <_svfiprintf_r+0x110>
 80107c6:	9207      	str	r2, [sp, #28]
 80107c8:	e014      	b.n	80107f4 <_svfiprintf_r+0x110>
 80107ca:	eba0 0308 	sub.w	r3, r0, r8
 80107ce:	fa09 f303 	lsl.w	r3, r9, r3
 80107d2:	4313      	orrs	r3, r2
 80107d4:	9304      	str	r3, [sp, #16]
 80107d6:	46a2      	mov	sl, r4
 80107d8:	e7d2      	b.n	8010780 <_svfiprintf_r+0x9c>
 80107da:	9b03      	ldr	r3, [sp, #12]
 80107dc:	1d19      	adds	r1, r3, #4
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	9103      	str	r1, [sp, #12]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	bfbb      	ittet	lt
 80107e6:	425b      	neglt	r3, r3
 80107e8:	f042 0202 	orrlt.w	r2, r2, #2
 80107ec:	9307      	strge	r3, [sp, #28]
 80107ee:	9307      	strlt	r3, [sp, #28]
 80107f0:	bfb8      	it	lt
 80107f2:	9204      	strlt	r2, [sp, #16]
 80107f4:	7823      	ldrb	r3, [r4, #0]
 80107f6:	2b2e      	cmp	r3, #46	; 0x2e
 80107f8:	d10c      	bne.n	8010814 <_svfiprintf_r+0x130>
 80107fa:	7863      	ldrb	r3, [r4, #1]
 80107fc:	2b2a      	cmp	r3, #42	; 0x2a
 80107fe:	d135      	bne.n	801086c <_svfiprintf_r+0x188>
 8010800:	9b03      	ldr	r3, [sp, #12]
 8010802:	1d1a      	adds	r2, r3, #4
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	9203      	str	r2, [sp, #12]
 8010808:	2b00      	cmp	r3, #0
 801080a:	bfb8      	it	lt
 801080c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010810:	3402      	adds	r4, #2
 8010812:	9305      	str	r3, [sp, #20]
 8010814:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80108e0 <_svfiprintf_r+0x1fc>
 8010818:	7821      	ldrb	r1, [r4, #0]
 801081a:	2203      	movs	r2, #3
 801081c:	4650      	mov	r0, sl
 801081e:	f7ef fcdf 	bl	80001e0 <memchr>
 8010822:	b140      	cbz	r0, 8010836 <_svfiprintf_r+0x152>
 8010824:	2340      	movs	r3, #64	; 0x40
 8010826:	eba0 000a 	sub.w	r0, r0, sl
 801082a:	fa03 f000 	lsl.w	r0, r3, r0
 801082e:	9b04      	ldr	r3, [sp, #16]
 8010830:	4303      	orrs	r3, r0
 8010832:	3401      	adds	r4, #1
 8010834:	9304      	str	r3, [sp, #16]
 8010836:	f814 1b01 	ldrb.w	r1, [r4], #1
 801083a:	4826      	ldr	r0, [pc, #152]	; (80108d4 <_svfiprintf_r+0x1f0>)
 801083c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010840:	2206      	movs	r2, #6
 8010842:	f7ef fccd 	bl	80001e0 <memchr>
 8010846:	2800      	cmp	r0, #0
 8010848:	d038      	beq.n	80108bc <_svfiprintf_r+0x1d8>
 801084a:	4b23      	ldr	r3, [pc, #140]	; (80108d8 <_svfiprintf_r+0x1f4>)
 801084c:	bb1b      	cbnz	r3, 8010896 <_svfiprintf_r+0x1b2>
 801084e:	9b03      	ldr	r3, [sp, #12]
 8010850:	3307      	adds	r3, #7
 8010852:	f023 0307 	bic.w	r3, r3, #7
 8010856:	3308      	adds	r3, #8
 8010858:	9303      	str	r3, [sp, #12]
 801085a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801085c:	4433      	add	r3, r6
 801085e:	9309      	str	r3, [sp, #36]	; 0x24
 8010860:	e767      	b.n	8010732 <_svfiprintf_r+0x4e>
 8010862:	fb0c 3202 	mla	r2, ip, r2, r3
 8010866:	460c      	mov	r4, r1
 8010868:	2001      	movs	r0, #1
 801086a:	e7a5      	b.n	80107b8 <_svfiprintf_r+0xd4>
 801086c:	2300      	movs	r3, #0
 801086e:	3401      	adds	r4, #1
 8010870:	9305      	str	r3, [sp, #20]
 8010872:	4619      	mov	r1, r3
 8010874:	f04f 0c0a 	mov.w	ip, #10
 8010878:	4620      	mov	r0, r4
 801087a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801087e:	3a30      	subs	r2, #48	; 0x30
 8010880:	2a09      	cmp	r2, #9
 8010882:	d903      	bls.n	801088c <_svfiprintf_r+0x1a8>
 8010884:	2b00      	cmp	r3, #0
 8010886:	d0c5      	beq.n	8010814 <_svfiprintf_r+0x130>
 8010888:	9105      	str	r1, [sp, #20]
 801088a:	e7c3      	b.n	8010814 <_svfiprintf_r+0x130>
 801088c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010890:	4604      	mov	r4, r0
 8010892:	2301      	movs	r3, #1
 8010894:	e7f0      	b.n	8010878 <_svfiprintf_r+0x194>
 8010896:	ab03      	add	r3, sp, #12
 8010898:	9300      	str	r3, [sp, #0]
 801089a:	462a      	mov	r2, r5
 801089c:	4b0f      	ldr	r3, [pc, #60]	; (80108dc <_svfiprintf_r+0x1f8>)
 801089e:	a904      	add	r1, sp, #16
 80108a0:	4638      	mov	r0, r7
 80108a2:	f3af 8000 	nop.w
 80108a6:	1c42      	adds	r2, r0, #1
 80108a8:	4606      	mov	r6, r0
 80108aa:	d1d6      	bne.n	801085a <_svfiprintf_r+0x176>
 80108ac:	89ab      	ldrh	r3, [r5, #12]
 80108ae:	065b      	lsls	r3, r3, #25
 80108b0:	f53f af2c 	bmi.w	801070c <_svfiprintf_r+0x28>
 80108b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108b6:	b01d      	add	sp, #116	; 0x74
 80108b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108bc:	ab03      	add	r3, sp, #12
 80108be:	9300      	str	r3, [sp, #0]
 80108c0:	462a      	mov	r2, r5
 80108c2:	4b06      	ldr	r3, [pc, #24]	; (80108dc <_svfiprintf_r+0x1f8>)
 80108c4:	a904      	add	r1, sp, #16
 80108c6:	4638      	mov	r0, r7
 80108c8:	f000 f9d4 	bl	8010c74 <_printf_i>
 80108cc:	e7eb      	b.n	80108a6 <_svfiprintf_r+0x1c2>
 80108ce:	bf00      	nop
 80108d0:	0801404c 	.word	0x0801404c
 80108d4:	08014056 	.word	0x08014056
 80108d8:	00000000 	.word	0x00000000
 80108dc:	0801062d 	.word	0x0801062d
 80108e0:	08014052 	.word	0x08014052

080108e4 <__sfputc_r>:
 80108e4:	6893      	ldr	r3, [r2, #8]
 80108e6:	3b01      	subs	r3, #1
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	b410      	push	{r4}
 80108ec:	6093      	str	r3, [r2, #8]
 80108ee:	da08      	bge.n	8010902 <__sfputc_r+0x1e>
 80108f0:	6994      	ldr	r4, [r2, #24]
 80108f2:	42a3      	cmp	r3, r4
 80108f4:	db01      	blt.n	80108fa <__sfputc_r+0x16>
 80108f6:	290a      	cmp	r1, #10
 80108f8:	d103      	bne.n	8010902 <__sfputc_r+0x1e>
 80108fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108fe:	f000 bb39 	b.w	8010f74 <__swbuf_r>
 8010902:	6813      	ldr	r3, [r2, #0]
 8010904:	1c58      	adds	r0, r3, #1
 8010906:	6010      	str	r0, [r2, #0]
 8010908:	7019      	strb	r1, [r3, #0]
 801090a:	4608      	mov	r0, r1
 801090c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010910:	4770      	bx	lr

08010912 <__sfputs_r>:
 8010912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010914:	4606      	mov	r6, r0
 8010916:	460f      	mov	r7, r1
 8010918:	4614      	mov	r4, r2
 801091a:	18d5      	adds	r5, r2, r3
 801091c:	42ac      	cmp	r4, r5
 801091e:	d101      	bne.n	8010924 <__sfputs_r+0x12>
 8010920:	2000      	movs	r0, #0
 8010922:	e007      	b.n	8010934 <__sfputs_r+0x22>
 8010924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010928:	463a      	mov	r2, r7
 801092a:	4630      	mov	r0, r6
 801092c:	f7ff ffda 	bl	80108e4 <__sfputc_r>
 8010930:	1c43      	adds	r3, r0, #1
 8010932:	d1f3      	bne.n	801091c <__sfputs_r+0xa>
 8010934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010938 <_vfiprintf_r>:
 8010938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801093c:	460d      	mov	r5, r1
 801093e:	b09d      	sub	sp, #116	; 0x74
 8010940:	4614      	mov	r4, r2
 8010942:	4698      	mov	r8, r3
 8010944:	4606      	mov	r6, r0
 8010946:	b118      	cbz	r0, 8010950 <_vfiprintf_r+0x18>
 8010948:	6983      	ldr	r3, [r0, #24]
 801094a:	b90b      	cbnz	r3, 8010950 <_vfiprintf_r+0x18>
 801094c:	f7ff fa94 	bl	800fe78 <__sinit>
 8010950:	4b89      	ldr	r3, [pc, #548]	; (8010b78 <_vfiprintf_r+0x240>)
 8010952:	429d      	cmp	r5, r3
 8010954:	d11b      	bne.n	801098e <_vfiprintf_r+0x56>
 8010956:	6875      	ldr	r5, [r6, #4]
 8010958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801095a:	07d9      	lsls	r1, r3, #31
 801095c:	d405      	bmi.n	801096a <_vfiprintf_r+0x32>
 801095e:	89ab      	ldrh	r3, [r5, #12]
 8010960:	059a      	lsls	r2, r3, #22
 8010962:	d402      	bmi.n	801096a <_vfiprintf_r+0x32>
 8010964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010966:	f7ff fb4a 	bl	800fffe <__retarget_lock_acquire_recursive>
 801096a:	89ab      	ldrh	r3, [r5, #12]
 801096c:	071b      	lsls	r3, r3, #28
 801096e:	d501      	bpl.n	8010974 <_vfiprintf_r+0x3c>
 8010970:	692b      	ldr	r3, [r5, #16]
 8010972:	b9eb      	cbnz	r3, 80109b0 <_vfiprintf_r+0x78>
 8010974:	4629      	mov	r1, r5
 8010976:	4630      	mov	r0, r6
 8010978:	f000 fb4e 	bl	8011018 <__swsetup_r>
 801097c:	b1c0      	cbz	r0, 80109b0 <_vfiprintf_r+0x78>
 801097e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010980:	07dc      	lsls	r4, r3, #31
 8010982:	d50e      	bpl.n	80109a2 <_vfiprintf_r+0x6a>
 8010984:	f04f 30ff 	mov.w	r0, #4294967295
 8010988:	b01d      	add	sp, #116	; 0x74
 801098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801098e:	4b7b      	ldr	r3, [pc, #492]	; (8010b7c <_vfiprintf_r+0x244>)
 8010990:	429d      	cmp	r5, r3
 8010992:	d101      	bne.n	8010998 <_vfiprintf_r+0x60>
 8010994:	68b5      	ldr	r5, [r6, #8]
 8010996:	e7df      	b.n	8010958 <_vfiprintf_r+0x20>
 8010998:	4b79      	ldr	r3, [pc, #484]	; (8010b80 <_vfiprintf_r+0x248>)
 801099a:	429d      	cmp	r5, r3
 801099c:	bf08      	it	eq
 801099e:	68f5      	ldreq	r5, [r6, #12]
 80109a0:	e7da      	b.n	8010958 <_vfiprintf_r+0x20>
 80109a2:	89ab      	ldrh	r3, [r5, #12]
 80109a4:	0598      	lsls	r0, r3, #22
 80109a6:	d4ed      	bmi.n	8010984 <_vfiprintf_r+0x4c>
 80109a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109aa:	f7ff fb29 	bl	8010000 <__retarget_lock_release_recursive>
 80109ae:	e7e9      	b.n	8010984 <_vfiprintf_r+0x4c>
 80109b0:	2300      	movs	r3, #0
 80109b2:	9309      	str	r3, [sp, #36]	; 0x24
 80109b4:	2320      	movs	r3, #32
 80109b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80109be:	2330      	movs	r3, #48	; 0x30
 80109c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010b84 <_vfiprintf_r+0x24c>
 80109c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109c8:	f04f 0901 	mov.w	r9, #1
 80109cc:	4623      	mov	r3, r4
 80109ce:	469a      	mov	sl, r3
 80109d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109d4:	b10a      	cbz	r2, 80109da <_vfiprintf_r+0xa2>
 80109d6:	2a25      	cmp	r2, #37	; 0x25
 80109d8:	d1f9      	bne.n	80109ce <_vfiprintf_r+0x96>
 80109da:	ebba 0b04 	subs.w	fp, sl, r4
 80109de:	d00b      	beq.n	80109f8 <_vfiprintf_r+0xc0>
 80109e0:	465b      	mov	r3, fp
 80109e2:	4622      	mov	r2, r4
 80109e4:	4629      	mov	r1, r5
 80109e6:	4630      	mov	r0, r6
 80109e8:	f7ff ff93 	bl	8010912 <__sfputs_r>
 80109ec:	3001      	adds	r0, #1
 80109ee:	f000 80aa 	beq.w	8010b46 <_vfiprintf_r+0x20e>
 80109f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109f4:	445a      	add	r2, fp
 80109f6:	9209      	str	r2, [sp, #36]	; 0x24
 80109f8:	f89a 3000 	ldrb.w	r3, [sl]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	f000 80a2 	beq.w	8010b46 <_vfiprintf_r+0x20e>
 8010a02:	2300      	movs	r3, #0
 8010a04:	f04f 32ff 	mov.w	r2, #4294967295
 8010a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a0c:	f10a 0a01 	add.w	sl, sl, #1
 8010a10:	9304      	str	r3, [sp, #16]
 8010a12:	9307      	str	r3, [sp, #28]
 8010a14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a18:	931a      	str	r3, [sp, #104]	; 0x68
 8010a1a:	4654      	mov	r4, sl
 8010a1c:	2205      	movs	r2, #5
 8010a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a22:	4858      	ldr	r0, [pc, #352]	; (8010b84 <_vfiprintf_r+0x24c>)
 8010a24:	f7ef fbdc 	bl	80001e0 <memchr>
 8010a28:	9a04      	ldr	r2, [sp, #16]
 8010a2a:	b9d8      	cbnz	r0, 8010a64 <_vfiprintf_r+0x12c>
 8010a2c:	06d1      	lsls	r1, r2, #27
 8010a2e:	bf44      	itt	mi
 8010a30:	2320      	movmi	r3, #32
 8010a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a36:	0713      	lsls	r3, r2, #28
 8010a38:	bf44      	itt	mi
 8010a3a:	232b      	movmi	r3, #43	; 0x2b
 8010a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a40:	f89a 3000 	ldrb.w	r3, [sl]
 8010a44:	2b2a      	cmp	r3, #42	; 0x2a
 8010a46:	d015      	beq.n	8010a74 <_vfiprintf_r+0x13c>
 8010a48:	9a07      	ldr	r2, [sp, #28]
 8010a4a:	4654      	mov	r4, sl
 8010a4c:	2000      	movs	r0, #0
 8010a4e:	f04f 0c0a 	mov.w	ip, #10
 8010a52:	4621      	mov	r1, r4
 8010a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a58:	3b30      	subs	r3, #48	; 0x30
 8010a5a:	2b09      	cmp	r3, #9
 8010a5c:	d94e      	bls.n	8010afc <_vfiprintf_r+0x1c4>
 8010a5e:	b1b0      	cbz	r0, 8010a8e <_vfiprintf_r+0x156>
 8010a60:	9207      	str	r2, [sp, #28]
 8010a62:	e014      	b.n	8010a8e <_vfiprintf_r+0x156>
 8010a64:	eba0 0308 	sub.w	r3, r0, r8
 8010a68:	fa09 f303 	lsl.w	r3, r9, r3
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	9304      	str	r3, [sp, #16]
 8010a70:	46a2      	mov	sl, r4
 8010a72:	e7d2      	b.n	8010a1a <_vfiprintf_r+0xe2>
 8010a74:	9b03      	ldr	r3, [sp, #12]
 8010a76:	1d19      	adds	r1, r3, #4
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	9103      	str	r1, [sp, #12]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	bfbb      	ittet	lt
 8010a80:	425b      	neglt	r3, r3
 8010a82:	f042 0202 	orrlt.w	r2, r2, #2
 8010a86:	9307      	strge	r3, [sp, #28]
 8010a88:	9307      	strlt	r3, [sp, #28]
 8010a8a:	bfb8      	it	lt
 8010a8c:	9204      	strlt	r2, [sp, #16]
 8010a8e:	7823      	ldrb	r3, [r4, #0]
 8010a90:	2b2e      	cmp	r3, #46	; 0x2e
 8010a92:	d10c      	bne.n	8010aae <_vfiprintf_r+0x176>
 8010a94:	7863      	ldrb	r3, [r4, #1]
 8010a96:	2b2a      	cmp	r3, #42	; 0x2a
 8010a98:	d135      	bne.n	8010b06 <_vfiprintf_r+0x1ce>
 8010a9a:	9b03      	ldr	r3, [sp, #12]
 8010a9c:	1d1a      	adds	r2, r3, #4
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	9203      	str	r2, [sp, #12]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	bfb8      	it	lt
 8010aa6:	f04f 33ff 	movlt.w	r3, #4294967295
 8010aaa:	3402      	adds	r4, #2
 8010aac:	9305      	str	r3, [sp, #20]
 8010aae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010b94 <_vfiprintf_r+0x25c>
 8010ab2:	7821      	ldrb	r1, [r4, #0]
 8010ab4:	2203      	movs	r2, #3
 8010ab6:	4650      	mov	r0, sl
 8010ab8:	f7ef fb92 	bl	80001e0 <memchr>
 8010abc:	b140      	cbz	r0, 8010ad0 <_vfiprintf_r+0x198>
 8010abe:	2340      	movs	r3, #64	; 0x40
 8010ac0:	eba0 000a 	sub.w	r0, r0, sl
 8010ac4:	fa03 f000 	lsl.w	r0, r3, r0
 8010ac8:	9b04      	ldr	r3, [sp, #16]
 8010aca:	4303      	orrs	r3, r0
 8010acc:	3401      	adds	r4, #1
 8010ace:	9304      	str	r3, [sp, #16]
 8010ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ad4:	482c      	ldr	r0, [pc, #176]	; (8010b88 <_vfiprintf_r+0x250>)
 8010ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ada:	2206      	movs	r2, #6
 8010adc:	f7ef fb80 	bl	80001e0 <memchr>
 8010ae0:	2800      	cmp	r0, #0
 8010ae2:	d03f      	beq.n	8010b64 <_vfiprintf_r+0x22c>
 8010ae4:	4b29      	ldr	r3, [pc, #164]	; (8010b8c <_vfiprintf_r+0x254>)
 8010ae6:	bb1b      	cbnz	r3, 8010b30 <_vfiprintf_r+0x1f8>
 8010ae8:	9b03      	ldr	r3, [sp, #12]
 8010aea:	3307      	adds	r3, #7
 8010aec:	f023 0307 	bic.w	r3, r3, #7
 8010af0:	3308      	adds	r3, #8
 8010af2:	9303      	str	r3, [sp, #12]
 8010af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010af6:	443b      	add	r3, r7
 8010af8:	9309      	str	r3, [sp, #36]	; 0x24
 8010afa:	e767      	b.n	80109cc <_vfiprintf_r+0x94>
 8010afc:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b00:	460c      	mov	r4, r1
 8010b02:	2001      	movs	r0, #1
 8010b04:	e7a5      	b.n	8010a52 <_vfiprintf_r+0x11a>
 8010b06:	2300      	movs	r3, #0
 8010b08:	3401      	adds	r4, #1
 8010b0a:	9305      	str	r3, [sp, #20]
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	f04f 0c0a 	mov.w	ip, #10
 8010b12:	4620      	mov	r0, r4
 8010b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b18:	3a30      	subs	r2, #48	; 0x30
 8010b1a:	2a09      	cmp	r2, #9
 8010b1c:	d903      	bls.n	8010b26 <_vfiprintf_r+0x1ee>
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d0c5      	beq.n	8010aae <_vfiprintf_r+0x176>
 8010b22:	9105      	str	r1, [sp, #20]
 8010b24:	e7c3      	b.n	8010aae <_vfiprintf_r+0x176>
 8010b26:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b2a:	4604      	mov	r4, r0
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	e7f0      	b.n	8010b12 <_vfiprintf_r+0x1da>
 8010b30:	ab03      	add	r3, sp, #12
 8010b32:	9300      	str	r3, [sp, #0]
 8010b34:	462a      	mov	r2, r5
 8010b36:	4b16      	ldr	r3, [pc, #88]	; (8010b90 <_vfiprintf_r+0x258>)
 8010b38:	a904      	add	r1, sp, #16
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	f3af 8000 	nop.w
 8010b40:	4607      	mov	r7, r0
 8010b42:	1c78      	adds	r0, r7, #1
 8010b44:	d1d6      	bne.n	8010af4 <_vfiprintf_r+0x1bc>
 8010b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b48:	07d9      	lsls	r1, r3, #31
 8010b4a:	d405      	bmi.n	8010b58 <_vfiprintf_r+0x220>
 8010b4c:	89ab      	ldrh	r3, [r5, #12]
 8010b4e:	059a      	lsls	r2, r3, #22
 8010b50:	d402      	bmi.n	8010b58 <_vfiprintf_r+0x220>
 8010b52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b54:	f7ff fa54 	bl	8010000 <__retarget_lock_release_recursive>
 8010b58:	89ab      	ldrh	r3, [r5, #12]
 8010b5a:	065b      	lsls	r3, r3, #25
 8010b5c:	f53f af12 	bmi.w	8010984 <_vfiprintf_r+0x4c>
 8010b60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b62:	e711      	b.n	8010988 <_vfiprintf_r+0x50>
 8010b64:	ab03      	add	r3, sp, #12
 8010b66:	9300      	str	r3, [sp, #0]
 8010b68:	462a      	mov	r2, r5
 8010b6a:	4b09      	ldr	r3, [pc, #36]	; (8010b90 <_vfiprintf_r+0x258>)
 8010b6c:	a904      	add	r1, sp, #16
 8010b6e:	4630      	mov	r0, r6
 8010b70:	f000 f880 	bl	8010c74 <_printf_i>
 8010b74:	e7e4      	b.n	8010b40 <_vfiprintf_r+0x208>
 8010b76:	bf00      	nop
 8010b78:	08014008 	.word	0x08014008
 8010b7c:	08014028 	.word	0x08014028
 8010b80:	08013fe8 	.word	0x08013fe8
 8010b84:	0801404c 	.word	0x0801404c
 8010b88:	08014056 	.word	0x08014056
 8010b8c:	00000000 	.word	0x00000000
 8010b90:	08010913 	.word	0x08010913
 8010b94:	08014052 	.word	0x08014052

08010b98 <_printf_common>:
 8010b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b9c:	4616      	mov	r6, r2
 8010b9e:	4699      	mov	r9, r3
 8010ba0:	688a      	ldr	r2, [r1, #8]
 8010ba2:	690b      	ldr	r3, [r1, #16]
 8010ba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ba8:	4293      	cmp	r3, r2
 8010baa:	bfb8      	it	lt
 8010bac:	4613      	movlt	r3, r2
 8010bae:	6033      	str	r3, [r6, #0]
 8010bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010bb4:	4607      	mov	r7, r0
 8010bb6:	460c      	mov	r4, r1
 8010bb8:	b10a      	cbz	r2, 8010bbe <_printf_common+0x26>
 8010bba:	3301      	adds	r3, #1
 8010bbc:	6033      	str	r3, [r6, #0]
 8010bbe:	6823      	ldr	r3, [r4, #0]
 8010bc0:	0699      	lsls	r1, r3, #26
 8010bc2:	bf42      	ittt	mi
 8010bc4:	6833      	ldrmi	r3, [r6, #0]
 8010bc6:	3302      	addmi	r3, #2
 8010bc8:	6033      	strmi	r3, [r6, #0]
 8010bca:	6825      	ldr	r5, [r4, #0]
 8010bcc:	f015 0506 	ands.w	r5, r5, #6
 8010bd0:	d106      	bne.n	8010be0 <_printf_common+0x48>
 8010bd2:	f104 0a19 	add.w	sl, r4, #25
 8010bd6:	68e3      	ldr	r3, [r4, #12]
 8010bd8:	6832      	ldr	r2, [r6, #0]
 8010bda:	1a9b      	subs	r3, r3, r2
 8010bdc:	42ab      	cmp	r3, r5
 8010bde:	dc26      	bgt.n	8010c2e <_printf_common+0x96>
 8010be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010be4:	1e13      	subs	r3, r2, #0
 8010be6:	6822      	ldr	r2, [r4, #0]
 8010be8:	bf18      	it	ne
 8010bea:	2301      	movne	r3, #1
 8010bec:	0692      	lsls	r2, r2, #26
 8010bee:	d42b      	bmi.n	8010c48 <_printf_common+0xb0>
 8010bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010bf4:	4649      	mov	r1, r9
 8010bf6:	4638      	mov	r0, r7
 8010bf8:	47c0      	blx	r8
 8010bfa:	3001      	adds	r0, #1
 8010bfc:	d01e      	beq.n	8010c3c <_printf_common+0xa4>
 8010bfe:	6823      	ldr	r3, [r4, #0]
 8010c00:	68e5      	ldr	r5, [r4, #12]
 8010c02:	6832      	ldr	r2, [r6, #0]
 8010c04:	f003 0306 	and.w	r3, r3, #6
 8010c08:	2b04      	cmp	r3, #4
 8010c0a:	bf08      	it	eq
 8010c0c:	1aad      	subeq	r5, r5, r2
 8010c0e:	68a3      	ldr	r3, [r4, #8]
 8010c10:	6922      	ldr	r2, [r4, #16]
 8010c12:	bf0c      	ite	eq
 8010c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c18:	2500      	movne	r5, #0
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	bfc4      	itt	gt
 8010c1e:	1a9b      	subgt	r3, r3, r2
 8010c20:	18ed      	addgt	r5, r5, r3
 8010c22:	2600      	movs	r6, #0
 8010c24:	341a      	adds	r4, #26
 8010c26:	42b5      	cmp	r5, r6
 8010c28:	d11a      	bne.n	8010c60 <_printf_common+0xc8>
 8010c2a:	2000      	movs	r0, #0
 8010c2c:	e008      	b.n	8010c40 <_printf_common+0xa8>
 8010c2e:	2301      	movs	r3, #1
 8010c30:	4652      	mov	r2, sl
 8010c32:	4649      	mov	r1, r9
 8010c34:	4638      	mov	r0, r7
 8010c36:	47c0      	blx	r8
 8010c38:	3001      	adds	r0, #1
 8010c3a:	d103      	bne.n	8010c44 <_printf_common+0xac>
 8010c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c44:	3501      	adds	r5, #1
 8010c46:	e7c6      	b.n	8010bd6 <_printf_common+0x3e>
 8010c48:	18e1      	adds	r1, r4, r3
 8010c4a:	1c5a      	adds	r2, r3, #1
 8010c4c:	2030      	movs	r0, #48	; 0x30
 8010c4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c52:	4422      	add	r2, r4
 8010c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c5c:	3302      	adds	r3, #2
 8010c5e:	e7c7      	b.n	8010bf0 <_printf_common+0x58>
 8010c60:	2301      	movs	r3, #1
 8010c62:	4622      	mov	r2, r4
 8010c64:	4649      	mov	r1, r9
 8010c66:	4638      	mov	r0, r7
 8010c68:	47c0      	blx	r8
 8010c6a:	3001      	adds	r0, #1
 8010c6c:	d0e6      	beq.n	8010c3c <_printf_common+0xa4>
 8010c6e:	3601      	adds	r6, #1
 8010c70:	e7d9      	b.n	8010c26 <_printf_common+0x8e>
	...

08010c74 <_printf_i>:
 8010c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c78:	7e0f      	ldrb	r7, [r1, #24]
 8010c7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010c7c:	2f78      	cmp	r7, #120	; 0x78
 8010c7e:	4691      	mov	r9, r2
 8010c80:	4680      	mov	r8, r0
 8010c82:	460c      	mov	r4, r1
 8010c84:	469a      	mov	sl, r3
 8010c86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010c8a:	d807      	bhi.n	8010c9c <_printf_i+0x28>
 8010c8c:	2f62      	cmp	r7, #98	; 0x62
 8010c8e:	d80a      	bhi.n	8010ca6 <_printf_i+0x32>
 8010c90:	2f00      	cmp	r7, #0
 8010c92:	f000 80d8 	beq.w	8010e46 <_printf_i+0x1d2>
 8010c96:	2f58      	cmp	r7, #88	; 0x58
 8010c98:	f000 80a3 	beq.w	8010de2 <_printf_i+0x16e>
 8010c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010ca4:	e03a      	b.n	8010d1c <_printf_i+0xa8>
 8010ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010caa:	2b15      	cmp	r3, #21
 8010cac:	d8f6      	bhi.n	8010c9c <_printf_i+0x28>
 8010cae:	a101      	add	r1, pc, #4	; (adr r1, 8010cb4 <_printf_i+0x40>)
 8010cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010cb4:	08010d0d 	.word	0x08010d0d
 8010cb8:	08010d21 	.word	0x08010d21
 8010cbc:	08010c9d 	.word	0x08010c9d
 8010cc0:	08010c9d 	.word	0x08010c9d
 8010cc4:	08010c9d 	.word	0x08010c9d
 8010cc8:	08010c9d 	.word	0x08010c9d
 8010ccc:	08010d21 	.word	0x08010d21
 8010cd0:	08010c9d 	.word	0x08010c9d
 8010cd4:	08010c9d 	.word	0x08010c9d
 8010cd8:	08010c9d 	.word	0x08010c9d
 8010cdc:	08010c9d 	.word	0x08010c9d
 8010ce0:	08010e2d 	.word	0x08010e2d
 8010ce4:	08010d51 	.word	0x08010d51
 8010ce8:	08010e0f 	.word	0x08010e0f
 8010cec:	08010c9d 	.word	0x08010c9d
 8010cf0:	08010c9d 	.word	0x08010c9d
 8010cf4:	08010e4f 	.word	0x08010e4f
 8010cf8:	08010c9d 	.word	0x08010c9d
 8010cfc:	08010d51 	.word	0x08010d51
 8010d00:	08010c9d 	.word	0x08010c9d
 8010d04:	08010c9d 	.word	0x08010c9d
 8010d08:	08010e17 	.word	0x08010e17
 8010d0c:	682b      	ldr	r3, [r5, #0]
 8010d0e:	1d1a      	adds	r2, r3, #4
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	602a      	str	r2, [r5, #0]
 8010d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e0a3      	b.n	8010e68 <_printf_i+0x1f4>
 8010d20:	6820      	ldr	r0, [r4, #0]
 8010d22:	6829      	ldr	r1, [r5, #0]
 8010d24:	0606      	lsls	r6, r0, #24
 8010d26:	f101 0304 	add.w	r3, r1, #4
 8010d2a:	d50a      	bpl.n	8010d42 <_printf_i+0xce>
 8010d2c:	680e      	ldr	r6, [r1, #0]
 8010d2e:	602b      	str	r3, [r5, #0]
 8010d30:	2e00      	cmp	r6, #0
 8010d32:	da03      	bge.n	8010d3c <_printf_i+0xc8>
 8010d34:	232d      	movs	r3, #45	; 0x2d
 8010d36:	4276      	negs	r6, r6
 8010d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d3c:	485e      	ldr	r0, [pc, #376]	; (8010eb8 <_printf_i+0x244>)
 8010d3e:	230a      	movs	r3, #10
 8010d40:	e019      	b.n	8010d76 <_printf_i+0x102>
 8010d42:	680e      	ldr	r6, [r1, #0]
 8010d44:	602b      	str	r3, [r5, #0]
 8010d46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010d4a:	bf18      	it	ne
 8010d4c:	b236      	sxthne	r6, r6
 8010d4e:	e7ef      	b.n	8010d30 <_printf_i+0xbc>
 8010d50:	682b      	ldr	r3, [r5, #0]
 8010d52:	6820      	ldr	r0, [r4, #0]
 8010d54:	1d19      	adds	r1, r3, #4
 8010d56:	6029      	str	r1, [r5, #0]
 8010d58:	0601      	lsls	r1, r0, #24
 8010d5a:	d501      	bpl.n	8010d60 <_printf_i+0xec>
 8010d5c:	681e      	ldr	r6, [r3, #0]
 8010d5e:	e002      	b.n	8010d66 <_printf_i+0xf2>
 8010d60:	0646      	lsls	r6, r0, #25
 8010d62:	d5fb      	bpl.n	8010d5c <_printf_i+0xe8>
 8010d64:	881e      	ldrh	r6, [r3, #0]
 8010d66:	4854      	ldr	r0, [pc, #336]	; (8010eb8 <_printf_i+0x244>)
 8010d68:	2f6f      	cmp	r7, #111	; 0x6f
 8010d6a:	bf0c      	ite	eq
 8010d6c:	2308      	moveq	r3, #8
 8010d6e:	230a      	movne	r3, #10
 8010d70:	2100      	movs	r1, #0
 8010d72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010d76:	6865      	ldr	r5, [r4, #4]
 8010d78:	60a5      	str	r5, [r4, #8]
 8010d7a:	2d00      	cmp	r5, #0
 8010d7c:	bfa2      	ittt	ge
 8010d7e:	6821      	ldrge	r1, [r4, #0]
 8010d80:	f021 0104 	bicge.w	r1, r1, #4
 8010d84:	6021      	strge	r1, [r4, #0]
 8010d86:	b90e      	cbnz	r6, 8010d8c <_printf_i+0x118>
 8010d88:	2d00      	cmp	r5, #0
 8010d8a:	d04d      	beq.n	8010e28 <_printf_i+0x1b4>
 8010d8c:	4615      	mov	r5, r2
 8010d8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010d92:	fb03 6711 	mls	r7, r3, r1, r6
 8010d96:	5dc7      	ldrb	r7, [r0, r7]
 8010d98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010d9c:	4637      	mov	r7, r6
 8010d9e:	42bb      	cmp	r3, r7
 8010da0:	460e      	mov	r6, r1
 8010da2:	d9f4      	bls.n	8010d8e <_printf_i+0x11a>
 8010da4:	2b08      	cmp	r3, #8
 8010da6:	d10b      	bne.n	8010dc0 <_printf_i+0x14c>
 8010da8:	6823      	ldr	r3, [r4, #0]
 8010daa:	07de      	lsls	r6, r3, #31
 8010dac:	d508      	bpl.n	8010dc0 <_printf_i+0x14c>
 8010dae:	6923      	ldr	r3, [r4, #16]
 8010db0:	6861      	ldr	r1, [r4, #4]
 8010db2:	4299      	cmp	r1, r3
 8010db4:	bfde      	ittt	le
 8010db6:	2330      	movle	r3, #48	; 0x30
 8010db8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010dbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010dc0:	1b52      	subs	r2, r2, r5
 8010dc2:	6122      	str	r2, [r4, #16]
 8010dc4:	f8cd a000 	str.w	sl, [sp]
 8010dc8:	464b      	mov	r3, r9
 8010dca:	aa03      	add	r2, sp, #12
 8010dcc:	4621      	mov	r1, r4
 8010dce:	4640      	mov	r0, r8
 8010dd0:	f7ff fee2 	bl	8010b98 <_printf_common>
 8010dd4:	3001      	adds	r0, #1
 8010dd6:	d14c      	bne.n	8010e72 <_printf_i+0x1fe>
 8010dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010ddc:	b004      	add	sp, #16
 8010dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010de2:	4835      	ldr	r0, [pc, #212]	; (8010eb8 <_printf_i+0x244>)
 8010de4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010de8:	6829      	ldr	r1, [r5, #0]
 8010dea:	6823      	ldr	r3, [r4, #0]
 8010dec:	f851 6b04 	ldr.w	r6, [r1], #4
 8010df0:	6029      	str	r1, [r5, #0]
 8010df2:	061d      	lsls	r5, r3, #24
 8010df4:	d514      	bpl.n	8010e20 <_printf_i+0x1ac>
 8010df6:	07df      	lsls	r7, r3, #31
 8010df8:	bf44      	itt	mi
 8010dfa:	f043 0320 	orrmi.w	r3, r3, #32
 8010dfe:	6023      	strmi	r3, [r4, #0]
 8010e00:	b91e      	cbnz	r6, 8010e0a <_printf_i+0x196>
 8010e02:	6823      	ldr	r3, [r4, #0]
 8010e04:	f023 0320 	bic.w	r3, r3, #32
 8010e08:	6023      	str	r3, [r4, #0]
 8010e0a:	2310      	movs	r3, #16
 8010e0c:	e7b0      	b.n	8010d70 <_printf_i+0xfc>
 8010e0e:	6823      	ldr	r3, [r4, #0]
 8010e10:	f043 0320 	orr.w	r3, r3, #32
 8010e14:	6023      	str	r3, [r4, #0]
 8010e16:	2378      	movs	r3, #120	; 0x78
 8010e18:	4828      	ldr	r0, [pc, #160]	; (8010ebc <_printf_i+0x248>)
 8010e1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e1e:	e7e3      	b.n	8010de8 <_printf_i+0x174>
 8010e20:	0659      	lsls	r1, r3, #25
 8010e22:	bf48      	it	mi
 8010e24:	b2b6      	uxthmi	r6, r6
 8010e26:	e7e6      	b.n	8010df6 <_printf_i+0x182>
 8010e28:	4615      	mov	r5, r2
 8010e2a:	e7bb      	b.n	8010da4 <_printf_i+0x130>
 8010e2c:	682b      	ldr	r3, [r5, #0]
 8010e2e:	6826      	ldr	r6, [r4, #0]
 8010e30:	6961      	ldr	r1, [r4, #20]
 8010e32:	1d18      	adds	r0, r3, #4
 8010e34:	6028      	str	r0, [r5, #0]
 8010e36:	0635      	lsls	r5, r6, #24
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	d501      	bpl.n	8010e40 <_printf_i+0x1cc>
 8010e3c:	6019      	str	r1, [r3, #0]
 8010e3e:	e002      	b.n	8010e46 <_printf_i+0x1d2>
 8010e40:	0670      	lsls	r0, r6, #25
 8010e42:	d5fb      	bpl.n	8010e3c <_printf_i+0x1c8>
 8010e44:	8019      	strh	r1, [r3, #0]
 8010e46:	2300      	movs	r3, #0
 8010e48:	6123      	str	r3, [r4, #16]
 8010e4a:	4615      	mov	r5, r2
 8010e4c:	e7ba      	b.n	8010dc4 <_printf_i+0x150>
 8010e4e:	682b      	ldr	r3, [r5, #0]
 8010e50:	1d1a      	adds	r2, r3, #4
 8010e52:	602a      	str	r2, [r5, #0]
 8010e54:	681d      	ldr	r5, [r3, #0]
 8010e56:	6862      	ldr	r2, [r4, #4]
 8010e58:	2100      	movs	r1, #0
 8010e5a:	4628      	mov	r0, r5
 8010e5c:	f7ef f9c0 	bl	80001e0 <memchr>
 8010e60:	b108      	cbz	r0, 8010e66 <_printf_i+0x1f2>
 8010e62:	1b40      	subs	r0, r0, r5
 8010e64:	6060      	str	r0, [r4, #4]
 8010e66:	6863      	ldr	r3, [r4, #4]
 8010e68:	6123      	str	r3, [r4, #16]
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e70:	e7a8      	b.n	8010dc4 <_printf_i+0x150>
 8010e72:	6923      	ldr	r3, [r4, #16]
 8010e74:	462a      	mov	r2, r5
 8010e76:	4649      	mov	r1, r9
 8010e78:	4640      	mov	r0, r8
 8010e7a:	47d0      	blx	sl
 8010e7c:	3001      	adds	r0, #1
 8010e7e:	d0ab      	beq.n	8010dd8 <_printf_i+0x164>
 8010e80:	6823      	ldr	r3, [r4, #0]
 8010e82:	079b      	lsls	r3, r3, #30
 8010e84:	d413      	bmi.n	8010eae <_printf_i+0x23a>
 8010e86:	68e0      	ldr	r0, [r4, #12]
 8010e88:	9b03      	ldr	r3, [sp, #12]
 8010e8a:	4298      	cmp	r0, r3
 8010e8c:	bfb8      	it	lt
 8010e8e:	4618      	movlt	r0, r3
 8010e90:	e7a4      	b.n	8010ddc <_printf_i+0x168>
 8010e92:	2301      	movs	r3, #1
 8010e94:	4632      	mov	r2, r6
 8010e96:	4649      	mov	r1, r9
 8010e98:	4640      	mov	r0, r8
 8010e9a:	47d0      	blx	sl
 8010e9c:	3001      	adds	r0, #1
 8010e9e:	d09b      	beq.n	8010dd8 <_printf_i+0x164>
 8010ea0:	3501      	adds	r5, #1
 8010ea2:	68e3      	ldr	r3, [r4, #12]
 8010ea4:	9903      	ldr	r1, [sp, #12]
 8010ea6:	1a5b      	subs	r3, r3, r1
 8010ea8:	42ab      	cmp	r3, r5
 8010eaa:	dcf2      	bgt.n	8010e92 <_printf_i+0x21e>
 8010eac:	e7eb      	b.n	8010e86 <_printf_i+0x212>
 8010eae:	2500      	movs	r5, #0
 8010eb0:	f104 0619 	add.w	r6, r4, #25
 8010eb4:	e7f5      	b.n	8010ea2 <_printf_i+0x22e>
 8010eb6:	bf00      	nop
 8010eb8:	0801405d 	.word	0x0801405d
 8010ebc:	0801406e 	.word	0x0801406e

08010ec0 <_putc_r>:
 8010ec0:	b570      	push	{r4, r5, r6, lr}
 8010ec2:	460d      	mov	r5, r1
 8010ec4:	4614      	mov	r4, r2
 8010ec6:	4606      	mov	r6, r0
 8010ec8:	b118      	cbz	r0, 8010ed2 <_putc_r+0x12>
 8010eca:	6983      	ldr	r3, [r0, #24]
 8010ecc:	b90b      	cbnz	r3, 8010ed2 <_putc_r+0x12>
 8010ece:	f7fe ffd3 	bl	800fe78 <__sinit>
 8010ed2:	4b1c      	ldr	r3, [pc, #112]	; (8010f44 <_putc_r+0x84>)
 8010ed4:	429c      	cmp	r4, r3
 8010ed6:	d124      	bne.n	8010f22 <_putc_r+0x62>
 8010ed8:	6874      	ldr	r4, [r6, #4]
 8010eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010edc:	07d8      	lsls	r0, r3, #31
 8010ede:	d405      	bmi.n	8010eec <_putc_r+0x2c>
 8010ee0:	89a3      	ldrh	r3, [r4, #12]
 8010ee2:	0599      	lsls	r1, r3, #22
 8010ee4:	d402      	bmi.n	8010eec <_putc_r+0x2c>
 8010ee6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ee8:	f7ff f889 	bl	800fffe <__retarget_lock_acquire_recursive>
 8010eec:	68a3      	ldr	r3, [r4, #8]
 8010eee:	3b01      	subs	r3, #1
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	60a3      	str	r3, [r4, #8]
 8010ef4:	da05      	bge.n	8010f02 <_putc_r+0x42>
 8010ef6:	69a2      	ldr	r2, [r4, #24]
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	db1c      	blt.n	8010f36 <_putc_r+0x76>
 8010efc:	b2eb      	uxtb	r3, r5
 8010efe:	2b0a      	cmp	r3, #10
 8010f00:	d019      	beq.n	8010f36 <_putc_r+0x76>
 8010f02:	6823      	ldr	r3, [r4, #0]
 8010f04:	1c5a      	adds	r2, r3, #1
 8010f06:	6022      	str	r2, [r4, #0]
 8010f08:	701d      	strb	r5, [r3, #0]
 8010f0a:	b2ed      	uxtb	r5, r5
 8010f0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f0e:	07da      	lsls	r2, r3, #31
 8010f10:	d405      	bmi.n	8010f1e <_putc_r+0x5e>
 8010f12:	89a3      	ldrh	r3, [r4, #12]
 8010f14:	059b      	lsls	r3, r3, #22
 8010f16:	d402      	bmi.n	8010f1e <_putc_r+0x5e>
 8010f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f1a:	f7ff f871 	bl	8010000 <__retarget_lock_release_recursive>
 8010f1e:	4628      	mov	r0, r5
 8010f20:	bd70      	pop	{r4, r5, r6, pc}
 8010f22:	4b09      	ldr	r3, [pc, #36]	; (8010f48 <_putc_r+0x88>)
 8010f24:	429c      	cmp	r4, r3
 8010f26:	d101      	bne.n	8010f2c <_putc_r+0x6c>
 8010f28:	68b4      	ldr	r4, [r6, #8]
 8010f2a:	e7d6      	b.n	8010eda <_putc_r+0x1a>
 8010f2c:	4b07      	ldr	r3, [pc, #28]	; (8010f4c <_putc_r+0x8c>)
 8010f2e:	429c      	cmp	r4, r3
 8010f30:	bf08      	it	eq
 8010f32:	68f4      	ldreq	r4, [r6, #12]
 8010f34:	e7d1      	b.n	8010eda <_putc_r+0x1a>
 8010f36:	4629      	mov	r1, r5
 8010f38:	4622      	mov	r2, r4
 8010f3a:	4630      	mov	r0, r6
 8010f3c:	f000 f81a 	bl	8010f74 <__swbuf_r>
 8010f40:	4605      	mov	r5, r0
 8010f42:	e7e3      	b.n	8010f0c <_putc_r+0x4c>
 8010f44:	08014008 	.word	0x08014008
 8010f48:	08014028 	.word	0x08014028
 8010f4c:	08013fe8 	.word	0x08013fe8

08010f50 <_read_r>:
 8010f50:	b538      	push	{r3, r4, r5, lr}
 8010f52:	4d07      	ldr	r5, [pc, #28]	; (8010f70 <_read_r+0x20>)
 8010f54:	4604      	mov	r4, r0
 8010f56:	4608      	mov	r0, r1
 8010f58:	4611      	mov	r1, r2
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	602a      	str	r2, [r5, #0]
 8010f5e:	461a      	mov	r2, r3
 8010f60:	f7f0 fe28 	bl	8001bb4 <_read>
 8010f64:	1c43      	adds	r3, r0, #1
 8010f66:	d102      	bne.n	8010f6e <_read_r+0x1e>
 8010f68:	682b      	ldr	r3, [r5, #0]
 8010f6a:	b103      	cbz	r3, 8010f6e <_read_r+0x1e>
 8010f6c:	6023      	str	r3, [r4, #0]
 8010f6e:	bd38      	pop	{r3, r4, r5, pc}
 8010f70:	2001b2f8 	.word	0x2001b2f8

08010f74 <__swbuf_r>:
 8010f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f76:	460e      	mov	r6, r1
 8010f78:	4614      	mov	r4, r2
 8010f7a:	4605      	mov	r5, r0
 8010f7c:	b118      	cbz	r0, 8010f86 <__swbuf_r+0x12>
 8010f7e:	6983      	ldr	r3, [r0, #24]
 8010f80:	b90b      	cbnz	r3, 8010f86 <__swbuf_r+0x12>
 8010f82:	f7fe ff79 	bl	800fe78 <__sinit>
 8010f86:	4b21      	ldr	r3, [pc, #132]	; (801100c <__swbuf_r+0x98>)
 8010f88:	429c      	cmp	r4, r3
 8010f8a:	d12b      	bne.n	8010fe4 <__swbuf_r+0x70>
 8010f8c:	686c      	ldr	r4, [r5, #4]
 8010f8e:	69a3      	ldr	r3, [r4, #24]
 8010f90:	60a3      	str	r3, [r4, #8]
 8010f92:	89a3      	ldrh	r3, [r4, #12]
 8010f94:	071a      	lsls	r2, r3, #28
 8010f96:	d52f      	bpl.n	8010ff8 <__swbuf_r+0x84>
 8010f98:	6923      	ldr	r3, [r4, #16]
 8010f9a:	b36b      	cbz	r3, 8010ff8 <__swbuf_r+0x84>
 8010f9c:	6923      	ldr	r3, [r4, #16]
 8010f9e:	6820      	ldr	r0, [r4, #0]
 8010fa0:	1ac0      	subs	r0, r0, r3
 8010fa2:	6963      	ldr	r3, [r4, #20]
 8010fa4:	b2f6      	uxtb	r6, r6
 8010fa6:	4283      	cmp	r3, r0
 8010fa8:	4637      	mov	r7, r6
 8010faa:	dc04      	bgt.n	8010fb6 <__swbuf_r+0x42>
 8010fac:	4621      	mov	r1, r4
 8010fae:	4628      	mov	r0, r5
 8010fb0:	f7ff fae2 	bl	8010578 <_fflush_r>
 8010fb4:	bb30      	cbnz	r0, 8011004 <__swbuf_r+0x90>
 8010fb6:	68a3      	ldr	r3, [r4, #8]
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	60a3      	str	r3, [r4, #8]
 8010fbc:	6823      	ldr	r3, [r4, #0]
 8010fbe:	1c5a      	adds	r2, r3, #1
 8010fc0:	6022      	str	r2, [r4, #0]
 8010fc2:	701e      	strb	r6, [r3, #0]
 8010fc4:	6963      	ldr	r3, [r4, #20]
 8010fc6:	3001      	adds	r0, #1
 8010fc8:	4283      	cmp	r3, r0
 8010fca:	d004      	beq.n	8010fd6 <__swbuf_r+0x62>
 8010fcc:	89a3      	ldrh	r3, [r4, #12]
 8010fce:	07db      	lsls	r3, r3, #31
 8010fd0:	d506      	bpl.n	8010fe0 <__swbuf_r+0x6c>
 8010fd2:	2e0a      	cmp	r6, #10
 8010fd4:	d104      	bne.n	8010fe0 <__swbuf_r+0x6c>
 8010fd6:	4621      	mov	r1, r4
 8010fd8:	4628      	mov	r0, r5
 8010fda:	f7ff facd 	bl	8010578 <_fflush_r>
 8010fde:	b988      	cbnz	r0, 8011004 <__swbuf_r+0x90>
 8010fe0:	4638      	mov	r0, r7
 8010fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fe4:	4b0a      	ldr	r3, [pc, #40]	; (8011010 <__swbuf_r+0x9c>)
 8010fe6:	429c      	cmp	r4, r3
 8010fe8:	d101      	bne.n	8010fee <__swbuf_r+0x7a>
 8010fea:	68ac      	ldr	r4, [r5, #8]
 8010fec:	e7cf      	b.n	8010f8e <__swbuf_r+0x1a>
 8010fee:	4b09      	ldr	r3, [pc, #36]	; (8011014 <__swbuf_r+0xa0>)
 8010ff0:	429c      	cmp	r4, r3
 8010ff2:	bf08      	it	eq
 8010ff4:	68ec      	ldreq	r4, [r5, #12]
 8010ff6:	e7ca      	b.n	8010f8e <__swbuf_r+0x1a>
 8010ff8:	4621      	mov	r1, r4
 8010ffa:	4628      	mov	r0, r5
 8010ffc:	f000 f80c 	bl	8011018 <__swsetup_r>
 8011000:	2800      	cmp	r0, #0
 8011002:	d0cb      	beq.n	8010f9c <__swbuf_r+0x28>
 8011004:	f04f 37ff 	mov.w	r7, #4294967295
 8011008:	e7ea      	b.n	8010fe0 <__swbuf_r+0x6c>
 801100a:	bf00      	nop
 801100c:	08014008 	.word	0x08014008
 8011010:	08014028 	.word	0x08014028
 8011014:	08013fe8 	.word	0x08013fe8

08011018 <__swsetup_r>:
 8011018:	4b32      	ldr	r3, [pc, #200]	; (80110e4 <__swsetup_r+0xcc>)
 801101a:	b570      	push	{r4, r5, r6, lr}
 801101c:	681d      	ldr	r5, [r3, #0]
 801101e:	4606      	mov	r6, r0
 8011020:	460c      	mov	r4, r1
 8011022:	b125      	cbz	r5, 801102e <__swsetup_r+0x16>
 8011024:	69ab      	ldr	r3, [r5, #24]
 8011026:	b913      	cbnz	r3, 801102e <__swsetup_r+0x16>
 8011028:	4628      	mov	r0, r5
 801102a:	f7fe ff25 	bl	800fe78 <__sinit>
 801102e:	4b2e      	ldr	r3, [pc, #184]	; (80110e8 <__swsetup_r+0xd0>)
 8011030:	429c      	cmp	r4, r3
 8011032:	d10f      	bne.n	8011054 <__swsetup_r+0x3c>
 8011034:	686c      	ldr	r4, [r5, #4]
 8011036:	89a3      	ldrh	r3, [r4, #12]
 8011038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801103c:	0719      	lsls	r1, r3, #28
 801103e:	d42c      	bmi.n	801109a <__swsetup_r+0x82>
 8011040:	06dd      	lsls	r5, r3, #27
 8011042:	d411      	bmi.n	8011068 <__swsetup_r+0x50>
 8011044:	2309      	movs	r3, #9
 8011046:	6033      	str	r3, [r6, #0]
 8011048:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801104c:	81a3      	strh	r3, [r4, #12]
 801104e:	f04f 30ff 	mov.w	r0, #4294967295
 8011052:	e03e      	b.n	80110d2 <__swsetup_r+0xba>
 8011054:	4b25      	ldr	r3, [pc, #148]	; (80110ec <__swsetup_r+0xd4>)
 8011056:	429c      	cmp	r4, r3
 8011058:	d101      	bne.n	801105e <__swsetup_r+0x46>
 801105a:	68ac      	ldr	r4, [r5, #8]
 801105c:	e7eb      	b.n	8011036 <__swsetup_r+0x1e>
 801105e:	4b24      	ldr	r3, [pc, #144]	; (80110f0 <__swsetup_r+0xd8>)
 8011060:	429c      	cmp	r4, r3
 8011062:	bf08      	it	eq
 8011064:	68ec      	ldreq	r4, [r5, #12]
 8011066:	e7e6      	b.n	8011036 <__swsetup_r+0x1e>
 8011068:	0758      	lsls	r0, r3, #29
 801106a:	d512      	bpl.n	8011092 <__swsetup_r+0x7a>
 801106c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801106e:	b141      	cbz	r1, 8011082 <__swsetup_r+0x6a>
 8011070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011074:	4299      	cmp	r1, r3
 8011076:	d002      	beq.n	801107e <__swsetup_r+0x66>
 8011078:	4630      	mov	r0, r6
 801107a:	f7fe ffe9 	bl	8010050 <_free_r>
 801107e:	2300      	movs	r3, #0
 8011080:	6363      	str	r3, [r4, #52]	; 0x34
 8011082:	89a3      	ldrh	r3, [r4, #12]
 8011084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011088:	81a3      	strh	r3, [r4, #12]
 801108a:	2300      	movs	r3, #0
 801108c:	6063      	str	r3, [r4, #4]
 801108e:	6923      	ldr	r3, [r4, #16]
 8011090:	6023      	str	r3, [r4, #0]
 8011092:	89a3      	ldrh	r3, [r4, #12]
 8011094:	f043 0308 	orr.w	r3, r3, #8
 8011098:	81a3      	strh	r3, [r4, #12]
 801109a:	6923      	ldr	r3, [r4, #16]
 801109c:	b94b      	cbnz	r3, 80110b2 <__swsetup_r+0x9a>
 801109e:	89a3      	ldrh	r3, [r4, #12]
 80110a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110a8:	d003      	beq.n	80110b2 <__swsetup_r+0x9a>
 80110aa:	4621      	mov	r1, r4
 80110ac:	4630      	mov	r0, r6
 80110ae:	f000 f847 	bl	8011140 <__smakebuf_r>
 80110b2:	89a0      	ldrh	r0, [r4, #12]
 80110b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110b8:	f010 0301 	ands.w	r3, r0, #1
 80110bc:	d00a      	beq.n	80110d4 <__swsetup_r+0xbc>
 80110be:	2300      	movs	r3, #0
 80110c0:	60a3      	str	r3, [r4, #8]
 80110c2:	6963      	ldr	r3, [r4, #20]
 80110c4:	425b      	negs	r3, r3
 80110c6:	61a3      	str	r3, [r4, #24]
 80110c8:	6923      	ldr	r3, [r4, #16]
 80110ca:	b943      	cbnz	r3, 80110de <__swsetup_r+0xc6>
 80110cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80110d0:	d1ba      	bne.n	8011048 <__swsetup_r+0x30>
 80110d2:	bd70      	pop	{r4, r5, r6, pc}
 80110d4:	0781      	lsls	r1, r0, #30
 80110d6:	bf58      	it	pl
 80110d8:	6963      	ldrpl	r3, [r4, #20]
 80110da:	60a3      	str	r3, [r4, #8]
 80110dc:	e7f4      	b.n	80110c8 <__swsetup_r+0xb0>
 80110de:	2000      	movs	r0, #0
 80110e0:	e7f7      	b.n	80110d2 <__swsetup_r+0xba>
 80110e2:	bf00      	nop
 80110e4:	20000250 	.word	0x20000250
 80110e8:	08014008 	.word	0x08014008
 80110ec:	08014028 	.word	0x08014028
 80110f0:	08013fe8 	.word	0x08013fe8

080110f4 <__swhatbuf_r>:
 80110f4:	b570      	push	{r4, r5, r6, lr}
 80110f6:	460e      	mov	r6, r1
 80110f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110fc:	2900      	cmp	r1, #0
 80110fe:	b096      	sub	sp, #88	; 0x58
 8011100:	4614      	mov	r4, r2
 8011102:	461d      	mov	r5, r3
 8011104:	da08      	bge.n	8011118 <__swhatbuf_r+0x24>
 8011106:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801110a:	2200      	movs	r2, #0
 801110c:	602a      	str	r2, [r5, #0]
 801110e:	061a      	lsls	r2, r3, #24
 8011110:	d410      	bmi.n	8011134 <__swhatbuf_r+0x40>
 8011112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011116:	e00e      	b.n	8011136 <__swhatbuf_r+0x42>
 8011118:	466a      	mov	r2, sp
 801111a:	f000 f89b 	bl	8011254 <_fstat_r>
 801111e:	2800      	cmp	r0, #0
 8011120:	dbf1      	blt.n	8011106 <__swhatbuf_r+0x12>
 8011122:	9a01      	ldr	r2, [sp, #4]
 8011124:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011128:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801112c:	425a      	negs	r2, r3
 801112e:	415a      	adcs	r2, r3
 8011130:	602a      	str	r2, [r5, #0]
 8011132:	e7ee      	b.n	8011112 <__swhatbuf_r+0x1e>
 8011134:	2340      	movs	r3, #64	; 0x40
 8011136:	2000      	movs	r0, #0
 8011138:	6023      	str	r3, [r4, #0]
 801113a:	b016      	add	sp, #88	; 0x58
 801113c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011140 <__smakebuf_r>:
 8011140:	898b      	ldrh	r3, [r1, #12]
 8011142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011144:	079d      	lsls	r5, r3, #30
 8011146:	4606      	mov	r6, r0
 8011148:	460c      	mov	r4, r1
 801114a:	d507      	bpl.n	801115c <__smakebuf_r+0x1c>
 801114c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011150:	6023      	str	r3, [r4, #0]
 8011152:	6123      	str	r3, [r4, #16]
 8011154:	2301      	movs	r3, #1
 8011156:	6163      	str	r3, [r4, #20]
 8011158:	b002      	add	sp, #8
 801115a:	bd70      	pop	{r4, r5, r6, pc}
 801115c:	ab01      	add	r3, sp, #4
 801115e:	466a      	mov	r2, sp
 8011160:	f7ff ffc8 	bl	80110f4 <__swhatbuf_r>
 8011164:	9900      	ldr	r1, [sp, #0]
 8011166:	4605      	mov	r5, r0
 8011168:	4630      	mov	r0, r6
 801116a:	f7fe ffdd 	bl	8010128 <_malloc_r>
 801116e:	b948      	cbnz	r0, 8011184 <__smakebuf_r+0x44>
 8011170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011174:	059a      	lsls	r2, r3, #22
 8011176:	d4ef      	bmi.n	8011158 <__smakebuf_r+0x18>
 8011178:	f023 0303 	bic.w	r3, r3, #3
 801117c:	f043 0302 	orr.w	r3, r3, #2
 8011180:	81a3      	strh	r3, [r4, #12]
 8011182:	e7e3      	b.n	801114c <__smakebuf_r+0xc>
 8011184:	4b0d      	ldr	r3, [pc, #52]	; (80111bc <__smakebuf_r+0x7c>)
 8011186:	62b3      	str	r3, [r6, #40]	; 0x28
 8011188:	89a3      	ldrh	r3, [r4, #12]
 801118a:	6020      	str	r0, [r4, #0]
 801118c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011190:	81a3      	strh	r3, [r4, #12]
 8011192:	9b00      	ldr	r3, [sp, #0]
 8011194:	6163      	str	r3, [r4, #20]
 8011196:	9b01      	ldr	r3, [sp, #4]
 8011198:	6120      	str	r0, [r4, #16]
 801119a:	b15b      	cbz	r3, 80111b4 <__smakebuf_r+0x74>
 801119c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111a0:	4630      	mov	r0, r6
 80111a2:	f000 f869 	bl	8011278 <_isatty_r>
 80111a6:	b128      	cbz	r0, 80111b4 <__smakebuf_r+0x74>
 80111a8:	89a3      	ldrh	r3, [r4, #12]
 80111aa:	f023 0303 	bic.w	r3, r3, #3
 80111ae:	f043 0301 	orr.w	r3, r3, #1
 80111b2:	81a3      	strh	r3, [r4, #12]
 80111b4:	89a0      	ldrh	r0, [r4, #12]
 80111b6:	4305      	orrs	r5, r0
 80111b8:	81a5      	strh	r5, [r4, #12]
 80111ba:	e7cd      	b.n	8011158 <__smakebuf_r+0x18>
 80111bc:	0800fe11 	.word	0x0800fe11

080111c0 <memmove>:
 80111c0:	4288      	cmp	r0, r1
 80111c2:	b510      	push	{r4, lr}
 80111c4:	eb01 0402 	add.w	r4, r1, r2
 80111c8:	d902      	bls.n	80111d0 <memmove+0x10>
 80111ca:	4284      	cmp	r4, r0
 80111cc:	4623      	mov	r3, r4
 80111ce:	d807      	bhi.n	80111e0 <memmove+0x20>
 80111d0:	1e43      	subs	r3, r0, #1
 80111d2:	42a1      	cmp	r1, r4
 80111d4:	d008      	beq.n	80111e8 <memmove+0x28>
 80111d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80111de:	e7f8      	b.n	80111d2 <memmove+0x12>
 80111e0:	4402      	add	r2, r0
 80111e2:	4601      	mov	r1, r0
 80111e4:	428a      	cmp	r2, r1
 80111e6:	d100      	bne.n	80111ea <memmove+0x2a>
 80111e8:	bd10      	pop	{r4, pc}
 80111ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80111ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80111f2:	e7f7      	b.n	80111e4 <memmove+0x24>

080111f4 <_realloc_r>:
 80111f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111f8:	4680      	mov	r8, r0
 80111fa:	4614      	mov	r4, r2
 80111fc:	460e      	mov	r6, r1
 80111fe:	b921      	cbnz	r1, 801120a <_realloc_r+0x16>
 8011200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011204:	4611      	mov	r1, r2
 8011206:	f7fe bf8f 	b.w	8010128 <_malloc_r>
 801120a:	b92a      	cbnz	r2, 8011218 <_realloc_r+0x24>
 801120c:	f7fe ff20 	bl	8010050 <_free_r>
 8011210:	4625      	mov	r5, r4
 8011212:	4628      	mov	r0, r5
 8011214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011218:	f000 f83e 	bl	8011298 <_malloc_usable_size_r>
 801121c:	4284      	cmp	r4, r0
 801121e:	4607      	mov	r7, r0
 8011220:	d802      	bhi.n	8011228 <_realloc_r+0x34>
 8011222:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011226:	d812      	bhi.n	801124e <_realloc_r+0x5a>
 8011228:	4621      	mov	r1, r4
 801122a:	4640      	mov	r0, r8
 801122c:	f7fe ff7c 	bl	8010128 <_malloc_r>
 8011230:	4605      	mov	r5, r0
 8011232:	2800      	cmp	r0, #0
 8011234:	d0ed      	beq.n	8011212 <_realloc_r+0x1e>
 8011236:	42bc      	cmp	r4, r7
 8011238:	4622      	mov	r2, r4
 801123a:	4631      	mov	r1, r6
 801123c:	bf28      	it	cs
 801123e:	463a      	movcs	r2, r7
 8011240:	f7fe fef0 	bl	8010024 <memcpy>
 8011244:	4631      	mov	r1, r6
 8011246:	4640      	mov	r0, r8
 8011248:	f7fe ff02 	bl	8010050 <_free_r>
 801124c:	e7e1      	b.n	8011212 <_realloc_r+0x1e>
 801124e:	4635      	mov	r5, r6
 8011250:	e7df      	b.n	8011212 <_realloc_r+0x1e>
	...

08011254 <_fstat_r>:
 8011254:	b538      	push	{r3, r4, r5, lr}
 8011256:	4d07      	ldr	r5, [pc, #28]	; (8011274 <_fstat_r+0x20>)
 8011258:	2300      	movs	r3, #0
 801125a:	4604      	mov	r4, r0
 801125c:	4608      	mov	r0, r1
 801125e:	4611      	mov	r1, r2
 8011260:	602b      	str	r3, [r5, #0]
 8011262:	f7f0 fcd0 	bl	8001c06 <_fstat>
 8011266:	1c43      	adds	r3, r0, #1
 8011268:	d102      	bne.n	8011270 <_fstat_r+0x1c>
 801126a:	682b      	ldr	r3, [r5, #0]
 801126c:	b103      	cbz	r3, 8011270 <_fstat_r+0x1c>
 801126e:	6023      	str	r3, [r4, #0]
 8011270:	bd38      	pop	{r3, r4, r5, pc}
 8011272:	bf00      	nop
 8011274:	2001b2f8 	.word	0x2001b2f8

08011278 <_isatty_r>:
 8011278:	b538      	push	{r3, r4, r5, lr}
 801127a:	4d06      	ldr	r5, [pc, #24]	; (8011294 <_isatty_r+0x1c>)
 801127c:	2300      	movs	r3, #0
 801127e:	4604      	mov	r4, r0
 8011280:	4608      	mov	r0, r1
 8011282:	602b      	str	r3, [r5, #0]
 8011284:	f7f0 fccf 	bl	8001c26 <_isatty>
 8011288:	1c43      	adds	r3, r0, #1
 801128a:	d102      	bne.n	8011292 <_isatty_r+0x1a>
 801128c:	682b      	ldr	r3, [r5, #0]
 801128e:	b103      	cbz	r3, 8011292 <_isatty_r+0x1a>
 8011290:	6023      	str	r3, [r4, #0]
 8011292:	bd38      	pop	{r3, r4, r5, pc}
 8011294:	2001b2f8 	.word	0x2001b2f8

08011298 <_malloc_usable_size_r>:
 8011298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801129c:	1f18      	subs	r0, r3, #4
 801129e:	2b00      	cmp	r3, #0
 80112a0:	bfbc      	itt	lt
 80112a2:	580b      	ldrlt	r3, [r1, r0]
 80112a4:	18c0      	addlt	r0, r0, r3
 80112a6:	4770      	bx	lr

080112a8 <_init>:
 80112a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112aa:	bf00      	nop
 80112ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112ae:	bc08      	pop	{r3}
 80112b0:	469e      	mov	lr, r3
 80112b2:	4770      	bx	lr

080112b4 <_fini>:
 80112b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112b6:	bf00      	nop
 80112b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112ba:	bc08      	pop	{r3}
 80112bc:	469e      	mov	lr, r3
 80112be:	4770      	bx	lr

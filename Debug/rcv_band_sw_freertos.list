
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001031c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d14  080104bc  080104bc  000204bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131d0  080131d0  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  080131d0  080131d0  000231d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080131d8  080131d8  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080131d8  080131d8  000231d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080131dc  080131dc  000231dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  080131e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001bc48  200001d0  080133b0  000301d0  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  2001be18  080133b0  0003be18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a48a  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006399  00000000  00000000  0005a68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021a8  00000000  00000000  00060a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ef0  00000000  00000000  00062bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f3cc  00000000  00000000  00064ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d869  00000000  00000000  00083e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6815  00000000  00000000  000b16f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157f0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090b0  00000000  00000000  00157f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080104a4 	.word	0x080104a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	080104a4 	.word	0x080104a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <displayBackgrounds>:
char buff[20];

uint16_t light_color = ST7735_COLOR565(125, 160, 175);
uint16_t dark_color = ST7735_COLOR565(40, 80, 130);

void displayBackgrounds() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af04      	add	r7, sp, #16
	/* backgriund */
	ST7735_FillRectangleFast(0, 0, 160, 80, light_color);
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <displayBackgrounds+0xbc>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2350      	movs	r3, #80	; 0x50
 8000592:	22a0      	movs	r2, #160	; 0xa0
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f001 f894 	bl	80016c4 <ST7735_FillRectangleFast>
	/* down string */
	ST7735_FillRectangleFast(0, 64, 160, 16, dark_color);
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <displayBackgrounds+0xc0>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2310      	movs	r3, #16
 80005a4:	22a0      	movs	r2, #160	; 0xa0
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	2000      	movs	r0, #0
 80005aa:	f001 f88b 	bl	80016c4 <ST7735_FillRectangleFast>
	/* up string */
	ST7735_FillRectangleFast(0, 0, 160, 20, dark_color);
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <displayBackgrounds+0xc0>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2314      	movs	r3, #20
 80005b6:	22a0      	movs	r2, #160	; 0xa0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f001 f882 	bl	80016c4 <ST7735_FillRectangleFast>
	/* labels */
	ST7735_WriteString(1, 6, "BAND",Font_7x10, light_color, dark_color);
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <displayBackgrounds+0xbc>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <displayBackgrounds+0xc0>)
 80005c6:	8819      	ldrh	r1, [r3, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <displayBackgrounds+0xc4>)
 80005ca:	9102      	str	r1, [sp, #8]
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <displayBackgrounds+0xc8>)
 80005d6:	2106      	movs	r1, #6
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 ffb6 	bl	800154a <ST7735_WriteString>
	ST7735_WriteString(72, 6,"STEP",Font_7x10, light_color, dark_color);
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <displayBackgrounds+0xbc>)
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <displayBackgrounds+0xc0>)
 80005e4:	8819      	ldrh	r1, [r3, #0]
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <displayBackgrounds+0xc4>)
 80005e8:	9102      	str	r1, [sp, #8]
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <displayBackgrounds+0xcc>)
 80005f4:	2106      	movs	r1, #6
 80005f6:	2048      	movs	r0, #72	; 0x48
 80005f8:	f000 ffa7 	bl	800154a <ST7735_WriteString>
    ST7735_WriteString(2, 35, "VFO", Font_7x10, dark_color, light_color);
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <displayBackgrounds+0xc0>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <displayBackgrounds+0xbc>)
 8000602:	8819      	ldrh	r1, [r3, #0]
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <displayBackgrounds+0xc4>)
 8000606:	9102      	str	r1, [sp, #8]
 8000608:	9201      	str	r2, [sp, #4]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <displayBackgrounds+0xd0>)
 8000612:	2123      	movs	r1, #35	; 0x23
 8000614:	2002      	movs	r0, #2
 8000616:	f000 ff98 	bl	800154a <ST7735_WriteString>
    ST7735_WriteString(2, 43, " Hz", Font_7x10, dark_color, light_color);
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <displayBackgrounds+0xc0>)
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <displayBackgrounds+0xbc>)
 8000620:	8819      	ldrh	r1, [r3, #0]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <displayBackgrounds+0xc4>)
 8000624:	9102      	str	r1, [sp, #8]
 8000626:	9201      	str	r2, [sp, #4]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <displayBackgrounds+0xd4>)
 8000630:	212b      	movs	r1, #43	; 0x2b
 8000632:	2002      	movs	r0, #2
 8000634:	f000 ff89 	bl	800154a <ST7735_WriteString>
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	20000002 	.word	0x20000002
 8000648:	20000004 	.word	0x20000004
 800064c:	080104bc 	.word	0x080104bc
 8000650:	080104c4 	.word	0x080104c4
 8000654:	080104cc 	.word	0x080104cc
 8000658:	080104d0 	.word	0x080104d0

0800065c <displayBand>:

void displayBand(const char * band)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]

	ST7735_WriteString(35, 2, band, Font_11x18, light_color, dark_color);
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <displayBand+0x30>)
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <displayBand+0x34>)
 800066a:	8819      	ldrh	r1, [r3, #0]
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <displayBand+0x38>)
 800066e:	9102      	str	r1, [sp, #8]
 8000670:	9201      	str	r2, [sp, #4]
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	9200      	str	r2, [sp, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	2102      	movs	r1, #2
 800067c:	2023      	movs	r0, #35	; 0x23
 800067e:	f000 ff64 	bl	800154a <ST7735_WriteString>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	20000002 	.word	0x20000002
 8000694:	2000000c 	.word	0x2000000c

08000698 <displayStep>:

void displayStep(const char * step)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af04      	add	r7, sp, #16
 800069e:	6078      	str	r0, [r7, #4]
	ST7735_WriteString(104, 2, step, Font_11x18, light_color, dark_color);
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <displayStep+0x30>)
 80006a2:	881a      	ldrh	r2, [r3, #0]
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <displayStep+0x34>)
 80006a6:	8819      	ldrh	r1, [r3, #0]
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <displayStep+0x38>)
 80006aa:	9102      	str	r1, [sp, #8]
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	9200      	str	r2, [sp, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	2102      	movs	r1, #2
 80006b8:	2068      	movs	r0, #104	; 0x68
 80006ba:	f000 ff46 	bl	800154a <ST7735_WriteString>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000002 	.word	0x20000002
 80006d0:	2000000c 	.word	0x2000000c

080006d4 <displayFrequency>:

void displayFrequency(uint32_t freq) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af04      	add	r7, sp, #16
 80006da:	6078      	str	r0, [r7, #4]
	uint16_t th, dig, mi;
	th = freq%1000;
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <displayFrequency+0xa4>)
 80006e0:	fba3 1302 	umull	r1, r3, r3, r2
 80006e4:	099b      	lsrs	r3, r3, #6
 80006e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ea:	fb01 f303 	mul.w	r3, r1, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	81fb      	strh	r3, [r7, #14]
	dig = (freq / 1000)%1000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a20      	ldr	r2, [pc, #128]	; (8000778 <displayFrequency+0xa4>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	099a      	lsrs	r2, r3, #6
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <displayFrequency+0xa4>)
 80006fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000702:	099b      	lsrs	r3, r3, #6
 8000704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000708:	fb01 f303 	mul.w	r3, r1, r3
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	81bb      	strh	r3, [r7, #12]
	mi = (freq / 1000000);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <displayFrequency+0xa8>)
 8000714:	fba2 2303 	umull	r2, r3, r2, r3
 8000718:	0c9b      	lsrs	r3, r3, #18
 800071a:	817b      	strh	r3, [r7, #10]
	sprintf(buff, "%02d.%03d",mi, dig);
 800071c:	897a      	ldrh	r2, [r7, #10]
 800071e:	89bb      	ldrh	r3, [r7, #12]
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <displayFrequency+0xac>)
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <displayFrequency+0xb0>)
 8000724:	f00f fb50 	bl	800fdc8 <siprintf>
	ST7735_WriteString(26, 32, buff, Font_16x26, dark_color, light_color);
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <displayFrequency+0xb4>)
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <displayFrequency+0xb8>)
 800072e:	8819      	ldrh	r1, [r3, #0]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <displayFrequency+0xbc>)
 8000732:	9102      	str	r1, [sp, #8]
 8000734:	9201      	str	r2, [sp, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	9200      	str	r2, [sp, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <displayFrequency+0xb0>)
 800073e:	2120      	movs	r1, #32
 8000740:	201a      	movs	r0, #26
 8000742:	f000 ff02 	bl	800154a <ST7735_WriteString>
	sprintf(buff, "%03d",th);
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	461a      	mov	r2, r3
 800074a:	4912      	ldr	r1, [pc, #72]	; (8000794 <displayFrequency+0xc0>)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <displayFrequency+0xb0>)
 800074e:	f00f fb3b 	bl	800fdc8 <siprintf>
	ST7735_WriteString(125, 37, buff, Font_11x18, dark_color, light_color);
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <displayFrequency+0xb4>)
 8000754:	881a      	ldrh	r2, [r3, #0]
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <displayFrequency+0xb8>)
 8000758:	8819      	ldrh	r1, [r3, #0]
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <displayFrequency+0xc4>)
 800075c:	9102      	str	r1, [sp, #8]
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <displayFrequency+0xb0>)
 8000768:	2125      	movs	r1, #37	; 0x25
 800076a:	207d      	movs	r0, #125	; 0x7d
 800076c:	f000 feed 	bl	800154a <ST7735_WriteString>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	10624dd3 	.word	0x10624dd3
 800077c:	431bde83 	.word	0x431bde83
 8000780:	080104d4 	.word	0x080104d4
 8000784:	200001ec 	.word	0x200001ec
 8000788:	20000002 	.word	0x20000002
 800078c:	20000000 	.word	0x20000000
 8000790:	20000014 	.word	0x20000014
 8000794:	080104e0 	.word	0x080104e0
 8000798:	2000000c 	.word	0x2000000c

0800079c <blk_pwm_setvalue>:

void blk_pwm_setvalue(uint16_t value)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
	  USR_TIM_PWM_OpenTim5Ch2();
 80007a6:	f001 fb19 	bl	8001ddc <USR_TIM_PWM_OpenTim5Ch2>
	  USR_TIM_PWM_SetCompare(value * 10);
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	461a      	mov	r2, r3
 80007ae:	0092      	lsls	r2, r2, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fb1a 	bl	8001df0 <USR_TIM_PWM_SetCompare>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <setBacklight>:

void setBacklight(uint8_t percent) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	81fb      	strh	r3, [r7, #14]
	uint16_t d = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i <= percent; i++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	81fb      	strh	r3, [r7, #14]
 80007da:	e013      	b.n	8000804 <setBacklight+0x40>
		blk_pwm_setvalue(i);
 80007dc:	89fb      	ldrh	r3, [r7, #14]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffdc 	bl	800079c <blk_pwm_setvalue>
		for (d = 0; d <=60000; d++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	81bb      	strh	r3, [r7, #12]
 80007e8:	e002      	b.n	80007f0 <setBacklight+0x2c>
 80007ea:	89bb      	ldrh	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	81bb      	strh	r3, [r7, #12]
 80007f0:	89bb      	ldrh	r3, [r7, #12]
 80007f2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d9f7      	bls.n	80007ea <setBacklight+0x26>
		{

		}
		d = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i <= percent; i++) {
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	3301      	adds	r3, #1
 8000802:	81fb      	strh	r3, [r7, #14]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	b29b      	uxth	r3, r3
 8000808:	89fa      	ldrh	r2, [r7, #14]
 800080a:	429a      	cmp	r2, r3
 800080c:	d9e6      	bls.n	80007dc <setBacklight+0x18>
	}
	i=0;
 800080e:	2300      	movs	r3, #0
 8000810:	81fb      	strh	r3, [r7, #14]
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <getRunTimeCounterValue+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	2000026c 	.word	0x2000026c

08000840 <vApplicationIdleHook>:
extern uint16_t current_step;
extern uint8_t current_band;
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	//vTaskList(taskListStatus);
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000854:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <MX_FREERTOS_Init+0x38>)
 8000856:	2100      	movs	r1, #0
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_FREERTOS_Init+0x3c>)
 800085a:	f00b fec9 	bl	800c5f0 <osThreadNew>
 800085e:	4603      	mov	r3, r0
 8000860:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <MX_FREERTOS_Init+0x40>)
 8000862:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <MX_FREERTOS_Init+0x44>)
 8000866:	2100      	movs	r1, #0
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_FREERTOS_Init+0x48>)
 800086a:	f00b fec1 	bl	800c5f0 <osThreadNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a0a      	ldr	r2, [pc, #40]	; (800089c <MX_FREERTOS_Init+0x4c>)
 8000872:	6013      	str	r3, [r2, #0]

  /* creation of buttonsTask */
  buttonsTaskHandle = osThreadNew(StartButtonsTask, NULL, &buttonsTask_attributes);
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <MX_FREERTOS_Init+0x50>)
 8000876:	2100      	movs	r1, #0
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <MX_FREERTOS_Init+0x54>)
 800087a:	f00b feb9 	bl	800c5f0 <osThreadNew>
 800087e:	4603      	mov	r3, r0
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <MX_FREERTOS_Init+0x58>)
 8000882:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	08013040 	.word	0x08013040
 800088c:	080008ad 	.word	0x080008ad
 8000890:	2000020c 	.word	0x2000020c
 8000894:	08013064 	.word	0x08013064
 8000898:	080008fd 	.word	0x080008fd
 800089c:	20000210 	.word	0x20000210
 80008a0:	08013088 	.word	0x08013088
 80008a4:	08000a71 	.word	0x08000a71
 80008a8:	20000214 	.word	0x20000214

080008ac <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80008b4:	f00e fbf2 	bl	800f09c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	current_freq = band[current_band].minFreq;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <StartDefaultTask+0x44>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <StartDefaultTask+0x48>)
 80008c0:	460b      	mov	r3, r1
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	440b      	add	r3, r1
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	3304      	adds	r3, #4
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <StartDefaultTask+0x4c>)
 80008d2:	601a      	str	r2, [r3, #0]
	  si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <StartDefaultTask+0x4c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2101      	movs	r1, #1
 80008da:	4618      	mov	r0, r3
 80008dc:	f009 fda8 	bl	800a430 <si5351_SetupCLK0>
	  si5351_EnableOutputs(1 << 0);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f009 fdc6 	bl	800a472 <si5351_EnableOutputs>
	/* Timer*/
	  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
	  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
	for (;;) {
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		osDelay(250);
 80008e6:	20fa      	movs	r0, #250	; 0xfa
 80008e8:	f00b ff14 	bl	800c714 <osDelay>
 80008ec:	e7fb      	b.n	80008e6 <StartDefaultTask+0x3a>
 80008ee:	bf00      	nop
 80008f0:	20000276 	.word	0x20000276
 80008f4:	20000054 	.word	0x20000054
 80008f8:	20000270 	.word	0x20000270

080008fc <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
	/*  */
	max_freq = band[current_band].maxFreq;
 8000908:	4b51      	ldr	r3, [pc, #324]	; (8000a50 <StartEncoderTask+0x154>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	4a51      	ldr	r2, [pc, #324]	; (8000a54 <StartEncoderTask+0x158>)
 8000910:	460b      	mov	r3, r1
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	440b      	add	r3, r1
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	3308      	adds	r3, #8
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	4b4d      	ldr	r3, [pc, #308]	; (8000a58 <StartEncoderTask+0x15c>)
 8000922:	601a      	str	r2, [r3, #0]
	min_freq = band[current_band].minFreq;
 8000924:	4b4a      	ldr	r3, [pc, #296]	; (8000a50 <StartEncoderTask+0x154>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	4a4a      	ldr	r2, [pc, #296]	; (8000a54 <StartEncoderTask+0x158>)
 800092c:	460b      	mov	r3, r1
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	440b      	add	r3, r1
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	3304      	adds	r3, #4
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	4b47      	ldr	r3, [pc, #284]	; (8000a5c <StartEncoderTask+0x160>)
 800093e:	601a      	str	r2, [r3, #0]
	current_freq = min_freq;
 8000940:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <StartEncoderTask+0x160>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a46      	ldr	r2, [pc, #280]	; (8000a60 <StartEncoderTask+0x164>)
 8000946:	6013      	str	r3, [r2, #0]
	/* */
	//ST7735_FillScreenFast(ST7735_BLACK);
	displayBackgrounds();
 8000948:	f7ff fe1c 	bl	8000584 <displayBackgrounds>
	displayBand(band[current_band].name);
 800094c:	4b40      	ldr	r3, [pc, #256]	; (8000a50 <StartEncoderTask+0x154>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <StartEncoderTask+0x158>)
 8000954:	460b      	mov	r3, r1
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	440b      	add	r3, r1
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe7b 	bl	800065c <displayBand>
	displayStep(step[current_step].name);
 8000966:	4b3f      	ldr	r3, [pc, #252]	; (8000a64 <StartEncoderTask+0x168>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <StartEncoderTask+0x16c>)
 800096e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe90 	bl	8000698 <displayStep>
	displayFrequency(current_freq);
 8000978:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <StartEncoderTask+0x164>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fea9 	bl	80006d4 <displayFrequency>
	/* */
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 8000982:	4b3a      	ldr	r3, [pc, #232]	; (8000a6c <StartEncoderTask+0x170>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000988:	613b      	str	r3, [r7, #16]
		uint16_t step_value = step[current_step].step;
 800098a:	4b36      	ldr	r3, [pc, #216]	; (8000a64 <StartEncoderTask+0x168>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	4a36      	ldr	r2, [pc, #216]	; (8000a68 <StartEncoderTask+0x16c>)
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	4413      	add	r3, r2
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	81fb      	strh	r3, [r7, #14]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	3b01      	subs	r3, #1
 800099c:	b29b      	uxth	r3, r3
 800099e:	0fda      	lsrs	r2, r3, #31
 80009a0:	4413      	add	r3, r2
 80009a2:	105b      	asrs	r3, r3, #1
 80009a4:	425b      	negs	r3, r3
 80009a6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80009aa:	337f      	adds	r3, #127	; 0x7f
 80009ac:	613b      	str	r3, [r7, #16]

		if (currCounter != prevCounter) {
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d048      	beq.n	8000a48 <StartEncoderTask+0x14c>
			if (currCounter > prevCounter) {
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	dd1f      	ble.n	80009fe <StartEncoderTask+0x102>
				if (current_freq != min_freq) {
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <StartEncoderTask+0x164>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <StartEncoderTask+0x160>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d006      	beq.n	80009d8 <StartEncoderTask+0xdc>
					current_freq -= step_value;
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <StartEncoderTask+0x164>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	89fb      	ldrh	r3, [r7, #14]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	4a23      	ldr	r2, [pc, #140]	; (8000a60 <StartEncoderTask+0x164>)
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	e003      	b.n	80009e0 <StartEncoderTask+0xe4>
				} else {
					current_freq = max_freq;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <StartEncoderTask+0x15c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <StartEncoderTask+0x164>)
 80009de:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <StartEncoderTask+0x164>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2101      	movs	r1, #1
 80009e6:	4618      	mov	r0, r3
 80009e8:	f009 fd22 	bl	800a430 <si5351_SetupCLK0>
				displayFrequency(current_freq);
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <StartEncoderTask+0x164>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fe6f 	bl	80006d4 <displayFrequency>
				osDelay(5);
 80009f6:	2005      	movs	r0, #5
 80009f8:	f00b fe8c 	bl	800c714 <osDelay>
 80009fc:	e022      	b.n	8000a44 <StartEncoderTask+0x148>
			} else if (currCounter < prevCounter) {
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	da1e      	bge.n	8000a44 <StartEncoderTask+0x148>
				if (current_freq != max_freq) {
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <StartEncoderTask+0x164>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <StartEncoderTask+0x15c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d006      	beq.n	8000a20 <StartEncoderTask+0x124>
					current_freq += step_value;
 8000a12:	89fa      	ldrh	r2, [r7, #14]
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <StartEncoderTask+0x164>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <StartEncoderTask+0x164>)
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	e003      	b.n	8000a28 <StartEncoderTask+0x12c>
				} else {
					current_freq = min_freq;
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <StartEncoderTask+0x160>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <StartEncoderTask+0x164>)
 8000a26:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <StartEncoderTask+0x164>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f009 fcfe 	bl	800a430 <si5351_SetupCLK0>
				displayFrequency(current_freq);
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <StartEncoderTask+0x164>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fe4b 	bl	80006d4 <displayFrequency>
				osDelay(5);
 8000a3e:	2005      	movs	r0, #5
 8000a40:	f00b fe68 	bl	800c714 <osDelay>
			} else {

			}
			prevCounter = currCounter;
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	617b      	str	r3, [r7, #20]
		}

		osDelay(5);
 8000a48:	2005      	movs	r0, #5
 8000a4a:	f00b fe63 	bl	800c714 <osDelay>
	for (;;) {
 8000a4e:	e798      	b.n	8000982 <StartEncoderTask+0x86>
 8000a50:	20000276 	.word	0x20000276
 8000a54:	20000054 	.word	0x20000054
 8000a58:	20000204 	.word	0x20000204
 8000a5c:	20000208 	.word	0x20000208
 8000a60:	20000270 	.word	0x20000270
 8000a64:	20000274 	.word	0x20000274
 8000a68:	2000001c 	.word	0x2000001c
 8000a6c:	20000344 	.word	0x20000344

08000a70 <StartButtonsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonsTask */
void StartButtonsTask(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {
		/* BUTTON */
		if (buttonPressed[buttonNumber]) {
 8000a78:	4b61      	ldr	r3, [pc, #388]	; (8000c00 <StartButtonsTask+0x190>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b61      	ldr	r3, [pc, #388]	; (8000c04 <StartButtonsTask+0x194>)
 8000a80:	5c9b      	ldrb	r3, [r3, r2]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f000 80b6 	beq.w	8000bf6 <StartButtonsTask+0x186>
			buttonPressed[buttonNumber] = 0;
 8000a8a:	4b5d      	ldr	r3, [pc, #372]	; (8000c00 <StartButtonsTask+0x190>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b5c      	ldr	r3, [pc, #368]	; (8000c04 <StartButtonsTask+0x194>)
 8000a92:	2100      	movs	r1, #0
 8000a94:	5499      	strb	r1, [r3, r2]
			if (buttonNumber == 0)
 8000a96:	4b5a      	ldr	r3, [pc, #360]	; (8000c00 <StartButtonsTask+0x190>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d121      	bne.n	8000ae2 <StartButtonsTask+0x72>
			{
				if (current_step != lastStep) {
 8000a9e:	4b5a      	ldr	r3, [pc, #360]	; (8000c08 <StartButtonsTask+0x198>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d00f      	beq.n	8000aca <StartButtonsTask+0x5a>
					current_step++;
 8000aaa:	4b57      	ldr	r3, [pc, #348]	; (8000c08 <StartButtonsTask+0x198>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4b55      	ldr	r3, [pc, #340]	; (8000c08 <StartButtonsTask+0x198>)
 8000ab4:	801a      	strh	r2, [r3, #0]
					displayStep(step[current_step].name);
 8000ab6:	4b54      	ldr	r3, [pc, #336]	; (8000c08 <StartButtonsTask+0x198>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b53      	ldr	r3, [pc, #332]	; (8000c0c <StartButtonsTask+0x19c>)
 8000abe:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fde8 	bl	8000698 <displayStep>
 8000ac8:	e00b      	b.n	8000ae2 <StartButtonsTask+0x72>
				} else {
					current_step = 0;
 8000aca:	4b4f      	ldr	r3, [pc, #316]	; (8000c08 <StartButtonsTask+0x198>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	801a      	strh	r2, [r3, #0]
					displayStep(step[current_step].name);
 8000ad0:	4b4d      	ldr	r3, [pc, #308]	; (8000c08 <StartButtonsTask+0x198>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b4d      	ldr	r3, [pc, #308]	; (8000c0c <StartButtonsTask+0x19c>)
 8000ad8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fddb 	bl	8000698 <displayStep>
				}
			}
			if (buttonNumber == 1)
 8000ae2:	4b47      	ldr	r3, [pc, #284]	; (8000c00 <StartButtonsTask+0x190>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	f040 8085 	bne.w	8000bf6 <StartButtonsTask+0x186>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af0:	4847      	ldr	r0, [pc, #284]	; (8000c10 <StartButtonsTask+0x1a0>)
 8000af2:	f001 fe03 	bl	80026fc <HAL_GPIO_TogglePin>
				if (current_band != lastBand) {
 8000af6:	4b47      	ldr	r3, [pc, #284]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	2301      	movs	r3, #1
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d03e      	beq.n	8000b80 <StartButtonsTask+0x110>
					current_band++;
 8000b02:	4b44      	ldr	r3, [pc, #272]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b42      	ldr	r3, [pc, #264]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b0c:	701a      	strb	r2, [r3, #0]
					displayBand(band[current_band].name);
 8000b0e:	4b41      	ldr	r3, [pc, #260]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	4619      	mov	r1, r3
 8000b14:	4a40      	ldr	r2, [pc, #256]	; (8000c18 <StartButtonsTask+0x1a8>)
 8000b16:	460b      	mov	r3, r1
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	440b      	add	r3, r1
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fd9a 	bl	800065c <displayBand>
					max_freq = band[current_band].maxFreq;
 8000b28:	4b3a      	ldr	r3, [pc, #232]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4a3a      	ldr	r2, [pc, #232]	; (8000c18 <StartButtonsTask+0x1a8>)
 8000b30:	460b      	mov	r3, r1
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	440b      	add	r3, r1
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4413      	add	r3, r2
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b36      	ldr	r3, [pc, #216]	; (8000c1c <StartButtonsTask+0x1ac>)
 8000b42:	601a      	str	r2, [r3, #0]
					min_freq = band[current_band].minFreq;
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4a33      	ldr	r2, [pc, #204]	; (8000c18 <StartButtonsTask+0x1a8>)
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	440b      	add	r3, r1
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	3304      	adds	r3, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <StartButtonsTask+0x1b0>)
 8000b5e:	601a      	str	r2, [r3, #0]
					current_freq = min_freq;
 8000b60:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <StartButtonsTask+0x1b0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a2f      	ldr	r2, [pc, #188]	; (8000c24 <StartButtonsTask+0x1b4>)
 8000b66:	6013      	str	r3, [r2, #0]
					displayFrequency(current_freq);
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <StartButtonsTask+0x1b4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fdb1 	bl	80006d4 <displayFrequency>
					si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 8000b72:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <StartButtonsTask+0x1b4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2101      	movs	r1, #1
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f009 fc59 	bl	800a430 <si5351_SetupCLK0>
 8000b7e:	e03a      	b.n	8000bf6 <StartButtonsTask+0x186>
				} else {
					current_band = 0;
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
					displayBand(band[current_band].name);
 8000b86:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <StartButtonsTask+0x1a8>)
 8000b8e:	460b      	mov	r3, r1
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	440b      	add	r3, r1
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fd5e 	bl	800065c <displayBand>
					max_freq = band[current_band].maxFreq;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <StartButtonsTask+0x1a8>)
 8000ba8:	460b      	mov	r3, r1
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	440b      	add	r3, r1
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	3308      	adds	r3, #8
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <StartButtonsTask+0x1ac>)
 8000bba:	601a      	str	r2, [r3, #0]
					min_freq = band[current_band].minFreq;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <StartButtonsTask+0x1a8>)
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	440b      	add	r3, r1
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	3304      	adds	r3, #4
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <StartButtonsTask+0x1b0>)
 8000bd6:	601a      	str	r2, [r3, #0]
					current_freq = min_freq;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <StartButtonsTask+0x1b0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <StartButtonsTask+0x1b4>)
 8000bde:	6013      	str	r3, [r2, #0]
					displayFrequency(current_freq);
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <StartButtonsTask+0x1b4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fd75 	bl	80006d4 <displayFrequency>
					si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <StartButtonsTask+0x1b4>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f009 fc1d 	bl	800a430 <si5351_SetupCLK0>
				}
			}
		}
		osDelay(1);
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f00b fd8c 	bl	800c714 <osDelay>
		if (buttonPressed[buttonNumber]) {
 8000bfc:	e73c      	b.n	8000a78 <StartButtonsTask+0x8>
 8000bfe:	bf00      	nop
 8000c00:	20000200 	.word	0x20000200
 8000c04:	20000338 	.word	0x20000338
 8000c08:	20000274 	.word	0x20000274
 8000c0c:	2000001c 	.word	0x2000001c
 8000c10:	40020800 	.word	0x40020800
 8000c14:	20000276 	.word	0x20000276
 8000c18:	20000054 	.word	0x20000054
 8000c1c:	20000204 	.word	0x20000204
 8000c20:	20000208 	.word	0x20000208
 8000c24:	20000270 	.word	0x20000270

08000c28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b46      	ldr	r3, [pc, #280]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a45      	ldr	r2, [pc, #276]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a3e      	ldr	r2, [pc, #248]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a37      	ldr	r2, [pc, #220]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a30      	ldr	r2, [pc, #192]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb4:	482a      	ldr	r0, [pc, #168]	; (8000d60 <MX_GPIO_Init+0x138>)
 8000cb6:	f001 fcef 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	211c      	movs	r1, #28
 8000cbe:	4829      	ldr	r0, [pc, #164]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000cc0:	f001 fcea 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4820      	ldr	r0, [pc, #128]	; (8000d60 <MX_GPIO_Init+0x138>)
 8000cde:	f001 fa41 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BAND_BTN_Pin;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAND_BTN_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481b      	ldr	r0, [pc, #108]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000cf8:	f001 fa34 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000cfc:	231c      	movs	r3, #28
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000d14:	f001 fa26 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480e      	ldr	r0, [pc, #56]	; (8000d68 <MX_GPIO_Init+0x140>)
 8000d2e:	f001 fa19 	bl	8002164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2105      	movs	r1, #5
 8000d36:	2006      	movs	r0, #6
 8000d38:	f001 f9d0 	bl	80020dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d3c:	2006      	movs	r0, #6
 8000d3e:	f001 f9f9 	bl	8002134 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2105      	movs	r1, #5
 8000d46:	2008      	movs	r0, #8
 8000d48:	f001 f9c8 	bl	80020dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d4c:	2008      	movs	r0, #8
 8000d4e:	f001 f9f1 	bl	8002134 <HAL_NVIC_EnableIRQ>

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020800 	.word	0x40020800
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40020400 	.word	0x40020400

08000d6c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d72:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <MX_I2C2_Init+0x54>)
 8000d74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d78:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <MX_I2C2_Init+0x58>)
 8000d7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d8e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000daa:	f001 fce7 	bl	800277c <HAL_I2C_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000db4:	f000 f93d 	bl	8001032 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000218 	.word	0x20000218
 8000dc0:	40005800 	.word	0x40005800
 8000dc4:	000186a0 	.word	0x000186a0

08000dc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <HAL_I2C_MspInit+0xa4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d13c      	bne.n	8000e64 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0c:	2312      	movs	r3, #18
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4814      	ldr	r0, [pc, #80]	; (8000e74 <HAL_I2C_MspInit+0xac>)
 8000e24:	f001 f99e 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2c:	2312      	movs	r3, #18
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000e38:	2309      	movs	r3, #9
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	480c      	ldr	r0, [pc, #48]	; (8000e74 <HAL_I2C_MspInit+0xac>)
 8000e44:	f001 f98e 	bl	8002164 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000e52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e56:	6413      	str	r3, [r2, #64]	; 0x40
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40005800 	.word	0x40005800
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020400 	.word	0x40020400

08000e78 <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000e7e:	f000 fad3 	bl	8001428 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_COLOR565(40, 80, 130));
 8000e82:	f642 2090 	movw	r0, #10896	; 0x2a90
 8000e86:	f000 fca1 	bl	80017cc <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(8, 10, "ShortWave", Font_16x26, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <Display_Init+0x5c>)
 8000e8c:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000e90:	9202      	str	r2, [sp, #8]
 8000e92:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000e96:	9201      	str	r2, [sp, #4]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	9200      	str	r2, [sp, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <Display_Init+0x60>)
 8000ea0:	210a      	movs	r1, #10
 8000ea2:	2008      	movs	r0, #8
 8000ea4:	f000 fb51 	bl	800154a <ST7735_WriteString>
    ST7735_WriteString(34, 35, "receiver", Font_11x18, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <Display_Init+0x64>)
 8000eaa:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000eae:	9202      	str	r2, [sp, #8]
 8000eb0:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000eb4:	9201      	str	r2, [sp, #4]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	9200      	str	r2, [sp, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <Display_Init+0x68>)
 8000ebe:	2123      	movs	r1, #35	; 0x23
 8000ec0:	2022      	movs	r0, #34	; 0x22
 8000ec2:	f000 fb42 	bl	800154a <ST7735_WriteString>
    HAL_Delay(3000);
 8000ec6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000eca:	f001 f815 	bl	8001ef8 <HAL_Delay>
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000014 	.word	0x20000014
 8000ed8:	0801054c 	.word	0x0801054c
 8000edc:	2000000c 	.word	0x2000000c
 8000ee0:	08010558 	.word	0x08010558

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f000 ffc4 	bl	8001e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f828 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f7ff fe9a 	bl	8000c28 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ef4:	f000 f934 	bl	8001160 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000ef8:	f000 fdd4 	bl	8001aa4 <MX_TIM3_Init>
  MX_RTC_Init();
 8000efc:	f000 f8aa 	bl	8001054 <MX_RTC_Init>
  MX_TIM5_Init();
 8000f00:	f000 fe24 	bl	8001b4c <MX_TIM5_Init>
  MX_I2C2_Init();
 8000f04:	f7ff ff32 	bl	8000d6c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //MX_USB_DEVICE_Init();
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f08:	213c      	movs	r1, #60	; 0x3c
 8000f0a:	480b      	ldr	r0, [pc, #44]	; (8000f38 <main+0x54>)
 8000f0c:	f006 f94a 	bl	80071a4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000f10:	2104      	movs	r1, #4
 8000f12:	480a      	ldr	r0, [pc, #40]	; (8000f3c <main+0x58>)
 8000f14:	f005 fe80 	bl	8006c18 <HAL_TIM_PWM_Start>

  /* Display */
  setBacklight(100);
 8000f18:	2064      	movs	r0, #100	; 0x64
 8000f1a:	f7ff fc53 	bl	80007c4 <setBacklight>
  Display_Init();
 8000f1e:	f7ff ffab 	bl	8000e78 <Display_Init>
  /* si5251*/
  si5351_Init(0);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f009 f89e 	bl	800a064 <si5351_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f28:	f00b fb18 	bl	800c55c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f2c:	f7ff fc90 	bl	8000850 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f30:	f00b fb38 	bl	800c5a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <main+0x50>
 8000f36:	bf00      	nop
 8000f38:	20000344 	.word	0x20000344
 8000f3c:	2000038c 	.word	0x2000038c

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	; 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	2230      	movs	r2, #48	; 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f00e fdd8 	bl	800fb04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <SystemClock_Config+0xcc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	4a27      	ldr	r2, [pc, #156]	; (800100c <SystemClock_Config+0xcc>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <SystemClock_Config+0xd0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <SystemClock_Config+0xd0>)
 8000f8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000f9c:	2305      	movs	r3, #5
 8000f9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fb4:	2319      	movs	r3, #25
 8000fb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fb8:	23c0      	movs	r3, #192	; 0xc0
 8000fba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f003 fc7d 	bl	80048c8 <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fd4:	f000 f82d 	bl	8001032 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 ff8f 	bl	8004f18 <HAL_RCC_ClockConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001000:	f000 f817 	bl	8001032 <Error_Handler>
  }
}
 8001004:	bf00      	nop
 8001006:	3750      	adds	r7, #80	; 0x50
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1) {

  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001024:	d101      	bne.n	800102a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001026:	f000 ff47 	bl	8001eb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001036:	b672      	cpsid	i
}
 8001038:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800103a:	e7fe      	b.n	800103a <Error_Handler+0x8>

0800103c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001068:	2300      	movs	r3, #0
 800106a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <MX_RTC_Init+0xac>)
 800106e:	4a25      	ldr	r2, [pc, #148]	; (8001104 <MX_RTC_Init+0xb0>)
 8001070:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <MX_RTC_Init+0xac>)
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MX_RTC_Init+0xac>)
 800107a:	227f      	movs	r2, #127	; 0x7f
 800107c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <MX_RTC_Init+0xac>)
 8001080:	22ff      	movs	r2, #255	; 0xff
 8001082:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_RTC_Init+0xac>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_RTC_Init+0xac>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_RTC_Init+0xac>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001096:	481a      	ldr	r0, [pc, #104]	; (8001100 <MX_RTC_Init+0xac>)
 8001098:	f004 fbfa 	bl	8005890 <HAL_RTC_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80010a2:	f7ff ffc6 	bl	8001032 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	4619      	mov	r1, r3
 80010c0:	480f      	ldr	r0, [pc, #60]	; (8001100 <MX_RTC_Init+0xac>)
 80010c2:	f004 fcbd 	bl	8005a40 <HAL_RTC_SetTime>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80010cc:	f7ff ffb1 	bl	8001032 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80010d0:	2305      	movs	r3, #5
 80010d2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80010d4:	2305      	movs	r3, #5
 80010d6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 80010d8:	2307      	movs	r3, #7
 80010da:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 80010dc:	2316      	movs	r3, #22
 80010de:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_RTC_Init+0xac>)
 80010e8:	f004 fdf2 	bl	8005cd0 <HAL_RTC_SetDate>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80010f2:	f7ff ff9e 	bl	8001032 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000278 	.word	0x20000278
 8001104:	40002800 	.word	0x40002800

08001108 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <HAL_RTC_MspInit+0x50>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d111      	bne.n	8001150 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800112c:	2302      	movs	r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001134:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	4618      	mov	r0, r3
 800113c:	f004 f992 	bl	8005464 <HAL_RCCEx_PeriphCLKConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001146:	f7ff ff74 	bl	8001032 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <HAL_RTC_MspInit+0x54>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001150:	bf00      	nop
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40002800 	.word	0x40002800
 800115c:	42470e3c 	.word	0x42470e3c

08001160 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_SPI1_Init+0x64>)
 8001166:	4a18      	ldr	r2, [pc, #96]	; (80011c8 <MX_SPI1_Init+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <MX_SPI1_Init+0x64>)
 800116c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001170:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_SPI1_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_SPI1_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_SPI1_Init+0x64>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_SPI1_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_SPI1_Init+0x64>)
 800118c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001190:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_SPI1_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <MX_SPI1_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_SPI1_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <MX_SPI1_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_SPI1_Init+0x64>)
 80011ac:	220a      	movs	r2, #10
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_SPI1_Init+0x64>)
 80011b2:	f004 ff57 	bl	8006064 <HAL_SPI_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011bc:	f7ff ff39 	bl	8001032 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000298 	.word	0x20000298
 80011c8:	40013000 	.word	0x40013000

080011cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a19      	ldr	r2, [pc, #100]	; (8001250 <HAL_SPI_MspInit+0x84>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d12b      	bne.n	8001246 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_SPI_MspInit+0x88>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a17      	ldr	r2, [pc, #92]	; (8001254 <HAL_SPI_MspInit+0x88>)
 80011f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_SPI_MspInit+0x88>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_SPI_MspInit+0x88>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <HAL_SPI_MspInit+0x88>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_SPI_MspInit+0x88>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001226:	23a0      	movs	r3, #160	; 0xa0
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001236:	2305      	movs	r3, #5
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_SPI_MspInit+0x8c>)
 8001242:	f000 ff8f 	bl	8002164 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40013000 	.word	0x40013000
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000

0800125c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2110      	movs	r1, #16
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <ST7735_Select+0x14>)
 8001266:	f001 fa17 	bl	8002698 <HAL_GPIO_WritePin>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40020000 	.word	0x40020000

08001274 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2110      	movs	r1, #16
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <ST7735_Unselect+0x14>)
 800127e:	f001 fa0b 	bl	8002698 <HAL_GPIO_WritePin>
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40020000 	.word	0x40020000

0800128c <ST7735_Reset>:

static void ST7735_Reset() {
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2108      	movs	r1, #8
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <ST7735_Reset+0x24>)
 8001296:	f001 f9ff 	bl	8002698 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800129a:	2005      	movs	r0, #5
 800129c:	f000 fe2c 	bl	8001ef8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2108      	movs	r1, #8
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <ST7735_Reset+0x24>)
 80012a6:	f001 f9f7 	bl	8002698 <HAL_GPIO_WritePin>
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40020000 	.word	0x40020000

080012b4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2104      	movs	r1, #4
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <ST7735_WriteCommand+0x2c>)
 80012c4:	f001 f9e8 	bl	8002698 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80012c8:	1df9      	adds	r1, r7, #7
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	2201      	movs	r2, #1
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <ST7735_WriteCommand+0x30>)
 80012d2:	f005 f863 	bl	800639c <HAL_SPI_Transmit>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40020000 	.word	0x40020000
 80012e4:	20000298 	.word	0x20000298

080012e8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	2104      	movs	r1, #4
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <ST7735_WriteData+0x2c>)
 80012f8:	f001 f9ce 	bl	8002698 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b29a      	uxth	r2, r3
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4804      	ldr	r0, [pc, #16]	; (8001318 <ST7735_WriteData+0x30>)
 8001308:	f005 f848 	bl	800639c <HAL_SPI_Transmit>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40020000 	.word	0x40020000
 8001318:	20000298 	.word	0x20000298

0800131c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800132e:	e034      	b.n	800139a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ffb9 	bl	80012b4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800134c:	7abb      	ldrb	r3, [r7, #10]
 800134e:	b29b      	uxth	r3, r3
 8001350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001354:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001356:	7abb      	ldrb	r3, [r7, #10]
 8001358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800135c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800135e:	7abb      	ldrb	r3, [r7, #10]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001364:	7abb      	ldrb	r3, [r7, #10]
 8001366:	4619      	mov	r1, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ffbd 	bl	80012e8 <ST7735_WriteData>
            addr += numArgs;
 800136e:	7abb      	ldrb	r3, [r7, #10]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001376:	89bb      	ldrh	r3, [r7, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00e      	beq.n	800139a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001386:	89bb      	ldrh	r3, [r7, #12]
 8001388:	2bff      	cmp	r3, #255	; 0xff
 800138a:	d102      	bne.n	8001392 <ST7735_ExecuteCommandList+0x76>
 800138c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001390:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001392:	89bb      	ldrh	r3, [r7, #12]
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fdaf 	bl	8001ef8 <HAL_Delay>
    while(numCommands--) {
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	73fa      	strb	r2, [r7, #15]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1c5      	bne.n	8001330 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80013ae:	b590      	push	{r4, r7, lr}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4604      	mov	r4, r0
 80013b6:	4608      	mov	r0, r1
 80013b8:	4611      	mov	r1, r2
 80013ba:	461a      	mov	r2, r3
 80013bc:	4623      	mov	r3, r4
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	4603      	mov	r3, r0
 80013c2:	71bb      	strb	r3, [r7, #6]
 80013c4:	460b      	mov	r3, r1
 80013c6:	717b      	strb	r3, [r7, #5]
 80013c8:	4613      	mov	r3, r2
 80013ca:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80013cc:	202a      	movs	r0, #42	; 0x2a
 80013ce:	f7ff ff71 	bl	80012b4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80013d2:	2300      	movs	r3, #0
 80013d4:	733b      	strb	r3, [r7, #12]
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	3301      	adds	r3, #1
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	737b      	strb	r3, [r7, #13]
 80013de:	2300      	movs	r3, #0
 80013e0:	73bb      	strb	r3, [r7, #14]
 80013e2:	797b      	ldrb	r3, [r7, #5]
 80013e4:	3301      	adds	r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	2104      	movs	r1, #4
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff79 	bl	80012e8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80013f6:	202b      	movs	r0, #43	; 0x2b
 80013f8:	f7ff ff5c 	bl	80012b4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	331a      	adds	r3, #26
 8001400:	b2db      	uxtb	r3, r3
 8001402:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001404:	793b      	ldrb	r3, [r7, #4]
 8001406:	331a      	adds	r3, #26
 8001408:	b2db      	uxtb	r3, r3
 800140a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2104      	movs	r1, #4
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff68 	bl	80012e8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001418:	202c      	movs	r0, #44	; 0x2c
 800141a:	f7ff ff4b 	bl	80012b4 <ST7735_WriteCommand>
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bd90      	pop	{r4, r7, pc}
	...

08001428 <ST7735_Init>:

void ST7735_Init() {
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
    ST7735_Select();
 800142c:	f7ff ff16 	bl	800125c <ST7735_Select>
    ST7735_Reset();
 8001430:	f7ff ff2c 	bl	800128c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <ST7735_Init+0x28>)
 8001436:	f7ff ff71 	bl	800131c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <ST7735_Init+0x2c>)
 800143c:	f7ff ff6e 	bl	800131c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <ST7735_Init+0x30>)
 8001442:	f7ff ff6b 	bl	800131c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001446:	f7ff ff15 	bl	8001274 <ST7735_Unselect>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	080130ac 	.word	0x080130ac
 8001454:	080130e8 	.word	0x080130e8
 8001458:	080130f8 	.word	0x080130f8

0800145c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800145c:	b082      	sub	sp, #8
 800145e:	b590      	push	{r4, r7, lr}
 8001460:	b089      	sub	sp, #36	; 0x24
 8001462:	af00      	add	r7, sp, #0
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
 800146a:	460b      	mov	r3, r1
 800146c:	80bb      	strh	r3, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	b2d8      	uxtb	r0, r3
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	b2d9      	uxtb	r1, r3
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001482:	4413      	add	r3, r2
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3b01      	subs	r3, #1
 8001488:	b2dc      	uxtb	r4, r3
 800148a:	88bb      	ldrh	r3, [r7, #4]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001492:	4413      	add	r3, r2
 8001494:	b2db      	uxtb	r3, r3
 8001496:	3b01      	subs	r3, #1
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4622      	mov	r2, r4
 800149c:	f7ff ff87 	bl	80013ae <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	e043      	b.n	800152e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80014a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	3b20      	subs	r3, #32
 80014ac:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80014b0:	fb01 f303 	mul.w	r3, r1, r3
 80014b4:	4619      	mov	r1, r3
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	440b      	add	r3, r1
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	e029      	b.n	800151c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00e      	beq.n	80014f6 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80014d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	743b      	strb	r3, [r7, #16]
 80014e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	2102      	movs	r1, #2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fefa 	bl	80012e8 <ST7735_WriteData>
 80014f4:	e00f      	b.n	8001516 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80014f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	733b      	strb	r3, [r7, #12]
 8001502:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001506:	b2db      	uxtb	r3, r3
 8001508:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	2102      	movs	r1, #2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fee9 	bl	80012e8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	3301      	adds	r3, #1
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001520:	461a      	mov	r2, r3
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4293      	cmp	r3, r2
 8001526:	d3cf      	bcc.n	80014c8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	3301      	adds	r3, #1
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001532:	461a      	mov	r2, r3
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	4293      	cmp	r3, r2
 8001538:	d3b5      	bcc.n	80014a6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800153a:	bf00      	nop
 800153c:	bf00      	nop
 800153e:	3724      	adds	r7, #36	; 0x24
 8001540:	46bd      	mov	sp, r7
 8001542:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001546:	b002      	add	sp, #8
 8001548:	4770      	bx	lr

0800154a <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800154a:	b082      	sub	sp, #8
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af04      	add	r7, sp, #16
 8001552:	603a      	str	r2, [r7, #0]
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
 800155a:	460b      	mov	r3, r1
 800155c:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800155e:	f7ff fe7d 	bl	800125c <ST7735_Select>

    while(*str) {
 8001562:	e02d      	b.n	80015c0 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	7d3a      	ldrb	r2, [r7, #20]
 8001568:	4413      	add	r3, r2
 800156a:	2b9f      	cmp	r3, #159	; 0x9f
 800156c:	dd13      	ble.n	8001596 <ST7735_WriteString+0x4c>
            x = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001572:	7d7b      	ldrb	r3, [r7, #21]
 8001574:	b29a      	uxth	r2, r3
 8001576:	88bb      	ldrh	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 800157c:	88bb      	ldrh	r3, [r7, #4]
 800157e:	7d7a      	ldrb	r2, [r7, #21]
 8001580:	4413      	add	r3, r2
 8001582:	2b4f      	cmp	r3, #79	; 0x4f
 8001584:	dc21      	bgt.n	80015ca <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b20      	cmp	r3, #32
 800158c:	d103      	bne.n	8001596 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	603b      	str	r3, [r7, #0]
                continue;
 8001594:	e014      	b.n	80015c0 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	781a      	ldrb	r2, [r3, #0]
 800159a:	88b9      	ldrh	r1, [r7, #4]
 800159c:	88f8      	ldrh	r0, [r7, #6]
 800159e:	8c3b      	ldrh	r3, [r7, #32]
 80015a0:	9302      	str	r3, [sp, #8]
 80015a2:	8bbb      	ldrh	r3, [r7, #28]
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f7ff ff56 	bl	800145c <ST7735_WriteChar>
        x += font.width;
 80015b0:	7d3b      	ldrb	r3, [r7, #20]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	4413      	add	r3, r2
 80015b8:	80fb      	strh	r3, [r7, #6]
        str++;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	603b      	str	r3, [r7, #0]
    while(*str) {
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1cd      	bne.n	8001564 <ST7735_WriteString+0x1a>
 80015c8:	e000      	b.n	80015cc <ST7735_WriteString+0x82>
                break;
 80015ca:	bf00      	nop
    }

    ST7735_Unselect();
 80015cc:	f7ff fe52 	bl	8001274 <ST7735_Unselect>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015da:	b002      	add	sp, #8
 80015dc:	4770      	bx	lr
	...

080015e0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4604      	mov	r4, r0
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4623      	mov	r3, r4
 80015f0:	80fb      	strh	r3, [r7, #6]
 80015f2:	4603      	mov	r3, r0
 80015f4:	80bb      	strh	r3, [r7, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	807b      	strh	r3, [r7, #2]
 80015fa:	4613      	mov	r3, r2
 80015fc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	2b9f      	cmp	r3, #159	; 0x9f
 8001602:	d857      	bhi.n	80016b4 <ST7735_FillRectangle+0xd4>
 8001604:	88bb      	ldrh	r3, [r7, #4]
 8001606:	2b4f      	cmp	r3, #79	; 0x4f
 8001608:	d854      	bhi.n	80016b4 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800160a:	88fa      	ldrh	r2, [r7, #6]
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	4413      	add	r3, r2
 8001610:	2ba0      	cmp	r3, #160	; 0xa0
 8001612:	dd03      	ble.n	800161c <ST7735_FillRectangle+0x3c>
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800161a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800161c:	88ba      	ldrh	r2, [r7, #4]
 800161e:	883b      	ldrh	r3, [r7, #0]
 8001620:	4413      	add	r3, r2
 8001622:	2b50      	cmp	r3, #80	; 0x50
 8001624:	dd03      	ble.n	800162e <ST7735_FillRectangle+0x4e>
 8001626:	88bb      	ldrh	r3, [r7, #4]
 8001628:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 800162c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800162e:	f7ff fe15 	bl	800125c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	b2d8      	uxtb	r0, r3
 8001636:	88bb      	ldrh	r3, [r7, #4]
 8001638:	b2d9      	uxtb	r1, r3
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4413      	add	r3, r2
 8001644:	b2db      	uxtb	r3, r3
 8001646:	3b01      	subs	r3, #1
 8001648:	b2dc      	uxtb	r4, r3
 800164a:	88bb      	ldrh	r3, [r7, #4]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	883b      	ldrh	r3, [r7, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	4413      	add	r3, r2
 8001654:	b2db      	uxtb	r3, r3
 8001656:	3b01      	subs	r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	4622      	mov	r2, r4
 800165c:	f7ff fea7 	bl	80013ae <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001660:	8c3b      	ldrh	r3, [r7, #32]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	b29b      	uxth	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	733b      	strb	r3, [r7, #12]
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	2104      	movs	r1, #4
 8001674:	4811      	ldr	r0, [pc, #68]	; (80016bc <ST7735_FillRectangle+0xdc>)
 8001676:	f001 f80f 	bl	8002698 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800167a:	883b      	ldrh	r3, [r7, #0]
 800167c:	80bb      	strh	r3, [r7, #4]
 800167e:	e013      	b.n	80016a8 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	80fb      	strh	r3, [r7, #6]
 8001684:	e00a      	b.n	800169c <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001686:	f107 010c 	add.w	r1, r7, #12
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	2202      	movs	r2, #2
 8001690:	480b      	ldr	r0, [pc, #44]	; (80016c0 <ST7735_FillRectangle+0xe0>)
 8001692:	f004 fe83 	bl	800639c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	3b01      	subs	r3, #1
 800169a:	80fb      	strh	r3, [r7, #6]
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f1      	bne.n	8001686 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 80016a2:	88bb      	ldrh	r3, [r7, #4]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	80bb      	strh	r3, [r7, #4]
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1e8      	bne.n	8001680 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 80016ae:	f7ff fde1 	bl	8001274 <ST7735_Unselect>
 80016b2:	e000      	b.n	80016b6 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80016b4:	bf00      	nop
}
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	40020000 	.word	0x40020000
 80016c0:	20000298 	.word	0x20000298

080016c4 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	4611      	mov	r1, r2
 80016d0:	461a      	mov	r2, r3
 80016d2:	4623      	mov	r3, r4
 80016d4:	80fb      	strh	r3, [r7, #6]
 80016d6:	4603      	mov	r3, r0
 80016d8:	80bb      	strh	r3, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	807b      	strh	r3, [r7, #2]
 80016de:	4613      	mov	r3, r2
 80016e0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	2b9f      	cmp	r3, #159	; 0x9f
 80016e6:	d869      	bhi.n	80017bc <ST7735_FillRectangleFast+0xf8>
 80016e8:	88bb      	ldrh	r3, [r7, #4]
 80016ea:	2b4f      	cmp	r3, #79	; 0x4f
 80016ec:	d866      	bhi.n	80017bc <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80016ee:	88fa      	ldrh	r2, [r7, #6]
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	4413      	add	r3, r2
 80016f4:	2ba0      	cmp	r3, #160	; 0xa0
 80016f6:	dd03      	ble.n	8001700 <ST7735_FillRectangleFast+0x3c>
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80016fe:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001700:	88ba      	ldrh	r2, [r7, #4]
 8001702:	883b      	ldrh	r3, [r7, #0]
 8001704:	4413      	add	r3, r2
 8001706:	2b50      	cmp	r3, #80	; 0x50
 8001708:	dd03      	ble.n	8001712 <ST7735_FillRectangleFast+0x4e>
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001710:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001712:	f7ff fda3 	bl	800125c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	b2d8      	uxtb	r0, r3
 800171a:	88bb      	ldrh	r3, [r7, #4]
 800171c:	b2d9      	uxtb	r1, r3
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	887b      	ldrh	r3, [r7, #2]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	4413      	add	r3, r2
 8001728:	b2db      	uxtb	r3, r3
 800172a:	3b01      	subs	r3, #1
 800172c:	b2dc      	uxtb	r4, r3
 800172e:	88bb      	ldrh	r3, [r7, #4]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	883b      	ldrh	r3, [r7, #0]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	4413      	add	r3, r2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	3b01      	subs	r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	4622      	mov	r2, r4
 8001740:	f7ff fe35 	bl	80013ae <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8001744:	8c3b      	ldrh	r3, [r7, #32]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	b29b      	uxth	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	723b      	strb	r3, [r7, #8]
 800174e:	8c3b      	ldrh	r3, [r7, #32]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4618      	mov	r0, r3
 800175a:	f00e f9b5 	bl	800fac8 <malloc>
 800175e:	4603      	mov	r3, r0
 8001760:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8001762:	2300      	movs	r3, #0
 8001764:	80fb      	strh	r3, [r7, #6]
 8001766:	e008      	b.n	800177a <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	893a      	ldrh	r2, [r7, #8]
 8001772:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	3301      	adds	r3, #1
 8001778:	80fb      	strh	r3, [r7, #6]
 800177a:	88fa      	ldrh	r2, [r7, #6]
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	429a      	cmp	r2, r3
 8001780:	d3f2      	bcc.n	8001768 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001782:	2201      	movs	r2, #1
 8001784:	2104      	movs	r1, #4
 8001786:	480f      	ldr	r0, [pc, #60]	; (80017c4 <ST7735_FillRectangleFast+0x100>)
 8001788:	f000 ff86 	bl	8002698 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 800178c:	883b      	ldrh	r3, [r7, #0]
 800178e:	80bb      	strh	r3, [r7, #4]
 8001790:	e00b      	b.n	80017aa <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	b29a      	uxth	r2, r3
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	68f9      	ldr	r1, [r7, #12]
 800179e:	480a      	ldr	r0, [pc, #40]	; (80017c8 <ST7735_FillRectangleFast+0x104>)
 80017a0:	f004 fdfc 	bl	800639c <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 80017a4:	88bb      	ldrh	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	80bb      	strh	r3, [r7, #4]
 80017aa:	88bb      	ldrh	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <ST7735_FillRectangleFast+0xce>

    free(line);
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f00e f991 	bl	800fad8 <free>
    ST7735_Unselect();
 80017b6:	f7ff fd5d 	bl	8001274 <ST7735_Unselect>
 80017ba:	e000      	b.n	80017be <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80017bc:	bf00      	nop
}
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd90      	pop	{r4, r7, pc}
 80017c4:	40020000 	.word	0x40020000
 80017c8:	20000298 	.word	0x20000298

080017cc <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2350      	movs	r3, #80	; 0x50
 80017dc:	22a0      	movs	r2, #160	; 0xa0
 80017de:	2100      	movs	r1, #0
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff fefd 	bl	80015e0 <ST7735_FillRectangle>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_MspInit+0x54>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_MspInit+0x54>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_MspInit+0x54>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_MspInit+0x54>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_MspInit+0x54>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_MspInit+0x54>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	210f      	movs	r1, #15
 8001832:	f06f 0001 	mvn.w	r0, #1
 8001836:	f000 fc51 	bl	80020dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	201c      	movs	r0, #28
 800185e:	f000 fc3d 	bl	80020dc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001862:	201c      	movs	r0, #28
 8001864:	f000 fc66 	bl	8002134 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_InitTick+0xa8>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <HAL_InitTick+0xa8>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6413      	str	r3, [r2, #64]	; 0x40
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_InitTick+0xa8>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001884:	f107 0210 	add.w	r2, r7, #16
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f003 fdb6 	bl	8005400 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001894:	f003 fda0 	bl	80053d8 <HAL_RCC_GetPCLK1Freq>
 8001898:	4603      	mov	r3, r0
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <HAL_InitTick+0xac>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0c9b      	lsrs	r3, r3, #18
 80018a8:	3b01      	subs	r3, #1
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0xb0>)
 80018ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_InitTick+0xb0>)
 80018b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ba:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80018bc:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_InitTick+0xb0>)
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_InitTick+0xb0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_InitTick+0xb0>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80018ce:	480a      	ldr	r0, [pc, #40]	; (80018f8 <HAL_InitTick+0xb0>)
 80018d0:	f004 ff7a 	bl	80067c8 <HAL_TIM_Base_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d104      	bne.n	80018e4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80018da:	4807      	ldr	r0, [pc, #28]	; (80018f8 <HAL_InitTick+0xb0>)
 80018dc:	f005 f83a 	bl	8006954 <HAL_TIM_Base_Start_IT>
 80018e0:	4603      	mov	r3, r0
 80018e2:	e000      	b.n	80018e6 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3730      	adds	r7, #48	; 0x30
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	431bde83 	.word	0x431bde83
 80018f8:	200002f0 	.word	0x200002f0

080018fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <NMI_Handler+0x4>

08001902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <MemManage_Handler+0x4>

0800190e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <UsageFault_Handler+0x4>

0800191a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BAND_BTN_Pin);
 800192c:	2001      	movs	r0, #1
 800192e:	f000 ff0d 	bl	800274c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}

08001936 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 800193a:	2004      	movs	r0, #4
 800193c:	f000 ff06 	bl	800274c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM2_IRQHandler+0x10>)
 800194a:	f005 fce9 	bl	8007320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200002f0 	.word	0x200002f0

08001958 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800195c:	4808      	ldr	r0, [pc, #32]	; (8001980 <TIM3_IRQHandler+0x28>)
 800195e:	f005 fcdf 	bl	8007320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <TIM3_IRQHandler+0x2c>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <TIM3_IRQHandler+0x2c>)
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <TIM3_IRQHandler+0x2c>)
 8001974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001978:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000344 	.word	0x20000344
 8001984:	40000400 	.word	0x40000400

08001988 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <TIM5_IRQHandler+0x10>)
 800198e:	f005 fcc7 	bl	8007320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000038c 	.word	0x2000038c

0800199c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <OTG_FS_IRQHandler+0x10>)
 80019a2:	f001 fe64 	bl	800366e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2001b6dc 	.word	0x2001b6dc

080019b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
	buttonNumber = -1;
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x58>)
 80019bc:	22ff      	movs	r2, #255	; 0xff
 80019be:	701a      	strb	r2, [r3, #0]
    if(GPIO_Pin == ENC_BTN_Pin)
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d103      	bne.n	80019ce <HAL_GPIO_EXTI_Callback+0x1e>
    {
		buttonNumber = 0;
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x58>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e005      	b.n	80019da <HAL_GPIO_EXTI_Callback+0x2a>
    } else if(GPIO_Pin == BAND_BTN_Pin)
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d102      	bne.n	80019da <HAL_GPIO_EXTI_Callback+0x2a>
    {
		buttonNumber = 1;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x58>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
	if(buttonNumber < 0) {
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 80019da:	f000 fa81 	bl	8001ee0 <HAL_GetTick>
 80019de:	60f8      	str	r0, [r7, #12]
    if(tstamp - lastPressed < 250)
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x5c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2bf9      	cmp	r3, #249	; 0xf9
 80019ea:	d909      	bls.n	8001a00 <HAL_GPIO_EXTI_Callback+0x50>
        return;
    lastPressed = tstamp;
 80019ec:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x5c>)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x58>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_GPIO_EXTI_Callback+0x60>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	5499      	strb	r1, [r3, r2]
 80019fe:	e000      	b.n	8001a02 <HAL_GPIO_EXTI_Callback+0x52>
        return;
 8001a00:	bf00      	nop
}
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000200 	.word	0x20000200
 8001a0c:	2000033c 	.word	0x2000033c
 8001a10:	20000338 	.word	0x20000338

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f00e f814 	bl	800fa70 <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20020000 	.word	0x20020000
 8001a74:	00001000 	.word	0x00001000
 8001a78:	20000340 	.word	0x20000340
 8001a7c:	2001be18 	.word	0x2001be18

08001a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <SystemInit+0x20>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <SystemInit+0x20>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	; 0x30
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	2224      	movs	r2, #36	; 0x24
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f00e f826 	bl	800fb04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ac0:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <MX_TIM3_Init+0xa0>)
 8001ac2:	4a21      	ldr	r2, [pc, #132]	; (8001b48 <MX_TIM3_Init+0xa4>)
 8001ac4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ac6:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <MX_TIM3_Init+0xa0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <MX_TIM3_Init+0xa0>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <MX_TIM3_Init+0xa0>)
 8001ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <MX_TIM3_Init+0xa0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <MX_TIM3_Init+0xa0>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aee:	2301      	movs	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001afe:	2301      	movs	r3, #1
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001b06:	2302      	movs	r3, #2
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480c      	ldr	r0, [pc, #48]	; (8001b44 <MX_TIM3_Init+0xa0>)
 8001b12:	f005 f9ad 	bl	8006e70 <HAL_TIM_Encoder_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b1c:	f7ff fa89 	bl	8001032 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_TIM3_Init+0xa0>)
 8001b2e:	f006 fd79 	bl	8008624 <HAL_TIMEx_MasterConfigSynchronization>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b38:	f7ff fa7b 	bl	8001032 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	3730      	adds	r7, #48	; 0x30
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000344 	.word	0x20000344
 8001b48:	40000400 	.word	0x40000400

08001b4c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	; 0x38
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
 8001b78:	615a      	str	r2, [r3, #20]
 8001b7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <MX_TIM5_Init+0xe4>)
 8001b7e:	4a2d      	ldr	r2, [pc, #180]	; (8001c34 <MX_TIM5_Init+0xe8>)
 8001b80:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 48-1;
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <MX_TIM5_Init+0xe4>)
 8001b84:	222f      	movs	r2, #47	; 0x2f
 8001b86:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <MX_TIM5_Init+0xe4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8001b8e:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <MX_TIM5_Init+0xe4>)
 8001b90:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001b94:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b96:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <MX_TIM5_Init+0xe4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9c:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <MX_TIM5_Init+0xe4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ba2:	4823      	ldr	r0, [pc, #140]	; (8001c30 <MX_TIM5_Init+0xe4>)
 8001ba4:	f004 fe10 	bl	80067c8 <HAL_TIM_Base_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001bae:	f7ff fa40 	bl	8001032 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	481c      	ldr	r0, [pc, #112]	; (8001c30 <MX_TIM5_Init+0xe4>)
 8001bc0:	f005 fe5c 	bl	800787c <HAL_TIM_ConfigClockSource>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001bca:	f7ff fa32 	bl	8001032 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001bce:	4818      	ldr	r0, [pc, #96]	; (8001c30 <MX_TIM5_Init+0xe4>)
 8001bd0:	f004 ff52 	bl	8006a78 <HAL_TIM_PWM_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001bda:	f7ff fa2a 	bl	8001032 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	4619      	mov	r1, r3
 8001bec:	4810      	ldr	r0, [pc, #64]	; (8001c30 <MX_TIM5_Init+0xe4>)
 8001bee:	f006 fd19 	bl	8008624 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001bf8:	f7ff fa1b 	bl	8001032 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bfc:	2360      	movs	r3, #96	; 0x60
 8001bfe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	4807      	ldr	r0, [pc, #28]	; (8001c30 <MX_TIM5_Init+0xe4>)
 8001c14:	f005 fc8c 	bl	8007530 <HAL_TIM_PWM_ConfigChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001c1e:	f7ff fa08 	bl	8001032 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c22:	4803      	ldr	r0, [pc, #12]	; (8001c30 <MX_TIM5_Init+0xe4>)
 8001c24:	f000 f8a0 	bl	8001d68 <HAL_TIM_MspPostInit>

}
 8001c28:	bf00      	nop
 8001c2a:	3738      	adds	r7, #56	; 0x38
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	2000038c 	.word	0x2000038c
 8001c34:	40000c00 	.word	0x40000c00

08001c38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a2c      	ldr	r2, [pc, #176]	; (8001d08 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d151      	bne.n	8001cfe <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001cae:	2340      	movs	r3, #64	; 0x40
 8001cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4811      	ldr	r0, [pc, #68]	; (8001d10 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001cca:	f000 fa4b 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001cce:	2320      	movs	r3, #32
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	480a      	ldr	r0, [pc, #40]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001cea:	f000 fa3b 	bl	8002164 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2105      	movs	r1, #5
 8001cf2:	201d      	movs	r0, #29
 8001cf4:	f000 f9f2 	bl	80020dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cf8:	201d      	movs	r0, #29
 8001cfa:	f000 fa1b 	bl	8002134 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	; 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40000400 	.word	0x40000400
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020400 	.word	0x40020400

08001d18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0e      	ldr	r2, [pc, #56]	; (8001d60 <HAL_TIM_Base_MspInit+0x48>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d115      	bne.n	8001d56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_TIM_Base_MspInit+0x4c>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <HAL_TIM_Base_MspInit+0x4c>)
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_TIM_Base_MspInit+0x4c>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2105      	movs	r1, #5
 8001d4a:	2032      	movs	r0, #50	; 0x32
 8001d4c:	f000 f9c6 	bl	80020dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d50:	2032      	movs	r0, #50	; 0x32
 8001d52:	f000 f9ef 	bl	8002134 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40000c00 	.word	0x40000c00
 8001d64:	40023800 	.word	0x40023800

08001d68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_TIM_MspPostInit+0x68>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d11d      	bne.n	8001dc6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_TIM_MspPostInit+0x6c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <HAL_TIM_MspPostInit+0x6c>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_TIM_MspPostInit+0x6c>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8001da6:	2302      	movs	r3, #2
 8001da8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001db6:	2302      	movs	r3, #2
 8001db8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_TIM_MspPostInit+0x70>)
 8001dc2:	f000 f9cf 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3720      	adds	r7, #32
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40000c00 	.word	0x40000c00
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000

08001ddc <USR_TIM_PWM_OpenTim5Ch2>:
  /* USER CODE END TIM5_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USR_TIM_PWM_OpenTim5Ch2() {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001de0:	2104      	movs	r1, #4
 8001de2:	4802      	ldr	r0, [pc, #8]	; (8001dec <USR_TIM_PWM_OpenTim5Ch2+0x10>)
 8001de4:	f004 ff18 	bl	8006c18 <HAL_TIM_PWM_Start>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	2000038c 	.word	0x2000038c

08001df0 <USR_TIM_PWM_SetCompare>:
void USR_TIM_PWM_CloseTim5Ch2() {
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
}

//duty == 0~1000
void USR_TIM_PWM_SetCompare(uint16_t duty) {
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
	if (duty > 1000) // здесь 1000, потому что порог подсчета установлен в 1 тысячу
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e00:	d902      	bls.n	8001e08 <USR_TIM_PWM_SetCompare+0x18>
			{
		duty = 1000;
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	80fb      	strh	r3, [r7, #6]
	}
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, duty);
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <USR_TIM_PWM_SetCompare+0x2c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	88fa      	ldrh	r2, [r7, #6]
 8001e0e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	2000038c 	.word	0x2000038c

08001e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e26:	490e      	ldr	r1, [pc, #56]	; (8001e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e28:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e3c:	4c0b      	ldr	r4, [pc, #44]	; (8001e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e4a:	f7ff fe19 	bl	8001a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f00d fe15 	bl	800fa7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e52:	f7ff f847 	bl	8000ee4 <main>
  bx  lr    
 8001e56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001e64:	080131e0 	.word	0x080131e0
  ldr r2, =_sbss
 8001e68:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001e6c:	2001be18 	.word	0x2001be18

08001e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC_IRQHandler>
	...

08001e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_Init+0x40>)
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_Init+0x40>)
 8001e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_Init+0x40>)
 8001e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 f8fd 	bl	800209c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea2:	200f      	movs	r0, #15
 8001ea4:	f7ff fcd0 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea8:	f7ff fca2 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_IncTick+0x20>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_IncTick+0x24>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_IncTick+0x24>)
 8001eca:	6013      	str	r3, [r2, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000074 	.word	0x20000074
 8001edc:	200003d4 	.word	0x200003d4

08001ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_GetTick+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	200003d4 	.word	0x200003d4

08001ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f00:	f7ff ffee 	bl	8001ee0 <HAL_GetTick>
 8001f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d005      	beq.n	8001f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_Delay+0x44>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f1e:	bf00      	nop
 8001f20:	f7ff ffde 	bl	8001ee0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d8f7      	bhi.n	8001f20 <HAL_Delay+0x28>
  {
  }
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000074 	.word	0x20000074

08001f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	60d3      	str	r3, [r2, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	f003 0307 	and.w	r3, r3, #7
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	db0b      	blt.n	8001fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	f003 021f 	and.w	r2, r3, #31
 8001fbc:	4907      	ldr	r1, [pc, #28]	; (8001fdc <__NVIC_EnableIRQ+0x38>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000e100 	.word	0xe000e100

08001fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db0a      	blt.n	800200a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	490c      	ldr	r1, [pc, #48]	; (800202c <__NVIC_SetPriority+0x4c>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	0112      	lsls	r2, r2, #4
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	440b      	add	r3, r1
 8002004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002008:	e00a      	b.n	8002020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4908      	ldr	r1, [pc, #32]	; (8002030 <__NVIC_SetPriority+0x50>)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	3b04      	subs	r3, #4
 8002018:	0112      	lsls	r2, r2, #4
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	440b      	add	r3, r1
 800201e:	761a      	strb	r2, [r3, #24]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000e100 	.word	0xe000e100
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f1c3 0307 	rsb	r3, r3, #7
 800204e:	2b04      	cmp	r3, #4
 8002050:	bf28      	it	cs
 8002052:	2304      	movcs	r3, #4
 8002054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3304      	adds	r3, #4
 800205a:	2b06      	cmp	r3, #6
 800205c:	d902      	bls.n	8002064 <NVIC_EncodePriority+0x30>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3b03      	subs	r3, #3
 8002062:	e000      	b.n	8002066 <NVIC_EncodePriority+0x32>
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	401a      	ands	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800207c:	f04f 31ff 	mov.w	r1, #4294967295
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43d9      	mvns	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	4313      	orrs	r3, r2
         );
}
 800208e:	4618      	mov	r0, r3
 8002090:	3724      	adds	r7, #36	; 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b07      	cmp	r3, #7
 80020a8:	d00f      	beq.n	80020ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b06      	cmp	r3, #6
 80020ae:	d00c      	beq.n	80020ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d009      	beq.n	80020ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d006      	beq.n	80020ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d003      	beq.n	80020ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020c2:	2190      	movs	r1, #144	; 0x90
 80020c4:	4804      	ldr	r0, [pc, #16]	; (80020d8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80020c6:	f7fe ffb9 	bl	800103c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ff38 	bl	8001f40 <__NVIC_SetPriorityGrouping>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	08010564 	.word	0x08010564

080020dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b0f      	cmp	r3, #15
 80020f2:	d903      	bls.n	80020fc <HAL_NVIC_SetPriority+0x20>
 80020f4:	21a8      	movs	r1, #168	; 0xa8
 80020f6:	480e      	ldr	r0, [pc, #56]	; (8002130 <HAL_NVIC_SetPriority+0x54>)
 80020f8:	f7fe ffa0 	bl	800103c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	d903      	bls.n	800210a <HAL_NVIC_SetPriority+0x2e>
 8002102:	21a9      	movs	r1, #169	; 0xa9
 8002104:	480a      	ldr	r0, [pc, #40]	; (8002130 <HAL_NVIC_SetPriority+0x54>)
 8002106:	f7fe ff99 	bl	800103c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210a:	f7ff ff3d 	bl	8001f88 <__NVIC_GetPriorityGrouping>
 800210e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	6978      	ldr	r0, [r7, #20]
 8002116:	f7ff ff8d 	bl	8002034 <NVIC_EncodePriority>
 800211a:	4602      	mov	r2, r0
 800211c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff5c 	bl	8001fe0 <__NVIC_SetPriority>
}
 8002128:	bf00      	nop
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	08010564 	.word	0x08010564

08002134 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	2b00      	cmp	r3, #0
 8002144:	da03      	bge.n	800214e <HAL_NVIC_EnableIRQ+0x1a>
 8002146:	21bc      	movs	r1, #188	; 0xbc
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <HAL_NVIC_EnableIRQ+0x2c>)
 800214a:	f7fe ff77 	bl	800103c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ff26 	bl	8001fa4 <__NVIC_EnableIRQ>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	08010564 	.word	0x08010564

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a33      	ldr	r2, [pc, #204]	; (800224c <HAL_GPIO_Init+0xe8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d017      	beq.n	80021b2 <HAL_GPIO_Init+0x4e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a32      	ldr	r2, [pc, #200]	; (8002250 <HAL_GPIO_Init+0xec>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x4e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a31      	ldr	r2, [pc, #196]	; (8002254 <HAL_GPIO_Init+0xf0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00f      	beq.n	80021b2 <HAL_GPIO_Init+0x4e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a30      	ldr	r2, [pc, #192]	; (8002258 <HAL_GPIO_Init+0xf4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00b      	beq.n	80021b2 <HAL_GPIO_Init+0x4e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2f      	ldr	r2, [pc, #188]	; (800225c <HAL_GPIO_Init+0xf8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x4e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2e      	ldr	r2, [pc, #184]	; (8002260 <HAL_GPIO_Init+0xfc>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x4e>
 80021aa:	21ac      	movs	r1, #172	; 0xac
 80021ac:	482d      	ldr	r0, [pc, #180]	; (8002264 <HAL_GPIO_Init+0x100>)
 80021ae:	f7fe ff45 	bl	800103c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_GPIO_Init+0x64>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	041b      	lsls	r3, r3, #16
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x6c>
 80021c8:	21ad      	movs	r1, #173	; 0xad
 80021ca:	4826      	ldr	r0, [pc, #152]	; (8002264 <HAL_GPIO_Init+0x100>)
 80021cc:	f7fe ff36 	bl	800103c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d035      	beq.n	8002244 <HAL_GPIO_Init+0xe0>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d031      	beq.n	8002244 <HAL_GPIO_Init+0xe0>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b11      	cmp	r3, #17
 80021e6:	d02d      	beq.n	8002244 <HAL_GPIO_Init+0xe0>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d029      	beq.n	8002244 <HAL_GPIO_Init+0xe0>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b12      	cmp	r3, #18
 80021f6:	d025      	beq.n	8002244 <HAL_GPIO_Init+0xe0>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002200:	d020      	beq.n	8002244 <HAL_GPIO_Init+0xe0>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800220a:	d01b      	beq.n	8002244 <HAL_GPIO_Init+0xe0>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002214:	d016      	beq.n	8002244 <HAL_GPIO_Init+0xe0>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800221e:	d011      	beq.n	8002244 <HAL_GPIO_Init+0xe0>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002228:	d00c      	beq.n	8002244 <HAL_GPIO_Init+0xe0>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002232:	d007      	beq.n	8002244 <HAL_GPIO_Init+0xe0>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0xe0>
 800223c:	21ae      	movs	r1, #174	; 0xae
 800223e:	4809      	ldr	r0, [pc, #36]	; (8002264 <HAL_GPIO_Init+0x100>)
 8002240:	f7fe fefc 	bl	800103c <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	e20c      	b.n	8002664 <HAL_GPIO_Init+0x500>
 800224a:	bf00      	nop
 800224c:	40020000 	.word	0x40020000
 8002250:	40020400 	.word	0x40020400
 8002254:	40020800 	.word	0x40020800
 8002258:	40020c00 	.word	0x40020c00
 800225c:	40021000 	.word	0x40021000
 8002260:	40021c00 	.word	0x40021c00
 8002264:	080105a0 	.word	0x080105a0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	f040 81ec 	bne.w	800265e <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d005      	beq.n	800229e <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229a:	2b02      	cmp	r3, #2
 800229c:	d144      	bne.n	8002328 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00f      	beq.n	80022c6 <HAL_GPIO_Init+0x162>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d00b      	beq.n	80022c6 <HAL_GPIO_Init+0x162>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d007      	beq.n	80022c6 <HAL_GPIO_Init+0x162>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x162>
 80022be:	21c0      	movs	r1, #192	; 0xc0
 80022c0:	4884      	ldr	r0, [pc, #528]	; (80024d4 <HAL_GPIO_Init+0x370>)
 80022c2:	f7fe febb 	bl	800103c <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 0201 	and.w	r2, r3, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b03      	cmp	r3, #3
 8002332:	d027      	beq.n	8002384 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00b      	beq.n	8002354 <HAL_GPIO_Init+0x1f0>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d007      	beq.n	8002354 <HAL_GPIO_Init+0x1f0>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x1f0>
 800234c:	21d1      	movs	r1, #209	; 0xd1
 800234e:	4861      	ldr	r0, [pc, #388]	; (80024d4 <HAL_GPIO_Init+0x370>)
 8002350:	f7fe fe74 	bl	800103c <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b02      	cmp	r3, #2
 800238e:	f040 80a3 	bne.w	80024d8 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d077      	beq.n	800248a <HAL_GPIO_Init+0x326>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b09      	cmp	r3, #9
 80023a0:	d073      	beq.n	800248a <HAL_GPIO_Init+0x326>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d06f      	beq.n	800248a <HAL_GPIO_Init+0x326>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d06b      	beq.n	800248a <HAL_GPIO_Init+0x326>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d067      	beq.n	800248a <HAL_GPIO_Init+0x326>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d063      	beq.n	800248a <HAL_GPIO_Init+0x326>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d05f      	beq.n	800248a <HAL_GPIO_Init+0x326>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d05b      	beq.n	800248a <HAL_GPIO_Init+0x326>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d057      	beq.n	800248a <HAL_GPIO_Init+0x326>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d053      	beq.n	800248a <HAL_GPIO_Init+0x326>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d04f      	beq.n	800248a <HAL_GPIO_Init+0x326>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d04b      	beq.n	800248a <HAL_GPIO_Init+0x326>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d047      	beq.n	800248a <HAL_GPIO_Init+0x326>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d043      	beq.n	800248a <HAL_GPIO_Init+0x326>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b05      	cmp	r3, #5
 8002408:	d03f      	beq.n	800248a <HAL_GPIO_Init+0x326>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b05      	cmp	r3, #5
 8002410:	d03b      	beq.n	800248a <HAL_GPIO_Init+0x326>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b05      	cmp	r3, #5
 8002418:	d037      	beq.n	800248a <HAL_GPIO_Init+0x326>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b06      	cmp	r3, #6
 8002420:	d033      	beq.n	800248a <HAL_GPIO_Init+0x326>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b06      	cmp	r3, #6
 8002428:	d02f      	beq.n	800248a <HAL_GPIO_Init+0x326>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b05      	cmp	r3, #5
 8002430:	d02b      	beq.n	800248a <HAL_GPIO_Init+0x326>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b06      	cmp	r3, #6
 8002438:	d027      	beq.n	800248a <HAL_GPIO_Init+0x326>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b07      	cmp	r3, #7
 8002440:	d023      	beq.n	800248a <HAL_GPIO_Init+0x326>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b07      	cmp	r3, #7
 8002448:	d01f      	beq.n	800248a <HAL_GPIO_Init+0x326>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b07      	cmp	r3, #7
 8002450:	d01b      	beq.n	800248a <HAL_GPIO_Init+0x326>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b08      	cmp	r3, #8
 8002458:	d017      	beq.n	800248a <HAL_GPIO_Init+0x326>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b0a      	cmp	r3, #10
 8002460:	d013      	beq.n	800248a <HAL_GPIO_Init+0x326>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b09      	cmp	r3, #9
 8002468:	d00f      	beq.n	800248a <HAL_GPIO_Init+0x326>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b09      	cmp	r3, #9
 8002470:	d00b      	beq.n	800248a <HAL_GPIO_Init+0x326>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b0c      	cmp	r3, #12
 8002478:	d007      	beq.n	800248a <HAL_GPIO_Init+0x326>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b0f      	cmp	r3, #15
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x326>
 8002482:	21de      	movs	r1, #222	; 0xde
 8002484:	4813      	ldr	r0, [pc, #76]	; (80024d4 <HAL_GPIO_Init+0x370>)
 8002486:	f7fe fdd9 	bl	800103c <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	69b9      	ldr	r1, [r7, #24]
 80024ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80024d2:	e001      	b.n	80024d8 <HAL_GPIO_Init+0x374>
 80024d4:	080105a0 	.word	0x080105a0
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0203 	and.w	r2, r3, #3
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a2 	beq.w	800265e <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b56      	ldr	r3, [pc, #344]	; (8002678 <HAL_GPIO_Init+0x514>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	4a55      	ldr	r2, [pc, #340]	; (8002678 <HAL_GPIO_Init+0x514>)
 8002524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002528:	6453      	str	r3, [r2, #68]	; 0x44
 800252a:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_GPIO_Init+0x514>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002536:	4a51      	ldr	r2, [pc, #324]	; (800267c <HAL_GPIO_Init+0x518>)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	220f      	movs	r2, #15
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a48      	ldr	r2, [pc, #288]	; (8002680 <HAL_GPIO_Init+0x51c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d019      	beq.n	8002596 <HAL_GPIO_Init+0x432>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a47      	ldr	r2, [pc, #284]	; (8002684 <HAL_GPIO_Init+0x520>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x42e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a46      	ldr	r2, [pc, #280]	; (8002688 <HAL_GPIO_Init+0x524>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00d      	beq.n	800258e <HAL_GPIO_Init+0x42a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a45      	ldr	r2, [pc, #276]	; (800268c <HAL_GPIO_Init+0x528>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x426>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a44      	ldr	r2, [pc, #272]	; (8002690 <HAL_GPIO_Init+0x52c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_GPIO_Init+0x422>
 8002582:	2304      	movs	r3, #4
 8002584:	e008      	b.n	8002598 <HAL_GPIO_Init+0x434>
 8002586:	2307      	movs	r3, #7
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x434>
 800258a:	2303      	movs	r3, #3
 800258c:	e004      	b.n	8002598 <HAL_GPIO_Init+0x434>
 800258e:	2302      	movs	r3, #2
 8002590:	e002      	b.n	8002598 <HAL_GPIO_Init+0x434>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_GPIO_Init+0x434>
 8002596:	2300      	movs	r3, #0
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	f002 0203 	and.w	r2, r2, #3
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	4093      	lsls	r3, r2
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025a8:	4934      	ldr	r1, [pc, #208]	; (800267c <HAL_GPIO_Init+0x518>)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3302      	adds	r3, #2
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b6:	4b37      	ldr	r3, [pc, #220]	; (8002694 <HAL_GPIO_Init+0x530>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025da:	4a2e      	ldr	r2, [pc, #184]	; (8002694 <HAL_GPIO_Init+0x530>)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e0:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <HAL_GPIO_Init+0x530>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002604:	4a23      	ldr	r2, [pc, #140]	; (8002694 <HAL_GPIO_Init+0x530>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_GPIO_Init+0x530>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800262e:	4a19      	ldr	r2, [pc, #100]	; (8002694 <HAL_GPIO_Init+0x530>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002634:	4b17      	ldr	r3, [pc, #92]	; (8002694 <HAL_GPIO_Init+0x530>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002658:	4a0e      	ldr	r2, [pc, #56]	; (8002694 <HAL_GPIO_Init+0x530>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3301      	adds	r3, #1
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	2b0f      	cmp	r3, #15
 8002668:	f67f adfe 	bls.w	8002268 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40013800 	.word	0x40013800
 8002680:	40020000 	.word	0x40020000
 8002684:	40020400 	.word	0x40020400
 8002688:	40020800 	.word	0x40020800
 800268c:	40020c00 	.word	0x40020c00
 8002690:	40021000 	.word	0x40021000
 8002694:	40013c00 	.word	0x40013c00

08002698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80026a8:	887b      	ldrh	r3, [r7, #2]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_GPIO_WritePin+0x20>
 80026ae:	887b      	ldrh	r3, [r7, #2]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_GPIO_WritePin+0x2a>
 80026b8:	f240 119d 	movw	r1, #413	; 0x19d
 80026bc:	480e      	ldr	r0, [pc, #56]	; (80026f8 <HAL_GPIO_WritePin+0x60>)
 80026be:	f7fe fcbd 	bl	800103c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80026c2:	787b      	ldrb	r3, [r7, #1]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_GPIO_WritePin+0x40>
 80026c8:	787b      	ldrb	r3, [r7, #1]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d004      	beq.n	80026d8 <HAL_GPIO_WritePin+0x40>
 80026ce:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80026d2:	4809      	ldr	r0, [pc, #36]	; (80026f8 <HAL_GPIO_WritePin+0x60>)
 80026d4:	f7fe fcb2 	bl	800103c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80026d8:	787b      	ldrb	r3, [r7, #1]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026e4:	e003      	b.n	80026ee <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	041a      	lsls	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	619a      	str	r2, [r3, #24]
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	080105a0 	.word	0x080105a0

080026fc <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <HAL_GPIO_TogglePin+0x1c>
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <HAL_GPIO_TogglePin+0x26>
 8002718:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800271c:	480a      	ldr	r0, [pc, #40]	; (8002748 <HAL_GPIO_TogglePin+0x4c>)
 800271e:	f7fe fc8d 	bl	800103c <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002728:	887a      	ldrh	r2, [r7, #2]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4013      	ands	r3, r2
 800272e:	041a      	lsls	r2, r3, #16
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43d9      	mvns	r1, r3
 8002734:	887b      	ldrh	r3, [r7, #2]
 8002736:	400b      	ands	r3, r1
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	619a      	str	r2, [r3, #24]
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	080105a0 	.word	0x080105a0

0800274c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002762:	4a05      	ldr	r2, [pc, #20]	; (8002778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f920 	bl	80019b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40013c00 	.word	0x40013c00

0800277c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1bd      	b.n	8002b0a <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a93      	ldr	r2, [pc, #588]	; (80029e0 <HAL_I2C_Init+0x264>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d00e      	beq.n	80027b6 <HAL_I2C_Init+0x3a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a91      	ldr	r2, [pc, #580]	; (80029e4 <HAL_I2C_Init+0x268>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d009      	beq.n	80027b6 <HAL_I2C_Init+0x3a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a90      	ldr	r2, [pc, #576]	; (80029e8 <HAL_I2C_Init+0x26c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d004      	beq.n	80027b6 <HAL_I2C_Init+0x3a>
 80027ac:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80027b0:	488e      	ldr	r0, [pc, #568]	; (80029ec <HAL_I2C_Init+0x270>)
 80027b2:	f7fe fc43 	bl	800103c <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <HAL_I2C_Init+0x4c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4a8b      	ldr	r2, [pc, #556]	; (80029f0 <HAL_I2C_Init+0x274>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d904      	bls.n	80027d2 <HAL_I2C_Init+0x56>
 80027c8:	f240 11bf 	movw	r1, #447	; 0x1bf
 80027cc:	4887      	ldr	r0, [pc, #540]	; (80029ec <HAL_I2C_Init+0x270>)
 80027ce:	f7fe fc35 	bl	800103c <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <HAL_I2C_Init+0x72>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027e2:	d004      	beq.n	80027ee <HAL_I2C_Init+0x72>
 80027e4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80027e8:	4880      	ldr	r0, [pc, #512]	; (80029ec <HAL_I2C_Init+0x270>)
 80027ea:	f7fe fc27 	bl	800103c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027f6:	f023 0303 	bic.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <HAL_I2C_Init+0x8c>
 80027fe:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002802:	487a      	ldr	r0, [pc, #488]	; (80029ec <HAL_I2C_Init+0x270>)
 8002804:	f7fe fc1a 	bl	800103c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002810:	d009      	beq.n	8002826 <HAL_I2C_Init+0xaa>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800281a:	d004      	beq.n	8002826 <HAL_I2C_Init+0xaa>
 800281c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002820:	4872      	ldr	r0, [pc, #456]	; (80029ec <HAL_I2C_Init+0x270>)
 8002822:	f7fe fc0b 	bl	800103c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_I2C_Init+0xc4>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d004      	beq.n	8002840 <HAL_I2C_Init+0xc4>
 8002836:	f240 11c3 	movw	r1, #451	; 0x1c3
 800283a:	486c      	ldr	r0, [pc, #432]	; (80029ec <HAL_I2C_Init+0x270>)
 800283c:	f7fe fbfe 	bl	800103c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <HAL_I2C_Init+0xda>
 800284c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002850:	4866      	ldr	r0, [pc, #408]	; (80029ec <HAL_I2C_Init+0x270>)
 8002852:	f7fe fbf3 	bl	800103c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_I2C_Init+0xf4>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d004      	beq.n	8002870 <HAL_I2C_Init+0xf4>
 8002866:	f240 11c5 	movw	r1, #453	; 0x1c5
 800286a:	4860      	ldr	r0, [pc, #384]	; (80029ec <HAL_I2C_Init+0x270>)
 800286c:	f7fe fbe6 	bl	800103c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_I2C_Init+0x10e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	2b80      	cmp	r3, #128	; 0x80
 800287e:	d004      	beq.n	800288a <HAL_I2C_Init+0x10e>
 8002880:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002884:	4859      	ldr	r0, [pc, #356]	; (80029ec <HAL_I2C_Init+0x270>)
 8002886:	f7fe fbd9 	bl	800103c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe fa92 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2224      	movs	r2, #36	; 0x24
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028dc:	f002 fd7c 	bl	80053d8 <HAL_RCC_GetPCLK1Freq>
 80028e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4a43      	ldr	r2, [pc, #268]	; (80029f4 <HAL_I2C_Init+0x278>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d807      	bhi.n	80028fc <HAL_I2C_Init+0x180>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a42      	ldr	r2, [pc, #264]	; (80029f8 <HAL_I2C_Init+0x27c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	bf94      	ite	ls
 80028f4:	2301      	movls	r3, #1
 80028f6:	2300      	movhi	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	e006      	b.n	800290a <HAL_I2C_Init+0x18e>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4a3f      	ldr	r2, [pc, #252]	; (80029fc <HAL_I2C_Init+0x280>)
 8002900:	4293      	cmp	r3, r2
 8002902:	bf94      	ite	ls
 8002904:	2301      	movls	r3, #1
 8002906:	2300      	movhi	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e0fb      	b.n	8002b0a <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4a3a      	ldr	r2, [pc, #232]	; (8002a00 <HAL_I2C_Init+0x284>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	0c9b      	lsrs	r3, r3, #18
 800291c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a2c      	ldr	r2, [pc, #176]	; (80029f4 <HAL_I2C_Init+0x278>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d802      	bhi.n	800294c <HAL_I2C_Init+0x1d0>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	3301      	adds	r3, #1
 800294a:	e009      	b.n	8002960 <HAL_I2C_Init+0x1e4>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	4a2b      	ldr	r2, [pc, #172]	; (8002a04 <HAL_I2C_Init+0x288>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	3301      	adds	r3, #1
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	430b      	orrs	r3, r1
 8002966:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002972:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	491e      	ldr	r1, [pc, #120]	; (80029f4 <HAL_I2C_Init+0x278>)
 800297c:	428b      	cmp	r3, r1
 800297e:	d819      	bhi.n	80029b4 <HAL_I2C_Init+0x238>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1e59      	subs	r1, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fbb1 f3f3 	udiv	r3, r1, r3
 800298e:	1c59      	adds	r1, r3, #1
 8002990:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002994:	400b      	ands	r3, r1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_I2C_Init+0x234>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1e59      	subs	r1, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ae:	e065      	b.n	8002a7c <HAL_I2C_Init+0x300>
 80029b0:	2304      	movs	r3, #4
 80029b2:	e063      	b.n	8002a7c <HAL_I2C_Init+0x300>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d125      	bne.n	8002a08 <HAL_I2C_Init+0x28c>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1e58      	subs	r0, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	440b      	add	r3, r1
 80029ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e026      	b.n	8002a2e <HAL_I2C_Init+0x2b2>
 80029e0:	40005400 	.word	0x40005400
 80029e4:	40005800 	.word	0x40005800
 80029e8:	40005c00 	.word	0x40005c00
 80029ec:	080105dc 	.word	0x080105dc
 80029f0:	00061a80 	.word	0x00061a80
 80029f4:	000186a0 	.word	0x000186a0
 80029f8:	001e847f 	.word	0x001e847f
 80029fc:	003d08ff 	.word	0x003d08ff
 8002a00:	431bde83 	.word	0x431bde83
 8002a04:	10624dd3 	.word	0x10624dd3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e58      	subs	r0, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	0099      	lsls	r1, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Init+0x2ba>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e022      	b.n	8002a7c <HAL_I2C_Init+0x300>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10e      	bne.n	8002a5c <HAL_I2C_Init+0x2e0>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1e58      	subs	r0, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	440b      	add	r3, r1
 8002a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5a:	e00f      	b.n	8002a7c <HAL_I2C_Init+0x300>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1e58      	subs	r0, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	0099      	lsls	r1, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	6809      	ldr	r1, [r1, #0]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6911      	ldr	r1, [r2, #16]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68d2      	ldr	r2, [r2, #12]
 8002ab6:	4311      	orrs	r1, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop

08002b14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	4608      	mov	r0, r1
 8002b1e:	4611      	mov	r1, r2
 8002b20:	461a      	mov	r2, r3
 8002b22:	4603      	mov	r3, r0
 8002b24:	817b      	strh	r3, [r7, #10]
 8002b26:	460b      	mov	r3, r1
 8002b28:	813b      	strh	r3, [r7, #8]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b2e:	f7ff f9d7 	bl	8001ee0 <HAL_GetTick>
 8002b32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d007      	beq.n	8002b4a <HAL_I2C_Mem_Write+0x36>
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d004      	beq.n	8002b4a <HAL_I2C_Mem_Write+0x36>
 8002b40:	f640 11b9 	movw	r1, #2489	; 0x9b9
 8002b44:	4873      	ldr	r0, [pc, #460]	; (8002d14 <HAL_I2C_Mem_Write+0x200>)
 8002b46:	f7fe fa79 	bl	800103c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	f040 80d9 	bne.w	8002d0a <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2319      	movs	r3, #25
 8002b5e:	2201      	movs	r2, #1
 8002b60:	496d      	ldr	r1, [pc, #436]	; (8002d18 <HAL_I2C_Mem_Write+0x204>)
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 faa0 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e0cc      	b.n	8002d0c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_I2C_Mem_Write+0x6c>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e0c5      	b.n	8002d0c <HAL_I2C_Mem_Write+0x1f8>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d007      	beq.n	8002ba6 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2221      	movs	r2, #33	; 0x21
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2240      	movs	r2, #64	; 0x40
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a3a      	ldr	r2, [r7, #32]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4a4d      	ldr	r2, [pc, #308]	; (8002d1c <HAL_I2C_Mem_Write+0x208>)
 8002be6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002be8:	88f8      	ldrh	r0, [r7, #6]
 8002bea:	893a      	ldrh	r2, [r7, #8]
 8002bec:	8979      	ldrh	r1, [r7, #10]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f9bf 	bl	8002f7c <I2C_RequestMemoryWrite>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d052      	beq.n	8002caa <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e081      	b.n	8002d0c <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 fb21 	bl	8003254 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00d      	beq.n	8002c34 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d107      	bne.n	8002c30 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e06b      	b.n	8002d0c <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d11b      	bne.n	8002caa <HAL_I2C_Mem_Write+0x196>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d017      	beq.n	8002caa <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1aa      	bne.n	8002c08 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fb0d 	bl	80032d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00d      	beq.n	8002cde <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d107      	bne.n	8002cda <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e016      	b.n	8002d0c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e000      	b.n	8002d0c <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8002d0a:	2302      	movs	r3, #2
  }
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	080105dc 	.word	0x080105dc
 8002d18:	00100002 	.word	0x00100002
 8002d1c:	ffff0000 	.word	0xffff0000

08002d20 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d30:	f7ff f8d6 	bl	8001ee0 <HAL_GetTick>
 8002d34:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	f040 8111 	bne.w	8002f6a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2319      	movs	r3, #25
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4988      	ldr	r1, [pc, #544]	; (8002f74 <HAL_I2C_IsDeviceReady+0x254>)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f9a8 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e104      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_I2C_IsDeviceReady+0x50>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e0fd      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d007      	beq.n	8002d96 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2224      	movs	r2, #36	; 0x24
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a70      	ldr	r2, [pc, #448]	; (8002f78 <HAL_I2C_IsDeviceReady+0x258>)
 8002db8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f966 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00d      	beq.n	8002dfe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df0:	d103      	bne.n	8002dfa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0b6      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e0c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7ff f867 	bl	8001ee0 <HAL_GetTick>
 8002e12:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	bf0c      	ite	eq
 8002e22:	2301      	moveq	r3, #1
 8002e24:	2300      	movne	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e38:	bf0c      	ite	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	2300      	movne	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e42:	e025      	b.n	8002e90 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e44:	f7ff f84c 	bl	8001ee0 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d302      	bcc.n	8002e5a <HAL_I2C_IsDeviceReady+0x13a>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	22a0      	movs	r2, #160	; 0xa0
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2ba0      	cmp	r3, #160	; 0xa0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_I2C_IsDeviceReady+0x188>
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <HAL_I2C_IsDeviceReady+0x188>
 8002ea2:	7dbb      	ldrb	r3, [r7, #22]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0cd      	beq.n	8002e44 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d129      	bne.n	8002f12 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2319      	movs	r3, #25
 8002eea:	2201      	movs	r2, #1
 8002eec:	4921      	ldr	r1, [pc, #132]	; (8002f74 <HAL_I2C_IsDeviceReady+0x254>)
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f8da 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e036      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e02c      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f20:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f2a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2319      	movs	r3, #25
 8002f32:	2201      	movs	r2, #1
 8002f34:	490f      	ldr	r1, [pc, #60]	; (8002f74 <HAL_I2C_IsDeviceReady+0x254>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f8b6 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e012      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	f4ff af32 	bcc.w	8002dba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3720      	adds	r7, #32
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	00100002 	.word	0x00100002
 8002f78:	ffff0000 	.word	0xffff0000

08002f7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	4608      	mov	r0, r1
 8002f86:	4611      	mov	r1, r2
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	817b      	strh	r3, [r7, #10]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	813b      	strh	r3, [r7, #8]
 8002f92:	4613      	mov	r3, r2
 8002f94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f878 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00d      	beq.n	8002fda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fcc:	d103      	bne.n	8002fd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e05f      	b.n	800309a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fda:	897b      	ldrh	r3, [r7, #10]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fe8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	6a3a      	ldr	r2, [r7, #32]
 8002fee:	492d      	ldr	r1, [pc, #180]	; (80030a4 <I2C_RequestMemoryWrite+0x128>)
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f8b0 	bl	8003156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e04c      	b.n	800309a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003018:	6a39      	ldr	r1, [r7, #32]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f91a 	bl	8003254 <I2C_WaitOnTXEFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00d      	beq.n	8003042 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	2b04      	cmp	r3, #4
 800302c:	d107      	bne.n	800303e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e02b      	b.n	800309a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d105      	bne.n	8003054 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003048:	893b      	ldrh	r3, [r7, #8]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	611a      	str	r2, [r3, #16]
 8003052:	e021      	b.n	8003098 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003054:	893b      	ldrh	r3, [r7, #8]
 8003056:	0a1b      	lsrs	r3, r3, #8
 8003058:	b29b      	uxth	r3, r3
 800305a:	b2da      	uxtb	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003064:	6a39      	ldr	r1, [r7, #32]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f8f4 	bl	8003254 <I2C_WaitOnTXEFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00d      	beq.n	800308e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	2b04      	cmp	r3, #4
 8003078:	d107      	bne.n	800308a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003088:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e005      	b.n	800309a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800308e:	893b      	ldrh	r3, [r7, #8]
 8003090:	b2da      	uxtb	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	00010002 	.word	0x00010002

080030a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	4613      	mov	r3, r2
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b8:	e025      	b.n	8003106 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d021      	beq.n	8003106 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7fe ff0d 	bl	8001ee0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d116      	bne.n	8003106 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e023      	b.n	800314e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d10d      	bne.n	800312c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4013      	ands	r3, r2
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	e00c      	b.n	8003146 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	43da      	mvns	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	429a      	cmp	r2, r3
 800314a:	d0b6      	beq.n	80030ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003164:	e051      	b.n	800320a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003174:	d123      	bne.n	80031be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003184:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800318e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f043 0204 	orr.w	r2, r3, #4
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e046      	b.n	800324c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d021      	beq.n	800320a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c6:	f7fe fe8b 	bl	8001ee0 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d302      	bcc.n	80031dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d116      	bne.n	800320a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e020      	b.n	800324c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	d10c      	bne.n	800322e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	43da      	mvns	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4013      	ands	r3, r2
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	e00b      	b.n	8003246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	43da      	mvns	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d18d      	bne.n	8003166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003260:	e02d      	b.n	80032be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f878 	bl	8003358 <I2C_IsAcknowledgeFailed>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e02d      	b.n	80032ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d021      	beq.n	80032be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327a:	f7fe fe31 	bl	8001ee0 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	429a      	cmp	r2, r3
 8003288:	d302      	bcc.n	8003290 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d116      	bne.n	80032be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f043 0220 	orr.w	r2, r3, #32
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e007      	b.n	80032ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c8:	2b80      	cmp	r3, #128	; 0x80
 80032ca:	d1ca      	bne.n	8003262 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032e2:	e02d      	b.n	8003340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f837 	bl	8003358 <I2C_IsAcknowledgeFailed>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e02d      	b.n	8003350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fa:	d021      	beq.n	8003340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fc:	f7fe fdf0 	bl	8001ee0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	429a      	cmp	r2, r3
 800330a:	d302      	bcc.n	8003312 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f043 0220 	orr.w	r2, r3, #32
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e007      	b.n	8003350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b04      	cmp	r3, #4
 800334c:	d1ca      	bne.n	80032e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336e:	d11b      	bne.n	80033a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003378:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f043 0204 	orr.w	r2, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ba:	b08f      	sub	sp, #60	; 0x3c
 80033bc:	af0a      	add	r7, sp, #40	; 0x28
 80033be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e118      	b.n	80035fc <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033d2:	d003      	beq.n	80033dc <HAL_PCD_Init+0x24>
 80033d4:	2187      	movs	r1, #135	; 0x87
 80033d6:	488b      	ldr	r0, [pc, #556]	; (8003604 <HAL_PCD_Init+0x24c>)
 80033d8:	f7fd fe30 	bl	800103c <assert_failed>

  USBx = hpcd->Instance;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f00c f830 	bl	800f45c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2203      	movs	r2, #3
 8003400:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f005 fae9 	bl	80089f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	687e      	ldr	r6, [r7, #4]
 8003428:	466d      	mov	r5, sp
 800342a:	f106 0410 	add.w	r4, r6, #16
 800342e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003436:	e894 0003 	ldmia.w	r4, {r0, r1}
 800343a:	e885 0003 	stmia.w	r5, {r0, r1}
 800343e:	1d33      	adds	r3, r6, #4
 8003440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003442:	6838      	ldr	r0, [r7, #0]
 8003444:	f005 f9c0 	bl	80087c8 <USB_CoreInit>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0d0      	b.n	80035fc <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f005 fad7 	bl	8008a14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	e04a      	b.n	8003502 <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	333d      	adds	r3, #61	; 0x3d
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	333c      	adds	r3, #60	; 0x3c
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	b298      	uxth	r0, r3
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3344      	adds	r3, #68	; 0x44
 80034a8:	4602      	mov	r2, r0
 80034aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3340      	adds	r3, #64	; 0x40
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3348      	adds	r3, #72	; 0x48
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	334c      	adds	r3, #76	; 0x4c
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3354      	adds	r3, #84	; 0x54
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	3301      	adds	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	7bfa      	ldrb	r2, [r7, #15]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d3af      	bcc.n	800346c <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	e044      	b.n	800359c <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	3301      	adds	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d3b5      	bcc.n	8003512 <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	687e      	ldr	r6, [r7, #4]
 80035ae:	466d      	mov	r5, sp
 80035b0:	f106 0410 	add.w	r4, r6, #16
 80035b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80035c4:	1d33      	adds	r3, r6, #4
 80035c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c8:	6838      	ldr	r0, [r7, #0]
 80035ca:	f005 fa6f 	bl	8008aac <USB_DevInit>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e00d      	b.n	80035fc <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f006 fbbe 	bl	8009d76 <USB_DevDisconnect>

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003604:	08010614 	.word	0x08010614

08003608 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_PCD_Start+0x1c>
 8003620:	2302      	movs	r3, #2
 8003622:	e020      	b.n	8003666 <HAL_PCD_Start+0x5e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	2b01      	cmp	r3, #1
 8003632:	d109      	bne.n	8003648 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003638:	2b01      	cmp	r3, #1
 800363a:	d005      	beq.n	8003648 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f005 f9bf 	bl	80089d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f006 fb6c 	bl	8009d34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800366e:	b590      	push	{r4, r7, lr}
 8003670:	b08d      	sub	sp, #52	; 0x34
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f006 fc2a 	bl	8009ede <USB_GetMode>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	f040 848a 	bne.w	8003fa6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f006 fb8e 	bl	8009db8 <USB_ReadInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8480 	beq.w	8003fa4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	0a1b      	lsrs	r3, r3, #8
 80036ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f006 fb7b 	bl	8009db8 <USB_ReadInterrupts>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d107      	bne.n	80036dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f002 0202 	and.w	r2, r2, #2
 80036da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f006 fb69 	bl	8009db8 <USB_ReadInterrupts>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b10      	cmp	r3, #16
 80036ee:	d161      	bne.n	80037b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0210 	bic.w	r2, r2, #16
 80036fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f003 020f 	and.w	r2, r3, #15
 800370c:	4613      	mov	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	3304      	adds	r3, #4
 800371e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	0c5b      	lsrs	r3, r3, #17
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	2b02      	cmp	r3, #2
 800372a:	d124      	bne.n	8003776 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d035      	beq.n	80037a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003746:	b29b      	uxth	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	6a38      	ldr	r0, [r7, #32]
 800374c:	f006 f9a0 	bl	8009a90 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800375c:	441a      	add	r2, r3
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800376e:	441a      	add	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	621a      	str	r2, [r3, #32]
 8003774:	e016      	b.n	80037a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	0c5b      	lsrs	r3, r3, #17
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	2b06      	cmp	r3, #6
 8003780:	d110      	bne.n	80037a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003788:	2208      	movs	r2, #8
 800378a:	4619      	mov	r1, r3
 800378c:	6a38      	ldr	r0, [r7, #32]
 800378e:	f006 f97f 	bl	8009a90 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	6a1a      	ldr	r2, [r3, #32]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800379e:	441a      	add	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0210 	orr.w	r2, r2, #16
 80037b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f006 fafd 	bl	8009db8 <USB_ReadInterrupts>
 80037be:	4603      	mov	r3, r0
 80037c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037c8:	f040 80a7 	bne.w	800391a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f006 fb02 	bl	8009dde <USB_ReadDevAllOutEpInterrupt>
 80037da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80037dc:	e099      	b.n	8003912 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 808e 	beq.w	8003906 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f006 fb26 	bl	8009e46 <USB_ReadDevOutEPInterrupt>
 80037fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00c      	beq.n	8003820 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003812:	461a      	mov	r2, r3
 8003814:	2301      	movs	r3, #1
 8003816:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fec2 	bl	80045a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003836:	461a      	mov	r2, r3
 8003838:	2308      	movs	r3, #8
 800383a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800383c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 ff98 	bl	8004774 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385a:	461a      	mov	r2, r3
 800385c:	2310      	movs	r3, #16
 800385e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d030      	beq.n	80038cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b80      	cmp	r3, #128	; 0x80
 8003874:	d109      	bne.n	800388a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003884:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003888:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800388a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4413      	add	r3, r2
 800389c:	3304      	adds	r3, #4
 800389e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	78db      	ldrb	r3, [r3, #3]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d108      	bne.n	80038ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2200      	movs	r2, #0
 80038ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f00b fecd 	bl	800f654 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c6:	461a      	mov	r2, r3
 80038c8:	2302      	movs	r3, #2
 80038ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e2:	461a      	mov	r2, r3
 80038e4:	2320      	movs	r3, #32
 80038e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fe:	461a      	mov	r2, r3
 8003900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003904:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	3301      	adds	r3, #1
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	085b      	lsrs	r3, r3, #1
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	f47f af62 	bne.w	80037de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f006 fa4a 	bl	8009db8 <USB_ReadInterrupts>
 8003924:	4603      	mov	r3, r0
 8003926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800392e:	f040 80db 	bne.w	8003ae8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f006 fa6b 	bl	8009e12 <USB_ReadDevAllInEpInterrupt>
 800393c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003942:	e0cd      	b.n	8003ae0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80c2 	beq.w	8003ad4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f006 fa91 	bl	8009e82 <USB_ReadDevInEPInterrupt>
 8003960:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d057      	beq.n	8003a1c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	2201      	movs	r2, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	43db      	mvns	r3, r3
 8003986:	69f9      	ldr	r1, [r7, #28]
 8003988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800398c:	4013      	ands	r3, r2
 800398e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399c:	461a      	mov	r2, r3
 800399e:	2301      	movs	r3, #1
 80039a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d132      	bne.n	8003a10 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	334c      	adds	r3, #76	; 0x4c
 80039ba:	6819      	ldr	r1, [r3, #0]
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4403      	add	r3, r0
 80039ca:	3348      	adds	r3, #72	; 0x48
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4419      	add	r1, r3
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4403      	add	r3, r0
 80039de:	334c      	adds	r3, #76	; 0x4c
 80039e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d113      	bne.n	8003a10 <HAL_PCD_IRQHandler+0x3a2>
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	3354      	adds	r3, #84	; 0x54
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d108      	bne.n	8003a10 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	f006 fa98 	bl	8009f40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f00b fda1 	bl	800f55e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a32:	461a      	mov	r2, r3
 8003a34:	2308      	movs	r3, #8
 8003a36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2310      	movs	r3, #16
 8003a52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2340      	movs	r3, #64	; 0x40
 8003a6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d023      	beq.n	8003ac2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a7c:	6a38      	ldr	r0, [r7, #32]
 8003a7e:	f005 f979 	bl	8008d74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	3338      	adds	r3, #56	; 0x38
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	3304      	adds	r3, #4
 8003a94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	78db      	ldrb	r3, [r3, #3]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d108      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f00b fde4 	bl	800f678 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abc:	461a      	mov	r2, r3
 8003abe:	2302      	movs	r3, #2
 8003ac0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fcdb 	bl	800448a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f47f af2e 	bne.w	8003944 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f006 f963 	bl	8009db8 <USB_ReadInterrupts>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003af8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003afc:	d122      	bne.n	8003b44 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d108      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b24:	2100      	movs	r1, #0
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fec2 	bl	80048b0 <HAL_PCDEx_LPM_Callback>
 8003b2c:	e002      	b.n	8003b34 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f00b fd82 	bl	800f638 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f006 f935 	bl	8009db8 <USB_ReadInterrupts>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b58:	d112      	bne.n	8003b80 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d102      	bne.n	8003b70 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f00b fd3e 	bl	800f5ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b7e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f006 f917 	bl	8009db8 <USB_ReadInterrupts>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b94:	f040 80b7 	bne.w	8003d06 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2110      	movs	r1, #16
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f005 f8de 	bl	8008d74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bbc:	e046      	b.n	8003c4c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bd0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be2:	0151      	lsls	r1, r2, #5
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	440a      	add	r2, r1
 8003be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bf0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c04:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c16:	0151      	lsls	r1, r2, #5
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	440a      	add	r2, r1
 8003c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c36:	0151      	lsls	r1, r2, #5
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	440a      	add	r2, r1
 8003c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c44:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	3301      	adds	r3, #1
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d3b3      	bcc.n	8003bbe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c64:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c68:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d016      	beq.n	8003ca0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c82:	f043 030b 	orr.w	r3, r3, #11
 8003c86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c98:	f043 030b 	orr.w	r3, r3, #11
 8003c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c9e:	e015      	b.n	8003ccc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cb2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003cb6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc6:	f043 030b 	orr.w	r3, r3, #11
 8003cca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cde:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f006 f925 	bl	8009f40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f006 f854 	bl	8009db8 <USB_ReadInterrupts>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1a:	d124      	bne.n	8003d66 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f006 f8ea 	bl	8009efa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f005 f89f 	bl	8008e6e <USB_GetDevSpeed>
 8003d30:	4603      	mov	r3, r0
 8003d32:	461a      	mov	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681c      	ldr	r4, [r3, #0]
 8003d3c:	f001 fb40 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 8003d40:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	f004 fd9e 	bl	800888c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f00b fc2c 	bl	800f5ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f006 f824 	bl	8009db8 <USB_ReadInterrupts>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d10a      	bne.n	8003d90 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f00b fc09 	bl	800f592 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f002 0208 	and.w	r2, r2, #8
 8003d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f006 f80f 	bl	8009db8 <USB_ReadInterrupts>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da0:	2b80      	cmp	r3, #128	; 0x80
 8003da2:	d122      	bne.n	8003dea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003db0:	2301      	movs	r3, #1
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	e014      	b.n	8003de0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d105      	bne.n	8003dda <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fb27 	bl	8004428 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	3301      	adds	r3, #1
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d3e5      	bcc.n	8003db6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f005 ffe2 	bl	8009db8 <USB_ReadInterrupts>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dfe:	d13b      	bne.n	8003e78 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e00:	2301      	movs	r3, #1
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
 8003e04:	e02b      	b.n	8003e5e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	3340      	adds	r3, #64	; 0x40
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d115      	bne.n	8003e58 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	da12      	bge.n	8003e58 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e36:	4613      	mov	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	333f      	adds	r3, #63	; 0x3f
 8003e42:	2201      	movs	r2, #1
 8003e44:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fae8 	bl	8004428 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d3ce      	bcc.n	8003e06 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f005 ff9b 	bl	8009db8 <USB_ReadInterrupts>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e8c:	d155      	bne.n	8003f3a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e8e:	2301      	movs	r3, #1
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
 8003e92:	e045      	b.n	8003f20 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d12e      	bne.n	8003f1a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ebc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	da2b      	bge.n	8003f1a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003ece:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d121      	bne.n	8003f1a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ee8:	2201      	movs	r2, #1
 8003eea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f16:	6053      	str	r3, [r2, #4]
            break;
 8003f18:	e007      	b.n	8003f2a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d3b4      	bcc.n	8003e94 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f005 ff3a 	bl	8009db8 <USB_ReadInterrupts>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4e:	d10a      	bne.n	8003f66 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f00b fba3 	bl	800f69c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f005 ff24 	bl	8009db8 <USB_ReadInterrupts>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d115      	bne.n	8003fa6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f00b fb93 	bl	800f6b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	e000      	b.n	8003fa6 <HAL_PCD_IRQHandler+0x938>
      return;
 8003fa4:	bf00      	nop
    }
  }
}
 8003fa6:	3734      	adds	r7, #52	; 0x34
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd90      	pop	{r4, r7, pc}

08003fac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_PCD_SetAddress+0x1a>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e013      	b.n	8003fee <HAL_PCD_SetAddress+0x42>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f005 fe82 	bl	8009ce8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	4608      	mov	r0, r1
 8004000:	4611      	mov	r1, r2
 8004002:	461a      	mov	r2, r3
 8004004:	4603      	mov	r3, r0
 8004006:	70fb      	strb	r3, [r7, #3]
 8004008:	460b      	mov	r3, r1
 800400a:	803b      	strh	r3, [r7, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004018:	2b00      	cmp	r3, #0
 800401a:	da0f      	bge.n	800403c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	3338      	adds	r3, #56	; 0x38
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4413      	add	r3, r2
 8004030:	3304      	adds	r3, #4
 8004032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	705a      	strb	r2, [r3, #1]
 800403a:	e00f      	b.n	800405c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	f003 020f 	and.w	r2, r3, #15
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	3304      	adds	r3, #4
 8004054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004068:	883a      	ldrh	r2, [r7, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	78ba      	ldrb	r2, [r7, #2]
 8004072:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	785b      	ldrb	r3, [r3, #1]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004086:	78bb      	ldrb	r3, [r7, #2]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d102      	bne.n	8004092 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_PCD_EP_Open+0xaa>
 800409c:	2302      	movs	r3, #2
 800409e:	e00e      	b.n	80040be <HAL_PCD_EP_Open+0xc8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68f9      	ldr	r1, [r7, #12]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f004 ff02 	bl	8008eb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80040bc:	7afb      	ldrb	r3, [r7, #11]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	460b      	mov	r3, r1
 80040d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da0f      	bge.n	80040fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	f003 020f 	and.w	r2, r3, #15
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	3338      	adds	r3, #56	; 0x38
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	3304      	adds	r3, #4
 80040f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	705a      	strb	r2, [r3, #1]
 80040f8:	e00f      	b.n	800411a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	f003 020f 	and.w	r2, r3, #15
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4413      	add	r3, r2
 8004110:	3304      	adds	r3, #4
 8004112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	b2da      	uxtb	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_PCD_EP_Close+0x6e>
 8004130:	2302      	movs	r3, #2
 8004132:	e00e      	b.n	8004152 <HAL_PCD_EP_Close+0x8c>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68f9      	ldr	r1, [r7, #12]
 8004142:	4618      	mov	r0, r3
 8004144:	f004 ff40 	bl	8008fc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b086      	sub	sp, #24
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	460b      	mov	r3, r1
 8004168:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800416a:	7afb      	ldrb	r3, [r7, #11]
 800416c:	f003 020f 	and.w	r2, r3, #15
 8004170:	4613      	mov	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	3304      	adds	r3, #4
 8004182:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2200      	movs	r2, #0
 8004194:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2200      	movs	r2, #0
 800419a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800419c:	7afb      	ldrb	r3, [r7, #11]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d102      	bne.n	80041b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041b6:	7afb      	ldrb	r3, [r7, #11]
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	6979      	ldr	r1, [r7, #20]
 80041ce:	f005 fa1f 	bl	8009610 <USB_EP0StartXfer>
 80041d2:	e008      	b.n	80041e6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	6979      	ldr	r1, [r7, #20]
 80041e2:	f004 ffcd 	bl	8009180 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	f003 020f 	and.w	r2, r3, #15
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004212:	681b      	ldr	r3, [r3, #0]
}
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	607a      	str	r2, [r7, #4]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	460b      	mov	r3, r1
 800422e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004230:	7afb      	ldrb	r3, [r7, #11]
 8004232:	f003 020f 	and.w	r2, r3, #15
 8004236:	4613      	mov	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	3338      	adds	r3, #56	; 0x38
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	3304      	adds	r3, #4
 8004246:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2200      	movs	r2, #0
 8004258:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2201      	movs	r2, #1
 800425e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004260:	7afb      	ldrb	r3, [r7, #11]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	b2da      	uxtb	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d102      	bne.n	800427a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800427a:	7afb      	ldrb	r3, [r7, #11]
 800427c:	f003 030f 	and.w	r3, r3, #15
 8004280:	2b00      	cmp	r3, #0
 8004282:	d109      	bne.n	8004298 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	6979      	ldr	r1, [r7, #20]
 8004292:	f005 f9bd 	bl	8009610 <USB_EP0StartXfer>
 8004296:	e008      	b.n	80042aa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	6979      	ldr	r1, [r7, #20]
 80042a6:	f004 ff6b 	bl	8009180 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	f003 020f 	and.w	r2, r3, #15
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d901      	bls.n	80042d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e050      	b.n	8004374 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	da0f      	bge.n	80042fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	f003 020f 	and.w	r2, r3, #15
 80042e0:	4613      	mov	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	3338      	adds	r3, #56	; 0x38
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	3304      	adds	r3, #4
 80042f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	705a      	strb	r2, [r3, #1]
 80042f8:	e00d      	b.n	8004316 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	4413      	add	r3, r2
 800430c:	3304      	adds	r3, #4
 800430e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	b2da      	uxtb	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_PCD_EP_SetStall+0x82>
 8004332:	2302      	movs	r3, #2
 8004334:	e01e      	b.n	8004374 <HAL_PCD_EP_SetStall+0xc0>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68f9      	ldr	r1, [r7, #12]
 8004344:	4618      	mov	r0, r3
 8004346:	f005 fbfb 	bl	8009b40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	f003 030f 	and.w	r3, r3, #15
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	b2d9      	uxtb	r1, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004364:	461a      	mov	r2, r3
 8004366:	f005 fdeb 	bl	8009f40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	f003 020f 	and.w	r2, r3, #15
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d901      	bls.n	800439a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e042      	b.n	8004420 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800439a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da0f      	bge.n	80043c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 020f 	and.w	r2, r3, #15
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	3338      	adds	r3, #56	; 0x38
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	3304      	adds	r3, #4
 80043b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	705a      	strb	r2, [r3, #1]
 80043c0:	e00f      	b.n	80043e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	f003 020f 	and.w	r2, r3, #15
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	4413      	add	r3, r2
 80043d8:	3304      	adds	r3, #4
 80043da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_PCD_EP_ClrStall+0x86>
 80043fe:	2302      	movs	r3, #2
 8004400:	e00e      	b.n	8004420 <HAL_PCD_EP_ClrStall+0xa4>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	4618      	mov	r0, r3
 8004412:	f005 fc03 	bl	8009c1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004438:	2b00      	cmp	r3, #0
 800443a:	da0c      	bge.n	8004456 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	f003 020f 	and.w	r2, r3, #15
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	3338      	adds	r3, #56	; 0x38
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4413      	add	r3, r2
 8004450:	3304      	adds	r3, #4
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e00c      	b.n	8004470 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	f003 020f 	and.w	r2, r3, #15
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	4413      	add	r3, r2
 800446c:	3304      	adds	r3, #4
 800446e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68f9      	ldr	r1, [r7, #12]
 8004476:	4618      	mov	r0, r3
 8004478:	f005 fa22 	bl	80098c0 <USB_EPStopXfer>
 800447c:	4603      	mov	r3, r0
 800447e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004480:	7afb      	ldrb	r3, [r7, #11]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b08a      	sub	sp, #40	; 0x28
 800448e:	af02      	add	r7, sp, #8
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	3338      	adds	r3, #56	; 0x38
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	3304      	adds	r3, #4
 80044b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a1a      	ldr	r2, [r3, #32]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d901      	bls.n	80044c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e06c      	b.n	800459c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d902      	bls.n	80044de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3303      	adds	r3, #3
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044e6:	e02b      	b.n	8004540 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	699a      	ldr	r2, [r3, #24]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d902      	bls.n	8004504 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	3303      	adds	r3, #3
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6919      	ldr	r1, [r3, #16]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	b2da      	uxtb	r2, r3
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800451c:	b2db      	uxtb	r3, r3
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	4603      	mov	r3, r0
 8004522:	6978      	ldr	r0, [r7, #20]
 8004524:	f005 fa76 	bl	8009a14 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	441a      	add	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	441a      	add	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	b29b      	uxth	r3, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	429a      	cmp	r2, r3
 8004554:	d809      	bhi.n	800456a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a1a      	ldr	r2, [r3, #32]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800455e:	429a      	cmp	r2, r3
 8004560:	d203      	bcs.n	800456a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1be      	bne.n	80044e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	429a      	cmp	r2, r3
 8004574:	d811      	bhi.n	800459a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	2201      	movs	r2, #1
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	43db      	mvns	r3, r3
 8004590:	6939      	ldr	r1, [r7, #16]
 8004592:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004596:	4013      	ands	r3, r2
 8004598:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	333c      	adds	r3, #60	; 0x3c
 80045bc:	3304      	adds	r3, #4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d17b      	bne.n	80046d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d015      	beq.n	8004610 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	4a61      	ldr	r2, [pc, #388]	; (800476c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	f240 80b9 	bls.w	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80b3 	beq.w	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004606:	461a      	mov	r2, r3
 8004608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460c:	6093      	str	r3, [r2, #8]
 800460e:	e0a7      	b.n	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	461a      	mov	r2, r3
 8004628:	2320      	movs	r3, #32
 800462a:	6093      	str	r3, [r2, #8]
 800462c:	e098      	b.n	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004634:	2b00      	cmp	r3, #0
 8004636:	f040 8093 	bne.w	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	4a4b      	ldr	r2, [pc, #300]	; (800476c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d90f      	bls.n	8004662 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004658:	461a      	mov	r2, r3
 800465a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800465e:	6093      	str	r3, [r2, #8]
 8004660:	e07e      	b.n	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	3304      	adds	r3, #4
 8004676:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	0159      	lsls	r1, r3, #5
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	440b      	add	r3, r1
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468e:	1ad2      	subs	r2, r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d114      	bne.n	80046c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046ac:	461a      	mov	r2, r3
 80046ae:	2101      	movs	r1, #1
 80046b0:	f005 fc46 	bl	8009f40 <USB_EP0_OutStart>
 80046b4:	e006      	b.n	80046c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	441a      	add	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f00a ff2c 	bl	800f528 <HAL_PCD_DataOutStageCallback>
 80046d0:	e046      	b.n	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	4a26      	ldr	r2, [pc, #152]	; (8004770 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d124      	bne.n	8004724 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f0:	461a      	mov	r2, r3
 80046f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f6:	6093      	str	r3, [r2, #8]
 80046f8:	e032      	b.n	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004710:	461a      	mov	r2, r3
 8004712:	2320      	movs	r3, #32
 8004714:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	4619      	mov	r1, r3
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f00a ff03 	bl	800f528 <HAL_PCD_DataOutStageCallback>
 8004722:	e01d      	b.n	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d114      	bne.n	8004754 <PCD_EP_OutXfrComplete_int+0x1b0>
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800474c:	461a      	mov	r2, r3
 800474e:	2100      	movs	r1, #0
 8004750:	f005 fbf6 	bl	8009f40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	4619      	mov	r1, r3
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f00a fee4 	bl	800f528 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3720      	adds	r7, #32
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	4f54300a 	.word	0x4f54300a
 8004770:	4f54310a 	.word	0x4f54310a

08004774 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	333c      	adds	r3, #60	; 0x3c
 800478c:	3304      	adds	r3, #4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4a15      	ldr	r2, [pc, #84]	; (80047fc <PCD_EP_OutSetupPacket_int+0x88>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d90e      	bls.n	80047c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c0:	461a      	mov	r2, r3
 80047c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f00a fe9b 	bl	800f504 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <PCD_EP_OutSetupPacket_int+0x88>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d90c      	bls.n	80047f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d108      	bne.n	80047f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047e8:	461a      	mov	r2, r3
 80047ea:	2101      	movs	r1, #1
 80047ec:	f005 fba8 	bl	8009f40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	4f54300a 	.word	0x4f54300a

08004800 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
 800480c:	4613      	mov	r3, r2
 800480e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d107      	bne.n	800482e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800481e:	883b      	ldrh	r3, [r7, #0]
 8004820:	0419      	lsls	r1, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	430a      	orrs	r2, r1
 800482a:	629a      	str	r2, [r3, #40]	; 0x28
 800482c:	e028      	b.n	8004880 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	0c1b      	lsrs	r3, r3, #16
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	4413      	add	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800483c:	2300      	movs	r3, #0
 800483e:	73fb      	strb	r3, [r7, #15]
 8004840:	e00d      	b.n	800485e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	3340      	adds	r3, #64	; 0x40
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	4413      	add	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	3301      	adds	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
 800485e:	7bfa      	ldrb	r2, [r7, #15]
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	3b01      	subs	r3, #1
 8004864:	429a      	cmp	r2, r3
 8004866:	d3ec      	bcc.n	8004842 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004868:	883b      	ldrh	r3, [r7, #0]
 800486a:	0418      	lsls	r0, r3, #16
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6819      	ldr	r1, [r3, #0]
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	3b01      	subs	r3, #1
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	4302      	orrs	r2, r0
 8004878:	3340      	adds	r3, #64	; 0x40
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	460b      	mov	r3, r1
 8004898:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e314      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	d903      	bls.n	80048ea <HAL_RCC_OscConfig+0x22>
 80048e2:	21e6      	movs	r1, #230	; 0xe6
 80048e4:	4897      	ldr	r0, [pc, #604]	; (8004b44 <HAL_RCC_OscConfig+0x27c>)
 80048e6:	f7fc fba9 	bl	800103c <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 8088 	beq.w	8004a08 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00d      	beq.n	800491c <HAL_RCC_OscConfig+0x54>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004908:	d008      	beq.n	800491c <HAL_RCC_OscConfig+0x54>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004912:	d003      	beq.n	800491c <HAL_RCC_OscConfig+0x54>
 8004914:	21eb      	movs	r1, #235	; 0xeb
 8004916:	488b      	ldr	r0, [pc, #556]	; (8004b44 <HAL_RCC_OscConfig+0x27c>)
 8004918:	f7fc fb90 	bl	800103c <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800491c:	4b8a      	ldr	r3, [pc, #552]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b04      	cmp	r3, #4
 8004926:	d00c      	beq.n	8004942 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004928:	4b87      	ldr	r3, [pc, #540]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004930:	2b08      	cmp	r3, #8
 8004932:	d112      	bne.n	800495a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004934:	4b84      	ldr	r3, [pc, #528]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004940:	d10b      	bne.n	800495a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004942:	4b81      	ldr	r3, [pc, #516]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d05b      	beq.n	8004a06 <HAL_RCC_OscConfig+0x13e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d157      	bne.n	8004a06 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e2d4      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004962:	d106      	bne.n	8004972 <HAL_RCC_OscConfig+0xaa>
 8004964:	4b78      	ldr	r3, [pc, #480]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a77      	ldr	r2, [pc, #476]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 800496a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	e01d      	b.n	80049ae <HAL_RCC_OscConfig+0xe6>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800497a:	d10c      	bne.n	8004996 <HAL_RCC_OscConfig+0xce>
 800497c:	4b72      	ldr	r3, [pc, #456]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a71      	ldr	r2, [pc, #452]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	4b6f      	ldr	r3, [pc, #444]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a6e      	ldr	r2, [pc, #440]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 800498e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	e00b      	b.n	80049ae <HAL_RCC_OscConfig+0xe6>
 8004996:	4b6c      	ldr	r3, [pc, #432]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a6b      	ldr	r2, [pc, #428]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 800499c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	4b69      	ldr	r3, [pc, #420]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a68      	ldr	r2, [pc, #416]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 80049a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d013      	beq.n	80049de <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b6:	f7fd fa93 	bl	8001ee0 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049be:	f7fd fa8f 	bl	8001ee0 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b64      	cmp	r3, #100	; 0x64
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e299      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d0:	4b5d      	ldr	r3, [pc, #372]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <HAL_RCC_OscConfig+0xf6>
 80049dc:	e014      	b.n	8004a08 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049de:	f7fd fa7f 	bl	8001ee0 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e6:	f7fd fa7b 	bl	8001ee0 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b64      	cmp	r3, #100	; 0x64
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e285      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f8:	4b53      	ldr	r3, [pc, #332]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f0      	bne.n	80049e6 <HAL_RCC_OscConfig+0x11e>
 8004a04:	e000      	b.n	8004a08 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d079      	beq.n	8004b08 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_RCC_OscConfig+0x166>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d004      	beq.n	8004a2e <HAL_RCC_OscConfig+0x166>
 8004a24:	f240 111d 	movw	r1, #285	; 0x11d
 8004a28:	4846      	ldr	r0, [pc, #280]	; (8004b44 <HAL_RCC_OscConfig+0x27c>)
 8004a2a:	f7fc fb07 	bl	800103c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b1f      	cmp	r3, #31
 8004a34:	d904      	bls.n	8004a40 <HAL_RCC_OscConfig+0x178>
 8004a36:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004a3a:	4842      	ldr	r0, [pc, #264]	; (8004b44 <HAL_RCC_OscConfig+0x27c>)
 8004a3c:	f7fc fafe 	bl	800103c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a40:	4b41      	ldr	r3, [pc, #260]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00b      	beq.n	8004a64 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a4c:	4b3e      	ldr	r3, [pc, #248]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d11c      	bne.n	8004a92 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a58:	4b3b      	ldr	r3, [pc, #236]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d116      	bne.n	8004a92 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a64:	4b38      	ldr	r3, [pc, #224]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_OscConfig+0x1b4>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e243      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7c:	4b32      	ldr	r3, [pc, #200]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	492f      	ldr	r1, [pc, #188]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a90:	e03a      	b.n	8004b08 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d020      	beq.n	8004adc <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a9a:	4b2c      	ldr	r3, [pc, #176]	; (8004b4c <HAL_RCC_OscConfig+0x284>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fd fa1e 	bl	8001ee0 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa8:	f7fd fa1a 	bl	8001ee0 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e224      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aba:	4b23      	ldr	r3, [pc, #140]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac6:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	491c      	ldr	r1, [pc, #112]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]
 8004ada:	e015      	b.n	8004b08 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004adc:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <HAL_RCC_OscConfig+0x284>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae2:	f7fd f9fd 	bl	8001ee0 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aea:	f7fd f9f9 	bl	8001ee0 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e203      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afc:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <HAL_RCC_OscConfig+0x280>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f0      	bne.n	8004aea <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d045      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_RCC_OscConfig+0x266>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d004      	beq.n	8004b2e <HAL_RCC_OscConfig+0x266>
 8004b24:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004b28:	4806      	ldr	r0, [pc, #24]	; (8004b44 <HAL_RCC_OscConfig+0x27c>)
 8004b2a:	f7fc fa87 	bl	800103c <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d01e      	beq.n	8004b74 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b36:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <HAL_RCC_OscConfig+0x288>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3c:	f7fd f9d0 	bl	8001ee0 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b42:	e010      	b.n	8004b66 <HAL_RCC_OscConfig+0x29e>
 8004b44:	0801064c 	.word	0x0801064c
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	42470000 	.word	0x42470000
 8004b50:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b54:	f7fd f9c4 	bl	8001ee0 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e1ce      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b66:	4b5e      	ldr	r3, [pc, #376]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x28c>
 8004b72:	e015      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b74:	4b5b      	ldr	r3, [pc, #364]	; (8004ce4 <HAL_RCC_OscConfig+0x41c>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b7a:	f7fd f9b1 	bl	8001ee0 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b82:	f7fd f9ad 	bl	8001ee0 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e1b7      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b94:	4b52      	ldr	r3, [pc, #328]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f0      	bne.n	8004b82 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80b0 	beq.w	8004d0e <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x30c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d008      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x30c>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b05      	cmp	r3, #5
 8004bc8:	d004      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x30c>
 8004bca:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004bce:	4846      	ldr	r0, [pc, #280]	; (8004ce8 <HAL_RCC_OscConfig+0x420>)
 8004bd0:	f7fc fa34 	bl	800103c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd4:	4b42      	ldr	r3, [pc, #264]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10f      	bne.n	8004c00 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be0:	2300      	movs	r3, #0
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	4b3e      	ldr	r3, [pc, #248]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	4a3d      	ldr	r2, [pc, #244]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf0:	4b3b      	ldr	r3, [pc, #236]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c00:	4b3a      	ldr	r3, [pc, #232]	; (8004cec <HAL_RCC_OscConfig+0x424>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d118      	bne.n	8004c3e <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c0c:	4b37      	ldr	r3, [pc, #220]	; (8004cec <HAL_RCC_OscConfig+0x424>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a36      	ldr	r2, [pc, #216]	; (8004cec <HAL_RCC_OscConfig+0x424>)
 8004c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c18:	f7fd f962 	bl	8001ee0 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c20:	f7fd f95e 	bl	8001ee0 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e168      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c32:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <HAL_RCC_OscConfig+0x424>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d106      	bne.n	8004c54 <HAL_RCC_OscConfig+0x38c>
 8004c46:	4b26      	ldr	r3, [pc, #152]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	4a25      	ldr	r2, [pc, #148]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	6713      	str	r3, [r2, #112]	; 0x70
 8004c52:	e01c      	b.n	8004c8e <HAL_RCC_OscConfig+0x3c6>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	d10c      	bne.n	8004c76 <HAL_RCC_OscConfig+0x3ae>
 8004c5c:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c60:	4a1f      	ldr	r2, [pc, #124]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004c62:	f043 0304 	orr.w	r3, r3, #4
 8004c66:	6713      	str	r3, [r2, #112]	; 0x70
 8004c68:	4b1d      	ldr	r3, [pc, #116]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	6713      	str	r3, [r2, #112]	; 0x70
 8004c74:	e00b      	b.n	8004c8e <HAL_RCC_OscConfig+0x3c6>
 8004c76:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	6713      	str	r3, [r2, #112]	; 0x70
 8004c82:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c86:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004c88:	f023 0304 	bic.w	r3, r3, #4
 8004c8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d015      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c96:	f7fd f923 	bl	8001ee0 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9c:	e00a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c9e:	f7fd f91f 	bl	8001ee0 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e127      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <HAL_RCC_OscConfig+0x418>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0ee      	beq.n	8004c9e <HAL_RCC_OscConfig+0x3d6>
 8004cc0:	e01c      	b.n	8004cfc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc2:	f7fd f90d 	bl	8001ee0 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cc8:	e012      	b.n	8004cf0 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cca:	f7fd f909 	bl	8001ee0 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d909      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e111      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	42470e80 	.word	0x42470e80
 8004ce8:	0801064c 	.word	0x0801064c
 8004cec:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf0:	4b86      	ldr	r3, [pc, #536]	; (8004f0c <HAL_RCC_OscConfig+0x644>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e6      	bne.n	8004cca <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cfc:	7dfb      	ldrb	r3, [r7, #23]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d105      	bne.n	8004d0e <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d02:	4b82      	ldr	r3, [pc, #520]	; (8004f0c <HAL_RCC_OscConfig+0x644>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	4a81      	ldr	r2, [pc, #516]	; (8004f0c <HAL_RCC_OscConfig+0x644>)
 8004d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00c      	beq.n	8004d30 <HAL_RCC_OscConfig+0x468>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d008      	beq.n	8004d30 <HAL_RCC_OscConfig+0x468>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d004      	beq.n	8004d30 <HAL_RCC_OscConfig+0x468>
 8004d26:	f240 11cd 	movw	r1, #461	; 0x1cd
 8004d2a:	4879      	ldr	r0, [pc, #484]	; (8004f10 <HAL_RCC_OscConfig+0x648>)
 8004d2c:	f7fc f986 	bl	800103c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80e4 	beq.w	8004f02 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d3a:	4b74      	ldr	r3, [pc, #464]	; (8004f0c <HAL_RCC_OscConfig+0x644>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	f000 80a5 	beq.w	8004e92 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	f040 8089 	bne.w	8004e64 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <HAL_RCC_OscConfig+0x4a6>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d62:	d004      	beq.n	8004d6e <HAL_RCC_OscConfig+0x4a6>
 8004d64:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004d68:	4869      	ldr	r0, [pc, #420]	; (8004f10 <HAL_RCC_OscConfig+0x648>)
 8004d6a:	f7fc f967 	bl	800103c <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	2b3f      	cmp	r3, #63	; 0x3f
 8004d74:	d904      	bls.n	8004d80 <HAL_RCC_OscConfig+0x4b8>
 8004d76:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004d7a:	4865      	ldr	r0, [pc, #404]	; (8004f10 <HAL_RCC_OscConfig+0x648>)
 8004d7c:	f7fc f95e 	bl	800103c <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	2b31      	cmp	r3, #49	; 0x31
 8004d86:	d904      	bls.n	8004d92 <HAL_RCC_OscConfig+0x4ca>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004d90:	d904      	bls.n	8004d9c <HAL_RCC_OscConfig+0x4d4>
 8004d92:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004d96:	485e      	ldr	r0, [pc, #376]	; (8004f10 <HAL_RCC_OscConfig+0x648>)
 8004d98:	f7fc f950 	bl	800103c <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d010      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x4fe>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d00c      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x4fe>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	2b06      	cmp	r3, #6
 8004db2:	d008      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x4fe>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d004      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x4fe>
 8004dbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004dc0:	4853      	ldr	r0, [pc, #332]	; (8004f10 <HAL_RCC_OscConfig+0x648>)
 8004dc2:	f7fc f93b 	bl	800103c <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d903      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x50e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	2b0f      	cmp	r3, #15
 8004dd4:	d904      	bls.n	8004de0 <HAL_RCC_OscConfig+0x518>
 8004dd6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004dda:	484d      	ldr	r0, [pc, #308]	; (8004f10 <HAL_RCC_OscConfig+0x648>)
 8004ddc:	f7fc f92e 	bl	800103c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de0:	4b4c      	ldr	r3, [pc, #304]	; (8004f14 <HAL_RCC_OscConfig+0x64c>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de6:	f7fd f87b 	bl	8001ee0 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dee:	f7fd f877 	bl	8001ee0 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e081      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e00:	4b42      	ldr	r3, [pc, #264]	; (8004f0c <HAL_RCC_OscConfig+0x644>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f0      	bne.n	8004dee <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	019b      	lsls	r3, r3, #6
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	3b01      	subs	r3, #1
 8004e26:	041b      	lsls	r3, r3, #16
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	061b      	lsls	r3, r3, #24
 8004e30:	4936      	ldr	r1, [pc, #216]	; (8004f0c <HAL_RCC_OscConfig+0x644>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e36:	4b37      	ldr	r3, [pc, #220]	; (8004f14 <HAL_RCC_OscConfig+0x64c>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fd f850 	bl	8001ee0 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e44:	f7fd f84c 	bl	8001ee0 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e056      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e56:	4b2d      	ldr	r3, [pc, #180]	; (8004f0c <HAL_RCC_OscConfig+0x644>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x57c>
 8004e62:	e04e      	b.n	8004f02 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e64:	4b2b      	ldr	r3, [pc, #172]	; (8004f14 <HAL_RCC_OscConfig+0x64c>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6a:	f7fd f839 	bl	8001ee0 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e72:	f7fd f835 	bl	8001ee0 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e03f      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e84:	4b21      	ldr	r3, [pc, #132]	; (8004f0c <HAL_RCC_OscConfig+0x644>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1f0      	bne.n	8004e72 <HAL_RCC_OscConfig+0x5aa>
 8004e90:	e037      	b.n	8004f02 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e032      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e9e:	4b1b      	ldr	r3, [pc, #108]	; (8004f0c <HAL_RCC_OscConfig+0x644>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d028      	beq.n	8004efe <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d121      	bne.n	8004efe <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d11a      	bne.n	8004efe <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ece:	4013      	ands	r3, r2
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ed4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d111      	bne.n	8004efe <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	085b      	lsrs	r3, r3, #1
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d107      	bne.n	8004efe <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d001      	beq.n	8004f02 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	0801064c 	.word	0x0801064c
 8004f14:	42470060 	.word	0x42470060

08004f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e174      	b.n	8005216 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x24>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b0f      	cmp	r3, #15
 8004f3a:	d904      	bls.n	8004f46 <HAL_RCC_ClockConfig+0x2e>
 8004f3c:	f240 215a 	movw	r1, #602	; 0x25a
 8004f40:	487b      	ldr	r0, [pc, #492]	; (8005130 <HAL_RCC_ClockConfig+0x218>)
 8004f42:	f7fc f87b 	bl	800103c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d019      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x68>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d016      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x68>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d013      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x68>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d010      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x68>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d00d      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x68>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x68>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b06      	cmp	r3, #6
 8004f6e:	d007      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x68>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2b07      	cmp	r3, #7
 8004f74:	d004      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x68>
 8004f76:	f240 215b 	movw	r1, #603	; 0x25b
 8004f7a:	486d      	ldr	r0, [pc, #436]	; (8005130 <HAL_RCC_ClockConfig+0x218>)
 8004f7c:	f7fc f85e 	bl	800103c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f80:	4b6c      	ldr	r3, [pc, #432]	; (8005134 <HAL_RCC_ClockConfig+0x21c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d90c      	bls.n	8004fa8 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8e:	4b69      	ldr	r3, [pc, #420]	; (8005134 <HAL_RCC_ClockConfig+0x21c>)
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f96:	4b67      	ldr	r3, [pc, #412]	; (8005134 <HAL_RCC_ClockConfig+0x21c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e136      	b.n	8005216 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d049      	beq.n	8005048 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fc0:	4b5d      	ldr	r3, [pc, #372]	; (8005138 <HAL_RCC_ClockConfig+0x220>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	4a5c      	ldr	r2, [pc, #368]	; (8005138 <HAL_RCC_ClockConfig+0x220>)
 8004fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd8:	4b57      	ldr	r3, [pc, #348]	; (8005138 <HAL_RCC_ClockConfig+0x220>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	4a56      	ldr	r2, [pc, #344]	; (8005138 <HAL_RCC_ClockConfig+0x220>)
 8004fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d024      	beq.n	8005036 <HAL_RCC_ClockConfig+0x11e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	d020      	beq.n	8005036 <HAL_RCC_ClockConfig+0x11e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b90      	cmp	r3, #144	; 0x90
 8004ffa:	d01c      	beq.n	8005036 <HAL_RCC_ClockConfig+0x11e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2ba0      	cmp	r3, #160	; 0xa0
 8005002:	d018      	beq.n	8005036 <HAL_RCC_ClockConfig+0x11e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2bb0      	cmp	r3, #176	; 0xb0
 800500a:	d014      	beq.n	8005036 <HAL_RCC_ClockConfig+0x11e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2bc0      	cmp	r3, #192	; 0xc0
 8005012:	d010      	beq.n	8005036 <HAL_RCC_ClockConfig+0x11e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2bd0      	cmp	r3, #208	; 0xd0
 800501a:	d00c      	beq.n	8005036 <HAL_RCC_ClockConfig+0x11e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	2be0      	cmp	r3, #224	; 0xe0
 8005022:	d008      	beq.n	8005036 <HAL_RCC_ClockConfig+0x11e>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2bf0      	cmp	r3, #240	; 0xf0
 800502a:	d004      	beq.n	8005036 <HAL_RCC_ClockConfig+0x11e>
 800502c:	f240 217e 	movw	r1, #638	; 0x27e
 8005030:	483f      	ldr	r0, [pc, #252]	; (8005130 <HAL_RCC_ClockConfig+0x218>)
 8005032:	f7fc f803 	bl	800103c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005036:	4b40      	ldr	r3, [pc, #256]	; (8005138 <HAL_RCC_ClockConfig+0x220>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	493d      	ldr	r1, [pc, #244]	; (8005138 <HAL_RCC_ClockConfig+0x220>)
 8005044:	4313      	orrs	r3, r2
 8005046:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d059      	beq.n	8005108 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d010      	beq.n	800507e <HAL_RCC_ClockConfig+0x166>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d00c      	beq.n	800507e <HAL_RCC_ClockConfig+0x166>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d008      	beq.n	800507e <HAL_RCC_ClockConfig+0x166>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d004      	beq.n	800507e <HAL_RCC_ClockConfig+0x166>
 8005074:	f240 2185 	movw	r1, #645	; 0x285
 8005078:	482d      	ldr	r0, [pc, #180]	; (8005130 <HAL_RCC_ClockConfig+0x218>)
 800507a:	f7fb ffdf 	bl	800103c <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d107      	bne.n	8005096 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005086:	4b2c      	ldr	r3, [pc, #176]	; (8005138 <HAL_RCC_ClockConfig+0x220>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d119      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e0bf      	b.n	8005216 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d003      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a6:	4b24      	ldr	r3, [pc, #144]	; (8005138 <HAL_RCC_ClockConfig+0x220>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e0af      	b.n	8005216 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b6:	4b20      	ldr	r3, [pc, #128]	; (8005138 <HAL_RCC_ClockConfig+0x220>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0a7      	b.n	8005216 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050c6:	4b1c      	ldr	r3, [pc, #112]	; (8005138 <HAL_RCC_ClockConfig+0x220>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f023 0203 	bic.w	r2, r3, #3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	4919      	ldr	r1, [pc, #100]	; (8005138 <HAL_RCC_ClockConfig+0x220>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050d8:	f7fc ff02 	bl	8001ee0 <HAL_GetTick>
 80050dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e0:	f7fc fefe 	bl	8001ee0 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e08f      	b.n	8005216 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f6:	4b10      	ldr	r3, [pc, #64]	; (8005138 <HAL_RCC_ClockConfig+0x220>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 020c 	and.w	r2, r3, #12
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	429a      	cmp	r2, r3
 8005106:	d1eb      	bne.n	80050e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005108:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <HAL_RCC_ClockConfig+0x21c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d212      	bcs.n	800513c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b07      	ldr	r3, [pc, #28]	; (8005134 <HAL_RCC_ClockConfig+0x21c>)
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <HAL_RCC_ClockConfig+0x21c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d007      	beq.n	800513c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e072      	b.n	8005216 <HAL_RCC_ClockConfig+0x2fe>
 8005130:	0801064c 	.word	0x0801064c
 8005134:	40023c00 	.word	0x40023c00
 8005138:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d025      	beq.n	8005194 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d018      	beq.n	8005182 <HAL_RCC_ClockConfig+0x26a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005158:	d013      	beq.n	8005182 <HAL_RCC_ClockConfig+0x26a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005162:	d00e      	beq.n	8005182 <HAL_RCC_ClockConfig+0x26a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800516c:	d009      	beq.n	8005182 <HAL_RCC_ClockConfig+0x26a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005176:	d004      	beq.n	8005182 <HAL_RCC_ClockConfig+0x26a>
 8005178:	f240 21c3 	movw	r1, #707	; 0x2c3
 800517c:	4828      	ldr	r0, [pc, #160]	; (8005220 <HAL_RCC_ClockConfig+0x308>)
 800517e:	f7fb ff5d 	bl	800103c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005182:	4b28      	ldr	r3, [pc, #160]	; (8005224 <HAL_RCC_ClockConfig+0x30c>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	4925      	ldr	r1, [pc, #148]	; (8005224 <HAL_RCC_ClockConfig+0x30c>)
 8005190:	4313      	orrs	r3, r2
 8005192:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d026      	beq.n	80051ee <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d018      	beq.n	80051da <HAL_RCC_ClockConfig+0x2c2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b0:	d013      	beq.n	80051da <HAL_RCC_ClockConfig+0x2c2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051ba:	d00e      	beq.n	80051da <HAL_RCC_ClockConfig+0x2c2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80051c4:	d009      	beq.n	80051da <HAL_RCC_ClockConfig+0x2c2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80051ce:	d004      	beq.n	80051da <HAL_RCC_ClockConfig+0x2c2>
 80051d0:	f240 21ca 	movw	r1, #714	; 0x2ca
 80051d4:	4812      	ldr	r0, [pc, #72]	; (8005220 <HAL_RCC_ClockConfig+0x308>)
 80051d6:	f7fb ff31 	bl	800103c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051da:	4b12      	ldr	r3, [pc, #72]	; (8005224 <HAL_RCC_ClockConfig+0x30c>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	490e      	ldr	r1, [pc, #56]	; (8005224 <HAL_RCC_ClockConfig+0x30c>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051ee:	f000 f821 	bl	8005234 <HAL_RCC_GetSysClockFreq>
 80051f2:	4602      	mov	r2, r0
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <HAL_RCC_ClockConfig+0x30c>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	490a      	ldr	r1, [pc, #40]	; (8005228 <HAL_RCC_ClockConfig+0x310>)
 8005200:	5ccb      	ldrb	r3, [r1, r3]
 8005202:	fa22 f303 	lsr.w	r3, r2, r3
 8005206:	4a09      	ldr	r2, [pc, #36]	; (800522c <HAL_RCC_ClockConfig+0x314>)
 8005208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800520a:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_RCC_ClockConfig+0x318>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f7fc fb1a 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	0801064c 	.word	0x0801064c
 8005224:	40023800 	.word	0x40023800
 8005228:	08013124 	.word	0x08013124
 800522c:	2000006c 	.word	0x2000006c
 8005230:	20000070 	.word	0x20000070

08005234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005238:	b090      	sub	sp, #64	; 0x40
 800523a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
 8005240:	2300      	movs	r3, #0
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005244:	2300      	movs	r3, #0
 8005246:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800524c:	4b59      	ldr	r3, [pc, #356]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 030c 	and.w	r3, r3, #12
 8005254:	2b08      	cmp	r3, #8
 8005256:	d00d      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0x40>
 8005258:	2b08      	cmp	r3, #8
 800525a:	f200 80a1 	bhi.w	80053a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_RCC_GetSysClockFreq+0x34>
 8005262:	2b04      	cmp	r3, #4
 8005264:	d003      	beq.n	800526e <HAL_RCC_GetSysClockFreq+0x3a>
 8005266:	e09b      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005268:	4b53      	ldr	r3, [pc, #332]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800526a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800526c:	e09b      	b.n	80053a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800526e:	4b53      	ldr	r3, [pc, #332]	; (80053bc <HAL_RCC_GetSysClockFreq+0x188>)
 8005270:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005272:	e098      	b.n	80053a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005274:	4b4f      	ldr	r3, [pc, #316]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800527c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800527e:	4b4d      	ldr	r3, [pc, #308]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d028      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800528a:	4b4a      	ldr	r3, [pc, #296]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	099b      	lsrs	r3, r3, #6
 8005290:	2200      	movs	r2, #0
 8005292:	623b      	str	r3, [r7, #32]
 8005294:	627a      	str	r2, [r7, #36]	; 0x24
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800529c:	2100      	movs	r1, #0
 800529e:	4b47      	ldr	r3, [pc, #284]	; (80053bc <HAL_RCC_GetSysClockFreq+0x188>)
 80052a0:	fb03 f201 	mul.w	r2, r3, r1
 80052a4:	2300      	movs	r3, #0
 80052a6:	fb00 f303 	mul.w	r3, r0, r3
 80052aa:	4413      	add	r3, r2
 80052ac:	4a43      	ldr	r2, [pc, #268]	; (80053bc <HAL_RCC_GetSysClockFreq+0x188>)
 80052ae:	fba0 1202 	umull	r1, r2, r0, r2
 80052b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052b4:	460a      	mov	r2, r1
 80052b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80052b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ba:	4413      	add	r3, r2
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c0:	2200      	movs	r2, #0
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	61fa      	str	r2, [r7, #28]
 80052c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052ce:	f7fa ffd7 	bl	8000280 <__aeabi_uldivmod>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4613      	mov	r3, r2
 80052d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052da:	e053      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052dc:	4b35      	ldr	r3, [pc, #212]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	099b      	lsrs	r3, r3, #6
 80052e2:	2200      	movs	r2, #0
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	617a      	str	r2, [r7, #20]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80052ee:	f04f 0b00 	mov.w	fp, #0
 80052f2:	4652      	mov	r2, sl
 80052f4:	465b      	mov	r3, fp
 80052f6:	f04f 0000 	mov.w	r0, #0
 80052fa:	f04f 0100 	mov.w	r1, #0
 80052fe:	0159      	lsls	r1, r3, #5
 8005300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005304:	0150      	lsls	r0, r2, #5
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	ebb2 080a 	subs.w	r8, r2, sl
 800530e:	eb63 090b 	sbc.w	r9, r3, fp
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800531e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005322:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005326:	ebb2 0408 	subs.w	r4, r2, r8
 800532a:	eb63 0509 	sbc.w	r5, r3, r9
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	00eb      	lsls	r3, r5, #3
 8005338:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800533c:	00e2      	lsls	r2, r4, #3
 800533e:	4614      	mov	r4, r2
 8005340:	461d      	mov	r5, r3
 8005342:	eb14 030a 	adds.w	r3, r4, sl
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	eb45 030b 	adc.w	r3, r5, fp
 800534c:	607b      	str	r3, [r7, #4]
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800535a:	4629      	mov	r1, r5
 800535c:	028b      	lsls	r3, r1, #10
 800535e:	4621      	mov	r1, r4
 8005360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005364:	4621      	mov	r1, r4
 8005366:	028a      	lsls	r2, r1, #10
 8005368:	4610      	mov	r0, r2
 800536a:	4619      	mov	r1, r3
 800536c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536e:	2200      	movs	r2, #0
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	60fa      	str	r2, [r7, #12]
 8005374:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005378:	f7fa ff82 	bl	8000280 <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4613      	mov	r3, r2
 8005382:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	0c1b      	lsrs	r3, r3, #16
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	3301      	adds	r3, #1
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005394:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	fbb2 f3f3 	udiv	r3, r2, r3
 800539c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800539e:	e002      	b.n	80053a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80053a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3740      	adds	r7, #64	; 0x40
 80053ac:	46bd      	mov	sp, r7
 80053ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800
 80053b8:	00f42400 	.word	0x00f42400
 80053bc:	017d7840 	.word	0x017d7840

080053c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053c6:	681b      	ldr	r3, [r3, #0]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	2000006c 	.word	0x2000006c

080053d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053dc:	f7ff fff0 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 80053e0:	4602      	mov	r2, r0
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	0a9b      	lsrs	r3, r3, #10
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	4903      	ldr	r1, [pc, #12]	; (80053fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ee:	5ccb      	ldrb	r3, [r1, r3]
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40023800 	.word	0x40023800
 80053fc:	08013134 	.word	0x08013134

08005400 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	220f      	movs	r2, #15
 800540e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005410:	4b12      	ldr	r3, [pc, #72]	; (800545c <HAL_RCC_GetClockConfig+0x5c>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0203 	and.w	r2, r3, #3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800541c:	4b0f      	ldr	r3, [pc, #60]	; (800545c <HAL_RCC_GetClockConfig+0x5c>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005428:	4b0c      	ldr	r3, [pc, #48]	; (800545c <HAL_RCC_GetClockConfig+0x5c>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005434:	4b09      	ldr	r3, [pc, #36]	; (800545c <HAL_RCC_GetClockConfig+0x5c>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	08db      	lsrs	r3, r3, #3
 800543a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005442:	4b07      	ldr	r3, [pc, #28]	; (8005460 <HAL_RCC_GetClockConfig+0x60>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0207 	and.w	r2, r3, #7
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	601a      	str	r2, [r3, #0]
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40023800 	.word	0x40023800
 8005460:	40023c00 	.word	0x40023c00

08005464 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b0f      	cmp	r3, #15
 8005482:	d904      	bls.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8005484:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8005488:	4834      	ldr	r0, [pc, #208]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800548a:	f7fb fdd7 	bl	800103c <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d105      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d066      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d903      	bls.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b07      	cmp	r3, #7
 80054b4:	d904      	bls.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80054b6:	f640 11de 	movw	r1, #2526	; 0x9de
 80054ba:	4828      	ldr	r0, [pc, #160]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80054bc:	f7fb fdbe 	bl	800103c <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b31      	cmp	r3, #49	; 0x31
 80054c6:	d904      	bls.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80054d0:	d904      	bls.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80054d2:	f640 11df 	movw	r1, #2527	; 0x9df
 80054d6:	4821      	ldr	r0, [pc, #132]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80054d8:	f7fb fdb0 	bl	800103c <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d903      	bls.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x88>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b3f      	cmp	r3, #63	; 0x3f
 80054ea:	d904      	bls.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x92>
 80054ec:	f640 11e1 	movw	r1, #2529	; 0x9e1
 80054f0:	481a      	ldr	r0, [pc, #104]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80054f2:	f7fb fda3 	bl	800103c <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054f6:	4b1a      	ldr	r3, [pc, #104]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054fc:	f7fc fcf0 	bl	8001ee0 <HAL_GetTick>
 8005500:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005504:	f7fc fcec 	bl	8001ee0 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e1b3      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005516:	4b13      	ldr	r3, [pc, #76]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	019b      	lsls	r3, r3, #6
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	071b      	lsls	r3, r3, #28
 8005534:	490b      	ldr	r1, [pc, #44]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800553c:	4b08      	ldr	r3, [pc, #32]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005542:	f7fc fccd 	bl	8001ee0 <HAL_GetTick>
 8005546:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005548:	e00e      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800554a:	f7fc fcc9 	bl	8001ee0 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d907      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e190      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800555c:	08010684 	.word	0x08010684
 8005560:	42470068 	.word	0x42470068
 8005564:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005568:	4b88      	ldr	r3, [pc, #544]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ea      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8173 	beq.w	8005868 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558a:	f000 80a6 	beq.w	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005596:	f000 80a0 	beq.w	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	4a7c      	ldr	r2, [pc, #496]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	f000 809a 	beq.w	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	4a7a      	ldr	r2, [pc, #488]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	f000 8094 	beq.w	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	4a78      	ldr	r2, [pc, #480]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	f000 808e 	beq.w	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	4a76      	ldr	r2, [pc, #472]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	f000 8088 	beq.w	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	4a74      	ldr	r2, [pc, #464]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	f000 8082 	beq.w	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	4a72      	ldr	r2, [pc, #456]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d07c      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	4a70      	ldr	r2, [pc, #448]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d077      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	4a6f      	ldr	r2, [pc, #444]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d072      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	4a6d      	ldr	r2, [pc, #436]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d06d      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	4a6c      	ldr	r2, [pc, #432]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d068      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	4a6a      	ldr	r2, [pc, #424]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d063      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	4a69      	ldr	r2, [pc, #420]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d05e      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	4a67      	ldr	r2, [pc, #412]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d059      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	4a66      	ldr	r2, [pc, #408]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d054      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	4a64      	ldr	r2, [pc, #400]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d04f      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	4a63      	ldr	r2, [pc, #396]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d04a      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	4a61      	ldr	r2, [pc, #388]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d045      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	4a60      	ldr	r2, [pc, #384]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d040      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	4a5e      	ldr	r2, [pc, #376]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d03b      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	4a5d      	ldr	r2, [pc, #372]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d036      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	4a5b      	ldr	r2, [pc, #364]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d031      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	4a5a      	ldr	r2, [pc, #360]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d02c      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	4a58      	ldr	r2, [pc, #352]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d027      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	4a57      	ldr	r2, [pc, #348]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	4a55      	ldr	r2, [pc, #340]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01d      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	4a54      	ldr	r2, [pc, #336]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	4a52      	ldr	r2, [pc, #328]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	4a51      	ldr	r2, [pc, #324]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	4a4f      	ldr	r2, [pc, #316]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	4a4e      	ldr	r2, [pc, #312]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056d0:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 80056d4:	484c      	ldr	r0, [pc, #304]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80056d6:	f7fb fcb1 	bl	800103c <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	4b2b      	ldr	r3, [pc, #172]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	4a2a      	ldr	r2, [pc, #168]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80056e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e8:	6413      	str	r3, [r2, #64]	; 0x40
 80056ea:	4b28      	ldr	r3, [pc, #160]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056f6:	4b45      	ldr	r3, [pc, #276]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a44      	ldr	r2, [pc, #272]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80056fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005700:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005702:	f7fc fbed 	bl	8001ee0 <HAL_GetTick>
 8005706:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005708:	e008      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800570a:	f7fc fbe9 	bl	8001ee0 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e0b0      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800571c:	4b3b      	ldr	r3, [pc, #236]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0f0      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005728:	4b18      	ldr	r3, [pc, #96]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005730:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d073      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	429a      	cmp	r2, r3
 8005744:	d06c      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005746:	4b11      	ldr	r3, [pc, #68]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800574e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005750:	4b2f      	ldr	r3, [pc, #188]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005752:	2201      	movs	r2, #1
 8005754:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005756:	4b2e      	ldr	r3, [pc, #184]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800575c:	4a0b      	ldr	r2, [pc, #44]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005762:	4b0a      	ldr	r3, [pc, #40]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b01      	cmp	r3, #1
 800576c:	d158      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800576e:	f7fc fbb7 	bl	8001ee0 <HAL_GetTick>
 8005772:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005774:	e04e      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005776:	f7fc fbb3 	bl	8001ee0 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	f241 3288 	movw	r2, #5000	; 0x1388
 8005784:	4293      	cmp	r3, r2
 8005786:	d945      	bls.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e078      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800578c:	40023800 	.word	0x40023800
 8005790:	00020300 	.word	0x00020300
 8005794:	00030300 	.word	0x00030300
 8005798:	00040300 	.word	0x00040300
 800579c:	00050300 	.word	0x00050300
 80057a0:	00060300 	.word	0x00060300
 80057a4:	00070300 	.word	0x00070300
 80057a8:	00080300 	.word	0x00080300
 80057ac:	00090300 	.word	0x00090300
 80057b0:	000a0300 	.word	0x000a0300
 80057b4:	000b0300 	.word	0x000b0300
 80057b8:	000c0300 	.word	0x000c0300
 80057bc:	000d0300 	.word	0x000d0300
 80057c0:	000e0300 	.word	0x000e0300
 80057c4:	000f0300 	.word	0x000f0300
 80057c8:	00100300 	.word	0x00100300
 80057cc:	00110300 	.word	0x00110300
 80057d0:	00120300 	.word	0x00120300
 80057d4:	00130300 	.word	0x00130300
 80057d8:	00140300 	.word	0x00140300
 80057dc:	00150300 	.word	0x00150300
 80057e0:	00160300 	.word	0x00160300
 80057e4:	00170300 	.word	0x00170300
 80057e8:	00180300 	.word	0x00180300
 80057ec:	00190300 	.word	0x00190300
 80057f0:	001a0300 	.word	0x001a0300
 80057f4:	001b0300 	.word	0x001b0300
 80057f8:	001c0300 	.word	0x001c0300
 80057fc:	001d0300 	.word	0x001d0300
 8005800:	001e0300 	.word	0x001e0300
 8005804:	001f0300 	.word	0x001f0300
 8005808:	08010684 	.word	0x08010684
 800580c:	40007000 	.word	0x40007000
 8005810:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005814:	4b1c      	ldr	r3, [pc, #112]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0aa      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800582c:	d10d      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800582e:	4b16      	ldr	r3, [pc, #88]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800583e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005842:	4911      	ldr	r1, [pc, #68]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005844:	4313      	orrs	r3, r2
 8005846:	608b      	str	r3, [r1, #8]
 8005848:	e005      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800584a:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	4a0e      	ldr	r2, [pc, #56]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005850:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005854:	6093      	str	r3, [r2, #8]
 8005856:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005858:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005862:	4909      	ldr	r1, [pc, #36]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005864:	4313      	orrs	r3, r2
 8005866:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	7d1a      	ldrb	r2, [r3, #20]
 8005878:	4b04      	ldr	r3, [pc, #16]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800587a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40023800 	.word	0x40023800
 800588c:	424711e0 	.word	0x424711e0

08005890 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e0c4      	b.n	8005a30 <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a63      	ldr	r2, [pc, #396]	; (8005a38 <HAL_RTC_Init+0x1a8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d004      	beq.n	80058ba <HAL_RTC_Init+0x2a>
 80058b0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80058b4:	4861      	ldr	r0, [pc, #388]	; (8005a3c <HAL_RTC_Init+0x1ac>)
 80058b6:	f7fb fbc1 	bl	800103c <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	d008      	beq.n	80058d4 <HAL_RTC_Init+0x44>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <HAL_RTC_Init+0x44>
 80058ca:	f240 1105 	movw	r1, #261	; 0x105
 80058ce:	485b      	ldr	r0, [pc, #364]	; (8005a3c <HAL_RTC_Init+0x1ac>)
 80058d0:	f7fb fbb4 	bl	800103c <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b7f      	cmp	r3, #127	; 0x7f
 80058da:	d904      	bls.n	80058e6 <HAL_RTC_Init+0x56>
 80058dc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80058e0:	4856      	ldr	r0, [pc, #344]	; (8005a3c <HAL_RTC_Init+0x1ac>)
 80058e2:	f7fb fbab 	bl	800103c <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ee:	d304      	bcc.n	80058fa <HAL_RTC_Init+0x6a>
 80058f0:	f240 1107 	movw	r1, #263	; 0x107
 80058f4:	4851      	ldr	r0, [pc, #324]	; (8005a3c <HAL_RTC_Init+0x1ac>)
 80058f6:	f7fb fba1 	bl	800103c <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d013      	beq.n	800592a <HAL_RTC_Init+0x9a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800590a:	d00e      	beq.n	800592a <HAL_RTC_Init+0x9a>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005914:	d009      	beq.n	800592a <HAL_RTC_Init+0x9a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800591e:	d004      	beq.n	800592a <HAL_RTC_Init+0x9a>
 8005920:	f44f 7184 	mov.w	r1, #264	; 0x108
 8005924:	4845      	ldr	r0, [pc, #276]	; (8005a3c <HAL_RTC_Init+0x1ac>)
 8005926:	f7fb fb89 	bl	800103c <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <HAL_RTC_Init+0xb6>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800593a:	d004      	beq.n	8005946 <HAL_RTC_Init+0xb6>
 800593c:	f240 1109 	movw	r1, #265	; 0x109
 8005940:	483e      	ldr	r0, [pc, #248]	; (8005a3c <HAL_RTC_Init+0x1ac>)
 8005942:	f7fb fb7b 	bl	800103c <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_RTC_Init+0xd2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005956:	d004      	beq.n	8005962 <HAL_RTC_Init+0xd2>
 8005958:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800595c:	4837      	ldr	r0, [pc, #220]	; (8005a3c <HAL_RTC_Init+0x1ac>)
 800595e:	f7fb fb6d 	bl	800103c <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	7f5b      	ldrb	r3, [r3, #29]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fb fbc8 	bl	8001108 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	22ca      	movs	r2, #202	; 0xca
 8005984:	625a      	str	r2, [r3, #36]	; 0x24
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2253      	movs	r2, #83	; 0x53
 800598c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fad2 	bl	8005f38 <RTC_EnterInitMode>
 8005994:	4603      	mov	r3, r0
 8005996:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d12c      	bne.n	80059f8 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6899      	ldr	r1, [r3, #8]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	68d2      	ldr	r2, [r2, #12]
 80059d8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6919      	ldr	r1, [r3, #16]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	041a      	lsls	r2, r3, #16
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fad9 	bl	8005fa6 <RTC_ExitInitMode>
 80059f4:	4603      	mov	r3, r0
 80059f6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d113      	bne.n	8005a26 <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	22ff      	movs	r2, #255	; 0xff
 8005a2c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40002800 	.word	0x40002800
 8005a3c:	080106c0 	.word	0x080106c0

08005a40 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a40:	b590      	push	{r4, r7, lr}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <HAL_RTC_SetTime+0x26>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d004      	beq.n	8005a66 <HAL_RTC_SetTime+0x26>
 8005a5c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8005a60:	489a      	ldr	r0, [pc, #616]	; (8005ccc <HAL_RTC_SetTime+0x28c>)
 8005a62:	f7fb faeb 	bl	800103c <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a6e:	d00d      	beq.n	8005a8c <HAL_RTC_SetTime+0x4c>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a78:	d008      	beq.n	8005a8c <HAL_RTC_SetTime+0x4c>
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d004      	beq.n	8005a8c <HAL_RTC_SetTime+0x4c>
 8005a82:	f240 21b5 	movw	r1, #693	; 0x2b5
 8005a86:	4891      	ldr	r0, [pc, #580]	; (8005ccc <HAL_RTC_SetTime+0x28c>)
 8005a88:	f7fb fad8 	bl	800103c <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d009      	beq.n	8005aa8 <HAL_RTC_SetTime+0x68>
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a9c:	d004      	beq.n	8005aa8 <HAL_RTC_SetTime+0x68>
 8005a9e:	f240 21b6 	movw	r1, #694	; 0x2b6
 8005aa2:	488a      	ldr	r0, [pc, #552]	; (8005ccc <HAL_RTC_SetTime+0x28c>)
 8005aa4:	f7fb faca 	bl	800103c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	7f1b      	ldrb	r3, [r3, #28]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d101      	bne.n	8005ab4 <HAL_RTC_SetTime+0x74>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	e107      	b.n	8005cc4 <HAL_RTC_SetTime+0x284>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2202      	movs	r2, #2
 8005abe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d15c      	bne.n	8005b80 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01a      	beq.n	8005b0a <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_RTC_SetTime+0xa4>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b0c      	cmp	r3, #12
 8005ae2:	d904      	bls.n	8005aee <HAL_RTC_SetTime+0xae>
 8005ae4:	f240 21c1 	movw	r1, #705	; 0x2c1
 8005ae8:	4878      	ldr	r0, [pc, #480]	; (8005ccc <HAL_RTC_SetTime+0x28c>)
 8005aea:	f7fb faa7 	bl	800103c <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	78db      	ldrb	r3, [r3, #3]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d015      	beq.n	8005b22 <HAL_RTC_SetTime+0xe2>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	78db      	ldrb	r3, [r3, #3]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d011      	beq.n	8005b22 <HAL_RTC_SetTime+0xe2>
 8005afe:	f240 21c2 	movw	r1, #706	; 0x2c2
 8005b02:	4872      	ldr	r0, [pc, #456]	; (8005ccc <HAL_RTC_SetTime+0x28c>)
 8005b04:	f7fb fa9a 	bl	800103c <assert_failed>
 8005b08:	e00b      	b.n	8005b22 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b17      	cmp	r3, #23
 8005b16:	d904      	bls.n	8005b22 <HAL_RTC_SetTime+0xe2>
 8005b18:	f240 21c7 	movw	r1, #711	; 0x2c7
 8005b1c:	486b      	ldr	r0, [pc, #428]	; (8005ccc <HAL_RTC_SetTime+0x28c>)
 8005b1e:	f7fb fa8d 	bl	800103c <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	2b3b      	cmp	r3, #59	; 0x3b
 8005b28:	d904      	bls.n	8005b34 <HAL_RTC_SetTime+0xf4>
 8005b2a:	f240 21c9 	movw	r1, #713	; 0x2c9
 8005b2e:	4867      	ldr	r0, [pc, #412]	; (8005ccc <HAL_RTC_SetTime+0x28c>)
 8005b30:	f7fb fa84 	bl	800103c <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	789b      	ldrb	r3, [r3, #2]
 8005b38:	2b3b      	cmp	r3, #59	; 0x3b
 8005b3a:	d904      	bls.n	8005b46 <HAL_RTC_SetTime+0x106>
 8005b3c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005b40:	4862      	ldr	r0, [pc, #392]	; (8005ccc <HAL_RTC_SetTime+0x28c>)
 8005b42:	f7fb fa7b 	bl	800103c <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fa50 	bl	8005ff0 <RTC_ByteToBcd2>
 8005b50:	4603      	mov	r3, r0
 8005b52:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fa49 	bl	8005ff0 <RTC_ByteToBcd2>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b62:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	789b      	ldrb	r3, [r3, #2]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fa41 	bl	8005ff0 <RTC_ByteToBcd2>
 8005b6e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b70:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	78db      	ldrb	r3, [r3, #3]
 8005b78:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	e062      	b.n	8005c46 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d022      	beq.n	8005bd4 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fa49 	bl	800602a <RTC_Bcd2ToByte>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <HAL_RTC_SetTime+0x16e>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fa41 	bl	800602a <RTC_Bcd2ToByte>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b0c      	cmp	r3, #12
 8005bac:	d904      	bls.n	8005bb8 <HAL_RTC_SetTime+0x178>
 8005bae:	f240 21d5 	movw	r1, #725	; 0x2d5
 8005bb2:	4846      	ldr	r0, [pc, #280]	; (8005ccc <HAL_RTC_SetTime+0x28c>)
 8005bb4:	f7fb fa42 	bl	800103c <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	78db      	ldrb	r3, [r3, #3]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d019      	beq.n	8005bf4 <HAL_RTC_SetTime+0x1b4>
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	78db      	ldrb	r3, [r3, #3]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d015      	beq.n	8005bf4 <HAL_RTC_SetTime+0x1b4>
 8005bc8:	f240 21d6 	movw	r1, #726	; 0x2d6
 8005bcc:	483f      	ldr	r0, [pc, #252]	; (8005ccc <HAL_RTC_SetTime+0x28c>)
 8005bce:	f7fb fa35 	bl	800103c <assert_failed>
 8005bd2:	e00f      	b.n	8005bf4 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fa23 	bl	800602a <RTC_Bcd2ToByte>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b17      	cmp	r3, #23
 8005be8:	d904      	bls.n	8005bf4 <HAL_RTC_SetTime+0x1b4>
 8005bea:	f240 21db 	movw	r1, #731	; 0x2db
 8005bee:	4837      	ldr	r0, [pc, #220]	; (8005ccc <HAL_RTC_SetTime+0x28c>)
 8005bf0:	f7fb fa24 	bl	800103c <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fa16 	bl	800602a <RTC_Bcd2ToByte>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b3b      	cmp	r3, #59	; 0x3b
 8005c02:	d904      	bls.n	8005c0e <HAL_RTC_SetTime+0x1ce>
 8005c04:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005c08:	4830      	ldr	r0, [pc, #192]	; (8005ccc <HAL_RTC_SetTime+0x28c>)
 8005c0a:	f7fb fa17 	bl	800103c <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	789b      	ldrb	r3, [r3, #2]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fa09 	bl	800602a <RTC_Bcd2ToByte>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b3b      	cmp	r3, #59	; 0x3b
 8005c1c:	d904      	bls.n	8005c28 <HAL_RTC_SetTime+0x1e8>
 8005c1e:	f240 21de 	movw	r1, #734	; 0x2de
 8005c22:	482a      	ldr	r0, [pc, #168]	; (8005ccc <HAL_RTC_SetTime+0x28c>)
 8005c24:	f7fb fa0a 	bl	800103c <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c34:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c3a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	78db      	ldrb	r3, [r3, #3]
 8005c40:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	22ca      	movs	r2, #202	; 0xca
 8005c4c:	625a      	str	r2, [r3, #36]	; 0x24
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2253      	movs	r2, #83	; 0x53
 8005c54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 f96e 	bl	8005f38 <RTC_EnterInitMode>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c60:	7cfb      	ldrb	r3, [r7, #19]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d120      	bne.n	8005ca8 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c70:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c74:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c84:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6899      	ldr	r1, [r3, #8]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	431a      	orrs	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 f981 	bl	8005fa6 <RTC_ExitInitMode>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005ca8:	7cfb      	ldrb	r3, [r7, #19]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	22ff      	movs	r2, #255	; 0xff
 8005cba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	771a      	strb	r2, [r3, #28]

  return status;
 8005cc2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd90      	pop	{r4, r7, pc}
 8005ccc:	080106c0 	.word	0x080106c0

08005cd0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cd0:	b590      	push	{r4, r7, lr}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <HAL_RTC_SetDate+0x26>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d004      	beq.n	8005cf6 <HAL_RTC_SetDate+0x26>
 8005cec:	f240 3153 	movw	r1, #851	; 0x353
 8005cf0:	487c      	ldr	r0, [pc, #496]	; (8005ee4 <HAL_RTC_SetDate+0x214>)
 8005cf2:	f7fb f9a3 	bl	800103c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	7f1b      	ldrb	r3, [r3, #28]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_RTC_SetDate+0x32>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e0ec      	b.n	8005edc <HAL_RTC_SetDate+0x20c>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10e      	bne.n	8005d32 <HAL_RTC_SetDate+0x62>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	f023 0310 	bic.w	r3, r3, #16
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	330a      	adds	r3, #10
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d01c      	beq.n	8005d74 <HAL_RTC_SetDate+0xa4>
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d018      	beq.n	8005d74 <HAL_RTC_SetDate+0xa4>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d014      	beq.n	8005d74 <HAL_RTC_SetDate+0xa4>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d010      	beq.n	8005d74 <HAL_RTC_SetDate+0xa4>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	d00c      	beq.n	8005d74 <HAL_RTC_SetDate+0xa4>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b06      	cmp	r3, #6
 8005d60:	d008      	beq.n	8005d74 <HAL_RTC_SetDate+0xa4>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b07      	cmp	r3, #7
 8005d68:	d004      	beq.n	8005d74 <HAL_RTC_SetDate+0xa4>
 8005d6a:	f240 315f 	movw	r1, #863	; 0x35f
 8005d6e:	485d      	ldr	r0, [pc, #372]	; (8005ee4 <HAL_RTC_SetDate+0x214>)
 8005d70:	f7fb f964 	bl	800103c <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d13f      	bne.n	8005dfa <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	78db      	ldrb	r3, [r3, #3]
 8005d7e:	2b63      	cmp	r3, #99	; 0x63
 8005d80:	d904      	bls.n	8005d8c <HAL_RTC_SetDate+0xbc>
 8005d82:	f240 3163 	movw	r1, #867	; 0x363
 8005d86:	4857      	ldr	r0, [pc, #348]	; (8005ee4 <HAL_RTC_SetDate+0x214>)
 8005d88:	f7fb f958 	bl	800103c <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <HAL_RTC_SetDate+0xcc>
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	785b      	ldrb	r3, [r3, #1]
 8005d98:	2b0c      	cmp	r3, #12
 8005d9a:	d904      	bls.n	8005da6 <HAL_RTC_SetDate+0xd6>
 8005d9c:	f44f 7159 	mov.w	r1, #868	; 0x364
 8005da0:	4850      	ldr	r0, [pc, #320]	; (8005ee4 <HAL_RTC_SetDate+0x214>)
 8005da2:	f7fb f94b 	bl	800103c <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	789b      	ldrb	r3, [r3, #2]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_RTC_SetDate+0xe6>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	789b      	ldrb	r3, [r3, #2]
 8005db2:	2b1f      	cmp	r3, #31
 8005db4:	d904      	bls.n	8005dc0 <HAL_RTC_SetDate+0xf0>
 8005db6:	f240 3165 	movw	r1, #869	; 0x365
 8005dba:	484a      	ldr	r0, [pc, #296]	; (8005ee4 <HAL_RTC_SetDate+0x214>)
 8005dbc:	f7fb f93e 	bl	800103c <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	78db      	ldrb	r3, [r3, #3]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 f913 	bl	8005ff0 <RTC_ByteToBcd2>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	785b      	ldrb	r3, [r3, #1]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 f90c 	bl	8005ff0 <RTC_ByteToBcd2>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ddc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	789b      	ldrb	r3, [r3, #2]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 f904 	bl	8005ff0 <RTC_ByteToBcd2>
 8005de8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005dea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	e045      	b.n	8005e86 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	78db      	ldrb	r3, [r3, #3]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 f913 	bl	800602a <RTC_Bcd2ToByte>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b63      	cmp	r3, #99	; 0x63
 8005e08:	d904      	bls.n	8005e14 <HAL_RTC_SetDate+0x144>
 8005e0a:	f240 316e 	movw	r1, #878	; 0x36e
 8005e0e:	4835      	ldr	r0, [pc, #212]	; (8005ee4 <HAL_RTC_SetDate+0x214>)
 8005e10:	f7fb f914 	bl	800103c <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 f906 	bl	800602a <RTC_Bcd2ToByte>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <HAL_RTC_SetDate+0x164>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 f8fe 	bl	800602a <RTC_Bcd2ToByte>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b0c      	cmp	r3, #12
 8005e32:	d904      	bls.n	8005e3e <HAL_RTC_SetDate+0x16e>
 8005e34:	f240 316f 	movw	r1, #879	; 0x36f
 8005e38:	482a      	ldr	r0, [pc, #168]	; (8005ee4 <HAL_RTC_SetDate+0x214>)
 8005e3a:	f7fb f8ff 	bl	800103c <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	789b      	ldrb	r3, [r3, #2]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 f8f1 	bl	800602a <RTC_Bcd2ToByte>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <HAL_RTC_SetDate+0x18e>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	789b      	ldrb	r3, [r3, #2]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 f8e9 	bl	800602a <RTC_Bcd2ToByte>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b1f      	cmp	r3, #31
 8005e5c:	d904      	bls.n	8005e68 <HAL_RTC_SetDate+0x198>
 8005e5e:	f44f 715c 	mov.w	r1, #880	; 0x370
 8005e62:	4820      	ldr	r0, [pc, #128]	; (8005ee4 <HAL_RTC_SetDate+0x214>)
 8005e64:	f7fb f8ea 	bl	800103c <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	78db      	ldrb	r3, [r3, #3]
 8005e6c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e74:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005e7a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	22ca      	movs	r2, #202	; 0xca
 8005e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2253      	movs	r2, #83	; 0x53
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f84e 	bl	8005f38 <RTC_EnterInitMode>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ea0:	7cfb      	ldrb	r3, [r7, #19]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005eb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005eb4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f875 	bl	8005fa6 <RTC_ExitInitMode>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005ec0:	7cfb      	ldrb	r3, [r7, #19]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	22ff      	movs	r2, #255	; 0xff
 8005ed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	771a      	strb	r2, [r3, #28]

  return status;
 8005eda:	7cfb      	ldrb	r3, [r7, #19]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd90      	pop	{r4, r7, pc}
 8005ee4:	080106c0 	.word	0x080106c0

08005ee8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f02:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f04:	f7fb ffec 	bl	8001ee0 <HAL_GetTick>
 8005f08:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f0a:	e009      	b.n	8005f20 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f0c:	f7fb ffe8 	bl	8001ee0 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f1a:	d901      	bls.n	8005f20 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e007      	b.n	8005f30 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0ee      	beq.n	8005f0c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d122      	bne.n	8005f9c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f64:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f66:	f7fb ffbb 	bl	8001ee0 <HAL_GetTick>
 8005f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f6c:	e00c      	b.n	8005f88 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f6e:	f7fb ffb7 	bl	8001ee0 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f7c:	d904      	bls.n	8005f88 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2204      	movs	r2, #4
 8005f82:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <RTC_EnterInitMode+0x64>
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d1e8      	bne.n	8005f6e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fc0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff ff89 	bl	8005ee8 <HAL_RTC_WaitForSynchro>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d004      	beq.n	8005fe6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2204      	movs	r2, #4
 8005fe0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005ffe:	e005      	b.n	800600c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	3301      	adds	r3, #1
 8006004:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	3b0a      	subs	r3, #10
 800600a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	2b09      	cmp	r3, #9
 8006010:	d8f6      	bhi.n	8006000 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	b2da      	uxtb	r2, r3
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	4313      	orrs	r3, r2
 800601c:	b2db      	uxtb	r3, r3
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800602a:	b480      	push	{r7}
 800602c:	b085      	sub	sp, #20
 800602e:	af00      	add	r7, sp, #0
 8006030:	4603      	mov	r3, r0
 8006032:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	091b      	lsrs	r3, r3, #4
 800603c:	b2db      	uxtb	r3, r3
 800603e:	461a      	mov	r2, r3
 8006040:	0092      	lsls	r2, r2, #2
 8006042:	4413      	add	r3, r2
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	b2da      	uxtb	r2, r3
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	4413      	add	r3, r2
 8006054:	b2db      	uxtb	r3, r3
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e18c      	b.n	8006390 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a75      	ldr	r2, [pc, #468]	; (8006250 <HAL_SPI_Init+0x1ec>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d018      	beq.n	80060b2 <HAL_SPI_Init+0x4e>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a73      	ldr	r2, [pc, #460]	; (8006254 <HAL_SPI_Init+0x1f0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d013      	beq.n	80060b2 <HAL_SPI_Init+0x4e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a72      	ldr	r2, [pc, #456]	; (8006258 <HAL_SPI_Init+0x1f4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00e      	beq.n	80060b2 <HAL_SPI_Init+0x4e>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a70      	ldr	r2, [pc, #448]	; (800625c <HAL_SPI_Init+0x1f8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d009      	beq.n	80060b2 <HAL_SPI_Init+0x4e>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a6f      	ldr	r2, [pc, #444]	; (8006260 <HAL_SPI_Init+0x1fc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d004      	beq.n	80060b2 <HAL_SPI_Init+0x4e>
 80060a8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80060ac:	486d      	ldr	r0, [pc, #436]	; (8006264 <HAL_SPI_Init+0x200>)
 80060ae:	f7fa ffc5 	bl	800103c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <HAL_SPI_Init+0x6a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c2:	d004      	beq.n	80060ce <HAL_SPI_Init+0x6a>
 80060c4:	f240 1141 	movw	r1, #321	; 0x141
 80060c8:	4866      	ldr	r0, [pc, #408]	; (8006264 <HAL_SPI_Init+0x200>)
 80060ca:	f7fa ffb7 	bl	800103c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00e      	beq.n	80060f4 <HAL_SPI_Init+0x90>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060de:	d009      	beq.n	80060f4 <HAL_SPI_Init+0x90>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e8:	d004      	beq.n	80060f4 <HAL_SPI_Init+0x90>
 80060ea:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80060ee:	485d      	ldr	r0, [pc, #372]	; (8006264 <HAL_SPI_Init+0x200>)
 80060f0:	f7fa ffa4 	bl	800103c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060fc:	d008      	beq.n	8006110 <HAL_SPI_Init+0xac>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d004      	beq.n	8006110 <HAL_SPI_Init+0xac>
 8006106:	f240 1143 	movw	r1, #323	; 0x143
 800610a:	4856      	ldr	r0, [pc, #344]	; (8006264 <HAL_SPI_Init+0x200>)
 800610c:	f7fa ff96 	bl	800103c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006118:	d00d      	beq.n	8006136 <HAL_SPI_Init+0xd2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <HAL_SPI_Init+0xd2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800612a:	d004      	beq.n	8006136 <HAL_SPI_Init+0xd2>
 800612c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006130:	484c      	ldr	r0, [pc, #304]	; (8006264 <HAL_SPI_Init+0x200>)
 8006132:	f7fa ff83 	bl	800103c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d020      	beq.n	8006180 <HAL_SPI_Init+0x11c>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	2b08      	cmp	r3, #8
 8006144:	d01c      	beq.n	8006180 <HAL_SPI_Init+0x11c>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	2b10      	cmp	r3, #16
 800614c:	d018      	beq.n	8006180 <HAL_SPI_Init+0x11c>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	2b18      	cmp	r3, #24
 8006154:	d014      	beq.n	8006180 <HAL_SPI_Init+0x11c>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	2b20      	cmp	r3, #32
 800615c:	d010      	beq.n	8006180 <HAL_SPI_Init+0x11c>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	2b28      	cmp	r3, #40	; 0x28
 8006164:	d00c      	beq.n	8006180 <HAL_SPI_Init+0x11c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	2b30      	cmp	r3, #48	; 0x30
 800616c:	d008      	beq.n	8006180 <HAL_SPI_Init+0x11c>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	2b38      	cmp	r3, #56	; 0x38
 8006174:	d004      	beq.n	8006180 <HAL_SPI_Init+0x11c>
 8006176:	f240 1145 	movw	r1, #325	; 0x145
 800617a:	483a      	ldr	r0, [pc, #232]	; (8006264 <HAL_SPI_Init+0x200>)
 800617c:	f7fa ff5e 	bl	800103c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_SPI_Init+0x136>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	2b80      	cmp	r3, #128	; 0x80
 800618e:	d004      	beq.n	800619a <HAL_SPI_Init+0x136>
 8006190:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006194:	4833      	ldr	r0, [pc, #204]	; (8006264 <HAL_SPI_Init+0x200>)
 8006196:	f7fa ff51 	bl	800103c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d008      	beq.n	80061b4 <HAL_SPI_Init+0x150>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	2b10      	cmp	r3, #16
 80061a8:	d004      	beq.n	80061b4 <HAL_SPI_Init+0x150>
 80061aa:	f240 1147 	movw	r1, #327	; 0x147
 80061ae:	482d      	ldr	r0, [pc, #180]	; (8006264 <HAL_SPI_Init+0x200>)
 80061b0:	f7fa ff44 	bl	800103c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d155      	bne.n	8006268 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d008      	beq.n	80061d6 <HAL_SPI_Init+0x172>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d004      	beq.n	80061d6 <HAL_SPI_Init+0x172>
 80061cc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80061d0:	4824      	ldr	r0, [pc, #144]	; (8006264 <HAL_SPI_Init+0x200>)
 80061d2:	f7fa ff33 	bl	800103c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d008      	beq.n	80061f0 <HAL_SPI_Init+0x18c>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d004      	beq.n	80061f0 <HAL_SPI_Init+0x18c>
 80061e6:	f240 114b 	movw	r1, #331	; 0x14b
 80061ea:	481e      	ldr	r0, [pc, #120]	; (8006264 <HAL_SPI_Init+0x200>)
 80061ec:	f7fa ff26 	bl	800103c <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061f8:	d125      	bne.n	8006246 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d05d      	beq.n	80062be <HAL_SPI_Init+0x25a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	2b08      	cmp	r3, #8
 8006208:	d059      	beq.n	80062be <HAL_SPI_Init+0x25a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	2b10      	cmp	r3, #16
 8006210:	d055      	beq.n	80062be <HAL_SPI_Init+0x25a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	2b18      	cmp	r3, #24
 8006218:	d051      	beq.n	80062be <HAL_SPI_Init+0x25a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	2b20      	cmp	r3, #32
 8006220:	d04d      	beq.n	80062be <HAL_SPI_Init+0x25a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	2b28      	cmp	r3, #40	; 0x28
 8006228:	d049      	beq.n	80062be <HAL_SPI_Init+0x25a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	2b30      	cmp	r3, #48	; 0x30
 8006230:	d045      	beq.n	80062be <HAL_SPI_Init+0x25a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	2b38      	cmp	r3, #56	; 0x38
 8006238:	d041      	beq.n	80062be <HAL_SPI_Init+0x25a>
 800623a:	f240 114f 	movw	r1, #335	; 0x14f
 800623e:	4809      	ldr	r0, [pc, #36]	; (8006264 <HAL_SPI_Init+0x200>)
 8006240:	f7fa fefc 	bl	800103c <assert_failed>
 8006244:	e03b      	b.n	80062be <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	61da      	str	r2, [r3, #28]
 800624c:	e037      	b.n	80062be <HAL_SPI_Init+0x25a>
 800624e:	bf00      	nop
 8006250:	40013000 	.word	0x40013000
 8006254:	40003800 	.word	0x40003800
 8006258:	40003c00 	.word	0x40003c00
 800625c:	40013400 	.word	0x40013400
 8006260:	40015000 	.word	0x40015000
 8006264:	080106f8 	.word	0x080106f8
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d020      	beq.n	80062b2 <HAL_SPI_Init+0x24e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	2b08      	cmp	r3, #8
 8006276:	d01c      	beq.n	80062b2 <HAL_SPI_Init+0x24e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	2b10      	cmp	r3, #16
 800627e:	d018      	beq.n	80062b2 <HAL_SPI_Init+0x24e>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	2b18      	cmp	r3, #24
 8006286:	d014      	beq.n	80062b2 <HAL_SPI_Init+0x24e>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	2b20      	cmp	r3, #32
 800628e:	d010      	beq.n	80062b2 <HAL_SPI_Init+0x24e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	2b28      	cmp	r3, #40	; 0x28
 8006296:	d00c      	beq.n	80062b2 <HAL_SPI_Init+0x24e>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	2b30      	cmp	r3, #48	; 0x30
 800629e:	d008      	beq.n	80062b2 <HAL_SPI_Init+0x24e>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	2b38      	cmp	r3, #56	; 0x38
 80062a6:	d004      	beq.n	80062b2 <HAL_SPI_Init+0x24e>
 80062a8:	f240 1159 	movw	r1, #345	; 0x159
 80062ac:	483a      	ldr	r0, [pc, #232]	; (8006398 <HAL_SPI_Init+0x334>)
 80062ae:	f7fa fec5 	bl	800103c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7fa ff77 	bl	80011cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2202      	movs	r2, #2
 80062e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006342:	ea42 0103 	orr.w	r1, r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	0c1b      	lsrs	r3, r3, #16
 800635c:	f003 0104 	and.w	r1, r3, #4
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	f003 0210 	and.w	r2, r3, #16
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69da      	ldr	r2, [r3, #28]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800637e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	080106f8 	.word	0x080106f8

0800639c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d009      	beq.n	80063cc <HAL_SPI_Transmit+0x30>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c0:	d004      	beq.n	80063cc <HAL_SPI_Transmit+0x30>
 80063c2:	f44f 7142 	mov.w	r1, #776	; 0x308
 80063c6:	4880      	ldr	r0, [pc, #512]	; (80065c8 <HAL_SPI_Transmit+0x22c>)
 80063c8:	f7fa fe38 	bl	800103c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <HAL_SPI_Transmit+0x3e>
 80063d6:	2302      	movs	r3, #2
 80063d8:	e128      	b.n	800662c <HAL_SPI_Transmit+0x290>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063e2:	f7fb fd7d 	bl	8001ee0 <HAL_GetTick>
 80063e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d002      	beq.n	80063fe <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80063f8:	2302      	movs	r3, #2
 80063fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063fc:	e10d      	b.n	800661a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <HAL_SPI_Transmit+0x6e>
 8006404:	88fb      	ldrh	r3, [r7, #6]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d102      	bne.n	8006410 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800640e:	e104      	b.n	800661a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2203      	movs	r2, #3
 8006414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	88fa      	ldrh	r2, [r7, #6]
 800642e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006456:	d10f      	bne.n	8006478 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006466:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006476:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006482:	2b40      	cmp	r3, #64	; 0x40
 8006484:	d007      	beq.n	8006496 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006494:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800649e:	d14b      	bne.n	8006538 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <HAL_SPI_Transmit+0x112>
 80064a8:	8afb      	ldrh	r3, [r7, #22]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d13e      	bne.n	800652c <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b2:	881a      	ldrh	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064be:	1c9a      	adds	r2, r3, #2
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064d2:	e02b      	b.n	800652c <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d112      	bne.n	8006508 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	881a      	ldrh	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	1c9a      	adds	r2, r3, #2
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	86da      	strh	r2, [r3, #54]	; 0x36
 8006506:	e011      	b.n	800652c <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006508:	f7fb fcea 	bl	8001ee0 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d803      	bhi.n	8006520 <HAL_SPI_Transmit+0x184>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651e:	d102      	bne.n	8006526 <HAL_SPI_Transmit+0x18a>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d102      	bne.n	800652c <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	77fb      	strb	r3, [r7, #31]
          goto error;
 800652a:	e076      	b.n	800661a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006530:	b29b      	uxth	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1ce      	bne.n	80064d4 <HAL_SPI_Transmit+0x138>
 8006536:	e04e      	b.n	80065d6 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <HAL_SPI_Transmit+0x1aa>
 8006540:	8afb      	ldrh	r3, [r7, #22]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d142      	bne.n	80065cc <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	330c      	adds	r3, #12
 8006550:	7812      	ldrb	r2, [r2, #0]
 8006552:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006562:	b29b      	uxth	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800656c:	e02e      	b.n	80065cc <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b02      	cmp	r3, #2
 800657a:	d113      	bne.n	80065a4 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	330c      	adds	r3, #12
 8006586:	7812      	ldrb	r2, [r2, #0]
 8006588:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80065a2:	e013      	b.n	80065cc <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065a4:	f7fb fc9c 	bl	8001ee0 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d803      	bhi.n	80065bc <HAL_SPI_Transmit+0x220>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d102      	bne.n	80065c2 <HAL_SPI_Transmit+0x226>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d104      	bne.n	80065cc <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065c6:	e028      	b.n	800661a <HAL_SPI_Transmit+0x27e>
 80065c8:	080106f8 	.word	0x080106f8
    while (hspi->TxXferCount > 0U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1cb      	bne.n	800656e <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 f8b2 	bl	8006744 <SPI_EndRxTxTransaction>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2220      	movs	r2, #32
 80065ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065f4:	2300      	movs	r3, #0
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	77fb      	strb	r3, [r7, #31]
 8006616:	e000      	b.n	800661a <HAL_SPI_Transmit+0x27e>
  }

error:
 8006618:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800662a:	7ffb      	ldrb	r3, [r7, #31]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3720      	adds	r7, #32
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	4613      	mov	r3, r2
 8006642:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006644:	f7fb fc4c 	bl	8001ee0 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	1a9b      	subs	r3, r3, r2
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	4413      	add	r3, r2
 8006652:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006654:	f7fb fc44 	bl	8001ee0 <HAL_GetTick>
 8006658:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800665a:	4b39      	ldr	r3, [pc, #228]	; (8006740 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	015b      	lsls	r3, r3, #5
 8006660:	0d1b      	lsrs	r3, r3, #20
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	fb02 f303 	mul.w	r3, r2, r3
 8006668:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800666a:	e054      	b.n	8006716 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006672:	d050      	beq.n	8006716 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006674:	f7fb fc34 	bl	8001ee0 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	429a      	cmp	r2, r3
 8006682:	d902      	bls.n	800668a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d13d      	bne.n	8006706 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006698:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a2:	d111      	bne.n	80066c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ac:	d004      	beq.n	80066b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b6:	d107      	bne.n	80066c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d0:	d10f      	bne.n	80066f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e017      	b.n	8006736 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	3b01      	subs	r3, #1
 8006714:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4013      	ands	r3, r2
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	429a      	cmp	r2, r3
 8006724:	bf0c      	ite	eq
 8006726:	2301      	moveq	r3, #1
 8006728:	2300      	movne	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	429a      	cmp	r2, r3
 8006732:	d19b      	bne.n	800666c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3720      	adds	r7, #32
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	2000006c 	.word	0x2000006c

08006744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af02      	add	r7, sp, #8
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006750:	4b1b      	ldr	r3, [pc, #108]	; (80067c0 <SPI_EndRxTxTransaction+0x7c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a1b      	ldr	r2, [pc, #108]	; (80067c4 <SPI_EndRxTxTransaction+0x80>)
 8006756:	fba2 2303 	umull	r2, r3, r2, r3
 800675a:	0d5b      	lsrs	r3, r3, #21
 800675c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006760:	fb02 f303 	mul.w	r3, r2, r3
 8006764:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800676e:	d112      	bne.n	8006796 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2200      	movs	r2, #0
 8006778:	2180      	movs	r1, #128	; 0x80
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7ff ff5a 	bl	8006634 <SPI_WaitFlagStateUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d016      	beq.n	80067b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678a:	f043 0220 	orr.w	r2, r3, #32
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e00f      	b.n	80067b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	3b01      	subs	r3, #1
 80067a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ac:	2b80      	cmp	r3, #128	; 0x80
 80067ae:	d0f2      	beq.n	8006796 <SPI_EndRxTxTransaction+0x52>
 80067b0:	e000      	b.n	80067b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80067b2:	bf00      	nop
  }

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	2000006c 	.word	0x2000006c
 80067c4:	165e9f81 	.word	0x165e9f81

080067c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e0a7      	b.n	800692a <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a55      	ldr	r2, [pc, #340]	; (8006934 <HAL_TIM_Base_Init+0x16c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d027      	beq.n	8006834 <HAL_TIM_Base_Init+0x6c>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ec:	d022      	beq.n	8006834 <HAL_TIM_Base_Init+0x6c>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a51      	ldr	r2, [pc, #324]	; (8006938 <HAL_TIM_Base_Init+0x170>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d01d      	beq.n	8006834 <HAL_TIM_Base_Init+0x6c>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a4f      	ldr	r2, [pc, #316]	; (800693c <HAL_TIM_Base_Init+0x174>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d018      	beq.n	8006834 <HAL_TIM_Base_Init+0x6c>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a4e      	ldr	r2, [pc, #312]	; (8006940 <HAL_TIM_Base_Init+0x178>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d013      	beq.n	8006834 <HAL_TIM_Base_Init+0x6c>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a4c      	ldr	r2, [pc, #304]	; (8006944 <HAL_TIM_Base_Init+0x17c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00e      	beq.n	8006834 <HAL_TIM_Base_Init+0x6c>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a4b      	ldr	r2, [pc, #300]	; (8006948 <HAL_TIM_Base_Init+0x180>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d009      	beq.n	8006834 <HAL_TIM_Base_Init+0x6c>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a49      	ldr	r2, [pc, #292]	; (800694c <HAL_TIM_Base_Init+0x184>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d004      	beq.n	8006834 <HAL_TIM_Base_Init+0x6c>
 800682a:	f240 1113 	movw	r1, #275	; 0x113
 800682e:	4848      	ldr	r0, [pc, #288]	; (8006950 <HAL_TIM_Base_Init+0x188>)
 8006830:	f7fa fc04 	bl	800103c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d014      	beq.n	8006866 <HAL_TIM_Base_Init+0x9e>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2b10      	cmp	r3, #16
 8006842:	d010      	beq.n	8006866 <HAL_TIM_Base_Init+0x9e>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b20      	cmp	r3, #32
 800684a:	d00c      	beq.n	8006866 <HAL_TIM_Base_Init+0x9e>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	2b40      	cmp	r3, #64	; 0x40
 8006852:	d008      	beq.n	8006866 <HAL_TIM_Base_Init+0x9e>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	2b60      	cmp	r3, #96	; 0x60
 800685a:	d004      	beq.n	8006866 <HAL_TIM_Base_Init+0x9e>
 800685c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006860:	483b      	ldr	r0, [pc, #236]	; (8006950 <HAL_TIM_Base_Init+0x188>)
 8006862:	f7fa fbeb 	bl	800103c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00e      	beq.n	800688c <HAL_TIM_Base_Init+0xc4>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006876:	d009      	beq.n	800688c <HAL_TIM_Base_Init+0xc4>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006880:	d004      	beq.n	800688c <HAL_TIM_Base_Init+0xc4>
 8006882:	f240 1115 	movw	r1, #277	; 0x115
 8006886:	4832      	ldr	r0, [pc, #200]	; (8006950 <HAL_TIM_Base_Init+0x188>)
 8006888:	f7fa fbd8 	bl	800103c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d008      	beq.n	80068a6 <HAL_TIM_Base_Init+0xde>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	2b80      	cmp	r3, #128	; 0x80
 800689a:	d004      	beq.n	80068a6 <HAL_TIM_Base_Init+0xde>
 800689c:	f44f 718b 	mov.w	r1, #278	; 0x116
 80068a0:	482b      	ldr	r0, [pc, #172]	; (8006950 <HAL_TIM_Base_Init+0x188>)
 80068a2:	f7fa fbcb 	bl	800103c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fb fa2c 	bl	8001d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3304      	adds	r3, #4
 80068d0:	4619      	mov	r1, r3
 80068d2:	4610      	mov	r0, r2
 80068d4:	f001 fb0a 	bl	8007eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40010000 	.word	0x40010000
 8006938:	40000400 	.word	0x40000400
 800693c:	40000800 	.word	0x40000800
 8006940:	40000c00 	.word	0x40000c00
 8006944:	40014000 	.word	0x40014000
 8006948:	40014400 	.word	0x40014400
 800694c:	40014800 	.word	0x40014800
 8006950:	08010730 	.word	0x08010730

08006954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a3d      	ldr	r2, [pc, #244]	; (8006a58 <HAL_TIM_Base_Start_IT+0x104>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d027      	beq.n	80069b6 <HAL_TIM_Base_Start_IT+0x62>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696e:	d022      	beq.n	80069b6 <HAL_TIM_Base_Start_IT+0x62>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a39      	ldr	r2, [pc, #228]	; (8006a5c <HAL_TIM_Base_Start_IT+0x108>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d01d      	beq.n	80069b6 <HAL_TIM_Base_Start_IT+0x62>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a38      	ldr	r2, [pc, #224]	; (8006a60 <HAL_TIM_Base_Start_IT+0x10c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d018      	beq.n	80069b6 <HAL_TIM_Base_Start_IT+0x62>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a36      	ldr	r2, [pc, #216]	; (8006a64 <HAL_TIM_Base_Start_IT+0x110>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d013      	beq.n	80069b6 <HAL_TIM_Base_Start_IT+0x62>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a35      	ldr	r2, [pc, #212]	; (8006a68 <HAL_TIM_Base_Start_IT+0x114>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d00e      	beq.n	80069b6 <HAL_TIM_Base_Start_IT+0x62>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a33      	ldr	r2, [pc, #204]	; (8006a6c <HAL_TIM_Base_Start_IT+0x118>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d009      	beq.n	80069b6 <HAL_TIM_Base_Start_IT+0x62>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a32      	ldr	r2, [pc, #200]	; (8006a70 <HAL_TIM_Base_Start_IT+0x11c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d004      	beq.n	80069b6 <HAL_TIM_Base_Start_IT+0x62>
 80069ac:	f240 11cf 	movw	r1, #463	; 0x1cf
 80069b0:	4830      	ldr	r0, [pc, #192]	; (8006a74 <HAL_TIM_Base_Start_IT+0x120>)
 80069b2:	f7fa fb43 	bl	800103c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d001      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e044      	b.n	8006a50 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2202      	movs	r2, #2
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f042 0201 	orr.w	r2, r2, #1
 80069dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1d      	ldr	r2, [pc, #116]	; (8006a58 <HAL_TIM_Base_Start_IT+0x104>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d018      	beq.n	8006a1a <HAL_TIM_Base_Start_IT+0xc6>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f0:	d013      	beq.n	8006a1a <HAL_TIM_Base_Start_IT+0xc6>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a19      	ldr	r2, [pc, #100]	; (8006a5c <HAL_TIM_Base_Start_IT+0x108>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00e      	beq.n	8006a1a <HAL_TIM_Base_Start_IT+0xc6>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a17      	ldr	r2, [pc, #92]	; (8006a60 <HAL_TIM_Base_Start_IT+0x10c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d009      	beq.n	8006a1a <HAL_TIM_Base_Start_IT+0xc6>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a16      	ldr	r2, [pc, #88]	; (8006a64 <HAL_TIM_Base_Start_IT+0x110>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <HAL_TIM_Base_Start_IT+0xc6>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a14      	ldr	r2, [pc, #80]	; (8006a68 <HAL_TIM_Base_Start_IT+0x114>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d111      	bne.n	8006a3e <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b06      	cmp	r3, #6
 8006a2a:	d010      	beq.n	8006a4e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3c:	e007      	b.n	8006a4e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0201 	orr.w	r2, r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	40010000 	.word	0x40010000
 8006a5c:	40000400 	.word	0x40000400
 8006a60:	40000800 	.word	0x40000800
 8006a64:	40000c00 	.word	0x40000c00
 8006a68:	40014000 	.word	0x40014000
 8006a6c:	40014400 	.word	0x40014400
 8006a70:	40014800 	.word	0x40014800
 8006a74:	08010730 	.word	0x08010730

08006a78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e0a7      	b.n	8006bda <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a55      	ldr	r2, [pc, #340]	; (8006be4 <HAL_TIM_PWM_Init+0x16c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d027      	beq.n	8006ae4 <HAL_TIM_PWM_Init+0x6c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9c:	d022      	beq.n	8006ae4 <HAL_TIM_PWM_Init+0x6c>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a51      	ldr	r2, [pc, #324]	; (8006be8 <HAL_TIM_PWM_Init+0x170>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d01d      	beq.n	8006ae4 <HAL_TIM_PWM_Init+0x6c>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a4f      	ldr	r2, [pc, #316]	; (8006bec <HAL_TIM_PWM_Init+0x174>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d018      	beq.n	8006ae4 <HAL_TIM_PWM_Init+0x6c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a4e      	ldr	r2, [pc, #312]	; (8006bf0 <HAL_TIM_PWM_Init+0x178>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d013      	beq.n	8006ae4 <HAL_TIM_PWM_Init+0x6c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a4c      	ldr	r2, [pc, #304]	; (8006bf4 <HAL_TIM_PWM_Init+0x17c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00e      	beq.n	8006ae4 <HAL_TIM_PWM_Init+0x6c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a4b      	ldr	r2, [pc, #300]	; (8006bf8 <HAL_TIM_PWM_Init+0x180>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d009      	beq.n	8006ae4 <HAL_TIM_PWM_Init+0x6c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a49      	ldr	r2, [pc, #292]	; (8006bfc <HAL_TIM_PWM_Init+0x184>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d004      	beq.n	8006ae4 <HAL_TIM_PWM_Init+0x6c>
 8006ada:	f240 5129 	movw	r1, #1321	; 0x529
 8006ade:	4848      	ldr	r0, [pc, #288]	; (8006c00 <HAL_TIM_PWM_Init+0x188>)
 8006ae0:	f7fa faac 	bl	800103c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d014      	beq.n	8006b16 <HAL_TIM_PWM_Init+0x9e>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	2b10      	cmp	r3, #16
 8006af2:	d010      	beq.n	8006b16 <HAL_TIM_PWM_Init+0x9e>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d00c      	beq.n	8006b16 <HAL_TIM_PWM_Init+0x9e>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	2b40      	cmp	r3, #64	; 0x40
 8006b02:	d008      	beq.n	8006b16 <HAL_TIM_PWM_Init+0x9e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b60      	cmp	r3, #96	; 0x60
 8006b0a:	d004      	beq.n	8006b16 <HAL_TIM_PWM_Init+0x9e>
 8006b0c:	f240 512a 	movw	r1, #1322	; 0x52a
 8006b10:	483b      	ldr	r0, [pc, #236]	; (8006c00 <HAL_TIM_PWM_Init+0x188>)
 8006b12:	f7fa fa93 	bl	800103c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00e      	beq.n	8006b3c <HAL_TIM_PWM_Init+0xc4>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b26:	d009      	beq.n	8006b3c <HAL_TIM_PWM_Init+0xc4>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b30:	d004      	beq.n	8006b3c <HAL_TIM_PWM_Init+0xc4>
 8006b32:	f240 512b 	movw	r1, #1323	; 0x52b
 8006b36:	4832      	ldr	r0, [pc, #200]	; (8006c00 <HAL_TIM_PWM_Init+0x188>)
 8006b38:	f7fa fa80 	bl	800103c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <HAL_TIM_PWM_Init+0xde>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	2b80      	cmp	r3, #128	; 0x80
 8006b4a:	d004      	beq.n	8006b56 <HAL_TIM_PWM_Init+0xde>
 8006b4c:	f240 512c 	movw	r1, #1324	; 0x52c
 8006b50:	482b      	ldr	r0, [pc, #172]	; (8006c00 <HAL_TIM_PWM_Init+0x188>)
 8006b52:	f7fa fa73 	bl	800103c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f84a 	bl	8006c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f001 f9b2 	bl	8007eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40000400 	.word	0x40000400
 8006bec:	40000800 	.word	0x40000800
 8006bf0:	40000c00 	.word	0x40000c00
 8006bf4:	40014000 	.word	0x40014000
 8006bf8:	40014400 	.word	0x40014400
 8006bfc:	40014800 	.word	0x40014800
 8006c00:	08010730 	.word	0x08010730

08006c04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a8a      	ldr	r2, [pc, #552]	; (8006e50 <HAL_TIM_PWM_Start+0x238>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d10b      	bne.n	8006c44 <HAL_TIM_PWM_Start+0x2c>
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d06c      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d069      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2b08      	cmp	r3, #8
 8006c3c:	d066      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b0c      	cmp	r3, #12
 8006c42:	d063      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c4c:	d10b      	bne.n	8006c66 <HAL_TIM_PWM_Start+0x4e>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d05b      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d058      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d055      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b0c      	cmp	r3, #12
 8006c64:	d052      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a7a      	ldr	r2, [pc, #488]	; (8006e54 <HAL_TIM_PWM_Start+0x23c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d10b      	bne.n	8006c88 <HAL_TIM_PWM_Start+0x70>
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d04a      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d047      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b08      	cmp	r3, #8
 8006c80:	d044      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b0c      	cmp	r3, #12
 8006c86:	d041      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a72      	ldr	r2, [pc, #456]	; (8006e58 <HAL_TIM_PWM_Start+0x240>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d10b      	bne.n	8006caa <HAL_TIM_PWM_Start+0x92>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d039      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d036      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d033      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b0c      	cmp	r3, #12
 8006ca8:	d030      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a6b      	ldr	r2, [pc, #428]	; (8006e5c <HAL_TIM_PWM_Start+0x244>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d10b      	bne.n	8006ccc <HAL_TIM_PWM_Start+0xb4>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d028      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d025      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b08      	cmp	r3, #8
 8006cc4:	d022      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b0c      	cmp	r3, #12
 8006cca:	d01f      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a63      	ldr	r2, [pc, #396]	; (8006e60 <HAL_TIM_PWM_Start+0x248>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d105      	bne.n	8006ce2 <HAL_TIM_PWM_Start+0xca>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d017      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d014      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a5f      	ldr	r2, [pc, #380]	; (8006e64 <HAL_TIM_PWM_Start+0x24c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d102      	bne.n	8006cf2 <HAL_TIM_PWM_Start+0xda>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00c      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a5c      	ldr	r2, [pc, #368]	; (8006e68 <HAL_TIM_PWM_Start+0x250>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d102      	bne.n	8006d02 <HAL_TIM_PWM_Start+0xea>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d004      	beq.n	8006d0c <HAL_TIM_PWM_Start+0xf4>
 8006d02:	f240 51af 	movw	r1, #1455	; 0x5af
 8006d06:	4859      	ldr	r0, [pc, #356]	; (8006e6c <HAL_TIM_PWM_Start+0x254>)
 8006d08:	f7fa f998 	bl	800103c <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <HAL_TIM_PWM_Start+0x10e>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	bf14      	ite	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	2300      	moveq	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	e022      	b.n	8006d6c <HAL_TIM_PWM_Start+0x154>
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d109      	bne.n	8006d40 <HAL_TIM_PWM_Start+0x128>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	bf14      	ite	ne
 8006d38:	2301      	movne	r3, #1
 8006d3a:	2300      	moveq	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	e015      	b.n	8006d6c <HAL_TIM_PWM_Start+0x154>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b08      	cmp	r3, #8
 8006d44:	d109      	bne.n	8006d5a <HAL_TIM_PWM_Start+0x142>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	bf14      	ite	ne
 8006d52:	2301      	movne	r3, #1
 8006d54:	2300      	moveq	r3, #0
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	e008      	b.n	8006d6c <HAL_TIM_PWM_Start+0x154>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	bf14      	ite	ne
 8006d66:	2301      	movne	r3, #1
 8006d68:	2300      	moveq	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <HAL_TIM_PWM_Start+0x15c>
  {
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e068      	b.n	8006e46 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d104      	bne.n	8006d84 <HAL_TIM_PWM_Start+0x16c>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d82:	e013      	b.n	8006dac <HAL_TIM_PWM_Start+0x194>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d104      	bne.n	8006d94 <HAL_TIM_PWM_Start+0x17c>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d92:	e00b      	b.n	8006dac <HAL_TIM_PWM_Start+0x194>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d104      	bne.n	8006da4 <HAL_TIM_PWM_Start+0x18c>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006da2:	e003      	b.n	8006dac <HAL_TIM_PWM_Start+0x194>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2201      	movs	r2, #1
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f001 fbc9 	bl	800854c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a24      	ldr	r2, [pc, #144]	; (8006e50 <HAL_TIM_PWM_Start+0x238>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d107      	bne.n	8006dd4 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a1d      	ldr	r2, [pc, #116]	; (8006e50 <HAL_TIM_PWM_Start+0x238>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d018      	beq.n	8006e10 <HAL_TIM_PWM_Start+0x1f8>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de6:	d013      	beq.n	8006e10 <HAL_TIM_PWM_Start+0x1f8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a19      	ldr	r2, [pc, #100]	; (8006e54 <HAL_TIM_PWM_Start+0x23c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00e      	beq.n	8006e10 <HAL_TIM_PWM_Start+0x1f8>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <HAL_TIM_PWM_Start+0x240>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d009      	beq.n	8006e10 <HAL_TIM_PWM_Start+0x1f8>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a16      	ldr	r2, [pc, #88]	; (8006e5c <HAL_TIM_PWM_Start+0x244>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d004      	beq.n	8006e10 <HAL_TIM_PWM_Start+0x1f8>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a15      	ldr	r2, [pc, #84]	; (8006e60 <HAL_TIM_PWM_Start+0x248>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d111      	bne.n	8006e34 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b06      	cmp	r3, #6
 8006e20:	d010      	beq.n	8006e44 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 0201 	orr.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e32:	e007      	b.n	8006e44 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0201 	orr.w	r2, r2, #1
 8006e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	40010000 	.word	0x40010000
 8006e54:	40000400 	.word	0x40000400
 8006e58:	40000800 	.word	0x40000800
 8006e5c:	40000c00 	.word	0x40000c00
 8006e60:	40014000 	.word	0x40014000
 8006e64:	40014400 	.word	0x40014400
 8006e68:	40014800 	.word	0x40014800
 8006e6c:	08010730 	.word	0x08010730

08006e70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e18a      	b.n	800719a <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a78      	ldr	r2, [pc, #480]	; (800706c <HAL_TIM_Encoder_Init+0x1fc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d01d      	beq.n	8006eca <HAL_TIM_Encoder_Init+0x5a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e96:	d018      	beq.n	8006eca <HAL_TIM_Encoder_Init+0x5a>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a74      	ldr	r2, [pc, #464]	; (8007070 <HAL_TIM_Encoder_Init+0x200>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d013      	beq.n	8006eca <HAL_TIM_Encoder_Init+0x5a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a73      	ldr	r2, [pc, #460]	; (8007074 <HAL_TIM_Encoder_Init+0x204>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00e      	beq.n	8006eca <HAL_TIM_Encoder_Init+0x5a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a71      	ldr	r2, [pc, #452]	; (8007078 <HAL_TIM_Encoder_Init+0x208>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d009      	beq.n	8006eca <HAL_TIM_Encoder_Init+0x5a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a70      	ldr	r2, [pc, #448]	; (800707c <HAL_TIM_Encoder_Init+0x20c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d004      	beq.n	8006eca <HAL_TIM_Encoder_Init+0x5a>
 8006ec0:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8006ec4:	486e      	ldr	r0, [pc, #440]	; (8007080 <HAL_TIM_Encoder_Init+0x210>)
 8006ec6:	f7fa f8b9 	bl	800103c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d014      	beq.n	8006efc <HAL_TIM_Encoder_Init+0x8c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	2b10      	cmp	r3, #16
 8006ed8:	d010      	beq.n	8006efc <HAL_TIM_Encoder_Init+0x8c>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2b20      	cmp	r3, #32
 8006ee0:	d00c      	beq.n	8006efc <HAL_TIM_Encoder_Init+0x8c>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b40      	cmp	r3, #64	; 0x40
 8006ee8:	d008      	beq.n	8006efc <HAL_TIM_Encoder_Init+0x8c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	2b60      	cmp	r3, #96	; 0x60
 8006ef0:	d004      	beq.n	8006efc <HAL_TIM_Encoder_Init+0x8c>
 8006ef2:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8006ef6:	4862      	ldr	r0, [pc, #392]	; (8007080 <HAL_TIM_Encoder_Init+0x210>)
 8006ef8:	f7fa f8a0 	bl	800103c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00e      	beq.n	8006f22 <HAL_TIM_Encoder_Init+0xb2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f0c:	d009      	beq.n	8006f22 <HAL_TIM_Encoder_Init+0xb2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f16:	d004      	beq.n	8006f22 <HAL_TIM_Encoder_Init+0xb2>
 8006f18:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8006f1c:	4858      	ldr	r0, [pc, #352]	; (8007080 <HAL_TIM_Encoder_Init+0x210>)
 8006f1e:	f7fa f88d 	bl	800103c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d008      	beq.n	8006f3c <HAL_TIM_Encoder_Init+0xcc>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	2b80      	cmp	r3, #128	; 0x80
 8006f30:	d004      	beq.n	8006f3c <HAL_TIM_Encoder_Init+0xcc>
 8006f32:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8006f36:	4852      	ldr	r0, [pc, #328]	; (8007080 <HAL_TIM_Encoder_Init+0x210>)
 8006f38:	f7fa f880 	bl	800103c <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d00c      	beq.n	8006f5e <HAL_TIM_Encoder_Init+0xee>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d008      	beq.n	8006f5e <HAL_TIM_Encoder_Init+0xee>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d004      	beq.n	8006f5e <HAL_TIM_Encoder_Init+0xee>
 8006f54:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8006f58:	4849      	ldr	r0, [pc, #292]	; (8007080 <HAL_TIM_Encoder_Init+0x210>)
 8006f5a:	f7fa f86f 	bl	800103c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d00c      	beq.n	8006f80 <HAL_TIM_Encoder_Init+0x110>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d008      	beq.n	8006f80 <HAL_TIM_Encoder_Init+0x110>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d004      	beq.n	8006f80 <HAL_TIM_Encoder_Init+0x110>
 8006f76:	f640 31d6 	movw	r1, #3030	; 0xbd6
 8006f7a:	4841      	ldr	r0, [pc, #260]	; (8007080 <HAL_TIM_Encoder_Init+0x210>)
 8006f7c:	f7fa f85e 	bl	800103c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d00c      	beq.n	8006fa2 <HAL_TIM_Encoder_Init+0x132>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d008      	beq.n	8006fa2 <HAL_TIM_Encoder_Init+0x132>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d004      	beq.n	8006fa2 <HAL_TIM_Encoder_Init+0x132>
 8006f98:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8006f9c:	4838      	ldr	r0, [pc, #224]	; (8007080 <HAL_TIM_Encoder_Init+0x210>)
 8006f9e:	f7fa f84d 	bl	800103c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d008      	beq.n	8006fbc <HAL_TIM_Encoder_Init+0x14c>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d004      	beq.n	8006fbc <HAL_TIM_Encoder_Init+0x14c>
 8006fb2:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8006fb6:	4832      	ldr	r0, [pc, #200]	; (8007080 <HAL_TIM_Encoder_Init+0x210>)
 8006fb8:	f7fa f840 	bl	800103c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <HAL_TIM_Encoder_Init+0x166>
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d004      	beq.n	8006fd6 <HAL_TIM_Encoder_Init+0x166>
 8006fcc:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8006fd0:	482b      	ldr	r0, [pc, #172]	; (8007080 <HAL_TIM_Encoder_Init+0x210>)
 8006fd2:	f7fa f833 	bl	800103c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d010      	beq.n	8007000 <HAL_TIM_Encoder_Init+0x190>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d00c      	beq.n	8007000 <HAL_TIM_Encoder_Init+0x190>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2b08      	cmp	r3, #8
 8006fec:	d008      	beq.n	8007000 <HAL_TIM_Encoder_Init+0x190>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b0c      	cmp	r3, #12
 8006ff4:	d004      	beq.n	8007000 <HAL_TIM_Encoder_Init+0x190>
 8006ff6:	f640 31da 	movw	r1, #3034	; 0xbda
 8006ffa:	4821      	ldr	r0, [pc, #132]	; (8007080 <HAL_TIM_Encoder_Init+0x210>)
 8006ffc:	f7fa f81e 	bl	800103c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d010      	beq.n	800702a <HAL_TIM_Encoder_Init+0x1ba>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	2b04      	cmp	r3, #4
 800700e:	d00c      	beq.n	800702a <HAL_TIM_Encoder_Init+0x1ba>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d008      	beq.n	800702a <HAL_TIM_Encoder_Init+0x1ba>
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	2b0c      	cmp	r3, #12
 800701e:	d004      	beq.n	800702a <HAL_TIM_Encoder_Init+0x1ba>
 8007020:	f640 31db 	movw	r1, #3035	; 0xbdb
 8007024:	4816      	ldr	r0, [pc, #88]	; (8007080 <HAL_TIM_Encoder_Init+0x210>)
 8007026:	f7fa f809 	bl	800103c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	2b0f      	cmp	r3, #15
 8007030:	d904      	bls.n	800703c <HAL_TIM_Encoder_Init+0x1cc>
 8007032:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8007036:	4812      	ldr	r0, [pc, #72]	; (8007080 <HAL_TIM_Encoder_Init+0x210>)
 8007038:	f7fa f800 	bl	800103c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	2b0f      	cmp	r3, #15
 8007042:	d904      	bls.n	800704e <HAL_TIM_Encoder_Init+0x1de>
 8007044:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8007048:	480d      	ldr	r0, [pc, #52]	; (8007080 <HAL_TIM_Encoder_Init+0x210>)
 800704a:	f7f9 fff7 	bl	800103c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d114      	bne.n	8007084 <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fa fde8 	bl	8001c38 <HAL_TIM_Encoder_MspInit>
 8007068:	e00c      	b.n	8007084 <HAL_TIM_Encoder_Init+0x214>
 800706a:	bf00      	nop
 800706c:	40010000 	.word	0x40010000
 8007070:	40000400 	.word	0x40000400
 8007074:	40000800 	.word	0x40000800
 8007078:	40000c00 	.word	0x40000c00
 800707c:	40014000 	.word	0x40014000
 8007080:	08010730 	.word	0x08010730
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800709a:	f023 0307 	bic.w	r3, r3, #7
 800709e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3304      	adds	r3, #4
 80070a8:	4619      	mov	r1, r3
 80070aa:	4610      	mov	r0, r2
 80070ac:	f000 ff1e 	bl	8007eec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d8:	f023 0303 	bic.w	r3, r3, #3
 80070dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	4313      	orrs	r3, r2
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80070f6:	f023 030c 	bic.w	r3, r3, #12
 80070fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	4313      	orrs	r3, r2
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	011a      	lsls	r2, r3, #4
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	031b      	lsls	r3, r3, #12
 8007126:	4313      	orrs	r3, r2
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007134:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800713c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	4313      	orrs	r3, r2
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop

080071a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a4d      	ldr	r2, [pc, #308]	; (8007308 <HAL_TIM_Encoder_Start+0x164>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d01d      	beq.n	8007214 <HAL_TIM_Encoder_Start+0x70>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e0:	d018      	beq.n	8007214 <HAL_TIM_Encoder_Start+0x70>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a49      	ldr	r2, [pc, #292]	; (800730c <HAL_TIM_Encoder_Start+0x168>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d013      	beq.n	8007214 <HAL_TIM_Encoder_Start+0x70>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a47      	ldr	r2, [pc, #284]	; (8007310 <HAL_TIM_Encoder_Start+0x16c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d00e      	beq.n	8007214 <HAL_TIM_Encoder_Start+0x70>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a46      	ldr	r2, [pc, #280]	; (8007314 <HAL_TIM_Encoder_Start+0x170>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d009      	beq.n	8007214 <HAL_TIM_Encoder_Start+0x70>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a44      	ldr	r2, [pc, #272]	; (8007318 <HAL_TIM_Encoder_Start+0x174>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d004      	beq.n	8007214 <HAL_TIM_Encoder_Start+0x70>
 800720a:	f640 418e 	movw	r1, #3214	; 0xc8e
 800720e:	4843      	ldr	r0, [pc, #268]	; (800731c <HAL_TIM_Encoder_Start+0x178>)
 8007210:	f7f9 ff14 	bl	800103c <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d110      	bne.n	800723c <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d102      	bne.n	8007226 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007220:	7b7b      	ldrb	r3, [r7, #13]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d001      	beq.n	800722a <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e069      	b.n	80072fe <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2202      	movs	r2, #2
 800722e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800723a:	e031      	b.n	80072a0 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b04      	cmp	r3, #4
 8007240:	d110      	bne.n	8007264 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007242:	7bbb      	ldrb	r3, [r7, #14]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d102      	bne.n	800724e <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007248:	7b3b      	ldrb	r3, [r7, #12]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d001      	beq.n	8007252 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e055      	b.n	80072fe <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2202      	movs	r2, #2
 8007256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007262:	e01d      	b.n	80072a0 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d108      	bne.n	800727c <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d105      	bne.n	800727c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007270:	7b7b      	ldrb	r3, [r7, #13]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d102      	bne.n	800727c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007276:	7b3b      	ldrb	r3, [r7, #12]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d001      	beq.n	8007280 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e03e      	b.n	80072fe <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <HAL_TIM_Encoder_Start+0x10a>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d008      	beq.n	80072be <HAL_TIM_Encoder_Start+0x11a>
 80072ac:	e00f      	b.n	80072ce <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2201      	movs	r2, #1
 80072b4:	2100      	movs	r1, #0
 80072b6:	4618      	mov	r0, r3
 80072b8:	f001 f948 	bl	800854c <TIM_CCxChannelCmd>
      break;
 80072bc:	e016      	b.n	80072ec <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2201      	movs	r2, #1
 80072c4:	2104      	movs	r1, #4
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 f940 	bl	800854c <TIM_CCxChannelCmd>
      break;
 80072cc:	e00e      	b.n	80072ec <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2201      	movs	r2, #1
 80072d4:	2100      	movs	r1, #0
 80072d6:	4618      	mov	r0, r3
 80072d8:	f001 f938 	bl	800854c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2201      	movs	r2, #1
 80072e2:	2104      	movs	r1, #4
 80072e4:	4618      	mov	r0, r3
 80072e6:	f001 f931 	bl	800854c <TIM_CCxChannelCmd>
      break;
 80072ea:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0201 	orr.w	r2, r2, #1
 80072fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	40010000 	.word	0x40010000
 800730c:	40000400 	.word	0x40000400
 8007310:	40000800 	.word	0x40000800
 8007314:	40000c00 	.word	0x40000c00
 8007318:	40014000 	.word	0x40014000
 800731c:	08010730 	.word	0x08010730

08007320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b02      	cmp	r3, #2
 8007334:	d122      	bne.n	800737c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b02      	cmp	r3, #2
 8007342:	d11b      	bne.n	800737c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0202 	mvn.w	r2, #2
 800734c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fda4 	bl	8007eb0 <HAL_TIM_IC_CaptureCallback>
 8007368:	e005      	b.n	8007376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fd96 	bl	8007e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fda7 	bl	8007ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b04      	cmp	r3, #4
 8007388:	d122      	bne.n	80073d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b04      	cmp	r3, #4
 8007396:	d11b      	bne.n	80073d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0204 	mvn.w	r2, #4
 80073a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2202      	movs	r2, #2
 80073a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fd7a 	bl	8007eb0 <HAL_TIM_IC_CaptureCallback>
 80073bc:	e005      	b.n	80073ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fd6c 	bl	8007e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fd7d 	bl	8007ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b08      	cmp	r3, #8
 80073dc:	d122      	bne.n	8007424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d11b      	bne.n	8007424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0208 	mvn.w	r2, #8
 80073f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2204      	movs	r2, #4
 80073fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fd50 	bl	8007eb0 <HAL_TIM_IC_CaptureCallback>
 8007410:	e005      	b.n	800741e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fd42 	bl	8007e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fd53 	bl	8007ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	2b10      	cmp	r3, #16
 8007430:	d122      	bne.n	8007478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	2b10      	cmp	r3, #16
 800743e:	d11b      	bne.n	8007478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0210 	mvn.w	r2, #16
 8007448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2208      	movs	r2, #8
 800744e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fd26 	bl	8007eb0 <HAL_TIM_IC_CaptureCallback>
 8007464:	e005      	b.n	8007472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fd18 	bl	8007e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fd29 	bl	8007ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b01      	cmp	r3, #1
 8007484:	d10e      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b01      	cmp	r3, #1
 8007492:	d107      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0201 	mvn.w	r2, #1
 800749c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7f9 fdb8 	bl	8001014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ae:	2b80      	cmp	r3, #128	; 0x80
 80074b0:	d10e      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074bc:	2b80      	cmp	r3, #128	; 0x80
 80074be:	d107      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 f972 	bl	80087b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074da:	2b40      	cmp	r3, #64	; 0x40
 80074dc:	d10e      	bne.n	80074fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e8:	2b40      	cmp	r3, #64	; 0x40
 80074ea:	d107      	bne.n	80074fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fcee 	bl	8007ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b20      	cmp	r3, #32
 8007508:	d10e      	bne.n	8007528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f003 0320 	and.w	r3, r3, #32
 8007514:	2b20      	cmp	r3, #32
 8007516:	d107      	bne.n	8007528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f06f 0220 	mvn.w	r2, #32
 8007520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 f93c 	bl	80087a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d010      	beq.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b04      	cmp	r3, #4
 800754a:	d00d      	beq.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x38>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b08      	cmp	r3, #8
 8007550:	d00a      	beq.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b0c      	cmp	r3, #12
 8007556:	d007      	beq.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b3c      	cmp	r3, #60	; 0x3c
 800755c:	d004      	beq.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x38>
 800755e:	f241 0177 	movw	r1, #4215	; 0x1077
 8007562:	4893      	ldr	r0, [pc, #588]	; (80077b0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007564:	f7f9 fd6a 	bl	800103c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b60      	cmp	r3, #96	; 0x60
 800756e:	d008      	beq.n	8007582 <HAL_TIM_PWM_ConfigChannel+0x52>
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b70      	cmp	r3, #112	; 0x70
 8007576:	d004      	beq.n	8007582 <HAL_TIM_PWM_ConfigChannel+0x52>
 8007578:	f241 0178 	movw	r1, #4216	; 0x1078
 800757c:	488c      	ldr	r0, [pc, #560]	; (80077b0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800757e:	f7f9 fd5d 	bl	800103c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d008      	beq.n	800759c <HAL_TIM_PWM_ConfigChannel+0x6c>
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	2b02      	cmp	r3, #2
 8007590:	d004      	beq.n	800759c <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007592:	f241 0179 	movw	r1, #4217	; 0x1079
 8007596:	4886      	ldr	r0, [pc, #536]	; (80077b0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007598:	f7f9 fd50 	bl	800103c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d004      	beq.n	80075b6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80075ac:	f241 017a 	movw	r1, #4218	; 0x107a
 80075b0:	487f      	ldr	r0, [pc, #508]	; (80077b0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80075b2:	f7f9 fd43 	bl	800103c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x94>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e14c      	b.n	800785e <HAL_TIM_PWM_ConfigChannel+0x32e>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b0c      	cmp	r3, #12
 80075d0:	f200 813d 	bhi.w	800784e <HAL_TIM_PWM_ConfigChannel+0x31e>
 80075d4:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <HAL_TIM_PWM_ConfigChannel+0xac>)
 80075d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075da:	bf00      	nop
 80075dc:	08007611 	.word	0x08007611
 80075e0:	0800784f 	.word	0x0800784f
 80075e4:	0800784f 	.word	0x0800784f
 80075e8:	0800784f 	.word	0x0800784f
 80075ec:	080076ab 	.word	0x080076ab
 80075f0:	0800784f 	.word	0x0800784f
 80075f4:	0800784f 	.word	0x0800784f
 80075f8:	0800784f 	.word	0x0800784f
 80075fc:	08007733 	.word	0x08007733
 8007600:	0800784f 	.word	0x0800784f
 8007604:	0800784f 	.word	0x0800784f
 8007608:	0800784f 	.word	0x0800784f
 800760c:	080077d1 	.word	0x080077d1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a67      	ldr	r2, [pc, #412]	; (80077b4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d027      	beq.n	800766a <HAL_TIM_PWM_ConfigChannel+0x13a>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007622:	d022      	beq.n	800766a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a63      	ldr	r2, [pc, #396]	; (80077b8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d01d      	beq.n	800766a <HAL_TIM_PWM_ConfigChannel+0x13a>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a62      	ldr	r2, [pc, #392]	; (80077bc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d018      	beq.n	800766a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a60      	ldr	r2, [pc, #384]	; (80077c0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d013      	beq.n	800766a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a5f      	ldr	r2, [pc, #380]	; (80077c4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d00e      	beq.n	800766a <HAL_TIM_PWM_ConfigChannel+0x13a>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a5d      	ldr	r2, [pc, #372]	; (80077c8 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d009      	beq.n	800766a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a5c      	ldr	r2, [pc, #368]	; (80077cc <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d004      	beq.n	800766a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007660:	f241 0184 	movw	r1, #4228	; 0x1084
 8007664:	4852      	ldr	r0, [pc, #328]	; (80077b0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007666:	f7f9 fce9 	bl	800103c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68b9      	ldr	r1, [r7, #8]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 fcbb 	bl	8007fec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0208 	orr.w	r2, r2, #8
 8007684:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	699a      	ldr	r2, [r3, #24]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0204 	bic.w	r2, r2, #4
 8007694:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6999      	ldr	r1, [r3, #24]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	691a      	ldr	r2, [r3, #16]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	619a      	str	r2, [r3, #24]
      break;
 80076a8:	e0d4      	b.n	8007854 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a41      	ldr	r2, [pc, #260]	; (80077b4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d01d      	beq.n	80076f0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076bc:	d018      	beq.n	80076f0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a3d      	ldr	r2, [pc, #244]	; (80077b8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d013      	beq.n	80076f0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a3b      	ldr	r2, [pc, #236]	; (80077bc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d00e      	beq.n	80076f0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a3a      	ldr	r2, [pc, #232]	; (80077c0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d009      	beq.n	80076f0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a38      	ldr	r2, [pc, #224]	; (80077c4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d004      	beq.n	80076f0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80076e6:	f241 0195 	movw	r1, #4245	; 0x1095
 80076ea:	4831      	ldr	r0, [pc, #196]	; (80077b0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80076ec:	f7f9 fca6 	bl	800103c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68b9      	ldr	r1, [r7, #8]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fd08 	bl	800810c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699a      	ldr	r2, [r3, #24]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800770a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800771a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6999      	ldr	r1, [r3, #24]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	021a      	lsls	r2, r3, #8
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	619a      	str	r2, [r3, #24]
      break;
 8007730:	e090      	b.n	8007854 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a1f      	ldr	r2, [pc, #124]	; (80077b4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d018      	beq.n	800776e <HAL_TIM_PWM_ConfigChannel+0x23e>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007744:	d013      	beq.n	800776e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a1b      	ldr	r2, [pc, #108]	; (80077b8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d00e      	beq.n	800776e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a19      	ldr	r2, [pc, #100]	; (80077bc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d009      	beq.n	800776e <HAL_TIM_PWM_ConfigChannel+0x23e>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d004      	beq.n	800776e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007764:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8007768:	4811      	ldr	r0, [pc, #68]	; (80077b0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800776a:	f7f9 fc67 	bl	800103c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fd5d 	bl	8008234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f042 0208 	orr.w	r2, r2, #8
 8007788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69da      	ldr	r2, [r3, #28]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0204 	bic.w	r2, r2, #4
 8007798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69d9      	ldr	r1, [r3, #28]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	61da      	str	r2, [r3, #28]
      break;
 80077ac:	e052      	b.n	8007854 <HAL_TIM_PWM_ConfigChannel+0x324>
 80077ae:	bf00      	nop
 80077b0:	08010730 	.word	0x08010730
 80077b4:	40010000 	.word	0x40010000
 80077b8:	40000400 	.word	0x40000400
 80077bc:	40000800 	.word	0x40000800
 80077c0:	40000c00 	.word	0x40000c00
 80077c4:	40014000 	.word	0x40014000
 80077c8:	40014400 	.word	0x40014400
 80077cc:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a24      	ldr	r2, [pc, #144]	; (8007868 <HAL_TIM_PWM_ConfigChannel+0x338>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d018      	beq.n	800780c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e2:	d013      	beq.n	800780c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a20      	ldr	r2, [pc, #128]	; (800786c <HAL_TIM_PWM_ConfigChannel+0x33c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00e      	beq.n	800780c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a1f      	ldr	r2, [pc, #124]	; (8007870 <HAL_TIM_PWM_ConfigChannel+0x340>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d009      	beq.n	800780c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a1d      	ldr	r2, [pc, #116]	; (8007874 <HAL_TIM_PWM_ConfigChannel+0x344>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d004      	beq.n	800780c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007802:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8007806:	481c      	ldr	r0, [pc, #112]	; (8007878 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8007808:	f7f9 fc18 	bl	800103c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68b9      	ldr	r1, [r7, #8]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fda2 	bl	800835c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	69da      	ldr	r2, [r3, #28]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007826:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69da      	ldr	r2, [r3, #28]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007836:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69d9      	ldr	r1, [r3, #28]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	021a      	lsls	r2, r3, #8
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	61da      	str	r2, [r3, #28]
      break;
 800784c:	e002      	b.n	8007854 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	75fb      	strb	r3, [r7, #23]
      break;
 8007852:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	40010000 	.word	0x40010000
 800786c:	40000400 	.word	0x40000400
 8007870:	40000800 	.word	0x40000800
 8007874:	40000c00 	.word	0x40000c00
 8007878:	08010730 	.word	0x08010730

0800787c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_TIM_ConfigClockSource+0x1c>
 8007894:	2302      	movs	r3, #2
 8007896:	e2f0      	b.n	8007e7a <HAL_TIM_ConfigClockSource+0x5fe>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b0:	d029      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x8a>
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b70      	cmp	r3, #112	; 0x70
 80078b8:	d025      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x8a>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c2:	d020      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x8a>
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b40      	cmp	r3, #64	; 0x40
 80078ca:	d01c      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x8a>
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b50      	cmp	r3, #80	; 0x50
 80078d2:	d018      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x8a>
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b60      	cmp	r3, #96	; 0x60
 80078da:	d014      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x8a>
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d010      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x8a>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b10      	cmp	r3, #16
 80078ea:	d00c      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x8a>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b20      	cmp	r3, #32
 80078f2:	d008      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x8a>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b30      	cmp	r3, #48	; 0x30
 80078fa:	d004      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x8a>
 80078fc:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8007900:	487c      	ldr	r0, [pc, #496]	; (8007af4 <HAL_TIM_ConfigClockSource+0x278>)
 8007902:	f7f9 fb9b 	bl	800103c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007914:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800791c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800792e:	f000 80f1 	beq.w	8007b14 <HAL_TIM_ConfigClockSource+0x298>
 8007932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007936:	f200 8293 	bhi.w	8007e60 <HAL_TIM_ConfigClockSource+0x5e4>
 800793a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800793e:	d02d      	beq.n	800799c <HAL_TIM_ConfigClockSource+0x120>
 8007940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007944:	f200 828c 	bhi.w	8007e60 <HAL_TIM_ConfigClockSource+0x5e4>
 8007948:	2b70      	cmp	r3, #112	; 0x70
 800794a:	d05d      	beq.n	8007a08 <HAL_TIM_ConfigClockSource+0x18c>
 800794c:	2b70      	cmp	r3, #112	; 0x70
 800794e:	f200 8287 	bhi.w	8007e60 <HAL_TIM_ConfigClockSource+0x5e4>
 8007952:	2b60      	cmp	r3, #96	; 0x60
 8007954:	f000 81a0 	beq.w	8007c98 <HAL_TIM_ConfigClockSource+0x41c>
 8007958:	2b60      	cmp	r3, #96	; 0x60
 800795a:	f200 8281 	bhi.w	8007e60 <HAL_TIM_ConfigClockSource+0x5e4>
 800795e:	2b50      	cmp	r3, #80	; 0x50
 8007960:	f000 8144 	beq.w	8007bec <HAL_TIM_ConfigClockSource+0x370>
 8007964:	2b50      	cmp	r3, #80	; 0x50
 8007966:	f200 827b 	bhi.w	8007e60 <HAL_TIM_ConfigClockSource+0x5e4>
 800796a:	2b40      	cmp	r3, #64	; 0x40
 800796c:	f000 81f6 	beq.w	8007d5c <HAL_TIM_ConfigClockSource+0x4e0>
 8007970:	2b40      	cmp	r3, #64	; 0x40
 8007972:	f200 8275 	bhi.w	8007e60 <HAL_TIM_ConfigClockSource+0x5e4>
 8007976:	2b30      	cmp	r3, #48	; 0x30
 8007978:	f000 8246 	beq.w	8007e08 <HAL_TIM_ConfigClockSource+0x58c>
 800797c:	2b30      	cmp	r3, #48	; 0x30
 800797e:	f200 826f 	bhi.w	8007e60 <HAL_TIM_ConfigClockSource+0x5e4>
 8007982:	2b20      	cmp	r3, #32
 8007984:	f000 8240 	beq.w	8007e08 <HAL_TIM_ConfigClockSource+0x58c>
 8007988:	2b20      	cmp	r3, #32
 800798a:	f200 8269 	bhi.w	8007e60 <HAL_TIM_ConfigClockSource+0x5e4>
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 823a 	beq.w	8007e08 <HAL_TIM_ConfigClockSource+0x58c>
 8007994:	2b10      	cmp	r3, #16
 8007996:	f000 8237 	beq.w	8007e08 <HAL_TIM_ConfigClockSource+0x58c>
 800799a:	e261      	b.n	8007e60 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a55      	ldr	r2, [pc, #340]	; (8007af8 <HAL_TIM_ConfigClockSource+0x27c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	f000 825f 	beq.w	8007e66 <HAL_TIM_ConfigClockSource+0x5ea>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b0:	f000 8259 	beq.w	8007e66 <HAL_TIM_ConfigClockSource+0x5ea>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a50      	ldr	r2, [pc, #320]	; (8007afc <HAL_TIM_ConfigClockSource+0x280>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	f000 8253 	beq.w	8007e66 <HAL_TIM_ConfigClockSource+0x5ea>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a4e      	ldr	r2, [pc, #312]	; (8007b00 <HAL_TIM_ConfigClockSource+0x284>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	f000 824d 	beq.w	8007e66 <HAL_TIM_ConfigClockSource+0x5ea>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a4c      	ldr	r2, [pc, #304]	; (8007b04 <HAL_TIM_ConfigClockSource+0x288>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	f000 8247 	beq.w	8007e66 <HAL_TIM_ConfigClockSource+0x5ea>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a4a      	ldr	r2, [pc, #296]	; (8007b08 <HAL_TIM_ConfigClockSource+0x28c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	f000 8241 	beq.w	8007e66 <HAL_TIM_ConfigClockSource+0x5ea>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a48      	ldr	r2, [pc, #288]	; (8007b0c <HAL_TIM_ConfigClockSource+0x290>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	f000 823b 	beq.w	8007e66 <HAL_TIM_ConfigClockSource+0x5ea>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a46      	ldr	r2, [pc, #280]	; (8007b10 <HAL_TIM_ConfigClockSource+0x294>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	f000 8235 	beq.w	8007e66 <HAL_TIM_ConfigClockSource+0x5ea>
 80079fc:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8007a00:	483c      	ldr	r0, [pc, #240]	; (8007af4 <HAL_TIM_ConfigClockSource+0x278>)
 8007a02:	f7f9 fb1b 	bl	800103c <assert_failed>
      break;
 8007a06:	e22e      	b.n	8007e66 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a3a      	ldr	r2, [pc, #232]	; (8007af8 <HAL_TIM_ConfigClockSource+0x27c>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d01d      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x1d2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a1a:	d018      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x1d2>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a36      	ldr	r2, [pc, #216]	; (8007afc <HAL_TIM_ConfigClockSource+0x280>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d013      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x1d2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a35      	ldr	r2, [pc, #212]	; (8007b00 <HAL_TIM_ConfigClockSource+0x284>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00e      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x1d2>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a33      	ldr	r2, [pc, #204]	; (8007b04 <HAL_TIM_ConfigClockSource+0x288>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d009      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x1d2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a32      	ldr	r2, [pc, #200]	; (8007b08 <HAL_TIM_ConfigClockSource+0x28c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d004      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x1d2>
 8007a44:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8007a48:	482a      	ldr	r0, [pc, #168]	; (8007af4 <HAL_TIM_ConfigClockSource+0x278>)
 8007a4a:	f7f9 faf7 	bl	800103c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d013      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x202>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5e:	d00e      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x202>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a68:	d009      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x202>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a72:	d004      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x202>
 8007a74:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8007a78:	481e      	ldr	r0, [pc, #120]	; (8007af4 <HAL_TIM_ConfigClockSource+0x278>)
 8007a7a:	f7f9 fadf 	bl	800103c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a86:	d014      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0x236>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d010      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0x236>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00c      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0x236>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d008      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0x236>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2b0a      	cmp	r3, #10
 8007aa6:	d004      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0x236>
 8007aa8:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8007aac:	4811      	ldr	r0, [pc, #68]	; (8007af4 <HAL_TIM_ConfigClockSource+0x278>)
 8007aae:	f7f9 fac5 	bl	800103c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	2b0f      	cmp	r3, #15
 8007ab8:	d904      	bls.n	8007ac4 <HAL_TIM_ConfigClockSource+0x248>
 8007aba:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8007abe:	480d      	ldr	r0, [pc, #52]	; (8007af4 <HAL_TIM_ConfigClockSource+0x278>)
 8007ac0:	f7f9 fabc 	bl	800103c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	6899      	ldr	r1, [r3, #8]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f000 fd1a 	bl	800850c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ae6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	609a      	str	r2, [r3, #8]
      break;
 8007af0:	e1ba      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x5ec>
 8007af2:	bf00      	nop
 8007af4:	08010730 	.word	0x08010730
 8007af8:	40010000 	.word	0x40010000
 8007afc:	40000400 	.word	0x40000400
 8007b00:	40000800 	.word	0x40000800
 8007b04:	40000c00 	.word	0x40000c00
 8007b08:	40014000 	.word	0x40014000
 8007b0c:	40014400 	.word	0x40014400
 8007b10:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a8a      	ldr	r2, [pc, #552]	; (8007d44 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d018      	beq.n	8007b50 <HAL_TIM_ConfigClockSource+0x2d4>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b26:	d013      	beq.n	8007b50 <HAL_TIM_ConfigClockSource+0x2d4>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a86      	ldr	r2, [pc, #536]	; (8007d48 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00e      	beq.n	8007b50 <HAL_TIM_ConfigClockSource+0x2d4>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a85      	ldr	r2, [pc, #532]	; (8007d4c <HAL_TIM_ConfigClockSource+0x4d0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d009      	beq.n	8007b50 <HAL_TIM_ConfigClockSource+0x2d4>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a83      	ldr	r2, [pc, #524]	; (8007d50 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_TIM_ConfigClockSource+0x2d4>
 8007b46:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8007b4a:	4882      	ldr	r0, [pc, #520]	; (8007d54 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007b4c:	f7f9 fa76 	bl	800103c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d013      	beq.n	8007b80 <HAL_TIM_ConfigClockSource+0x304>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b60:	d00e      	beq.n	8007b80 <HAL_TIM_ConfigClockSource+0x304>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b6a:	d009      	beq.n	8007b80 <HAL_TIM_ConfigClockSource+0x304>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b74:	d004      	beq.n	8007b80 <HAL_TIM_ConfigClockSource+0x304>
 8007b76:	f241 41e5 	movw	r1, #5349	; 0x14e5
 8007b7a:	4876      	ldr	r0, [pc, #472]	; (8007d54 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007b7c:	f7f9 fa5e 	bl	800103c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b88:	d014      	beq.n	8007bb4 <HAL_TIM_ConfigClockSource+0x338>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d010      	beq.n	8007bb4 <HAL_TIM_ConfigClockSource+0x338>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00c      	beq.n	8007bb4 <HAL_TIM_ConfigClockSource+0x338>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d008      	beq.n	8007bb4 <HAL_TIM_ConfigClockSource+0x338>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	2b0a      	cmp	r3, #10
 8007ba8:	d004      	beq.n	8007bb4 <HAL_TIM_ConfigClockSource+0x338>
 8007baa:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8007bae:	4869      	ldr	r0, [pc, #420]	; (8007d54 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007bb0:	f7f9 fa44 	bl	800103c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	2b0f      	cmp	r3, #15
 8007bba:	d904      	bls.n	8007bc6 <HAL_TIM_ConfigClockSource+0x34a>
 8007bbc:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8007bc0:	4864      	ldr	r0, [pc, #400]	; (8007d54 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007bc2:	f7f9 fa3b 	bl	800103c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	6899      	ldr	r1, [r3, #8]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f000 fc99 	bl	800850c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	689a      	ldr	r2, [r3, #8]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007be8:	609a      	str	r2, [r3, #8]
      break;
 8007bea:	e13d      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a54      	ldr	r2, [pc, #336]	; (8007d44 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d01d      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x3b6>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfe:	d018      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x3b6>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a50      	ldr	r2, [pc, #320]	; (8007d48 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d013      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x3b6>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a4f      	ldr	r2, [pc, #316]	; (8007d4c <HAL_TIM_ConfigClockSource+0x4d0>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d00e      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x3b6>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a4d      	ldr	r2, [pc, #308]	; (8007d50 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d009      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x3b6>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a4d      	ldr	r2, [pc, #308]	; (8007d58 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d004      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x3b6>
 8007c28:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8007c2c:	4849      	ldr	r0, [pc, #292]	; (8007d54 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007c2e:	f7f9 fa05 	bl	800103c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c3a:	d014      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x3ea>
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d010      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x3ea>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00c      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x3ea>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d008      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x3ea>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2b0a      	cmp	r3, #10
 8007c5a:	d004      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x3ea>
 8007c5c:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8007c60:	483c      	ldr	r0, [pc, #240]	; (8007d54 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007c62:	f7f9 f9eb 	bl	800103c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	2b0f      	cmp	r3, #15
 8007c6c:	d904      	bls.n	8007c78 <HAL_TIM_ConfigClockSource+0x3fc>
 8007c6e:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8007c72:	4838      	ldr	r0, [pc, #224]	; (8007d54 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007c74:	f7f9 f9e2 	bl	800103c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6818      	ldr	r0, [r3, #0]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	6859      	ldr	r1, [r3, #4]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	461a      	mov	r2, r3
 8007c86:	f000 fbc7 	bl	8008418 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2150      	movs	r1, #80	; 0x50
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fc20 	bl	80084d6 <TIM_ITRx_SetConfig>
      break;
 8007c96:	e0e7      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a29      	ldr	r2, [pc, #164]	; (8007d44 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d01d      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x462>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007caa:	d018      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x462>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a25      	ldr	r2, [pc, #148]	; (8007d48 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d013      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x462>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a24      	ldr	r2, [pc, #144]	; (8007d4c <HAL_TIM_ConfigClockSource+0x4d0>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00e      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x462>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a22      	ldr	r2, [pc, #136]	; (8007d50 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d009      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x462>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a22      	ldr	r2, [pc, #136]	; (8007d58 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d004      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x462>
 8007cd4:	f241 5106 	movw	r1, #5382	; 0x1506
 8007cd8:	481e      	ldr	r0, [pc, #120]	; (8007d54 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007cda:	f7f9 f9af 	bl	800103c <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ce6:	d014      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x496>
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d010      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x496>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00c      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x496>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d008      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x496>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	2b0a      	cmp	r3, #10
 8007d06:	d004      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x496>
 8007d08:	f241 5109 	movw	r1, #5385	; 0x1509
 8007d0c:	4811      	ldr	r0, [pc, #68]	; (8007d54 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007d0e:	f7f9 f995 	bl	800103c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	2b0f      	cmp	r3, #15
 8007d18:	d904      	bls.n	8007d24 <HAL_TIM_ConfigClockSource+0x4a8>
 8007d1a:	f241 510a 	movw	r1, #5386	; 0x150a
 8007d1e:	480d      	ldr	r0, [pc, #52]	; (8007d54 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007d20:	f7f9 f98c 	bl	800103c <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6818      	ldr	r0, [r3, #0]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	6859      	ldr	r1, [r3, #4]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	461a      	mov	r2, r3
 8007d32:	f000 fba0 	bl	8008476 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2160      	movs	r1, #96	; 0x60
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 fbca 	bl	80084d6 <TIM_ITRx_SetConfig>
      break;
 8007d42:	e091      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x5ec>
 8007d44:	40010000 	.word	0x40010000
 8007d48:	40000400 	.word	0x40000400
 8007d4c:	40000800 	.word	0x40000800
 8007d50:	40000c00 	.word	0x40000c00
 8007d54:	08010730 	.word	0x08010730
 8007d58:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a48      	ldr	r2, [pc, #288]	; (8007e84 <HAL_TIM_ConfigClockSource+0x608>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d01d      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x526>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6e:	d018      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x526>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a44      	ldr	r2, [pc, #272]	; (8007e88 <HAL_TIM_ConfigClockSource+0x60c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d013      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x526>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a43      	ldr	r2, [pc, #268]	; (8007e8c <HAL_TIM_ConfigClockSource+0x610>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00e      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x526>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a41      	ldr	r2, [pc, #260]	; (8007e90 <HAL_TIM_ConfigClockSource+0x614>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d009      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x526>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a40      	ldr	r2, [pc, #256]	; (8007e94 <HAL_TIM_ConfigClockSource+0x618>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d004      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x526>
 8007d98:	f241 5116 	movw	r1, #5398	; 0x1516
 8007d9c:	483e      	ldr	r0, [pc, #248]	; (8007e98 <HAL_TIM_ConfigClockSource+0x61c>)
 8007d9e:	f7f9 f94d 	bl	800103c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007daa:	d014      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0x55a>
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d010      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0x55a>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00c      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0x55a>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d008      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0x55a>
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2b0a      	cmp	r3, #10
 8007dca:	d004      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0x55a>
 8007dcc:	f241 5119 	movw	r1, #5401	; 0x1519
 8007dd0:	4831      	ldr	r0, [pc, #196]	; (8007e98 <HAL_TIM_ConfigClockSource+0x61c>)
 8007dd2:	f7f9 f933 	bl	800103c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	2b0f      	cmp	r3, #15
 8007ddc:	d904      	bls.n	8007de8 <HAL_TIM_ConfigClockSource+0x56c>
 8007dde:	f241 511a 	movw	r1, #5402	; 0x151a
 8007de2:	482d      	ldr	r0, [pc, #180]	; (8007e98 <HAL_TIM_ConfigClockSource+0x61c>)
 8007de4:	f7f9 f92a 	bl	800103c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6818      	ldr	r0, [r3, #0]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	6859      	ldr	r1, [r3, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	461a      	mov	r2, r3
 8007df6:	f000 fb0f 	bl	8008418 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2140      	movs	r1, #64	; 0x40
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 fb68 	bl	80084d6 <TIM_ITRx_SetConfig>
      break;
 8007e06:	e02f      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a1d      	ldr	r2, [pc, #116]	; (8007e84 <HAL_TIM_ConfigClockSource+0x608>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d01d      	beq.n	8007e4e <HAL_TIM_ConfigClockSource+0x5d2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1a:	d018      	beq.n	8007e4e <HAL_TIM_ConfigClockSource+0x5d2>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a19      	ldr	r2, [pc, #100]	; (8007e88 <HAL_TIM_ConfigClockSource+0x60c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d013      	beq.n	8007e4e <HAL_TIM_ConfigClockSource+0x5d2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a18      	ldr	r2, [pc, #96]	; (8007e8c <HAL_TIM_ConfigClockSource+0x610>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00e      	beq.n	8007e4e <HAL_TIM_ConfigClockSource+0x5d2>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a16      	ldr	r2, [pc, #88]	; (8007e90 <HAL_TIM_ConfigClockSource+0x614>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d009      	beq.n	8007e4e <HAL_TIM_ConfigClockSource+0x5d2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a15      	ldr	r2, [pc, #84]	; (8007e94 <HAL_TIM_ConfigClockSource+0x618>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d004      	beq.n	8007e4e <HAL_TIM_ConfigClockSource+0x5d2>
 8007e44:	f241 5129 	movw	r1, #5417	; 0x1529
 8007e48:	4813      	ldr	r0, [pc, #76]	; (8007e98 <HAL_TIM_ConfigClockSource+0x61c>)
 8007e4a:	f7f9 f8f7 	bl	800103c <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4619      	mov	r1, r3
 8007e58:	4610      	mov	r0, r2
 8007e5a:	f000 fb3c 	bl	80084d6 <TIM_ITRx_SetConfig>
      break;
 8007e5e:	e003      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	73fb      	strb	r3, [r7, #15]
      break;
 8007e64:	e000      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 8007e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	40010000 	.word	0x40010000
 8007e88:	40000400 	.word	0x40000400
 8007e8c:	40000800 	.word	0x40000800
 8007e90:	40000c00 	.word	0x40000c00
 8007e94:	40014000 	.word	0x40014000
 8007e98:	08010730 	.word	0x08010730

08007e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a34      	ldr	r2, [pc, #208]	; (8007fd0 <TIM_Base_SetConfig+0xe4>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d00f      	beq.n	8007f24 <TIM_Base_SetConfig+0x38>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f0a:	d00b      	beq.n	8007f24 <TIM_Base_SetConfig+0x38>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a31      	ldr	r2, [pc, #196]	; (8007fd4 <TIM_Base_SetConfig+0xe8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d007      	beq.n	8007f24 <TIM_Base_SetConfig+0x38>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a30      	ldr	r2, [pc, #192]	; (8007fd8 <TIM_Base_SetConfig+0xec>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d003      	beq.n	8007f24 <TIM_Base_SetConfig+0x38>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a2f      	ldr	r2, [pc, #188]	; (8007fdc <TIM_Base_SetConfig+0xf0>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d108      	bne.n	8007f36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a25      	ldr	r2, [pc, #148]	; (8007fd0 <TIM_Base_SetConfig+0xe4>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d01b      	beq.n	8007f76 <TIM_Base_SetConfig+0x8a>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f44:	d017      	beq.n	8007f76 <TIM_Base_SetConfig+0x8a>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a22      	ldr	r2, [pc, #136]	; (8007fd4 <TIM_Base_SetConfig+0xe8>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d013      	beq.n	8007f76 <TIM_Base_SetConfig+0x8a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a21      	ldr	r2, [pc, #132]	; (8007fd8 <TIM_Base_SetConfig+0xec>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d00f      	beq.n	8007f76 <TIM_Base_SetConfig+0x8a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a20      	ldr	r2, [pc, #128]	; (8007fdc <TIM_Base_SetConfig+0xf0>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00b      	beq.n	8007f76 <TIM_Base_SetConfig+0x8a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a1f      	ldr	r2, [pc, #124]	; (8007fe0 <TIM_Base_SetConfig+0xf4>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d007      	beq.n	8007f76 <TIM_Base_SetConfig+0x8a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a1e      	ldr	r2, [pc, #120]	; (8007fe4 <TIM_Base_SetConfig+0xf8>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d003      	beq.n	8007f76 <TIM_Base_SetConfig+0x8a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a1d      	ldr	r2, [pc, #116]	; (8007fe8 <TIM_Base_SetConfig+0xfc>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d108      	bne.n	8007f88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a08      	ldr	r2, [pc, #32]	; (8007fd0 <TIM_Base_SetConfig+0xe4>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d103      	bne.n	8007fbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	615a      	str	r2, [r3, #20]
}
 8007fc2:	bf00      	nop
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	40010000 	.word	0x40010000
 8007fd4:	40000400 	.word	0x40000400
 8007fd8:	40000800 	.word	0x40000800
 8007fdc:	40000c00 	.word	0x40000c00
 8007fe0:	40014000 	.word	0x40014000
 8007fe4:	40014400 	.word	0x40014400
 8007fe8:	40014800 	.word	0x40014800

08007fec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	f023 0201 	bic.w	r2, r3, #1
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0303 	bic.w	r3, r3, #3
 8008022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f023 0302 	bic.w	r3, r3, #2
 8008034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a30      	ldr	r2, [pc, #192]	; (8008104 <TIM_OC1_SetConfig+0x118>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d119      	bne.n	800807c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d008      	beq.n	8008062 <TIM_OC1_SetConfig+0x76>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	2b08      	cmp	r3, #8
 8008056:	d004      	beq.n	8008062 <TIM_OC1_SetConfig+0x76>
 8008058:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 800805c:	482a      	ldr	r0, [pc, #168]	; (8008108 <TIM_OC1_SetConfig+0x11c>)
 800805e:	f7f8 ffed 	bl	800103c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f023 0308 	bic.w	r3, r3, #8
 8008068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4313      	orrs	r3, r2
 8008072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f023 0304 	bic.w	r3, r3, #4
 800807a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a21      	ldr	r2, [pc, #132]	; (8008104 <TIM_OC1_SetConfig+0x118>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d12d      	bne.n	80080e0 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800808c:	d008      	beq.n	80080a0 <TIM_OC1_SetConfig+0xb4>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d004      	beq.n	80080a0 <TIM_OC1_SetConfig+0xb4>
 8008096:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 800809a:	481b      	ldr	r0, [pc, #108]	; (8008108 <TIM_OC1_SetConfig+0x11c>)
 800809c:	f7f8 ffce 	bl	800103c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080a8:	d008      	beq.n	80080bc <TIM_OC1_SetConfig+0xd0>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d004      	beq.n	80080bc <TIM_OC1_SetConfig+0xd0>
 80080b2:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 80080b6:	4814      	ldr	r0, [pc, #80]	; (8008108 <TIM_OC1_SetConfig+0x11c>)
 80080b8:	f7f8 ffc0 	bl	800103c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	4313      	orrs	r3, r2
 80080de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	621a      	str	r2, [r3, #32]
}
 80080fa:	bf00      	nop
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	40010000 	.word	0x40010000
 8008108:	08010730 	.word	0x08010730

0800810c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	f023 0210 	bic.w	r2, r3, #16
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800813a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	021b      	lsls	r3, r3, #8
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4313      	orrs	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f023 0320 	bic.w	r3, r3, #32
 8008156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	011b      	lsls	r3, r3, #4
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	4313      	orrs	r3, r2
 8008162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a31      	ldr	r2, [pc, #196]	; (800822c <TIM_OC2_SetConfig+0x120>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d11a      	bne.n	80081a2 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d008      	beq.n	8008186 <TIM_OC2_SetConfig+0x7a>
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	2b08      	cmp	r3, #8
 800817a:	d004      	beq.n	8008186 <TIM_OC2_SetConfig+0x7a>
 800817c:	f641 3112 	movw	r1, #6930	; 0x1b12
 8008180:	482b      	ldr	r0, [pc, #172]	; (8008230 <TIM_OC2_SetConfig+0x124>)
 8008182:	f7f8 ff5b 	bl	800103c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800818c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081a0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a21      	ldr	r2, [pc, #132]	; (800822c <TIM_OC2_SetConfig+0x120>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d12f      	bne.n	800820a <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b2:	d008      	beq.n	80081c6 <TIM_OC2_SetConfig+0xba>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d004      	beq.n	80081c6 <TIM_OC2_SetConfig+0xba>
 80081bc:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 80081c0:	481b      	ldr	r0, [pc, #108]	; (8008230 <TIM_OC2_SetConfig+0x124>)
 80081c2:	f7f8 ff3b 	bl	800103c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ce:	d008      	beq.n	80081e2 <TIM_OC2_SetConfig+0xd6>
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d004      	beq.n	80081e2 <TIM_OC2_SetConfig+0xd6>
 80081d8:	f641 3121 	movw	r1, #6945	; 0x1b21
 80081dc:	4814      	ldr	r0, [pc, #80]	; (8008230 <TIM_OC2_SetConfig+0x124>)
 80081de:	f7f8 ff2d 	bl	800103c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	4313      	orrs	r3, r2
 8008208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	621a      	str	r2, [r3, #32]
}
 8008224:	bf00      	nop
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	40010000 	.word	0x40010000
 8008230:	08010730 	.word	0x08010730

08008234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0303 	bic.w	r3, r3, #3
 800826a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800827c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a31      	ldr	r2, [pc, #196]	; (8008354 <TIM_OC3_SetConfig+0x120>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d11a      	bne.n	80082c8 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d008      	beq.n	80082ac <TIM_OC3_SetConfig+0x78>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d004      	beq.n	80082ac <TIM_OC3_SetConfig+0x78>
 80082a2:	f641 315d 	movw	r1, #7005	; 0x1b5d
 80082a6:	482c      	ldr	r0, [pc, #176]	; (8008358 <TIM_OC3_SetConfig+0x124>)
 80082a8:	f7f8 fec8 	bl	800103c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	021b      	lsls	r3, r3, #8
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a22      	ldr	r2, [pc, #136]	; (8008354 <TIM_OC3_SetConfig+0x120>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d12f      	bne.n	8008330 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082d8:	d008      	beq.n	80082ec <TIM_OC3_SetConfig+0xb8>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <TIM_OC3_SetConfig+0xb8>
 80082e2:	f641 316a 	movw	r1, #7018	; 0x1b6a
 80082e6:	481c      	ldr	r0, [pc, #112]	; (8008358 <TIM_OC3_SetConfig+0x124>)
 80082e8:	f7f8 fea8 	bl	800103c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082f4:	d008      	beq.n	8008308 <TIM_OC3_SetConfig+0xd4>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <TIM_OC3_SetConfig+0xd4>
 80082fe:	f641 316b 	movw	r1, #7019	; 0x1b6b
 8008302:	4815      	ldr	r0, [pc, #84]	; (8008358 <TIM_OC3_SetConfig+0x124>)
 8008304:	f7f8 fe9a 	bl	800103c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800830e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	011b      	lsls	r3, r3, #4
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	4313      	orrs	r3, r2
 8008322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	4313      	orrs	r3, r2
 800832e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	621a      	str	r2, [r3, #32]
}
 800834a:	bf00      	nop
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	40010000 	.word	0x40010000
 8008358:	08010730 	.word	0x08010730

0800835c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800838a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	021b      	lsls	r3, r3, #8
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	4313      	orrs	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	031b      	lsls	r3, r3, #12
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a16      	ldr	r2, [pc, #88]	; (8008410 <TIM_OC4_SetConfig+0xb4>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d117      	bne.n	80083ec <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083c4:	d008      	beq.n	80083d8 <TIM_OC4_SetConfig+0x7c>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d004      	beq.n	80083d8 <TIM_OC4_SetConfig+0x7c>
 80083ce:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 80083d2:	4810      	ldr	r0, [pc, #64]	; (8008414 <TIM_OC4_SetConfig+0xb8>)
 80083d4:	f7f8 fe32 	bl	800103c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	019b      	lsls	r3, r3, #6
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	621a      	str	r2, [r3, #32]
}
 8008406:	bf00      	nop
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	40010000 	.word	0x40010000
 8008414:	08010730 	.word	0x08010730

08008418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	f023 0201 	bic.w	r2, r3, #1
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	4313      	orrs	r3, r2
 800844c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f023 030a 	bic.w	r3, r3, #10
 8008454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	4313      	orrs	r3, r2
 800845c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	621a      	str	r2, [r3, #32]
}
 800846a:	bf00      	nop
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008476:	b480      	push	{r7}
 8008478:	b087      	sub	sp, #28
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	f023 0210 	bic.w	r2, r3, #16
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	031b      	lsls	r3, r3, #12
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	621a      	str	r2, [r3, #32]
}
 80084ca:	bf00      	nop
 80084cc:	371c      	adds	r7, #28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	f043 0307 	orr.w	r3, r3, #7
 80084f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	609a      	str	r2, [r3, #8]
}
 8008500:	bf00      	nop
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	021a      	lsls	r2, r3, #8
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	431a      	orrs	r2, r3
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4313      	orrs	r3, r2
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	4313      	orrs	r3, r2
 8008538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	609a      	str	r2, [r3, #8]
}
 8008540:	bf00      	nop
 8008542:	371c      	adds	r7, #28
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4a2a      	ldr	r2, [pc, #168]	; (8008604 <TIM_CCxChannelCmd+0xb8>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d020      	beq.n	80085a2 <TIM_CCxChannelCmd+0x56>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008566:	d01c      	beq.n	80085a2 <TIM_CCxChannelCmd+0x56>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4a27      	ldr	r2, [pc, #156]	; (8008608 <TIM_CCxChannelCmd+0xbc>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d018      	beq.n	80085a2 <TIM_CCxChannelCmd+0x56>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4a26      	ldr	r2, [pc, #152]	; (800860c <TIM_CCxChannelCmd+0xc0>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d014      	beq.n	80085a2 <TIM_CCxChannelCmd+0x56>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4a25      	ldr	r2, [pc, #148]	; (8008610 <TIM_CCxChannelCmd+0xc4>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d010      	beq.n	80085a2 <TIM_CCxChannelCmd+0x56>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4a24      	ldr	r2, [pc, #144]	; (8008614 <TIM_CCxChannelCmd+0xc8>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d00c      	beq.n	80085a2 <TIM_CCxChannelCmd+0x56>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4a23      	ldr	r2, [pc, #140]	; (8008618 <TIM_CCxChannelCmd+0xcc>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d008      	beq.n	80085a2 <TIM_CCxChannelCmd+0x56>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4a22      	ldr	r2, [pc, #136]	; (800861c <TIM_CCxChannelCmd+0xd0>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d004      	beq.n	80085a2 <TIM_CCxChannelCmd+0x56>
 8008598:	f641 5194 	movw	r1, #7572	; 0x1d94
 800859c:	4820      	ldr	r0, [pc, #128]	; (8008620 <TIM_CCxChannelCmd+0xd4>)
 800859e:	f7f8 fd4d 	bl	800103c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d010      	beq.n	80085ca <TIM_CCxChannelCmd+0x7e>
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b04      	cmp	r3, #4
 80085ac:	d00d      	beq.n	80085ca <TIM_CCxChannelCmd+0x7e>
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d00a      	beq.n	80085ca <TIM_CCxChannelCmd+0x7e>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b0c      	cmp	r3, #12
 80085b8:	d007      	beq.n	80085ca <TIM_CCxChannelCmd+0x7e>
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2b3c      	cmp	r3, #60	; 0x3c
 80085be:	d004      	beq.n	80085ca <TIM_CCxChannelCmd+0x7e>
 80085c0:	f641 5195 	movw	r1, #7573	; 0x1d95
 80085c4:	4816      	ldr	r0, [pc, #88]	; (8008620 <TIM_CCxChannelCmd+0xd4>)
 80085c6:	f7f8 fd39 	bl	800103c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	f003 031f 	and.w	r3, r3, #31
 80085d0:	2201      	movs	r2, #1
 80085d2:	fa02 f303 	lsl.w	r3, r2, r3
 80085d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6a1a      	ldr	r2, [r3, #32]
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	43db      	mvns	r3, r3
 80085e0:	401a      	ands	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6a1a      	ldr	r2, [r3, #32]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f003 031f 	and.w	r3, r3, #31
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	fa01 f303 	lsl.w	r3, r1, r3
 80085f6:	431a      	orrs	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	621a      	str	r2, [r3, #32]
}
 80085fc:	bf00      	nop
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	40010000 	.word	0x40010000
 8008608:	40000400 	.word	0x40000400
 800860c:	40000800 	.word	0x40000800
 8008610:	40000c00 	.word	0x40000c00
 8008614:	40014000 	.word	0x40014000
 8008618:	40014400 	.word	0x40014400
 800861c:	40014800 	.word	0x40014800
 8008620:	08010730 	.word	0x08010730

08008624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a55      	ldr	r2, [pc, #340]	; (8008788 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d018      	beq.n	800866a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008640:	d013      	beq.n	800866a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a51      	ldr	r2, [pc, #324]	; (800878c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d00e      	beq.n	800866a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a4f      	ldr	r2, [pc, #316]	; (8008790 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d009      	beq.n	800866a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a4e      	ldr	r2, [pc, #312]	; (8008794 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d004      	beq.n	800866a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008660:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8008664:	484c      	ldr	r0, [pc, #304]	; (8008798 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008666:	f7f8 fce9 	bl	800103c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d020      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b10      	cmp	r3, #16
 8008678:	d01c      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b20      	cmp	r3, #32
 8008680:	d018      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b30      	cmp	r3, #48	; 0x30
 8008688:	d014      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b40      	cmp	r3, #64	; 0x40
 8008690:	d010      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b50      	cmp	r3, #80	; 0x50
 8008698:	d00c      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b60      	cmp	r3, #96	; 0x60
 80086a0:	d008      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b70      	cmp	r3, #112	; 0x70
 80086a8:	d004      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80086aa:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80086ae:	483a      	ldr	r0, [pc, #232]	; (8008798 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80086b0:	f7f8 fcc4 	bl	800103c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b80      	cmp	r3, #128	; 0x80
 80086ba:	d008      	beq.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d004      	beq.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80086c4:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80086c8:	4833      	ldr	r0, [pc, #204]	; (8008798 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80086ca:	f7f8 fcb7 	bl	800103c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086d8:	2302      	movs	r3, #2
 80086da:	e050      	b.n	800877e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a1b      	ldr	r2, [pc, #108]	; (8008788 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d018      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008728:	d013      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a17      	ldr	r2, [pc, #92]	; (800878c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00e      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a15      	ldr	r2, [pc, #84]	; (8008790 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d009      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a14      	ldr	r2, [pc, #80]	; (8008794 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d004      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a13      	ldr	r2, [pc, #76]	; (800879c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d10c      	bne.n	800876c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	4313      	orrs	r3, r2
 8008762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	40010000 	.word	0x40010000
 800878c:	40000400 	.word	0x40000400
 8008790:	40000800 	.word	0x40000800
 8008794:	40000c00 	.word	0x40000c00
 8008798:	08010768 	.word	0x08010768
 800879c:	40014000 	.word	0x40014000

080087a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087c8:	b084      	sub	sp, #16
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	f107 001c 	add.w	r0, r7, #28
 80087d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d122      	bne.n	8008826 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80087f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800880a:	2b01      	cmp	r3, #1
 800880c:	d105      	bne.n	800881a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f001 fbee 	bl	8009ffc <USB_CoreReset>
 8008820:	4603      	mov	r3, r0
 8008822:	73fb      	strb	r3, [r7, #15]
 8008824:	e01a      	b.n	800885c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f001 fbe2 	bl	8009ffc <USB_CoreReset>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800883c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800883e:	2b00      	cmp	r3, #0
 8008840:	d106      	bne.n	8008850 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008846:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	639a      	str	r2, [r3, #56]	; 0x38
 800884e:	e005      	b.n	800885c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	2b01      	cmp	r3, #1
 8008860:	d10b      	bne.n	800887a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f043 0206 	orr.w	r2, r3, #6
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f043 0220 	orr.w	r2, r3, #32
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800887a:	7bfb      	ldrb	r3, [r7, #15]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008886:	b004      	add	sp, #16
 8008888:	4770      	bx	lr
	...

0800888c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	2b02      	cmp	r3, #2
 800889e:	d165      	bne.n	800896c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	4a41      	ldr	r2, [pc, #260]	; (80089a8 <USB_SetTurnaroundTime+0x11c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d906      	bls.n	80088b6 <USB_SetTurnaroundTime+0x2a>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4a40      	ldr	r2, [pc, #256]	; (80089ac <USB_SetTurnaroundTime+0x120>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d202      	bcs.n	80088b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80088b0:	230f      	movs	r3, #15
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	e062      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	4a3c      	ldr	r2, [pc, #240]	; (80089ac <USB_SetTurnaroundTime+0x120>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d306      	bcc.n	80088cc <USB_SetTurnaroundTime+0x40>
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	4a3b      	ldr	r2, [pc, #236]	; (80089b0 <USB_SetTurnaroundTime+0x124>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d202      	bcs.n	80088cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80088c6:	230e      	movs	r3, #14
 80088c8:	617b      	str	r3, [r7, #20]
 80088ca:	e057      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4a38      	ldr	r2, [pc, #224]	; (80089b0 <USB_SetTurnaroundTime+0x124>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d306      	bcc.n	80088e2 <USB_SetTurnaroundTime+0x56>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	4a37      	ldr	r2, [pc, #220]	; (80089b4 <USB_SetTurnaroundTime+0x128>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d202      	bcs.n	80088e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80088dc:	230d      	movs	r3, #13
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	e04c      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	4a33      	ldr	r2, [pc, #204]	; (80089b4 <USB_SetTurnaroundTime+0x128>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d306      	bcc.n	80088f8 <USB_SetTurnaroundTime+0x6c>
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	4a32      	ldr	r2, [pc, #200]	; (80089b8 <USB_SetTurnaroundTime+0x12c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d802      	bhi.n	80088f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80088f2:	230c      	movs	r3, #12
 80088f4:	617b      	str	r3, [r7, #20]
 80088f6:	e041      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	4a2f      	ldr	r2, [pc, #188]	; (80089b8 <USB_SetTurnaroundTime+0x12c>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d906      	bls.n	800890e <USB_SetTurnaroundTime+0x82>
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	4a2e      	ldr	r2, [pc, #184]	; (80089bc <USB_SetTurnaroundTime+0x130>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d802      	bhi.n	800890e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008908:	230b      	movs	r3, #11
 800890a:	617b      	str	r3, [r7, #20]
 800890c:	e036      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	4a2a      	ldr	r2, [pc, #168]	; (80089bc <USB_SetTurnaroundTime+0x130>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d906      	bls.n	8008924 <USB_SetTurnaroundTime+0x98>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	4a29      	ldr	r2, [pc, #164]	; (80089c0 <USB_SetTurnaroundTime+0x134>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d802      	bhi.n	8008924 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800891e:	230a      	movs	r3, #10
 8008920:	617b      	str	r3, [r7, #20]
 8008922:	e02b      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4a26      	ldr	r2, [pc, #152]	; (80089c0 <USB_SetTurnaroundTime+0x134>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d906      	bls.n	800893a <USB_SetTurnaroundTime+0xae>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4a25      	ldr	r2, [pc, #148]	; (80089c4 <USB_SetTurnaroundTime+0x138>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d202      	bcs.n	800893a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008934:	2309      	movs	r3, #9
 8008936:	617b      	str	r3, [r7, #20]
 8008938:	e020      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	4a21      	ldr	r2, [pc, #132]	; (80089c4 <USB_SetTurnaroundTime+0x138>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d306      	bcc.n	8008950 <USB_SetTurnaroundTime+0xc4>
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	4a20      	ldr	r2, [pc, #128]	; (80089c8 <USB_SetTurnaroundTime+0x13c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d802      	bhi.n	8008950 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800894a:	2308      	movs	r3, #8
 800894c:	617b      	str	r3, [r7, #20]
 800894e:	e015      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4a1d      	ldr	r2, [pc, #116]	; (80089c8 <USB_SetTurnaroundTime+0x13c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d906      	bls.n	8008966 <USB_SetTurnaroundTime+0xda>
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4a1c      	ldr	r2, [pc, #112]	; (80089cc <USB_SetTurnaroundTime+0x140>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d202      	bcs.n	8008966 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008960:	2307      	movs	r3, #7
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	e00a      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008966:	2306      	movs	r3, #6
 8008968:	617b      	str	r3, [r7, #20]
 800896a:	e007      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008972:	2309      	movs	r3, #9
 8008974:	617b      	str	r3, [r7, #20]
 8008976:	e001      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008978:	2309      	movs	r3, #9
 800897a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	029b      	lsls	r3, r3, #10
 8008990:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008994:	431a      	orrs	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	371c      	adds	r7, #28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	00d8acbf 	.word	0x00d8acbf
 80089ac:	00e4e1c0 	.word	0x00e4e1c0
 80089b0:	00f42400 	.word	0x00f42400
 80089b4:	01067380 	.word	0x01067380
 80089b8:	011a499f 	.word	0x011a499f
 80089bc:	01312cff 	.word	0x01312cff
 80089c0:	014ca43f 	.word	0x014ca43f
 80089c4:	016e3600 	.word	0x016e3600
 80089c8:	01a6ab1f 	.word	0x01a6ab1f
 80089cc:	01e84800 	.word	0x01e84800

080089d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f043 0201 	orr.w	r2, r3, #1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f023 0201 	bic.w	r2, r3, #1
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a30:	78fb      	ldrb	r3, [r7, #3]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d115      	bne.n	8008a62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a42:	2001      	movs	r0, #1
 8008a44:	f7f9 fa58 	bl	8001ef8 <HAL_Delay>
      ms++;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 fa45 	bl	8009ede <USB_GetMode>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d01e      	beq.n	8008a98 <USB_SetCurrentMode+0x84>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b31      	cmp	r3, #49	; 0x31
 8008a5e:	d9f0      	bls.n	8008a42 <USB_SetCurrentMode+0x2e>
 8008a60:	e01a      	b.n	8008a98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a62:	78fb      	ldrb	r3, [r7, #3]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d115      	bne.n	8008a94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a74:	2001      	movs	r0, #1
 8008a76:	f7f9 fa3f 	bl	8001ef8 <HAL_Delay>
      ms++;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 fa2c 	bl	8009ede <USB_GetMode>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <USB_SetCurrentMode+0x84>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2b31      	cmp	r3, #49	; 0x31
 8008a90:	d9f0      	bls.n	8008a74 <USB_SetCurrentMode+0x60>
 8008a92:	e001      	b.n	8008a98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e005      	b.n	8008aa4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b32      	cmp	r3, #50	; 0x32
 8008a9c:	d101      	bne.n	8008aa2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e000      	b.n	8008aa4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008aac:	b084      	sub	sp, #16
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b086      	sub	sp, #24
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	613b      	str	r3, [r7, #16]
 8008aca:	e009      	b.n	8008ae0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	3340      	adds	r3, #64	; 0x40
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	3301      	adds	r3, #1
 8008ade:	613b      	str	r3, [r7, #16]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	2b0e      	cmp	r3, #14
 8008ae4:	d9f2      	bls.n	8008acc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d11c      	bne.n	8008b26 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008afa:	f043 0302 	orr.w	r3, r3, #2
 8008afe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	639a      	str	r2, [r3, #56]	; 0x38
 8008b24:	e00b      	b.n	8008b3e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b44:	461a      	mov	r2, r3
 8008b46:	2300      	movs	r3, #0
 8008b48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b50:	4619      	mov	r1, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b58:	461a      	mov	r2, r3
 8008b5a:	680b      	ldr	r3, [r1, #0]
 8008b5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d10c      	bne.n	8008b7e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d104      	bne.n	8008b74 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f965 	bl	8008e3c <USB_SetDevSpeed>
 8008b72:	e008      	b.n	8008b86 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b74:	2101      	movs	r1, #1
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f960 	bl	8008e3c <USB_SetDevSpeed>
 8008b7c:	e003      	b.n	8008b86 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b7e:	2103      	movs	r1, #3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f95b 	bl	8008e3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b86:	2110      	movs	r1, #16
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f8f3 	bl	8008d74 <USB_FlushTxFifo>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f91f 	bl	8008ddc <USB_FlushRxFifo>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bae:	461a      	mov	r2, r3
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bba:	461a      	mov	r2, r3
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	2300      	movs	r3, #0
 8008bca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bcc:	2300      	movs	r3, #0
 8008bce:	613b      	str	r3, [r7, #16]
 8008bd0:	e043      	b.n	8008c5a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be8:	d118      	bne.n	8008c1c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10a      	bne.n	8008c06 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	e013      	b.n	8008c2e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c12:	461a      	mov	r2, r3
 8008c14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	e008      	b.n	8008c2e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c28:	461a      	mov	r2, r3
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	3301      	adds	r3, #1
 8008c58:	613b      	str	r3, [r7, #16]
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d3b7      	bcc.n	8008bd2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c62:	2300      	movs	r3, #0
 8008c64:	613b      	str	r3, [r7, #16]
 8008c66:	e043      	b.n	8008cf0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c7e:	d118      	bne.n	8008cb2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c92:	461a      	mov	r2, r3
 8008c94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	e013      	b.n	8008cc4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	e008      	b.n	8008cc4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ce8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	3301      	adds	r3, #1
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d3b7      	bcc.n	8008c68 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d105      	bne.n	8008d2c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	f043 0210 	orr.w	r2, r3, #16
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	699a      	ldr	r2, [r3, #24]
 8008d30:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <USB_DevInit+0x2c4>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d005      	beq.n	8008d4a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	f043 0208 	orr.w	r2, r3, #8
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d107      	bne.n	8008d60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d58:	f043 0304 	orr.w	r3, r3, #4
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d6c:	b004      	add	sp, #16
 8008d6e:	4770      	bx	lr
 8008d70:	803c3800 	.word	0x803c3800

08008d74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3301      	adds	r3, #1
 8008d86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4a13      	ldr	r2, [pc, #76]	; (8008dd8 <USB_FlushTxFifo+0x64>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d901      	bls.n	8008d94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e01b      	b.n	8008dcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	daf2      	bge.n	8008d82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	019b      	lsls	r3, r3, #6
 8008da4:	f043 0220 	orr.w	r2, r3, #32
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3301      	adds	r3, #1
 8008db0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4a08      	ldr	r2, [pc, #32]	; (8008dd8 <USB_FlushTxFifo+0x64>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d901      	bls.n	8008dbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e006      	b.n	8008dcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	f003 0320 	and.w	r3, r3, #32
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d0f0      	beq.n	8008dac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	00030d40 	.word	0x00030d40

08008ddc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4a11      	ldr	r2, [pc, #68]	; (8008e38 <USB_FlushRxFifo+0x5c>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d901      	bls.n	8008dfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e018      	b.n	8008e2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	daf2      	bge.n	8008de8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2210      	movs	r2, #16
 8008e0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4a08      	ldr	r2, [pc, #32]	; (8008e38 <USB_FlushRxFifo+0x5c>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d901      	bls.n	8008e1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e006      	b.n	8008e2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f003 0310 	and.w	r3, r3, #16
 8008e26:	2b10      	cmp	r3, #16
 8008e28:	d0f0      	beq.n	8008e0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	00030d40 	.word	0x00030d40

08008e3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	68f9      	ldr	r1, [r7, #12]
 8008e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b087      	sub	sp, #28
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f003 0306 	and.w	r3, r3, #6
 8008e86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d102      	bne.n	8008e94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	75fb      	strb	r3, [r7, #23]
 8008e92:	e00a      	b.n	8008eaa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d002      	beq.n	8008ea0 <USB_GetDevSpeed+0x32>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b06      	cmp	r3, #6
 8008e9e:	d102      	bne.n	8008ea6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	75fb      	strb	r3, [r7, #23]
 8008ea4:	e001      	b.n	8008eaa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ea6:	230f      	movs	r3, #15
 8008ea8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	371c      	adds	r7, #28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	785b      	ldrb	r3, [r3, #1]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d13a      	bne.n	8008f4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eda:	69da      	ldr	r2, [r3, #28]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	f003 030f 	and.w	r3, r3, #15
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	68f9      	ldr	r1, [r7, #12]
 8008eee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d155      	bne.n	8008fb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	791b      	ldrb	r3, [r3, #4]
 8008f26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	059b      	lsls	r3, r3, #22
 8008f2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f30:	4313      	orrs	r3, r2
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	0151      	lsls	r1, r2, #5
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	440a      	add	r2, r1
 8008f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	e036      	b.n	8008fb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f50:	69da      	ldr	r2, [r3, #28]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	f003 030f 	and.w	r3, r3, #15
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f60:	041b      	lsls	r3, r3, #16
 8008f62:	68f9      	ldr	r1, [r7, #12]
 8008f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d11a      	bne.n	8008fb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	791b      	ldrb	r3, [r3, #4]
 8008f9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	0151      	lsls	r1, r2, #5
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	440a      	add	r2, r1
 8008faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
	...

08008fc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	785b      	ldrb	r3, [r3, #1]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d161      	bne.n	80090a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ffa:	d11f      	bne.n	800903c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	0151      	lsls	r1, r2, #5
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	440a      	add	r2, r1
 8009012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009016:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800901a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	0151      	lsls	r1, r2, #5
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	440a      	add	r2, r1
 8009032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800903a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	f003 030f 	and.w	r3, r3, #15
 800904c:	2101      	movs	r1, #1
 800904e:	fa01 f303 	lsl.w	r3, r1, r3
 8009052:	b29b      	uxth	r3, r3
 8009054:	43db      	mvns	r3, r3
 8009056:	68f9      	ldr	r1, [r7, #12]
 8009058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800905c:	4013      	ands	r3, r2
 800905e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009066:	69da      	ldr	r2, [r3, #28]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	f003 030f 	and.w	r3, r3, #15
 8009070:	2101      	movs	r1, #1
 8009072:	fa01 f303 	lsl.w	r3, r1, r3
 8009076:	b29b      	uxth	r3, r3
 8009078:	43db      	mvns	r3, r3
 800907a:	68f9      	ldr	r1, [r7, #12]
 800907c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009080:	4013      	ands	r3, r2
 8009082:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	0159      	lsls	r1, r3, #5
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	440b      	add	r3, r1
 800909a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909e:	4619      	mov	r1, r3
 80090a0:	4b35      	ldr	r3, [pc, #212]	; (8009178 <USB_DeactivateEndpoint+0x1b0>)
 80090a2:	4013      	ands	r3, r2
 80090a4:	600b      	str	r3, [r1, #0]
 80090a6:	e060      	b.n	800916a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090be:	d11f      	bne.n	8009100 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	0151      	lsls	r1, r2, #5
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	440a      	add	r2, r1
 80090d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	0151      	lsls	r1, r2, #5
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	440a      	add	r2, r1
 80090f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	f003 030f 	and.w	r3, r3, #15
 8009110:	2101      	movs	r1, #1
 8009112:	fa01 f303 	lsl.w	r3, r1, r3
 8009116:	041b      	lsls	r3, r3, #16
 8009118:	43db      	mvns	r3, r3
 800911a:	68f9      	ldr	r1, [r7, #12]
 800911c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009120:	4013      	ands	r3, r2
 8009122:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912a:	69da      	ldr	r2, [r3, #28]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	2101      	movs	r1, #1
 8009136:	fa01 f303 	lsl.w	r3, r1, r3
 800913a:	041b      	lsls	r3, r3, #16
 800913c:	43db      	mvns	r3, r3
 800913e:	68f9      	ldr	r1, [r7, #12]
 8009140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009144:	4013      	ands	r3, r2
 8009146:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4413      	add	r3, r2
 8009150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	0159      	lsls	r1, r3, #5
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	440b      	add	r3, r1
 800915e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009162:	4619      	mov	r1, r3
 8009164:	4b05      	ldr	r3, [pc, #20]	; (800917c <USB_DeactivateEndpoint+0x1b4>)
 8009166:	4013      	ands	r3, r2
 8009168:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	ec337800 	.word	0xec337800
 800917c:	eff37800 	.word	0xeff37800

08009180 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08a      	sub	sp, #40	; 0x28
 8009184:	af02      	add	r7, sp, #8
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	4613      	mov	r3, r2
 800918c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	785b      	ldrb	r3, [r3, #1]
 800919c:	2b01      	cmp	r3, #1
 800919e:	f040 815c 	bne.w	800945a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d132      	bne.n	8009210 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	015a      	lsls	r2, r3, #5
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	4413      	add	r3, r2
 80091b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	0151      	lsls	r1, r2, #5
 80091bc:	69fa      	ldr	r2, [r7, #28]
 80091be:	440a      	add	r2, r1
 80091c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	015a      	lsls	r2, r3, #5
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	4413      	add	r3, r2
 80091d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	69ba      	ldr	r2, [r7, #24]
 80091de:	0151      	lsls	r1, r2, #5
 80091e0:	69fa      	ldr	r2, [r7, #28]
 80091e2:	440a      	add	r2, r1
 80091e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	69ba      	ldr	r2, [r7, #24]
 80091fe:	0151      	lsls	r1, r2, #5
 8009200:	69fa      	ldr	r2, [r7, #28]
 8009202:	440a      	add	r2, r1
 8009204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009208:	0cdb      	lsrs	r3, r3, #19
 800920a:	04db      	lsls	r3, r3, #19
 800920c:	6113      	str	r3, [r2, #16]
 800920e:	e074      	b.n	80092fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	69ba      	ldr	r2, [r7, #24]
 8009220:	0151      	lsls	r1, r2, #5
 8009222:	69fa      	ldr	r2, [r7, #28]
 8009224:	440a      	add	r2, r1
 8009226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800922a:	0cdb      	lsrs	r3, r3, #19
 800922c:	04db      	lsls	r3, r3, #19
 800922e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	0151      	lsls	r1, r2, #5
 8009242:	69fa      	ldr	r2, [r7, #28]
 8009244:	440a      	add	r2, r1
 8009246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800924a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800924e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009252:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009260:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	6999      	ldr	r1, [r3, #24]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	440b      	add	r3, r1
 800926c:	1e59      	subs	r1, r3, #1
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	fbb1 f3f3 	udiv	r3, r1, r3
 8009276:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009278:	4b9d      	ldr	r3, [pc, #628]	; (80094f0 <USB_EPStartXfer+0x370>)
 800927a:	400b      	ands	r3, r1
 800927c:	69b9      	ldr	r1, [r7, #24]
 800927e:	0148      	lsls	r0, r1, #5
 8009280:	69f9      	ldr	r1, [r7, #28]
 8009282:	4401      	add	r1, r0
 8009284:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009288:	4313      	orrs	r3, r2
 800928a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009298:	691a      	ldr	r2, [r3, #16]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092a2:	69b9      	ldr	r1, [r7, #24]
 80092a4:	0148      	lsls	r0, r1, #5
 80092a6:	69f9      	ldr	r1, [r7, #28]
 80092a8:	4401      	add	r1, r0
 80092aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80092ae:	4313      	orrs	r3, r2
 80092b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	791b      	ldrb	r3, [r3, #4]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d11f      	bne.n	80092fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	0151      	lsls	r1, r2, #5
 80092cc:	69fa      	ldr	r2, [r7, #28]
 80092ce:	440a      	add	r2, r1
 80092d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80092d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	0151      	lsls	r1, r2, #5
 80092ec:	69fa      	ldr	r2, [r7, #28]
 80092ee:	440a      	add	r2, r1
 80092f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80092fa:	79fb      	ldrb	r3, [r7, #7]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d14b      	bne.n	8009398 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d009      	beq.n	800931c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009314:	461a      	mov	r2, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	791b      	ldrb	r3, [r3, #4]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d128      	bne.n	8009376 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009330:	2b00      	cmp	r3, #0
 8009332:	d110      	bne.n	8009356 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	0151      	lsls	r1, r2, #5
 8009346:	69fa      	ldr	r2, [r7, #28]
 8009348:	440a      	add	r2, r1
 800934a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800934e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009352:	6013      	str	r3, [r2, #0]
 8009354:	e00f      	b.n	8009376 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	015a      	lsls	r2, r3, #5
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	4413      	add	r3, r2
 800935e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	0151      	lsls	r1, r2, #5
 8009368:	69fa      	ldr	r2, [r7, #28]
 800936a:	440a      	add	r2, r1
 800936c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009374:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	0151      	lsls	r1, r2, #5
 8009388:	69fa      	ldr	r2, [r7, #28]
 800938a:	440a      	add	r2, r1
 800938c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009390:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	e133      	b.n	8009600 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	0151      	lsls	r1, r2, #5
 80093aa:	69fa      	ldr	r2, [r7, #28]
 80093ac:	440a      	add	r2, r1
 80093ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	791b      	ldrb	r3, [r3, #4]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d015      	beq.n	80093ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 811b 	beq.w	8009600 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	f003 030f 	and.w	r3, r3, #15
 80093da:	2101      	movs	r1, #1
 80093dc:	fa01 f303 	lsl.w	r3, r1, r3
 80093e0:	69f9      	ldr	r1, [r7, #28]
 80093e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093e6:	4313      	orrs	r3, r2
 80093e8:	634b      	str	r3, [r1, #52]	; 0x34
 80093ea:	e109      	b.n	8009600 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d110      	bne.n	800941e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	0151      	lsls	r1, r2, #5
 800940e:	69fa      	ldr	r2, [r7, #28]
 8009410:	440a      	add	r2, r1
 8009412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009416:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800941a:	6013      	str	r3, [r2, #0]
 800941c:	e00f      	b.n	800943e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	0151      	lsls	r1, r2, #5
 8009430:	69fa      	ldr	r2, [r7, #28]
 8009432:	440a      	add	r2, r1
 8009434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800943c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	6919      	ldr	r1, [r3, #16]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	781a      	ldrb	r2, [r3, #0]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	b298      	uxth	r0, r3
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	4603      	mov	r3, r0
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 fade 	bl	8009a14 <USB_WritePacket>
 8009458:	e0d2      	b.n	8009600 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	69fa      	ldr	r2, [r7, #28]
 800946e:	440a      	add	r2, r1
 8009470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009474:	0cdb      	lsrs	r3, r3, #19
 8009476:	04db      	lsls	r3, r3, #19
 8009478:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	0151      	lsls	r1, r2, #5
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	440a      	add	r2, r1
 8009490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009494:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009498:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800949c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d126      	bne.n	80094f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094bc:	69b9      	ldr	r1, [r7, #24]
 80094be:	0148      	lsls	r0, r1, #5
 80094c0:	69f9      	ldr	r1, [r7, #28]
 80094c2:	4401      	add	r1, r0
 80094c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094c8:	4313      	orrs	r3, r2
 80094ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	015a      	lsls	r2, r3, #5
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	4413      	add	r3, r2
 80094d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	69ba      	ldr	r2, [r7, #24]
 80094dc:	0151      	lsls	r1, r2, #5
 80094de:	69fa      	ldr	r2, [r7, #28]
 80094e0:	440a      	add	r2, r1
 80094e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094ea:	6113      	str	r3, [r2, #16]
 80094ec:	e03a      	b.n	8009564 <USB_EPStartXfer+0x3e4>
 80094ee:	bf00      	nop
 80094f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	699a      	ldr	r2, [r3, #24]
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	4413      	add	r3, r2
 80094fe:	1e5a      	subs	r2, r3, #1
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	fbb2 f3f3 	udiv	r3, r2, r3
 8009508:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	8afa      	ldrh	r2, [r7, #22]
 8009510:	fb03 f202 	mul.w	r2, r3, r2
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	4413      	add	r3, r2
 8009520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009524:	691a      	ldr	r2, [r3, #16]
 8009526:	8afb      	ldrh	r3, [r7, #22]
 8009528:	04d9      	lsls	r1, r3, #19
 800952a:	4b38      	ldr	r3, [pc, #224]	; (800960c <USB_EPStartXfer+0x48c>)
 800952c:	400b      	ands	r3, r1
 800952e:	69b9      	ldr	r1, [r7, #24]
 8009530:	0148      	lsls	r0, r1, #5
 8009532:	69f9      	ldr	r1, [r7, #28]
 8009534:	4401      	add	r1, r0
 8009536:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800953a:	4313      	orrs	r3, r2
 800953c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	4413      	add	r3, r2
 8009546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800954a:	691a      	ldr	r2, [r3, #16]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	69db      	ldr	r3, [r3, #28]
 8009550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009554:	69b9      	ldr	r1, [r7, #24]
 8009556:	0148      	lsls	r0, r1, #5
 8009558:	69f9      	ldr	r1, [r7, #28]
 800955a:	4401      	add	r1, r0
 800955c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009560:	4313      	orrs	r3, r2
 8009562:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d10d      	bne.n	8009586 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d009      	beq.n	8009586 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	6919      	ldr	r1, [r3, #16]
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009582:	460a      	mov	r2, r1
 8009584:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	791b      	ldrb	r3, [r3, #4]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d128      	bne.n	80095e0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959a:	2b00      	cmp	r3, #0
 800959c:	d110      	bne.n	80095c0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	69ba      	ldr	r2, [r7, #24]
 80095ae:	0151      	lsls	r1, r2, #5
 80095b0:	69fa      	ldr	r2, [r7, #28]
 80095b2:	440a      	add	r2, r1
 80095b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095bc:	6013      	str	r3, [r2, #0]
 80095be:	e00f      	b.n	80095e0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	0151      	lsls	r1, r2, #5
 80095d2:	69fa      	ldr	r2, [r7, #28]
 80095d4:	440a      	add	r2, r1
 80095d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	0151      	lsls	r1, r2, #5
 80095f2:	69fa      	ldr	r2, [r7, #28]
 80095f4:	440a      	add	r2, r1
 80095f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3720      	adds	r7, #32
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	1ff80000 	.word	0x1ff80000

08009610 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009610:	b480      	push	{r7}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	4613      	mov	r3, r2
 800961c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	785b      	ldrb	r3, [r3, #1]
 800962c:	2b01      	cmp	r3, #1
 800962e:	f040 80ce 	bne.w	80097ce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d132      	bne.n	80096a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	0151      	lsls	r1, r2, #5
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	440a      	add	r2, r1
 8009650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009654:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009658:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800965c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	015a      	lsls	r2, r3, #5
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	4413      	add	r3, r2
 8009666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	0151      	lsls	r1, r2, #5
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	440a      	add	r2, r1
 8009674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009678:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800967c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	4413      	add	r3, r2
 8009686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	0151      	lsls	r1, r2, #5
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	440a      	add	r2, r1
 8009694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009698:	0cdb      	lsrs	r3, r3, #19
 800969a:	04db      	lsls	r3, r3, #19
 800969c:	6113      	str	r3, [r2, #16]
 800969e:	e04e      	b.n	800973e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	0151      	lsls	r1, r2, #5
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	440a      	add	r2, r1
 80096b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ba:	0cdb      	lsrs	r3, r3, #19
 80096bc:	04db      	lsls	r3, r3, #19
 80096be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	0151      	lsls	r1, r2, #5
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	440a      	add	r2, r1
 80096d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	699a      	ldr	r2, [r3, #24]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d903      	bls.n	80096f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	68da      	ldr	r2, [r3, #12]
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	0151      	lsls	r1, r2, #5
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	440a      	add	r2, r1
 800970e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009712:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	4413      	add	r3, r2
 8009720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009724:	691a      	ldr	r2, [r3, #16]
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800972e:	6939      	ldr	r1, [r7, #16]
 8009730:	0148      	lsls	r0, r1, #5
 8009732:	6979      	ldr	r1, [r7, #20]
 8009734:	4401      	add	r1, r0
 8009736:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800973a:	4313      	orrs	r3, r2
 800973c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d11e      	bne.n	8009782 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d009      	beq.n	8009760 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009758:	461a      	mov	r2, r3
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	0151      	lsls	r1, r2, #5
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	440a      	add	r2, r1
 8009776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800977a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	e097      	b.n	80098b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	0151      	lsls	r1, r2, #5
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	440a      	add	r2, r1
 8009798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800979c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 8083 	beq.w	80098b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	f003 030f 	and.w	r3, r3, #15
 80097bc:	2101      	movs	r1, #1
 80097be:	fa01 f303 	lsl.w	r3, r1, r3
 80097c2:	6979      	ldr	r1, [r7, #20]
 80097c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097c8:	4313      	orrs	r3, r2
 80097ca:	634b      	str	r3, [r1, #52]	; 0x34
 80097cc:	e071      	b.n	80098b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	0151      	lsls	r1, r2, #5
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	440a      	add	r2, r1
 80097e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e8:	0cdb      	lsrs	r3, r3, #19
 80097ea:	04db      	lsls	r3, r3, #19
 80097ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	0151      	lsls	r1, r2, #5
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	440a      	add	r2, r1
 8009804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009808:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800980c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009810:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	68da      	ldr	r2, [r3, #12]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	68da      	ldr	r2, [r3, #12]
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	015a      	lsls	r2, r3, #5
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	4413      	add	r3, r2
 8009832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	0151      	lsls	r1, r2, #5
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	440a      	add	r2, r1
 8009840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009844:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009848:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009856:	691a      	ldr	r2, [r3, #16]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009860:	6939      	ldr	r1, [r7, #16]
 8009862:	0148      	lsls	r0, r1, #5
 8009864:	6979      	ldr	r1, [r7, #20]
 8009866:	4401      	add	r1, r0
 8009868:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800986c:	4313      	orrs	r3, r2
 800986e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d10d      	bne.n	8009892 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d009      	beq.n	8009892 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	6919      	ldr	r1, [r3, #16]
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988e:	460a      	mov	r2, r1
 8009890:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	371c      	adds	r7, #28
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d14a      	bne.n	8009974 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098f6:	f040 8086 	bne.w	8009a06 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	7812      	ldrb	r2, [r2, #0]
 800990e:	0151      	lsls	r1, r2, #5
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	440a      	add	r2, r1
 8009914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009918:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800991c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	4413      	add	r3, r2
 8009928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	7812      	ldrb	r2, [r2, #0]
 8009932:	0151      	lsls	r1, r2, #5
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	440a      	add	r2, r1
 8009938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800993c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009940:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3301      	adds	r3, #1
 8009946:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f242 7210 	movw	r2, #10000	; 0x2710
 800994e:	4293      	cmp	r3, r2
 8009950:	d902      	bls.n	8009958 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	75fb      	strb	r3, [r7, #23]
          break;
 8009956:	e056      	b.n	8009a06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	4413      	add	r3, r2
 8009962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800996c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009970:	d0e7      	beq.n	8009942 <USB_EPStopXfer+0x82>
 8009972:	e048      	b.n	8009a06 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	4413      	add	r3, r2
 800997e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800998c:	d13b      	bne.n	8009a06 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	7812      	ldrb	r2, [r2, #0]
 80099a2:	0151      	lsls	r1, r2, #5
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	440a      	add	r2, r1
 80099a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	7812      	ldrb	r2, [r2, #0]
 80099c6:	0151      	lsls	r1, r2, #5
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	440a      	add	r2, r1
 80099cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3301      	adds	r3, #1
 80099da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f242 7210 	movw	r2, #10000	; 0x2710
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d902      	bls.n	80099ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	75fb      	strb	r3, [r7, #23]
          break;
 80099ea:	e00c      	b.n	8009a06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a04:	d0e7      	beq.n	80099d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	371c      	adds	r7, #28
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b089      	sub	sp, #36	; 0x24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	461a      	mov	r2, r3
 8009a22:	460b      	mov	r3, r1
 8009a24:	71fb      	strb	r3, [r7, #7]
 8009a26:	4613      	mov	r3, r2
 8009a28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009a32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d123      	bne.n	8009a82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a3a:	88bb      	ldrh	r3, [r7, #4]
 8009a3c:	3303      	adds	r3, #3
 8009a3e:	089b      	lsrs	r3, r3, #2
 8009a40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a42:	2300      	movs	r3, #0
 8009a44:	61bb      	str	r3, [r7, #24]
 8009a46:	e018      	b.n	8009a7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a48:	79fb      	ldrb	r3, [r7, #7]
 8009a4a:	031a      	lsls	r2, r3, #12
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a54:	461a      	mov	r2, r3
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	3301      	adds	r3, #1
 8009a66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	3301      	adds	r3, #1
 8009a72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	3301      	adds	r3, #1
 8009a78:	61bb      	str	r3, [r7, #24]
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d3e2      	bcc.n	8009a48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3724      	adds	r7, #36	; 0x24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b08b      	sub	sp, #44	; 0x2c
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009aa6:	88fb      	ldrh	r3, [r7, #6]
 8009aa8:	089b      	lsrs	r3, r3, #2
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009aae:	88fb      	ldrh	r3, [r7, #6]
 8009ab0:	f003 0303 	and.w	r3, r3, #3
 8009ab4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	623b      	str	r3, [r7, #32]
 8009aba:	e014      	b.n	8009ae6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	3301      	adds	r3, #1
 8009acc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	3301      	adds	r3, #1
 8009ade:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	623b      	str	r3, [r7, #32]
 8009ae6:	6a3a      	ldr	r2, [r7, #32]
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d3e6      	bcc.n	8009abc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009aee:	8bfb      	ldrh	r3, [r7, #30]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d01e      	beq.n	8009b32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009afe:	461a      	mov	r2, r3
 8009b00:	f107 0310 	add.w	r3, r7, #16
 8009b04:	6812      	ldr	r2, [r2, #0]
 8009b06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	fa22 f303 	lsr.w	r3, r2, r3
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	701a      	strb	r2, [r3, #0]
      i++;
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	3301      	adds	r3, #1
 8009b24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009b26:	8bfb      	ldrh	r3, [r7, #30]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009b2c:	8bfb      	ldrh	r3, [r7, #30]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1ea      	bne.n	8009b08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	372c      	adds	r7, #44	; 0x2c
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	785b      	ldrb	r3, [r3, #1]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d12c      	bne.n	8009bb6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	db12      	blt.n	8009b94 <USB_EPSetStall+0x54>
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00f      	beq.n	8009b94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	0151      	lsls	r1, r2, #5
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	440a      	add	r2, r1
 8009b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	0151      	lsls	r1, r2, #5
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	440a      	add	r2, r1
 8009baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	e02b      	b.n	8009c0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	015a      	lsls	r2, r3, #5
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	db12      	blt.n	8009bee <USB_EPSetStall+0xae>
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00f      	beq.n	8009bee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	0151      	lsls	r1, r2, #5
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	440a      	add	r2, r1
 8009be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009be8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	0151      	lsls	r1, r2, #5
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	440a      	add	r2, r1
 8009c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	785b      	ldrb	r3, [r3, #1]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d128      	bne.n	8009c8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	0151      	lsls	r1, r2, #5
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	440a      	add	r2, r1
 8009c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	791b      	ldrb	r3, [r3, #4]
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d003      	beq.n	8009c68 <USB_EPClearStall+0x4c>
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	791b      	ldrb	r3, [r3, #4]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d138      	bne.n	8009cda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	0151      	lsls	r1, r2, #5
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	440a      	add	r2, r1
 8009c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c86:	6013      	str	r3, [r2, #0]
 8009c88:	e027      	b.n	8009cda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	0151      	lsls	r1, r2, #5
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	440a      	add	r2, r1
 8009ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ca4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ca8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	791b      	ldrb	r3, [r3, #4]
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d003      	beq.n	8009cba <USB_EPClearStall+0x9e>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	791b      	ldrb	r3, [r3, #4]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d10f      	bne.n	8009cda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	015a      	lsls	r2, r3, #5
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	0151      	lsls	r1, r2, #5
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	440a      	add	r2, r1
 8009cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cd8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	78fb      	ldrb	r3, [r7, #3]
 8009d16:	011b      	lsls	r3, r3, #4
 8009d18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d1c:	68f9      	ldr	r1, [r7, #12]
 8009d1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d22:	4313      	orrs	r3, r2
 8009d24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d4e:	f023 0303 	bic.w	r3, r3, #3
 8009d52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d62:	f023 0302 	bic.w	r3, r3, #2
 8009d66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b085      	sub	sp, #20
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d90:	f023 0303 	bic.w	r3, r3, #3
 8009d94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009da4:	f043 0302 	orr.w	r3, r3, #2
 8009da8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	4013      	ands	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b085      	sub	sp, #20
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	4013      	ands	r3, r2
 8009e00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	0c1b      	lsrs	r3, r3, #16
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b085      	sub	sp, #20
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	4013      	ands	r3, r2
 8009e34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	b29b      	uxth	r3, r3
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b085      	sub	sp, #20
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e56:	78fb      	ldrb	r3, [r7, #3]
 8009e58:	015a      	lsls	r2, r3, #5
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	4013      	ands	r3, r2
 8009e72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e74:	68bb      	ldr	r3, [r7, #8]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b087      	sub	sp, #28
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ea6:	78fb      	ldrb	r3, [r7, #3]
 8009ea8:	f003 030f 	and.w	r3, r3, #15
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb2:	01db      	lsls	r3, r3, #7
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009ebc:	78fb      	ldrb	r3, [r7, #3]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	4013      	ands	r3, r2
 8009ece:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ed0:	68bb      	ldr	r3, [r7, #8]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	371c      	adds	r7, #28
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	f003 0301 	and.w	r3, r3, #1
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b085      	sub	sp, #20
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f18:	f023 0307 	bic.w	r3, r3, #7
 8009f1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b087      	sub	sp, #28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	607a      	str	r2, [r7, #4]
 8009f4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	333c      	adds	r3, #60	; 0x3c
 8009f56:	3304      	adds	r3, #4
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	4a26      	ldr	r2, [pc, #152]	; (8009ff8 <USB_EP0_OutStart+0xb8>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d90a      	bls.n	8009f7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f74:	d101      	bne.n	8009f7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	e037      	b.n	8009fea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f80:	461a      	mov	r2, r3
 8009f82:	2300      	movs	r3, #0
 8009f84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa8:	f043 0318 	orr.w	r3, r3, #24
 8009fac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fbc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009fc0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009fc2:	7afb      	ldrb	r3, [r7, #11]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d10f      	bne.n	8009fe8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fce:	461a      	mov	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fe2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009fe6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	4f54300a 	.word	0x4f54300a

08009ffc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a004:	2300      	movs	r3, #0
 800a006:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3301      	adds	r3, #1
 800a00c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	4a13      	ldr	r2, [pc, #76]	; (800a060 <USB_CoreReset+0x64>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d901      	bls.n	800a01a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e01b      	b.n	800a052 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	daf2      	bge.n	800a008 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a022:	2300      	movs	r3, #0
 800a024:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	f043 0201 	orr.w	r2, r3, #1
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3301      	adds	r3, #1
 800a036:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	4a09      	ldr	r2, [pc, #36]	; (800a060 <USB_CoreReset+0x64>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d901      	bls.n	800a044 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a040:	2303      	movs	r3, #3
 800a042:	e006      	b.n	800a052 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d0f0      	beq.n	800a032 <USB_CoreReset+0x36>

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3714      	adds	r7, #20
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	00030d40 	.word	0x00030d40

0800a064 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency an desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 800a06c:	4a18      	ldr	r2, [pc, #96]	; (800a0d0 <si5351_Init+0x6c>)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 800a072:	21ff      	movs	r1, #255	; 0xff
 800a074:	2003      	movs	r0, #3
 800a076:	f000 fa0d 	bl	800a494 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 800a07a:	2180      	movs	r1, #128	; 0x80
 800a07c:	2010      	movs	r0, #16
 800a07e:	f000 fa09 	bl	800a494 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 800a082:	2180      	movs	r1, #128	; 0x80
 800a084:	2011      	movs	r0, #17
 800a086:	f000 fa05 	bl	800a494 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 800a08a:	2180      	movs	r1, #128	; 0x80
 800a08c:	2012      	movs	r0, #18
 800a08e:	f000 fa01 	bl	800a494 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 800a092:	2180      	movs	r1, #128	; 0x80
 800a094:	2013      	movs	r0, #19
 800a096:	f000 f9fd 	bl	800a494 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 800a09a:	2180      	movs	r1, #128	; 0x80
 800a09c:	2014      	movs	r0, #20
 800a09e:	f000 f9f9 	bl	800a494 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 800a0a2:	2180      	movs	r1, #128	; 0x80
 800a0a4:	2015      	movs	r0, #21
 800a0a6:	f000 f9f5 	bl	800a494 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 800a0aa:	2180      	movs	r1, #128	; 0x80
 800a0ac:	2016      	movs	r0, #22
 800a0ae:	f000 f9f1 	bl	800a494 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 800a0b2:	2180      	movs	r1, #128	; 0x80
 800a0b4:	2017      	movs	r0, #23
 800a0b6:	f000 f9ed 	bl	800a494 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 800a0ba:	23c0      	movs	r3, #192	; 0xc0
 800a0bc:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 800a0be:	7bfb      	ldrb	r3, [r7, #15]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	20b7      	movs	r0, #183	; 0xb7
 800a0c4:	f000 f9e6 	bl	800a494 <si5351_write>
}
 800a0c8:	bf00      	nop
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	200003d8 	.word	0x200003d8

0800a0d4 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08c      	sub	sp, #48	; 0x30
 800a0d8:	af02      	add	r7, sp, #8
 800a0da:	4603      	mov	r3, r0
 800a0dc:	6039      	str	r1, [r7, #0]
 800a0de:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t num = conf->num;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f4:	01da      	lsls	r2, r3, #7
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	01d9      	lsls	r1, r3, #7
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	fb91 f3f3 	sdiv	r3, r1, r3
 800a100:	4413      	add	r3, r2
 800a102:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a106:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 800a108:	6a3b      	ldr	r3, [r7, #32]
 800a10a:	01db      	lsls	r3, r3, #7
 800a10c:	69fa      	ldr	r2, [r7, #28]
 800a10e:	fb93 f2f2 	sdiv	r2, r3, r2
 800a112:	69f9      	ldr	r1, [r7, #28]
 800a114:	fb01 f202 	mul.w	r2, r1, r2
 800a118:	1a9b      	subs	r3, r3, r2
 800a11a:	617b      	str	r3, [r7, #20]
    P3 = denom;
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 800a120:	79fb      	ldrb	r3, [r7, #7]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d101      	bne.n	800a12a <si5351_SetupPLL+0x56>
 800a126:	231a      	movs	r3, #26
 800a128:	e000      	b.n	800a12c <si5351_SetupPLL+0x58>
 800a12a:	2322      	movs	r3, #34	; 0x22
 800a12c:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 800a12e:	7bf8      	ldrb	r0, [r7, #15]
 800a130:	2300      	movs	r3, #0
 800a132:	9301      	str	r3, [sp, #4]
 800a134:	2300      	movs	r3, #0
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	69b9      	ldr	r1, [r7, #24]
 800a13e:	f000 f9d1 	bl	800a4e4 <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 800a142:	21a0      	movs	r1, #160	; 0xa0
 800a144:	20b1      	movs	r0, #177	; 0xb1
 800a146:	f000 f9a5 	bl	800a494 <si5351_write>
}
 800a14a:	bf00      	nop
 800a14c:	3728      	adds	r7, #40	; 0x28
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 800a152:	b580      	push	{r7, lr}
 800a154:	b08c      	sub	sp, #48	; 0x30
 800a156:	af02      	add	r7, sp, #8
 800a158:	603b      	str	r3, [r7, #0]
 800a15a:	4603      	mov	r3, r0
 800a15c:	71fb      	strb	r3, [r7, #7]
 800a15e:	460b      	mov	r3, r1
 800a160:	71bb      	strb	r3, [r7, #6]
 800a162:	4613      	mov	r3, r2
 800a164:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 800a178:	2300      	movs	r3, #0
 800a17a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	2b02      	cmp	r3, #2
 800a182:	d901      	bls.n	800a188 <si5351_SetupOutput+0x36>
        return 1;
 800a184:	2301      	movs	r3, #1
 800a186:	e08d      	b.n	800a2a4 <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <si5351_SetupOutput+0x54>
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	2b07      	cmp	r3, #7
 800a194:	dd05      	ble.n	800a1a2 <si5351_SetupOutput+0x50>
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	2b08      	cmp	r3, #8
 800a19a:	d104      	bne.n	800a1a6 <si5351_SetupOutput+0x54>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	e07e      	b.n	800a2a4 <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	d109      	bne.n	800a1c0 <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	623b      	str	r3, [r7, #32]
        P2 = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1be:	e016      	b.n	800a1ee <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	01da      	lsls	r2, r3, #7
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	01d9      	lsls	r1, r3, #7
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	fb91 f3f3 	sdiv	r3, r1, r3
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a1d4:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	01db      	lsls	r3, r3, #7
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	fb93 f2f2 	sdiv	r2, r3, r2
 800a1e0:	68b9      	ldr	r1, [r7, #8]
 800a1e2:	fb01 f202 	mul.w	r2, r1, r2
 800a1e6:	1a9b      	subs	r3, r3, r2
 800a1e8:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	757b      	strb	r3, [r7, #21]
    switch (output) {
 800a1fa:	79fb      	ldrb	r3, [r7, #7]
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d014      	beq.n	800a22a <si5351_SetupOutput+0xd8>
 800a200:	2b02      	cmp	r3, #2
 800a202:	dc19      	bgt.n	800a238 <si5351_SetupOutput+0xe6>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d002      	beq.n	800a20e <si5351_SetupOutput+0xbc>
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d007      	beq.n	800a21c <si5351_SetupOutput+0xca>
 800a20c:	e014      	b.n	800a238 <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 800a20e:	232a      	movs	r3, #42	; 0x2a
 800a210:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 800a212:	23a5      	movs	r3, #165	; 0xa5
 800a214:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 800a216:	2310      	movs	r3, #16
 800a218:	757b      	strb	r3, [r7, #21]
        break;
 800a21a:	e00d      	b.n	800a238 <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 800a21c:	2332      	movs	r3, #50	; 0x32
 800a21e:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 800a220:	23a6      	movs	r3, #166	; 0xa6
 800a222:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 800a224:	2311      	movs	r3, #17
 800a226:	757b      	strb	r3, [r7, #21]
        break;
 800a228:	e006      	b.n	800a238 <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 800a22a:	233a      	movs	r3, #58	; 0x3a
 800a22c:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 800a22e:	23a7      	movs	r3, #167	; 0xa7
 800a230:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 800a232:	2312      	movs	r3, #18
 800a234:	757b      	strb	r3, [r7, #21]
        break;
 800a236:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 800a238:	797b      	ldrb	r3, [r7, #5]
 800a23a:	f043 030c 	orr.w	r3, r3, #12
 800a23e:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 800a240:	79bb      	ldrb	r3, [r7, #6]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d103      	bne.n	800a24e <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 800a246:	7d3b      	ldrb	r3, [r7, #20]
 800a248:	f043 0320 	orr.w	r3, r3, #32
 800a24c:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d009      	beq.n	800a26a <si5351_SetupOutput+0x118>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <si5351_SetupOutput+0x110>
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d103      	bne.n	800a26a <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 800a262:	7d3b      	ldrb	r3, [r7, #20]
 800a264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a268:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 800a26a:	7d3a      	ldrb	r2, [r7, #20]
 800a26c:	7d7b      	ldrb	r3, [r7, #21]
 800a26e:	4611      	mov	r1, r2
 800a270:	4618      	mov	r0, r3
 800a272:	f000 f90f 	bl	800a494 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	7c1b      	ldrb	r3, [r3, #16]
 800a27a:	7df8      	ldrb	r0, [r7, #23]
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	69fa      	ldr	r2, [r7, #28]
 800a288:	6a39      	ldr	r1, [r7, #32]
 800a28a:	f000 f92b 	bl	800a4e4 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 800a28e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a296:	b2da      	uxtb	r2, r3
 800a298:	7dbb      	ldrb	r3, [r7, #22]
 800a29a:	4611      	mov	r1, r2
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 f8f9 	bl	800a494 <si5351_write>

    return 0;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3728      	adds	r7, #40	; 0x28
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 800a2ac:	b480      	push	{r7}
 800a2ae:	b08f      	sub	sp, #60	; 0x3c
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800a2be:	da03      	bge.n	800a2c8 <si5351_Calc+0x1c>
 800a2c0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800a2c4:	60fb      	str	r3, [r7, #12]
 800a2c6:	e005      	b.n	800a2d4 <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	4a4f      	ldr	r2, [pc, #316]	; (800a408 <si5351_Calc+0x15c>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	dd01      	ble.n	800a2d4 <si5351_Calc+0x28>
 800a2d0:	4b4d      	ldr	r3, [pc, #308]	; (800a408 <si5351_Calc+0x15c>)
 800a2d2:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	4a4b      	ldr	r2, [pc, #300]	; (800a40c <si5351_Calc+0x160>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	dc06      	bgt.n	800a2f0 <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	019b      	lsls	r3, r3, #6
 800a2e6:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2206      	movs	r2, #6
 800a2ec:	741a      	strb	r2, [r3, #16]
 800a2ee:	e002      	b.n	800a2f6 <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - ((Fclk/1000000)*si5351Correction)/100;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	4a45      	ldr	r2, [pc, #276]	; (800a410 <si5351_Calc+0x164>)
 800a2fa:	fb82 1203 	smull	r1, r2, r2, r3
 800a2fe:	1492      	asrs	r2, r2, #18
 800a300:	17db      	asrs	r3, r3, #31
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	4a43      	ldr	r2, [pc, #268]	; (800a414 <si5351_Calc+0x168>)
 800a306:	6812      	ldr	r2, [r2, #0]
 800a308:	fb02 f303 	mul.w	r3, r2, r3
 800a30c:	4a42      	ldr	r2, [pc, #264]	; (800a418 <si5351_Calc+0x16c>)
 800a30e:	fb82 1203 	smull	r1, r2, r2, r3
 800a312:	1152      	asrs	r2, r2, #5
 800a314:	17db      	asrs	r3, r3, #31
 800a316:	1a9b      	subs	r3, r3, r2
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	4413      	add	r3, r2
 800a31c:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 800a31e:	4b3f      	ldr	r3, [pc, #252]	; (800a41c <si5351_Calc+0x170>)
 800a320:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	4a3e      	ldr	r2, [pc, #248]	; (800a420 <si5351_Calc+0x174>)
 800a326:	4293      	cmp	r3, r2
 800a328:	dc22      	bgt.n	800a370 <si5351_Calc+0xc4>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 800a32a:	2324      	movs	r3, #36	; 0x24
 800a32c:	637b      	str	r3, [r7, #52]	; 0x34
        b = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	633b      	str	r3, [r7, #48]	; 0x30
        c = 1;
 800a332:	2301      	movs	r3, #1
 800a334:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t Fpll = 900000000;
 800a336:	4b3b      	ldr	r3, [pc, #236]	; (800a424 <si5351_Calc+0x178>)
 800a338:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	fb92 f3f3 	sdiv	r3, r2, r3
 800a342:	62bb      	str	r3, [r7, #40]	; 0x28
        t = (Fclk >> 20) + 1;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	151b      	asrs	r3, r3, #20
 800a348:	3301      	adds	r3, #1
 800a34a:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	fb93 f2f2 	sdiv	r2, r3, r2
 800a354:	68f9      	ldr	r1, [r7, #12]
 800a356:	fb01 f202 	mul.w	r2, r1, r2
 800a35a:	1a9a      	subs	r2, r3, r2
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	fb92 f3f3 	sdiv	r3, r2, r3
 800a362:	627b      	str	r3, [r7, #36]	; 0x24
        z = Fclk / t;
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	fb92 f3f3 	sdiv	r3, r2, r3
 800a36c:	623b      	str	r3, [r7, #32]
 800a36e:	e032      	b.n	800a3d6 <si5351_Calc+0x12a>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4a2d      	ldr	r2, [pc, #180]	; (800a428 <si5351_Calc+0x17c>)
 800a374:	4293      	cmp	r3, r2
 800a376:	dd02      	ble.n	800a37e <si5351_Calc+0xd2>
            x = 4;
 800a378:	2304      	movs	r3, #4
 800a37a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a37c:	e008      	b.n	800a390 <si5351_Calc+0xe4>
        } else if (Fclk >= 100000000) {
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	4a2a      	ldr	r2, [pc, #168]	; (800a42c <si5351_Calc+0x180>)
 800a382:	4293      	cmp	r3, r2
 800a384:	dd02      	ble.n	800a38c <si5351_Calc+0xe0>
            x = 6;
 800a386:	2306      	movs	r3, #6
 800a388:	62bb      	str	r3, [r7, #40]	; 0x28
 800a38a:	e001      	b.n	800a390 <si5351_Calc+0xe4>
        } else {
            x = 8;
 800a38c:	2308      	movs	r3, #8
 800a38e:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        y = 0;
 800a390:	2300      	movs	r3, #0
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
        z = 1;
 800a394:	2301      	movs	r3, #1
 800a396:	623b      	str	r3, [r7, #32]
        
        int32_t numerator = x*Fclk;
 800a398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	fb02 f303 	mul.w	r3, r2, r3
 800a3a0:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 800a3a2:	69ba      	ldr	r2, [r7, #24]
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	fb92 f3f3 	sdiv	r3, r2, r3
 800a3aa:	637b      	str	r3, [r7, #52]	; 0x34
        t = (Fxtal >> 20) + 1;
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	151b      	asrs	r3, r3, #20
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	69fa      	ldr	r2, [r7, #28]
 800a3b8:	fb93 f2f2 	sdiv	r2, r3, r2
 800a3bc:	69f9      	ldr	r1, [r7, #28]
 800a3be:	fb01 f202 	mul.w	r2, r1, r2
 800a3c2:	1a9a      	subs	r2, r3, r2
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	fb92 f3f3 	sdiv	r3, r2, r3
 800a3ca:	633b      	str	r3, [r7, #48]	; 0x30
        c = Fxtal / t;
 800a3cc:	69fa      	ldr	r2, [r7, #28]
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	fb92 f3f3 	sdiv	r3, r2, r3
 800a3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    pll_conf->mult = a;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3da:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3e0:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3e6:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3ec:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f2:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a3a      	ldr	r2, [r7, #32]
 800a3f8:	60da      	str	r2, [r3, #12]
}
 800a3fa:	bf00      	nop
 800a3fc:	373c      	adds	r7, #60	; 0x3c
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	09896800 	.word	0x09896800
 800a40c:	000f423f 	.word	0x000f423f
 800a410:	431bde83 	.word	0x431bde83
 800a414:	200003d8 	.word	0x200003d8
 800a418:	51eb851f 	.word	0x51eb851f
 800a41c:	017d7840 	.word	0x017d7840
 800a420:	04d3f63f 	.word	0x04d3f63f
 800a424:	35a4e900 	.word	0x35a4e900
 800a428:	08f0d17f 	.word	0x08f0d17f
 800a42c:	05f5e0ff 	.word	0x05f5e0ff

0800a430 <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 800a430:	b580      	push	{r7, lr}
 800a432:	b08c      	sub	sp, #48	; 0x30
 800a434:	af02      	add	r7, sp, #8
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	460b      	mov	r3, r1
 800a43a:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 800a43c:	f107 0208 	add.w	r2, r7, #8
 800a440:	f107 031c 	add.w	r3, r7, #28
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f7ff ff30 	bl	800a2ac <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 800a44c:	f107 031c 	add.w	r3, r7, #28
 800a450:	4619      	mov	r1, r3
 800a452:	2000      	movs	r0, #0
 800a454:	f7ff fe3e 	bl	800a0d4 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 800a458:	f107 0308 	add.w	r3, r7, #8
 800a45c:	78fa      	ldrb	r2, [r7, #3]
 800a45e:	2100      	movs	r1, #0
 800a460:	9100      	str	r1, [sp, #0]
 800a462:	2100      	movs	r1, #0
 800a464:	2000      	movs	r0, #0
 800a466:	f7ff fe74 	bl	800a152 <si5351_SetupOutput>
}
 800a46a:	bf00      	nop
 800a46c:	3728      	adds	r7, #40	; 0x28
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	4603      	mov	r3, r0
 800a47a:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 800a47c:	79fb      	ldrb	r3, [r7, #7]
 800a47e:	43db      	mvns	r3, r3
 800a480:	b2db      	uxtb	r3, r3
 800a482:	4619      	mov	r1, r3
 800a484:	2003      	movs	r0, #3
 800a486:	f000 f805 	bl	800a494 <si5351_write>
}
 800a48a:	bf00      	nop
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
	...

0800a494 <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 800a494:	b580      	push	{r7, lr}
 800a496:	b086      	sub	sp, #24
 800a498:	af04      	add	r7, sp, #16
 800a49a:	4603      	mov	r3, r0
 800a49c:	460a      	mov	r2, r1
 800a49e:	71fb      	strb	r3, [r7, #7]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 800a4a4:	bf00      	nop
 800a4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4aa:	2203      	movs	r2, #3
 800a4ac:	21c0      	movs	r1, #192	; 0xc0
 800a4ae:	480c      	ldr	r0, [pc, #48]	; (800a4e0 <si5351_write+0x4c>)
 800a4b0:	f7f8 fc36 	bl	8002d20 <HAL_I2C_IsDeviceReady>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1f5      	bne.n	800a4a6 <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 800a4ba:	79fb      	ldrb	r3, [r7, #7]
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c2:	9302      	str	r3, [sp, #8]
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	1dbb      	adds	r3, r7, #6
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	21c0      	movs	r1, #192	; 0xc0
 800a4d0:	4803      	ldr	r0, [pc, #12]	; (800a4e0 <si5351_write+0x4c>)
 800a4d2:	f7f8 fb1f 	bl	8002b14 <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 800a4d6:	bf00      	nop
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20000218 	.word	0x20000218

0800a4e4 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	121b      	asrs	r3, r3, #8
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7ff ffc8 	bl	800a494 <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	3301      	adds	r3, #1
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	b2d2      	uxtb	r2, r2
 800a50e:	4611      	mov	r1, r2
 800a510:	4618      	mov	r0, r3
 800a512:	f7ff ffbf 	bl	800a494 <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 800a516:	7bfb      	ldrb	r3, [r7, #15]
 800a518:	3302      	adds	r3, #2
 800a51a:	b2d8      	uxtb	r0, r3
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	141b      	asrs	r3, r3, #16
 800a520:	b25b      	sxtb	r3, r3
 800a522:	f003 0303 	and.w	r3, r3, #3
 800a526:	b25a      	sxtb	r2, r3
 800a528:	7e3b      	ldrb	r3, [r7, #24]
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	b25b      	sxtb	r3, r3
 800a52e:	f003 030c 	and.w	r3, r3, #12
 800a532:	b25b      	sxtb	r3, r3
 800a534:	4313      	orrs	r3, r2
 800a536:	b25a      	sxtb	r2, r3
 800a538:	7f3b      	ldrb	r3, [r7, #28]
 800a53a:	011b      	lsls	r3, r3, #4
 800a53c:	b25b      	sxtb	r3, r3
 800a53e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a542:	b25b      	sxtb	r3, r3
 800a544:	4313      	orrs	r3, r2
 800a546:	b25b      	sxtb	r3, r3
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	4619      	mov	r1, r3
 800a54c:	f7ff ffa2 	bl	800a494 <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 800a550:	7bfb      	ldrb	r3, [r7, #15]
 800a552:	3303      	adds	r3, #3
 800a554:	b2da      	uxtb	r2, r3
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	121b      	asrs	r3, r3, #8
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	4619      	mov	r1, r3
 800a55e:	4610      	mov	r0, r2
 800a560:	f7ff ff98 	bl	800a494 <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 800a564:	7bfb      	ldrb	r3, [r7, #15]
 800a566:	3304      	adds	r3, #4
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	b2d2      	uxtb	r2, r2
 800a56e:	4611      	mov	r1, r2
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff ff8f 	bl	800a494 <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	3305      	adds	r3, #5
 800a57a:	b2d8      	uxtb	r0, r3
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	131b      	asrs	r3, r3, #12
 800a580:	b25b      	sxtb	r3, r3
 800a582:	f023 030f 	bic.w	r3, r3, #15
 800a586:	b25a      	sxtb	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	141b      	asrs	r3, r3, #16
 800a58c:	b25b      	sxtb	r3, r3
 800a58e:	f003 030f 	and.w	r3, r3, #15
 800a592:	b25b      	sxtb	r3, r3
 800a594:	4313      	orrs	r3, r2
 800a596:	b25b      	sxtb	r3, r3
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	4619      	mov	r1, r3
 800a59c:	f7ff ff7a 	bl	800a494 <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	3306      	adds	r3, #6
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	121b      	asrs	r3, r3, #8
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	f7ff ff70 	bl	800a494 <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	3307      	adds	r3, #7
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	b2d2      	uxtb	r2, r2
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7ff ff67 	bl	800a494 <si5351_write>
}
 800a5c6:	bf00      	nop
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a5dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a5e0:	f005 fa02 	bl	800f9e8 <USBD_static_malloc>
 800a5e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d109      	bne.n	800a600 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	32b0      	adds	r2, #176	; 0xb0
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a5fc:	2302      	movs	r3, #2
 800a5fe:	e0d4      	b.n	800a7aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a600:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a604:	2100      	movs	r1, #0
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f005 fa7c 	bl	800fb04 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	32b0      	adds	r2, #176	; 0xb0
 800a616:	68f9      	ldr	r1, [r7, #12]
 800a618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	32b0      	adds	r2, #176	; 0xb0
 800a626:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	7c1b      	ldrb	r3, [r3, #16]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d138      	bne.n	800a6aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a638:	4b5e      	ldr	r3, [pc, #376]	; (800a7b4 <USBD_CDC_Init+0x1e4>)
 800a63a:	7819      	ldrb	r1, [r3, #0]
 800a63c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a640:	2202      	movs	r2, #2
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f005 f8ad 	bl	800f7a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a648:	4b5a      	ldr	r3, [pc, #360]	; (800a7b4 <USBD_CDC_Init+0x1e4>)
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	f003 020f 	and.w	r2, r3, #15
 800a650:	6879      	ldr	r1, [r7, #4]
 800a652:	4613      	mov	r3, r2
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4413      	add	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	440b      	add	r3, r1
 800a65c:	3324      	adds	r3, #36	; 0x24
 800a65e:	2201      	movs	r2, #1
 800a660:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a662:	4b55      	ldr	r3, [pc, #340]	; (800a7b8 <USBD_CDC_Init+0x1e8>)
 800a664:	7819      	ldrb	r1, [r3, #0]
 800a666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a66a:	2202      	movs	r2, #2
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f005 f898 	bl	800f7a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a672:	4b51      	ldr	r3, [pc, #324]	; (800a7b8 <USBD_CDC_Init+0x1e8>)
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	f003 020f 	and.w	r2, r3, #15
 800a67a:	6879      	ldr	r1, [r7, #4]
 800a67c:	4613      	mov	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	440b      	add	r3, r1
 800a686:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a68a:	2201      	movs	r2, #1
 800a68c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a68e:	4b4b      	ldr	r3, [pc, #300]	; (800a7bc <USBD_CDC_Init+0x1ec>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	f003 020f 	and.w	r2, r3, #15
 800a696:	6879      	ldr	r1, [r7, #4]
 800a698:	4613      	mov	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	4413      	add	r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	440b      	add	r3, r1
 800a6a2:	3326      	adds	r3, #38	; 0x26
 800a6a4:	2210      	movs	r2, #16
 800a6a6:	801a      	strh	r2, [r3, #0]
 800a6a8:	e035      	b.n	800a716 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a6aa:	4b42      	ldr	r3, [pc, #264]	; (800a7b4 <USBD_CDC_Init+0x1e4>)
 800a6ac:	7819      	ldrb	r1, [r3, #0]
 800a6ae:	2340      	movs	r3, #64	; 0x40
 800a6b0:	2202      	movs	r2, #2
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f005 f875 	bl	800f7a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a6b8:	4b3e      	ldr	r3, [pc, #248]	; (800a7b4 <USBD_CDC_Init+0x1e4>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	f003 020f 	and.w	r2, r3, #15
 800a6c0:	6879      	ldr	r1, [r7, #4]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	440b      	add	r3, r1
 800a6cc:	3324      	adds	r3, #36	; 0x24
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6d2:	4b39      	ldr	r3, [pc, #228]	; (800a7b8 <USBD_CDC_Init+0x1e8>)
 800a6d4:	7819      	ldrb	r1, [r3, #0]
 800a6d6:	2340      	movs	r3, #64	; 0x40
 800a6d8:	2202      	movs	r2, #2
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f005 f861 	bl	800f7a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6e0:	4b35      	ldr	r3, [pc, #212]	; (800a7b8 <USBD_CDC_Init+0x1e8>)
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	f003 020f 	and.w	r2, r3, #15
 800a6e8:	6879      	ldr	r1, [r7, #4]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	440b      	add	r3, r1
 800a6f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a6fc:	4b2f      	ldr	r3, [pc, #188]	; (800a7bc <USBD_CDC_Init+0x1ec>)
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	f003 020f 	and.w	r2, r3, #15
 800a704:	6879      	ldr	r1, [r7, #4]
 800a706:	4613      	mov	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	440b      	add	r3, r1
 800a710:	3326      	adds	r3, #38	; 0x26
 800a712:	2210      	movs	r2, #16
 800a714:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a716:	4b29      	ldr	r3, [pc, #164]	; (800a7bc <USBD_CDC_Init+0x1ec>)
 800a718:	7819      	ldrb	r1, [r3, #0]
 800a71a:	2308      	movs	r3, #8
 800a71c:	2203      	movs	r2, #3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f005 f83f 	bl	800f7a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a724:	4b25      	ldr	r3, [pc, #148]	; (800a7bc <USBD_CDC_Init+0x1ec>)
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	f003 020f 	and.w	r2, r3, #15
 800a72c:	6879      	ldr	r1, [r7, #4]
 800a72e:	4613      	mov	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	440b      	add	r3, r1
 800a738:	3324      	adds	r3, #36	; 0x24
 800a73a:	2201      	movs	r2, #1
 800a73c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	33b0      	adds	r3, #176	; 0xb0
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a774:	2302      	movs	r3, #2
 800a776:	e018      	b.n	800a7aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	7c1b      	ldrb	r3, [r3, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10a      	bne.n	800a796 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a780:	4b0d      	ldr	r3, [pc, #52]	; (800a7b8 <USBD_CDC_Init+0x1e8>)
 800a782:	7819      	ldrb	r1, [r3, #0]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a78a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f005 f8f6 	bl	800f980 <USBD_LL_PrepareReceive>
 800a794:	e008      	b.n	800a7a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a796:	4b08      	ldr	r3, [pc, #32]	; (800a7b8 <USBD_CDC_Init+0x1e8>)
 800a798:	7819      	ldrb	r1, [r3, #0]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7a0:	2340      	movs	r3, #64	; 0x40
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f005 f8ec 	bl	800f980 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	200000ff 	.word	0x200000ff
 800a7b8:	20000100 	.word	0x20000100
 800a7bc:	20000101 	.word	0x20000101

0800a7c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a7cc:	4b3a      	ldr	r3, [pc, #232]	; (800a8b8 <USBD_CDC_DeInit+0xf8>)
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f005 f80b 	bl	800f7ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a7d8:	4b37      	ldr	r3, [pc, #220]	; (800a8b8 <USBD_CDC_DeInit+0xf8>)
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	f003 020f 	and.w	r2, r3, #15
 800a7e0:	6879      	ldr	r1, [r7, #4]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4413      	add	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	440b      	add	r3, r1
 800a7ec:	3324      	adds	r3, #36	; 0x24
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a7f2:	4b32      	ldr	r3, [pc, #200]	; (800a8bc <USBD_CDC_DeInit+0xfc>)
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f004 fff8 	bl	800f7ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a7fe:	4b2f      	ldr	r3, [pc, #188]	; (800a8bc <USBD_CDC_DeInit+0xfc>)
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	f003 020f 	and.w	r2, r3, #15
 800a806:	6879      	ldr	r1, [r7, #4]
 800a808:	4613      	mov	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4413      	add	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	440b      	add	r3, r1
 800a812:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a816:	2200      	movs	r2, #0
 800a818:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a81a:	4b29      	ldr	r3, [pc, #164]	; (800a8c0 <USBD_CDC_DeInit+0x100>)
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f004 ffe4 	bl	800f7ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a826:	4b26      	ldr	r3, [pc, #152]	; (800a8c0 <USBD_CDC_DeInit+0x100>)
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	f003 020f 	and.w	r2, r3, #15
 800a82e:	6879      	ldr	r1, [r7, #4]
 800a830:	4613      	mov	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	440b      	add	r3, r1
 800a83a:	3324      	adds	r3, #36	; 0x24
 800a83c:	2200      	movs	r2, #0
 800a83e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a840:	4b1f      	ldr	r3, [pc, #124]	; (800a8c0 <USBD_CDC_DeInit+0x100>)
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	f003 020f 	and.w	r2, r3, #15
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	4613      	mov	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	440b      	add	r3, r1
 800a854:	3326      	adds	r3, #38	; 0x26
 800a856:	2200      	movs	r2, #0
 800a858:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	32b0      	adds	r2, #176	; 0xb0
 800a864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d01f      	beq.n	800a8ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	33b0      	adds	r3, #176	; 0xb0
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	4413      	add	r3, r2
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	32b0      	adds	r2, #176	; 0xb0
 800a88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88e:	4618      	mov	r0, r3
 800a890:	f005 f8b8 	bl	800fa04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	32b0      	adds	r2, #176	; 0xb0
 800a89e:	2100      	movs	r1, #0
 800a8a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	200000ff 	.word	0x200000ff
 800a8bc:	20000100 	.word	0x20000100
 800a8c0:	20000101 	.word	0x20000101

0800a8c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	32b0      	adds	r2, #176	; 0xb0
 800a8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d101      	bne.n	800a8f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	e0bf      	b.n	800aa74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d050      	beq.n	800a9a2 <USBD_CDC_Setup+0xde>
 800a900:	2b20      	cmp	r3, #32
 800a902:	f040 80af 	bne.w	800aa64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	88db      	ldrh	r3, [r3, #6]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d03a      	beq.n	800a984 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	b25b      	sxtb	r3, r3
 800a914:	2b00      	cmp	r3, #0
 800a916:	da1b      	bge.n	800a950 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	33b0      	adds	r3, #176	; 0xb0
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a92e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a930:	683a      	ldr	r2, [r7, #0]
 800a932:	88d2      	ldrh	r2, [r2, #6]
 800a934:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	88db      	ldrh	r3, [r3, #6]
 800a93a:	2b07      	cmp	r3, #7
 800a93c:	bf28      	it	cs
 800a93e:	2307      	movcs	r3, #7
 800a940:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	89fa      	ldrh	r2, [r7, #14]
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f001 fd43 	bl	800c3d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a94e:	e090      	b.n	800aa72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	785a      	ldrb	r2, [r3, #1]
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	88db      	ldrh	r3, [r3, #6]
 800a95e:	2b3f      	cmp	r3, #63	; 0x3f
 800a960:	d803      	bhi.n	800a96a <USBD_CDC_Setup+0xa6>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	88db      	ldrh	r3, [r3, #6]
 800a966:	b2da      	uxtb	r2, r3
 800a968:	e000      	b.n	800a96c <USBD_CDC_Setup+0xa8>
 800a96a:	2240      	movs	r2, #64	; 0x40
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a972:	6939      	ldr	r1, [r7, #16]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a97a:	461a      	mov	r2, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f001 fd55 	bl	800c42c <USBD_CtlPrepareRx>
      break;
 800a982:	e076      	b.n	800aa72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	33b0      	adds	r3, #176	; 0xb0
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	4413      	add	r3, r2
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	7850      	ldrb	r0, [r2, #1]
 800a99a:	2200      	movs	r2, #0
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	4798      	blx	r3
      break;
 800a9a0:	e067      	b.n	800aa72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	785b      	ldrb	r3, [r3, #1]
 800a9a6:	2b0b      	cmp	r3, #11
 800a9a8:	d851      	bhi.n	800aa4e <USBD_CDC_Setup+0x18a>
 800a9aa:	a201      	add	r2, pc, #4	; (adr r2, 800a9b0 <USBD_CDC_Setup+0xec>)
 800a9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b0:	0800a9e1 	.word	0x0800a9e1
 800a9b4:	0800aa5d 	.word	0x0800aa5d
 800a9b8:	0800aa4f 	.word	0x0800aa4f
 800a9bc:	0800aa4f 	.word	0x0800aa4f
 800a9c0:	0800aa4f 	.word	0x0800aa4f
 800a9c4:	0800aa4f 	.word	0x0800aa4f
 800a9c8:	0800aa4f 	.word	0x0800aa4f
 800a9cc:	0800aa4f 	.word	0x0800aa4f
 800a9d0:	0800aa4f 	.word	0x0800aa4f
 800a9d4:	0800aa4f 	.word	0x0800aa4f
 800a9d8:	0800aa0b 	.word	0x0800aa0b
 800a9dc:	0800aa35 	.word	0x0800aa35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	2b03      	cmp	r3, #3
 800a9ea:	d107      	bne.n	800a9fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a9ec:	f107 030a 	add.w	r3, r7, #10
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f001 fced 	bl	800c3d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9fa:	e032      	b.n	800aa62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f001 fc77 	bl	800c2f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa04:	2303      	movs	r3, #3
 800aa06:	75fb      	strb	r3, [r7, #23]
          break;
 800aa08:	e02b      	b.n	800aa62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d107      	bne.n	800aa26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa16:	f107 030d 	add.w	r3, r7, #13
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f001 fcd8 	bl	800c3d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa24:	e01d      	b.n	800aa62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa26:	6839      	ldr	r1, [r7, #0]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f001 fc62 	bl	800c2f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	75fb      	strb	r3, [r7, #23]
          break;
 800aa32:	e016      	b.n	800aa62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b03      	cmp	r3, #3
 800aa3e:	d00f      	beq.n	800aa60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f001 fc55 	bl	800c2f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa4c:	e008      	b.n	800aa60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 fc4e 	bl	800c2f2 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa56:	2303      	movs	r3, #3
 800aa58:	75fb      	strb	r3, [r7, #23]
          break;
 800aa5a:	e002      	b.n	800aa62 <USBD_CDC_Setup+0x19e>
          break;
 800aa5c:	bf00      	nop
 800aa5e:	e008      	b.n	800aa72 <USBD_CDC_Setup+0x1ae>
          break;
 800aa60:	bf00      	nop
      }
      break;
 800aa62:	e006      	b.n	800aa72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f001 fc43 	bl	800c2f2 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa70:	bf00      	nop
  }

  return (uint8_t)ret;
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3718      	adds	r7, #24
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	32b0      	adds	r2, #176	; 0xb0
 800aa9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	e065      	b.n	800ab72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	32b0      	adds	r2, #176	; 0xb0
 800aab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aab6:	78fb      	ldrb	r3, [r7, #3]
 800aab8:	f003 020f 	and.w	r2, r3, #15
 800aabc:	6879      	ldr	r1, [r7, #4]
 800aabe:	4613      	mov	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	4413      	add	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	440b      	add	r3, r1
 800aac8:	3318      	adds	r3, #24
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d02f      	beq.n	800ab30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aad0:	78fb      	ldrb	r3, [r7, #3]
 800aad2:	f003 020f 	and.w	r2, r3, #15
 800aad6:	6879      	ldr	r1, [r7, #4]
 800aad8:	4613      	mov	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	4413      	add	r3, r2
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	440b      	add	r3, r1
 800aae2:	3318      	adds	r3, #24
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	f003 010f 	and.w	r1, r3, #15
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	00db      	lsls	r3, r3, #3
 800aaf2:	440b      	add	r3, r1
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	4403      	add	r3, r0
 800aaf8:	3348      	adds	r3, #72	; 0x48
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab00:	fb01 f303 	mul.w	r3, r1, r3
 800ab04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d112      	bne.n	800ab30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab0a:	78fb      	ldrb	r3, [r7, #3]
 800ab0c:	f003 020f 	and.w	r2, r3, #15
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	4613      	mov	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	440b      	add	r3, r1
 800ab1c:	3318      	adds	r3, #24
 800ab1e:	2200      	movs	r2, #0
 800ab20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab22:	78f9      	ldrb	r1, [r7, #3]
 800ab24:	2300      	movs	r3, #0
 800ab26:	2200      	movs	r2, #0
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f004 ff08 	bl	800f93e <USBD_LL_Transmit>
 800ab2e:	e01f      	b.n	800ab70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	33b0      	adds	r3, #176	; 0xb0
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d010      	beq.n	800ab70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	33b0      	adds	r3, #176	; 0xb0
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ab6c:	78fa      	ldrb	r2, [r7, #3]
 800ab6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b084      	sub	sp, #16
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	460b      	mov	r3, r1
 800ab84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	32b0      	adds	r2, #176	; 0xb0
 800ab90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	32b0      	adds	r2, #176	; 0xb0
 800aba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d101      	bne.n	800abac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aba8:	2303      	movs	r3, #3
 800abaa:	e01a      	b.n	800abe2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800abac:	78fb      	ldrb	r3, [r7, #3]
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f004 ff06 	bl	800f9c2 <USBD_LL_GetRxDataSize>
 800abb6:	4602      	mov	r2, r0
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	33b0      	adds	r3, #176	; 0xb0
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800abdc:	4611      	mov	r1, r2
 800abde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	32b0      	adds	r2, #176	; 0xb0
 800abfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d101      	bne.n	800ac0c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	e025      	b.n	800ac58 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	33b0      	adds	r3, #176	; 0xb0
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4413      	add	r3, r2
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d01a      	beq.n	800ac56 <USBD_CDC_EP0_RxReady+0x6c>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ac26:	2bff      	cmp	r3, #255	; 0xff
 800ac28:	d015      	beq.n	800ac56 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	33b0      	adds	r3, #176	; 0xb0
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ac42:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac4a:	b292      	uxth	r2, r2
 800ac4c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	22ff      	movs	r2, #255	; 0xff
 800ac52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac68:	2182      	movs	r1, #130	; 0x82
 800ac6a:	4818      	ldr	r0, [pc, #96]	; (800accc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac6c:	f000 fd09 	bl	800b682 <USBD_GetEpDesc>
 800ac70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac72:	2101      	movs	r1, #1
 800ac74:	4815      	ldr	r0, [pc, #84]	; (800accc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac76:	f000 fd04 	bl	800b682 <USBD_GetEpDesc>
 800ac7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac7c:	2181      	movs	r1, #129	; 0x81
 800ac7e:	4813      	ldr	r0, [pc, #76]	; (800accc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac80:	f000 fcff 	bl	800b682 <USBD_GetEpDesc>
 800ac84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d002      	beq.n	800ac92 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	2210      	movs	r2, #16
 800ac90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d006      	beq.n	800aca6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aca0:	711a      	strb	r2, [r3, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d006      	beq.n	800acba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acb4:	711a      	strb	r2, [r3, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2243      	movs	r2, #67	; 0x43
 800acbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800acc0:	4b02      	ldr	r3, [pc, #8]	; (800accc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3718      	adds	r7, #24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	200000bc 	.word	0x200000bc

0800acd0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800acd8:	2182      	movs	r1, #130	; 0x82
 800acda:	4818      	ldr	r0, [pc, #96]	; (800ad3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800acdc:	f000 fcd1 	bl	800b682 <USBD_GetEpDesc>
 800ace0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ace2:	2101      	movs	r1, #1
 800ace4:	4815      	ldr	r0, [pc, #84]	; (800ad3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ace6:	f000 fccc 	bl	800b682 <USBD_GetEpDesc>
 800acea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acec:	2181      	movs	r1, #129	; 0x81
 800acee:	4813      	ldr	r0, [pc, #76]	; (800ad3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800acf0:	f000 fcc7 	bl	800b682 <USBD_GetEpDesc>
 800acf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	2210      	movs	r2, #16
 800ad00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d006      	beq.n	800ad16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	711a      	strb	r2, [r3, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f042 0202 	orr.w	r2, r2, #2
 800ad14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d006      	beq.n	800ad2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	711a      	strb	r2, [r3, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f042 0202 	orr.w	r2, r2, #2
 800ad28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2243      	movs	r2, #67	; 0x43
 800ad2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad30:	4b02      	ldr	r3, [pc, #8]	; (800ad3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3718      	adds	r7, #24
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	200000bc 	.word	0x200000bc

0800ad40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad48:	2182      	movs	r1, #130	; 0x82
 800ad4a:	4818      	ldr	r0, [pc, #96]	; (800adac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad4c:	f000 fc99 	bl	800b682 <USBD_GetEpDesc>
 800ad50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad52:	2101      	movs	r1, #1
 800ad54:	4815      	ldr	r0, [pc, #84]	; (800adac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad56:	f000 fc94 	bl	800b682 <USBD_GetEpDesc>
 800ad5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad5c:	2181      	movs	r1, #129	; 0x81
 800ad5e:	4813      	ldr	r0, [pc, #76]	; (800adac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad60:	f000 fc8f 	bl	800b682 <USBD_GetEpDesc>
 800ad64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d002      	beq.n	800ad72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	2210      	movs	r2, #16
 800ad70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d006      	beq.n	800ad86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad80:	711a      	strb	r2, [r3, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d006      	beq.n	800ad9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad94:	711a      	strb	r2, [r3, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2243      	movs	r2, #67	; 0x43
 800ad9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ada0:	4b02      	ldr	r3, [pc, #8]	; (800adac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3718      	adds	r7, #24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	200000bc 	.word	0x200000bc

0800adb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	220a      	movs	r2, #10
 800adbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800adbe:	4b03      	ldr	r3, [pc, #12]	; (800adcc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	20000078 	.word	0x20000078

0800add0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ade0:	2303      	movs	r3, #3
 800ade2:	e009      	b.n	800adf8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	33b0      	adds	r3, #176	; 0xb0
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b087      	sub	sp, #28
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	32b0      	adds	r2, #176	; 0xb0
 800ae1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e008      	b.n	800ae3c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	371c      	adds	r7, #28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	32b0      	adds	r2, #176	; 0xb0
 800ae5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d101      	bne.n	800ae6c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	e004      	b.n	800ae76 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3714      	adds	r7, #20
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
	...

0800ae84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	32b0      	adds	r2, #176	; 0xb0
 800ae96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae9a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	32b0      	adds	r2, #176	; 0xb0
 800aea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e018      	b.n	800aee4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	7c1b      	ldrb	r3, [r3, #16]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d10a      	bne.n	800aed0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aeba:	4b0c      	ldr	r3, [pc, #48]	; (800aeec <USBD_CDC_ReceivePacket+0x68>)
 800aebc:	7819      	ldrb	r1, [r3, #0]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f004 fd59 	bl	800f980 <USBD_LL_PrepareReceive>
 800aece:	e008      	b.n	800aee2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aed0:	4b06      	ldr	r3, [pc, #24]	; (800aeec <USBD_CDC_ReceivePacket+0x68>)
 800aed2:	7819      	ldrb	r1, [r3, #0]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aeda:	2340      	movs	r3, #64	; 0x40
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f004 fd4f 	bl	800f980 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	20000100 	.word	0x20000100

0800aef0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	4613      	mov	r3, r2
 800aefc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d101      	bne.n	800af08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af04:	2303      	movs	r3, #3
 800af06:	e01f      	b.n	800af48 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d003      	beq.n	800af2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2201      	movs	r2, #1
 800af32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	79fa      	ldrb	r2, [r7, #7]
 800af3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f004 fbc9 	bl	800f6d4 <USBD_LL_Init>
 800af42:	4603      	mov	r3, r0
 800af44:	75fb      	strb	r3, [r7, #23]

  return ret;
 800af46:	7dfb      	ldrb	r3, [r7, #23]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3718      	adds	r7, #24
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d101      	bne.n	800af68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af64:	2303      	movs	r3, #3
 800af66:	e025      	b.n	800afb4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	32ae      	adds	r2, #174	; 0xae
 800af7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00f      	beq.n	800afa4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	32ae      	adds	r2, #174	; 0xae
 800af8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af94:	f107 020e 	add.w	r2, r7, #14
 800af98:	4610      	mov	r0, r2
 800af9a:	4798      	blx	r3
 800af9c:	4602      	mov	r2, r0
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800afaa:	1c5a      	adds	r2, r3, #1
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f004 fbd1 	bl	800f76c <USBD_LL_Start>
 800afca:	4603      	mov	r3, r0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afdc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800afde:	4618      	mov	r0, r3
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b084      	sub	sp, #16
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	460b      	mov	r3, r1
 800aff4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b000:	2b00      	cmp	r3, #0
 800b002:	d009      	beq.n	800b018 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	78fa      	ldrb	r2, [r7, #3]
 800b00e:	4611      	mov	r1, r2
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	4798      	blx	r3
 800b014:	4603      	mov	r3, r0
 800b016:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b018:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	460b      	mov	r3, r1
 800b02c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	78fa      	ldrb	r2, [r7, #3]
 800b03c:	4611      	mov	r1, r2
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	4798      	blx	r3
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b048:	2303      	movs	r3, #3
 800b04a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b084      	sub	sp, #16
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	4618      	mov	r0, r3
 800b06a:	f001 f908 	bl	800c27e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2201      	movs	r2, #1
 800b072:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b07c:	461a      	mov	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b08a:	f003 031f 	and.w	r3, r3, #31
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d01a      	beq.n	800b0c8 <USBD_LL_SetupStage+0x72>
 800b092:	2b02      	cmp	r3, #2
 800b094:	d822      	bhi.n	800b0dc <USBD_LL_SetupStage+0x86>
 800b096:	2b00      	cmp	r3, #0
 800b098:	d002      	beq.n	800b0a0 <USBD_LL_SetupStage+0x4a>
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d00a      	beq.n	800b0b4 <USBD_LL_SetupStage+0x5e>
 800b09e:	e01d      	b.n	800b0dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fb5f 	bl	800b76c <USBD_StdDevReq>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0b2:	e020      	b.n	800b0f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 fbc7 	bl	800b850 <USBD_StdItfReq>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c6:	e016      	b.n	800b0f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fc29 	bl	800b928 <USBD_StdEPReq>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b0da:	e00c      	b.n	800b0f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b0e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f004 fb9e 	bl	800f82c <USBD_LL_StallEP>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b0f4:	bf00      	nop
  }

  return ret;
 800b0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	460b      	mov	r3, r1
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b10e:	2300      	movs	r3, #0
 800b110:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b112:	7afb      	ldrb	r3, [r7, #11]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d16e      	bne.n	800b1f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b11e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b126:	2b03      	cmp	r3, #3
 800b128:	f040 8098 	bne.w	800b25c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	689a      	ldr	r2, [r3, #8]
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	429a      	cmp	r2, r3
 800b136:	d913      	bls.n	800b160 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	689a      	ldr	r2, [r3, #8]
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	1ad2      	subs	r2, r2, r3
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	68da      	ldr	r2, [r3, #12]
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	4293      	cmp	r3, r2
 800b150:	bf28      	it	cs
 800b152:	4613      	movcs	r3, r2
 800b154:	461a      	mov	r2, r3
 800b156:	6879      	ldr	r1, [r7, #4]
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f001 f984 	bl	800c466 <USBD_CtlContinueRx>
 800b15e:	e07d      	b.n	800b25c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b166:	f003 031f 	and.w	r3, r3, #31
 800b16a:	2b02      	cmp	r3, #2
 800b16c:	d014      	beq.n	800b198 <USBD_LL_DataOutStage+0x98>
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d81d      	bhi.n	800b1ae <USBD_LL_DataOutStage+0xae>
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <USBD_LL_DataOutStage+0x7c>
 800b176:	2b01      	cmp	r3, #1
 800b178:	d003      	beq.n	800b182 <USBD_LL_DataOutStage+0x82>
 800b17a:	e018      	b.n	800b1ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b17c:	2300      	movs	r3, #0
 800b17e:	75bb      	strb	r3, [r7, #22]
            break;
 800b180:	e018      	b.n	800b1b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	4619      	mov	r1, r3
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f000 fa5e 	bl	800b64e <USBD_CoreFindIF>
 800b192:	4603      	mov	r3, r0
 800b194:	75bb      	strb	r3, [r7, #22]
            break;
 800b196:	e00d      	b.n	800b1b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f000 fa60 	bl	800b668 <USBD_CoreFindEP>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	75bb      	strb	r3, [r7, #22]
            break;
 800b1ac:	e002      	b.n	800b1b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	75bb      	strb	r3, [r7, #22]
            break;
 800b1b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b1b4:	7dbb      	ldrb	r3, [r7, #22]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d119      	bne.n	800b1ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d113      	bne.n	800b1ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b1c6:	7dba      	ldrb	r2, [r7, #22]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	32ae      	adds	r2, #174	; 0xae
 800b1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00b      	beq.n	800b1ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b1d6:	7dba      	ldrb	r2, [r7, #22]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b1de:	7dba      	ldrb	r2, [r7, #22]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	32ae      	adds	r2, #174	; 0xae
 800b1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f001 f94a 	bl	800c488 <USBD_CtlSendStatus>
 800b1f4:	e032      	b.n	800b25c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b1f6:	7afb      	ldrb	r3, [r7, #11]
 800b1f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	4619      	mov	r1, r3
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f000 fa31 	bl	800b668 <USBD_CoreFindEP>
 800b206:	4603      	mov	r3, r0
 800b208:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b20a:	7dbb      	ldrb	r3, [r7, #22]
 800b20c:	2bff      	cmp	r3, #255	; 0xff
 800b20e:	d025      	beq.n	800b25c <USBD_LL_DataOutStage+0x15c>
 800b210:	7dbb      	ldrb	r3, [r7, #22]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d122      	bne.n	800b25c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d117      	bne.n	800b252 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b222:	7dba      	ldrb	r2, [r7, #22]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	32ae      	adds	r2, #174	; 0xae
 800b228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b22c:	699b      	ldr	r3, [r3, #24]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00f      	beq.n	800b252 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b232:	7dba      	ldrb	r2, [r7, #22]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b23a:	7dba      	ldrb	r2, [r7, #22]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	32ae      	adds	r2, #174	; 0xae
 800b240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	7afa      	ldrb	r2, [r7, #11]
 800b248:	4611      	mov	r1, r2
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	4798      	blx	r3
 800b24e:	4603      	mov	r3, r0
 800b250:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b252:	7dfb      	ldrb	r3, [r7, #23]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b258:	7dfb      	ldrb	r3, [r7, #23]
 800b25a:	e000      	b.n	800b25e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b086      	sub	sp, #24
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	460b      	mov	r3, r1
 800b270:	607a      	str	r2, [r7, #4]
 800b272:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b274:	7afb      	ldrb	r3, [r7, #11]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d16f      	bne.n	800b35a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	3314      	adds	r3, #20
 800b27e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b286:	2b02      	cmp	r3, #2
 800b288:	d15a      	bne.n	800b340 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	689a      	ldr	r2, [r3, #8]
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	429a      	cmp	r2, r3
 800b294:	d914      	bls.n	800b2c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	689a      	ldr	r2, [r3, #8]
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	1ad2      	subs	r2, r2, r3
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	6879      	ldr	r1, [r7, #4]
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f001 f8ac 	bl	800c40a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f004 fb61 	bl	800f980 <USBD_LL_PrepareReceive>
 800b2be:	e03f      	b.n	800b340 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	68da      	ldr	r2, [r3, #12]
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d11c      	bne.n	800b306 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	685a      	ldr	r2, [r3, #4]
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d316      	bcc.n	800b306 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	685a      	ldr	r2, [r3, #4]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d20f      	bcs.n	800b306 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f001 f88d 	bl	800c40a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f004 fb3e 	bl	800f980 <USBD_LL_PrepareReceive>
 800b304:	e01c      	b.n	800b340 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b03      	cmp	r3, #3
 800b310:	d10f      	bne.n	800b332 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d009      	beq.n	800b332 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b332:	2180      	movs	r1, #128	; 0x80
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f004 fa79 	bl	800f82c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f001 f8b7 	bl	800c4ae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d03a      	beq.n	800b3c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f7ff fe42 	bl	800afd4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b358:	e032      	b.n	800b3c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b35a:	7afb      	ldrb	r3, [r7, #11]
 800b35c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b360:	b2db      	uxtb	r3, r3
 800b362:	4619      	mov	r1, r3
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f000 f97f 	bl	800b668 <USBD_CoreFindEP>
 800b36a:	4603      	mov	r3, r0
 800b36c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b36e:	7dfb      	ldrb	r3, [r7, #23]
 800b370:	2bff      	cmp	r3, #255	; 0xff
 800b372:	d025      	beq.n	800b3c0 <USBD_LL_DataInStage+0x15a>
 800b374:	7dfb      	ldrb	r3, [r7, #23]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d122      	bne.n	800b3c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b380:	b2db      	uxtb	r3, r3
 800b382:	2b03      	cmp	r3, #3
 800b384:	d11c      	bne.n	800b3c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b386:	7dfa      	ldrb	r2, [r7, #23]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	32ae      	adds	r2, #174	; 0xae
 800b38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d014      	beq.n	800b3c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b396:	7dfa      	ldrb	r2, [r7, #23]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b39e:	7dfa      	ldrb	r2, [r7, #23]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	32ae      	adds	r2, #174	; 0xae
 800b3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	7afa      	ldrb	r2, [r7, #11]
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	4798      	blx	r3
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b3b6:	7dbb      	ldrb	r3, [r7, #22]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b3bc:	7dbb      	ldrb	r3, [r7, #22]
 800b3be:	e000      	b.n	800b3c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3718      	adds	r7, #24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b084      	sub	sp, #16
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b402:	2b00      	cmp	r3, #0
 800b404:	d014      	beq.n	800b430 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00e      	beq.n	800b430 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	6852      	ldr	r2, [r2, #4]
 800b41e:	b2d2      	uxtb	r2, r2
 800b420:	4611      	mov	r1, r2
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	4798      	blx	r3
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d001      	beq.n	800b430 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b42c:	2303      	movs	r3, #3
 800b42e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b430:	2340      	movs	r3, #64	; 0x40
 800b432:	2200      	movs	r2, #0
 800b434:	2100      	movs	r1, #0
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f004 f9b3 	bl	800f7a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2240      	movs	r2, #64	; 0x40
 800b448:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b44c:	2340      	movs	r3, #64	; 0x40
 800b44e:	2200      	movs	r2, #0
 800b450:	2180      	movs	r1, #128	; 0x80
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f004 f9a5 	bl	800f7a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2240      	movs	r2, #64	; 0x40
 800b462:	621a      	str	r2, [r3, #32]

  return ret;
 800b464:	7bfb      	ldrb	r3, [r7, #15]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b46e:	b480      	push	{r7}
 800b470:	b083      	sub	sp, #12
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	460b      	mov	r3, r1
 800b478:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	78fa      	ldrb	r2, [r7, #3]
 800b47e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	370c      	adds	r7, #12
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b48e:	b480      	push	{r7}
 800b490:	b083      	sub	sp, #12
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2204      	movs	r2, #4
 800b4a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	370c      	adds	r7, #12
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr

0800b4ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b4ba:	b480      	push	{r7}
 800b4bc:	b083      	sub	sp, #12
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b04      	cmp	r3, #4
 800b4cc:	d106      	bne.n	800b4dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	370c      	adds	r7, #12
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr

0800b4ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d110      	bne.n	800b520 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00b      	beq.n	800b520 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b50e:	69db      	ldr	r3, [r3, #28]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d005      	beq.n	800b520 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b51a:	69db      	ldr	r3, [r3, #28]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b082      	sub	sp, #8
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
 800b532:	460b      	mov	r3, r1
 800b534:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	32ae      	adds	r2, #174	; 0xae
 800b540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d101      	bne.n	800b54c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b548:	2303      	movs	r3, #3
 800b54a:	e01c      	b.n	800b586 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b552:	b2db      	uxtb	r3, r3
 800b554:	2b03      	cmp	r3, #3
 800b556:	d115      	bne.n	800b584 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	32ae      	adds	r2, #174	; 0xae
 800b562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00b      	beq.n	800b584 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	32ae      	adds	r2, #174	; 0xae
 800b576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57a:	6a1b      	ldr	r3, [r3, #32]
 800b57c:	78fa      	ldrb	r2, [r7, #3]
 800b57e:	4611      	mov	r1, r2
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b082      	sub	sp, #8
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	460b      	mov	r3, r1
 800b598:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	32ae      	adds	r2, #174	; 0xae
 800b5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	e01c      	b.n	800b5ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	d115      	bne.n	800b5e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	32ae      	adds	r2, #174	; 0xae
 800b5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00b      	beq.n	800b5e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	32ae      	adds	r2, #174	; 0xae
 800b5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e0:	78fa      	ldrb	r2, [r7, #3]
 800b5e2:	4611      	mov	r1, r2
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b083      	sub	sp, #12
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b610:	2300      	movs	r3, #0
 800b612:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00e      	beq.n	800b644 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	6852      	ldr	r2, [r2, #4]
 800b632:	b2d2      	uxtb	r2, r2
 800b634:	4611      	mov	r1, r2
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	4798      	blx	r3
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d001      	beq.n	800b644 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b640:	2303      	movs	r3, #3
 800b642:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b644:	7bfb      	ldrb	r3, [r7, #15]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b64e:	b480      	push	{r7}
 800b650:	b083      	sub	sp, #12
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	460b      	mov	r3, r1
 800b658:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b65a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b674:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b676:	4618      	mov	r0, r3
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b086      	sub	sp, #24
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	460b      	mov	r3, r1
 800b68c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b696:	2300      	movs	r3, #0
 800b698:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	885b      	ldrh	r3, [r3, #2]
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d920      	bls.n	800b6ec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b6b2:	e013      	b.n	800b6dc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b6b4:	f107 030a 	add.w	r3, r7, #10
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	6978      	ldr	r0, [r7, #20]
 800b6bc:	f000 f81b 	bl	800b6f6 <USBD_GetNextDesc>
 800b6c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	785b      	ldrb	r3, [r3, #1]
 800b6c6:	2b05      	cmp	r3, #5
 800b6c8:	d108      	bne.n	800b6dc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	789b      	ldrb	r3, [r3, #2]
 800b6d2:	78fa      	ldrb	r2, [r7, #3]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d008      	beq.n	800b6ea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	885b      	ldrh	r3, [r3, #2]
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	897b      	ldrh	r3, [r7, #10]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d8e5      	bhi.n	800b6b4 <USBD_GetEpDesc+0x32>
 800b6e8:	e000      	b.n	800b6ec <USBD_GetEpDesc+0x6a>
          break;
 800b6ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b6ec:	693b      	ldr	r3, [r7, #16]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b085      	sub	sp, #20
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	881a      	ldrh	r2, [r3, #0]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	4413      	add	r3, r2
 800b710:	b29a      	uxth	r2, r3
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4413      	add	r3, r2
 800b720:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b722:	68fb      	ldr	r3, [r7, #12]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b730:	b480      	push	{r7}
 800b732:	b087      	sub	sp, #28
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	3301      	adds	r3, #1
 800b746:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b74e:	8a3b      	ldrh	r3, [r7, #16]
 800b750:	021b      	lsls	r3, r3, #8
 800b752:	b21a      	sxth	r2, r3
 800b754:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b758:	4313      	orrs	r3, r2
 800b75a:	b21b      	sxth	r3, r3
 800b75c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b75e:	89fb      	ldrh	r3, [r7, #14]
}
 800b760:	4618      	mov	r0, r3
 800b762:	371c      	adds	r7, #28
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b782:	2b40      	cmp	r3, #64	; 0x40
 800b784:	d005      	beq.n	800b792 <USBD_StdDevReq+0x26>
 800b786:	2b40      	cmp	r3, #64	; 0x40
 800b788:	d857      	bhi.n	800b83a <USBD_StdDevReq+0xce>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00f      	beq.n	800b7ae <USBD_StdDevReq+0x42>
 800b78e:	2b20      	cmp	r3, #32
 800b790:	d153      	bne.n	800b83a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	32ae      	adds	r2, #174	; 0xae
 800b79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	4798      	blx	r3
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ac:	e04a      	b.n	800b844 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	785b      	ldrb	r3, [r3, #1]
 800b7b2:	2b09      	cmp	r3, #9
 800b7b4:	d83b      	bhi.n	800b82e <USBD_StdDevReq+0xc2>
 800b7b6:	a201      	add	r2, pc, #4	; (adr r2, 800b7bc <USBD_StdDevReq+0x50>)
 800b7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7bc:	0800b811 	.word	0x0800b811
 800b7c0:	0800b825 	.word	0x0800b825
 800b7c4:	0800b82f 	.word	0x0800b82f
 800b7c8:	0800b81b 	.word	0x0800b81b
 800b7cc:	0800b82f 	.word	0x0800b82f
 800b7d0:	0800b7ef 	.word	0x0800b7ef
 800b7d4:	0800b7e5 	.word	0x0800b7e5
 800b7d8:	0800b82f 	.word	0x0800b82f
 800b7dc:	0800b807 	.word	0x0800b807
 800b7e0:	0800b7f9 	.word	0x0800b7f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b7e4:	6839      	ldr	r1, [r7, #0]
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fa3c 	bl	800bc64 <USBD_GetDescriptor>
          break;
 800b7ec:	e024      	b.n	800b838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b7ee:	6839      	ldr	r1, [r7, #0]
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 fba1 	bl	800bf38 <USBD_SetAddress>
          break;
 800b7f6:	e01f      	b.n	800b838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 fbe0 	bl	800bfc0 <USBD_SetConfig>
 800b800:	4603      	mov	r3, r0
 800b802:	73fb      	strb	r3, [r7, #15]
          break;
 800b804:	e018      	b.n	800b838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fc83 	bl	800c114 <USBD_GetConfig>
          break;
 800b80e:	e013      	b.n	800b838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b810:	6839      	ldr	r1, [r7, #0]
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fcb4 	bl	800c180 <USBD_GetStatus>
          break;
 800b818:	e00e      	b.n	800b838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 fce3 	bl	800c1e8 <USBD_SetFeature>
          break;
 800b822:	e009      	b.n	800b838 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b824:	6839      	ldr	r1, [r7, #0]
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fd07 	bl	800c23a <USBD_ClrFeature>
          break;
 800b82c:	e004      	b.n	800b838 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fd5e 	bl	800c2f2 <USBD_CtlError>
          break;
 800b836:	bf00      	nop
      }
      break;
 800b838:	e004      	b.n	800b844 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b83a:	6839      	ldr	r1, [r7, #0]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fd58 	bl	800c2f2 <USBD_CtlError>
      break;
 800b842:	bf00      	nop
  }

  return ret;
 800b844:	7bfb      	ldrb	r3, [r7, #15]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop

0800b850 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b866:	2b40      	cmp	r3, #64	; 0x40
 800b868:	d005      	beq.n	800b876 <USBD_StdItfReq+0x26>
 800b86a:	2b40      	cmp	r3, #64	; 0x40
 800b86c:	d852      	bhi.n	800b914 <USBD_StdItfReq+0xc4>
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d001      	beq.n	800b876 <USBD_StdItfReq+0x26>
 800b872:	2b20      	cmp	r3, #32
 800b874:	d14e      	bne.n	800b914 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	3b01      	subs	r3, #1
 800b880:	2b02      	cmp	r3, #2
 800b882:	d840      	bhi.n	800b906 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	889b      	ldrh	r3, [r3, #4]
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d836      	bhi.n	800b8fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	889b      	ldrh	r3, [r3, #4]
 800b892:	b2db      	uxtb	r3, r3
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7ff fed9 	bl	800b64e <USBD_CoreFindIF>
 800b89c:	4603      	mov	r3, r0
 800b89e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8a0:	7bbb      	ldrb	r3, [r7, #14]
 800b8a2:	2bff      	cmp	r3, #255	; 0xff
 800b8a4:	d01d      	beq.n	800b8e2 <USBD_StdItfReq+0x92>
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d11a      	bne.n	800b8e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b8ac:	7bba      	ldrb	r2, [r7, #14]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	32ae      	adds	r2, #174	; 0xae
 800b8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00f      	beq.n	800b8dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b8bc:	7bba      	ldrb	r2, [r7, #14]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b8c4:	7bba      	ldrb	r2, [r7, #14]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	32ae      	adds	r2, #174	; 0xae
 800b8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	4798      	blx	r3
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8da:	e004      	b.n	800b8e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8e0:	e001      	b.n	800b8e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b8e2:	2303      	movs	r3, #3
 800b8e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	88db      	ldrh	r3, [r3, #6]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d110      	bne.n	800b910 <USBD_StdItfReq+0xc0>
 800b8ee:	7bfb      	ldrb	r3, [r7, #15]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10d      	bne.n	800b910 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fdc7 	bl	800c488 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b8fa:	e009      	b.n	800b910 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b8fc:	6839      	ldr	r1, [r7, #0]
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fcf7 	bl	800c2f2 <USBD_CtlError>
          break;
 800b904:	e004      	b.n	800b910 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fcf2 	bl	800c2f2 <USBD_CtlError>
          break;
 800b90e:	e000      	b.n	800b912 <USBD_StdItfReq+0xc2>
          break;
 800b910:	bf00      	nop
      }
      break;
 800b912:	e004      	b.n	800b91e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fceb 	bl	800c2f2 <USBD_CtlError>
      break;
 800b91c:	bf00      	nop
  }

  return ret;
 800b91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	889b      	ldrh	r3, [r3, #4]
 800b93a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b944:	2b40      	cmp	r3, #64	; 0x40
 800b946:	d007      	beq.n	800b958 <USBD_StdEPReq+0x30>
 800b948:	2b40      	cmp	r3, #64	; 0x40
 800b94a:	f200 817f 	bhi.w	800bc4c <USBD_StdEPReq+0x324>
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d02a      	beq.n	800b9a8 <USBD_StdEPReq+0x80>
 800b952:	2b20      	cmp	r3, #32
 800b954:	f040 817a 	bne.w	800bc4c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b958:	7bbb      	ldrb	r3, [r7, #14]
 800b95a:	4619      	mov	r1, r3
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f7ff fe83 	bl	800b668 <USBD_CoreFindEP>
 800b962:	4603      	mov	r3, r0
 800b964:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b966:	7b7b      	ldrb	r3, [r7, #13]
 800b968:	2bff      	cmp	r3, #255	; 0xff
 800b96a:	f000 8174 	beq.w	800bc56 <USBD_StdEPReq+0x32e>
 800b96e:	7b7b      	ldrb	r3, [r7, #13]
 800b970:	2b00      	cmp	r3, #0
 800b972:	f040 8170 	bne.w	800bc56 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b976:	7b7a      	ldrb	r2, [r7, #13]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b97e:	7b7a      	ldrb	r2, [r7, #13]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	32ae      	adds	r2, #174	; 0xae
 800b984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f000 8163 	beq.w	800bc56 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b990:	7b7a      	ldrb	r2, [r7, #13]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	32ae      	adds	r2, #174	; 0xae
 800b996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	4798      	blx	r3
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b9a6:	e156      	b.n	800bc56 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	785b      	ldrb	r3, [r3, #1]
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	d008      	beq.n	800b9c2 <USBD_StdEPReq+0x9a>
 800b9b0:	2b03      	cmp	r3, #3
 800b9b2:	f300 8145 	bgt.w	800bc40 <USBD_StdEPReq+0x318>
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f000 809b 	beq.w	800baf2 <USBD_StdEPReq+0x1ca>
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d03c      	beq.n	800ba3a <USBD_StdEPReq+0x112>
 800b9c0:	e13e      	b.n	800bc40 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d002      	beq.n	800b9d4 <USBD_StdEPReq+0xac>
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	d016      	beq.n	800ba00 <USBD_StdEPReq+0xd8>
 800b9d2:	e02c      	b.n	800ba2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9d4:	7bbb      	ldrb	r3, [r7, #14]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00d      	beq.n	800b9f6 <USBD_StdEPReq+0xce>
 800b9da:	7bbb      	ldrb	r3, [r7, #14]
 800b9dc:	2b80      	cmp	r3, #128	; 0x80
 800b9de:	d00a      	beq.n	800b9f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9e0:	7bbb      	ldrb	r3, [r7, #14]
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f003 ff21 	bl	800f82c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9ea:	2180      	movs	r1, #128	; 0x80
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f003 ff1d 	bl	800f82c <USBD_LL_StallEP>
 800b9f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9f4:	e020      	b.n	800ba38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fc7a 	bl	800c2f2 <USBD_CtlError>
              break;
 800b9fe:	e01b      	b.n	800ba38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	885b      	ldrh	r3, [r3, #2]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10e      	bne.n	800ba26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba08:	7bbb      	ldrb	r3, [r7, #14]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00b      	beq.n	800ba26 <USBD_StdEPReq+0xfe>
 800ba0e:	7bbb      	ldrb	r3, [r7, #14]
 800ba10:	2b80      	cmp	r3, #128	; 0x80
 800ba12:	d008      	beq.n	800ba26 <USBD_StdEPReq+0xfe>
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	88db      	ldrh	r3, [r3, #6]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d104      	bne.n	800ba26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba1c:	7bbb      	ldrb	r3, [r7, #14]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f003 ff03 	bl	800f82c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fd2e 	bl	800c488 <USBD_CtlSendStatus>

              break;
 800ba2c:	e004      	b.n	800ba38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ba2e:	6839      	ldr	r1, [r7, #0]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fc5e 	bl	800c2f2 <USBD_CtlError>
              break;
 800ba36:	bf00      	nop
          }
          break;
 800ba38:	e107      	b.n	800bc4a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d002      	beq.n	800ba4c <USBD_StdEPReq+0x124>
 800ba46:	2b03      	cmp	r3, #3
 800ba48:	d016      	beq.n	800ba78 <USBD_StdEPReq+0x150>
 800ba4a:	e04b      	b.n	800bae4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba4c:	7bbb      	ldrb	r3, [r7, #14]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00d      	beq.n	800ba6e <USBD_StdEPReq+0x146>
 800ba52:	7bbb      	ldrb	r3, [r7, #14]
 800ba54:	2b80      	cmp	r3, #128	; 0x80
 800ba56:	d00a      	beq.n	800ba6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba58:	7bbb      	ldrb	r3, [r7, #14]
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f003 fee5 	bl	800f82c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba62:	2180      	movs	r1, #128	; 0x80
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f003 fee1 	bl	800f82c <USBD_LL_StallEP>
 800ba6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba6c:	e040      	b.n	800baf0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fc3e 	bl	800c2f2 <USBD_CtlError>
              break;
 800ba76:	e03b      	b.n	800baf0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	885b      	ldrh	r3, [r3, #2]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d136      	bne.n	800baee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba80:	7bbb      	ldrb	r3, [r7, #14]
 800ba82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d004      	beq.n	800ba94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba8a:	7bbb      	ldrb	r3, [r7, #14]
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f003 feeb 	bl	800f86a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 fcf7 	bl	800c488 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba9a:	7bbb      	ldrb	r3, [r7, #14]
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7ff fde2 	bl	800b668 <USBD_CoreFindEP>
 800baa4:	4603      	mov	r3, r0
 800baa6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800baa8:	7b7b      	ldrb	r3, [r7, #13]
 800baaa:	2bff      	cmp	r3, #255	; 0xff
 800baac:	d01f      	beq.n	800baee <USBD_StdEPReq+0x1c6>
 800baae:	7b7b      	ldrb	r3, [r7, #13]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d11c      	bne.n	800baee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bab4:	7b7a      	ldrb	r2, [r7, #13]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800babc:	7b7a      	ldrb	r2, [r7, #13]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	32ae      	adds	r2, #174	; 0xae
 800bac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d010      	beq.n	800baee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bacc:	7b7a      	ldrb	r2, [r7, #13]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	32ae      	adds	r2, #174	; 0xae
 800bad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	4798      	blx	r3
 800bade:	4603      	mov	r3, r0
 800bae0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bae2:	e004      	b.n	800baee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fc03 	bl	800c2f2 <USBD_CtlError>
              break;
 800baec:	e000      	b.n	800baf0 <USBD_StdEPReq+0x1c8>
              break;
 800baee:	bf00      	nop
          }
          break;
 800baf0:	e0ab      	b.n	800bc4a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d002      	beq.n	800bb04 <USBD_StdEPReq+0x1dc>
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	d032      	beq.n	800bb68 <USBD_StdEPReq+0x240>
 800bb02:	e097      	b.n	800bc34 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d007      	beq.n	800bb1a <USBD_StdEPReq+0x1f2>
 800bb0a:	7bbb      	ldrb	r3, [r7, #14]
 800bb0c:	2b80      	cmp	r3, #128	; 0x80
 800bb0e:	d004      	beq.n	800bb1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fbed 	bl	800c2f2 <USBD_CtlError>
                break;
 800bb18:	e091      	b.n	800bc3e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	da0b      	bge.n	800bb3a <USBD_StdEPReq+0x212>
 800bb22:	7bbb      	ldrb	r3, [r7, #14]
 800bb24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb28:	4613      	mov	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4413      	add	r3, r2
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	3310      	adds	r3, #16
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	4413      	add	r3, r2
 800bb36:	3304      	adds	r3, #4
 800bb38:	e00b      	b.n	800bb52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb3a:	7bbb      	ldrb	r3, [r7, #14]
 800bb3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb40:	4613      	mov	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	4413      	add	r3, r2
 800bb50:	3304      	adds	r3, #4
 800bb52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2200      	movs	r2, #0
 800bb58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fc37 	bl	800c3d4 <USBD_CtlSendData>
              break;
 800bb66:	e06a      	b.n	800bc3e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	da11      	bge.n	800bb94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb70:	7bbb      	ldrb	r3, [r7, #14]
 800bb72:	f003 020f 	and.w	r2, r3, #15
 800bb76:	6879      	ldr	r1, [r7, #4]
 800bb78:	4613      	mov	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	4413      	add	r3, r2
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	440b      	add	r3, r1
 800bb82:	3324      	adds	r3, #36	; 0x24
 800bb84:	881b      	ldrh	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d117      	bne.n	800bbba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb8a:	6839      	ldr	r1, [r7, #0]
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fbb0 	bl	800c2f2 <USBD_CtlError>
                  break;
 800bb92:	e054      	b.n	800bc3e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb94:	7bbb      	ldrb	r3, [r7, #14]
 800bb96:	f003 020f 	and.w	r2, r3, #15
 800bb9a:	6879      	ldr	r1, [r7, #4]
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	4413      	add	r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	440b      	add	r3, r1
 800bba6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d104      	bne.n	800bbba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fb9d 	bl	800c2f2 <USBD_CtlError>
                  break;
 800bbb8:	e041      	b.n	800bc3e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	da0b      	bge.n	800bbda <USBD_StdEPReq+0x2b2>
 800bbc2:	7bbb      	ldrb	r3, [r7, #14]
 800bbc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbc8:	4613      	mov	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4413      	add	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	3310      	adds	r3, #16
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	e00b      	b.n	800bbf2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbda:	7bbb      	ldrb	r3, [r7, #14]
 800bbdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	4413      	add	r3, r2
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d002      	beq.n	800bc00 <USBD_StdEPReq+0x2d8>
 800bbfa:	7bbb      	ldrb	r3, [r7, #14]
 800bbfc:	2b80      	cmp	r3, #128	; 0x80
 800bbfe:	d103      	bne.n	800bc08 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2200      	movs	r2, #0
 800bc04:	601a      	str	r2, [r3, #0]
 800bc06:	e00e      	b.n	800bc26 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc08:	7bbb      	ldrb	r3, [r7, #14]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f003 fe4b 	bl	800f8a8 <USBD_LL_IsStallEP>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d003      	beq.n	800bc20 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	e002      	b.n	800bc26 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	2200      	movs	r2, #0
 800bc24:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2202      	movs	r2, #2
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fbd1 	bl	800c3d4 <USBD_CtlSendData>
              break;
 800bc32:	e004      	b.n	800bc3e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bc34:	6839      	ldr	r1, [r7, #0]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fb5b 	bl	800c2f2 <USBD_CtlError>
              break;
 800bc3c:	bf00      	nop
          }
          break;
 800bc3e:	e004      	b.n	800bc4a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fb55 	bl	800c2f2 <USBD_CtlError>
          break;
 800bc48:	bf00      	nop
      }
      break;
 800bc4a:	e005      	b.n	800bc58 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bc4c:	6839      	ldr	r1, [r7, #0]
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 fb4f 	bl	800c2f2 <USBD_CtlError>
      break;
 800bc54:	e000      	b.n	800bc58 <USBD_StdEPReq+0x330>
      break;
 800bc56:	bf00      	nop
  }

  return ret;
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
	...

0800bc64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc72:	2300      	movs	r3, #0
 800bc74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc76:	2300      	movs	r3, #0
 800bc78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	885b      	ldrh	r3, [r3, #2]
 800bc7e:	0a1b      	lsrs	r3, r3, #8
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	3b01      	subs	r3, #1
 800bc84:	2b06      	cmp	r3, #6
 800bc86:	f200 8128 	bhi.w	800beda <USBD_GetDescriptor+0x276>
 800bc8a:	a201      	add	r2, pc, #4	; (adr r2, 800bc90 <USBD_GetDescriptor+0x2c>)
 800bc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc90:	0800bcad 	.word	0x0800bcad
 800bc94:	0800bcc5 	.word	0x0800bcc5
 800bc98:	0800bd05 	.word	0x0800bd05
 800bc9c:	0800bedb 	.word	0x0800bedb
 800bca0:	0800bedb 	.word	0x0800bedb
 800bca4:	0800be7b 	.word	0x0800be7b
 800bca8:	0800bea7 	.word	0x0800bea7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	7c12      	ldrb	r2, [r2, #16]
 800bcb8:	f107 0108 	add.w	r1, r7, #8
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	4798      	blx	r3
 800bcc0:	60f8      	str	r0, [r7, #12]
      break;
 800bcc2:	e112      	b.n	800beea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	7c1b      	ldrb	r3, [r3, #16]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10d      	bne.n	800bce8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd4:	f107 0208 	add.w	r2, r7, #8
 800bcd8:	4610      	mov	r0, r2
 800bcda:	4798      	blx	r3
 800bcdc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	3301      	adds	r3, #1
 800bce2:	2202      	movs	r2, #2
 800bce4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bce6:	e100      	b.n	800beea <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf0:	f107 0208 	add.w	r2, r7, #8
 800bcf4:	4610      	mov	r0, r2
 800bcf6:	4798      	blx	r3
 800bcf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	2202      	movs	r2, #2
 800bd00:	701a      	strb	r2, [r3, #0]
      break;
 800bd02:	e0f2      	b.n	800beea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	885b      	ldrh	r3, [r3, #2]
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	2b05      	cmp	r3, #5
 800bd0c:	f200 80ac 	bhi.w	800be68 <USBD_GetDescriptor+0x204>
 800bd10:	a201      	add	r2, pc, #4	; (adr r2, 800bd18 <USBD_GetDescriptor+0xb4>)
 800bd12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd16:	bf00      	nop
 800bd18:	0800bd31 	.word	0x0800bd31
 800bd1c:	0800bd65 	.word	0x0800bd65
 800bd20:	0800bd99 	.word	0x0800bd99
 800bd24:	0800bdcd 	.word	0x0800bdcd
 800bd28:	0800be01 	.word	0x0800be01
 800bd2c:	0800be35 	.word	0x0800be35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00b      	beq.n	800bd54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	7c12      	ldrb	r2, [r2, #16]
 800bd48:	f107 0108 	add.w	r1, r7, #8
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	4798      	blx	r3
 800bd50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd52:	e091      	b.n	800be78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd54:	6839      	ldr	r1, [r7, #0]
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 facb 	bl	800c2f2 <USBD_CtlError>
            err++;
 800bd5c:	7afb      	ldrb	r3, [r7, #11]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	72fb      	strb	r3, [r7, #11]
          break;
 800bd62:	e089      	b.n	800be78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd6a:	689b      	ldr	r3, [r3, #8]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d00b      	beq.n	800bd88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	7c12      	ldrb	r2, [r2, #16]
 800bd7c:	f107 0108 	add.w	r1, r7, #8
 800bd80:	4610      	mov	r0, r2
 800bd82:	4798      	blx	r3
 800bd84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd86:	e077      	b.n	800be78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd88:	6839      	ldr	r1, [r7, #0]
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 fab1 	bl	800c2f2 <USBD_CtlError>
            err++;
 800bd90:	7afb      	ldrb	r3, [r7, #11]
 800bd92:	3301      	adds	r3, #1
 800bd94:	72fb      	strb	r3, [r7, #11]
          break;
 800bd96:	e06f      	b.n	800be78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00b      	beq.n	800bdbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	7c12      	ldrb	r2, [r2, #16]
 800bdb0:	f107 0108 	add.w	r1, r7, #8
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	4798      	blx	r3
 800bdb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdba:	e05d      	b.n	800be78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdbc:	6839      	ldr	r1, [r7, #0]
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 fa97 	bl	800c2f2 <USBD_CtlError>
            err++;
 800bdc4:	7afb      	ldrb	r3, [r7, #11]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdca:	e055      	b.n	800be78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00b      	beq.n	800bdf0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdde:	691b      	ldr	r3, [r3, #16]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	7c12      	ldrb	r2, [r2, #16]
 800bde4:	f107 0108 	add.w	r1, r7, #8
 800bde8:	4610      	mov	r0, r2
 800bdea:	4798      	blx	r3
 800bdec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdee:	e043      	b.n	800be78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fa7d 	bl	800c2f2 <USBD_CtlError>
            err++;
 800bdf8:	7afb      	ldrb	r3, [r7, #11]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	72fb      	strb	r3, [r7, #11]
          break;
 800bdfe:	e03b      	b.n	800be78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00b      	beq.n	800be24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	7c12      	ldrb	r2, [r2, #16]
 800be18:	f107 0108 	add.w	r1, r7, #8
 800be1c:	4610      	mov	r0, r2
 800be1e:	4798      	blx	r3
 800be20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be22:	e029      	b.n	800be78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fa63 	bl	800c2f2 <USBD_CtlError>
            err++;
 800be2c:	7afb      	ldrb	r3, [r7, #11]
 800be2e:	3301      	adds	r3, #1
 800be30:	72fb      	strb	r3, [r7, #11]
          break;
 800be32:	e021      	b.n	800be78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be3a:	699b      	ldr	r3, [r3, #24]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00b      	beq.n	800be58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be46:	699b      	ldr	r3, [r3, #24]
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	7c12      	ldrb	r2, [r2, #16]
 800be4c:	f107 0108 	add.w	r1, r7, #8
 800be50:	4610      	mov	r0, r2
 800be52:	4798      	blx	r3
 800be54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be56:	e00f      	b.n	800be78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fa49 	bl	800c2f2 <USBD_CtlError>
            err++;
 800be60:	7afb      	ldrb	r3, [r7, #11]
 800be62:	3301      	adds	r3, #1
 800be64:	72fb      	strb	r3, [r7, #11]
          break;
 800be66:	e007      	b.n	800be78 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be68:	6839      	ldr	r1, [r7, #0]
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fa41 	bl	800c2f2 <USBD_CtlError>
          err++;
 800be70:	7afb      	ldrb	r3, [r7, #11]
 800be72:	3301      	adds	r3, #1
 800be74:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800be76:	bf00      	nop
      }
      break;
 800be78:	e037      	b.n	800beea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	7c1b      	ldrb	r3, [r3, #16]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d109      	bne.n	800be96 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be8a:	f107 0208 	add.w	r2, r7, #8
 800be8e:	4610      	mov	r0, r2
 800be90:	4798      	blx	r3
 800be92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be94:	e029      	b.n	800beea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fa2a 	bl	800c2f2 <USBD_CtlError>
        err++;
 800be9e:	7afb      	ldrb	r3, [r7, #11]
 800bea0:	3301      	adds	r3, #1
 800bea2:	72fb      	strb	r3, [r7, #11]
      break;
 800bea4:	e021      	b.n	800beea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	7c1b      	ldrb	r3, [r3, #16]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10d      	bne.n	800beca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb6:	f107 0208 	add.w	r2, r7, #8
 800beba:	4610      	mov	r0, r2
 800bebc:	4798      	blx	r3
 800bebe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	3301      	adds	r3, #1
 800bec4:	2207      	movs	r2, #7
 800bec6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bec8:	e00f      	b.n	800beea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 fa10 	bl	800c2f2 <USBD_CtlError>
        err++;
 800bed2:	7afb      	ldrb	r3, [r7, #11]
 800bed4:	3301      	adds	r3, #1
 800bed6:	72fb      	strb	r3, [r7, #11]
      break;
 800bed8:	e007      	b.n	800beea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fa08 	bl	800c2f2 <USBD_CtlError>
      err++;
 800bee2:	7afb      	ldrb	r3, [r7, #11]
 800bee4:	3301      	adds	r3, #1
 800bee6:	72fb      	strb	r3, [r7, #11]
      break;
 800bee8:	bf00      	nop
  }

  if (err != 0U)
 800beea:	7afb      	ldrb	r3, [r7, #11]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d11e      	bne.n	800bf2e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	88db      	ldrh	r3, [r3, #6]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d016      	beq.n	800bf26 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bef8:	893b      	ldrh	r3, [r7, #8]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00e      	beq.n	800bf1c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	88da      	ldrh	r2, [r3, #6]
 800bf02:	893b      	ldrh	r3, [r7, #8]
 800bf04:	4293      	cmp	r3, r2
 800bf06:	bf28      	it	cs
 800bf08:	4613      	movcs	r3, r2
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf0e:	893b      	ldrh	r3, [r7, #8]
 800bf10:	461a      	mov	r2, r3
 800bf12:	68f9      	ldr	r1, [r7, #12]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 fa5d 	bl	800c3d4 <USBD_CtlSendData>
 800bf1a:	e009      	b.n	800bf30 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bf1c:	6839      	ldr	r1, [r7, #0]
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 f9e7 	bl	800c2f2 <USBD_CtlError>
 800bf24:	e004      	b.n	800bf30 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 faae 	bl	800c488 <USBD_CtlSendStatus>
 800bf2c:	e000      	b.n	800bf30 <USBD_GetDescriptor+0x2cc>
    return;
 800bf2e:	bf00      	nop
  }
}
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop

0800bf38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	889b      	ldrh	r3, [r3, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d131      	bne.n	800bfae <USBD_SetAddress+0x76>
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	88db      	ldrh	r3, [r3, #6]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d12d      	bne.n	800bfae <USBD_SetAddress+0x76>
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	885b      	ldrh	r3, [r3, #2]
 800bf56:	2b7f      	cmp	r3, #127	; 0x7f
 800bf58:	d829      	bhi.n	800bfae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	885b      	ldrh	r3, [r3, #2]
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d104      	bne.n	800bf7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 f9bc 	bl	800c2f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf7a:	e01d      	b.n	800bfb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	7bfa      	ldrb	r2, [r7, #15]
 800bf80:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf84:	7bfb      	ldrb	r3, [r7, #15]
 800bf86:	4619      	mov	r1, r3
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f003 fcb9 	bl	800f900 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 fa7a 	bl	800c488 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d004      	beq.n	800bfa4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfa2:	e009      	b.n	800bfb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfac:	e004      	b.n	800bfb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bfae:	6839      	ldr	r1, [r7, #0]
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 f99e 	bl	800c2f2 <USBD_CtlError>
  }
}
 800bfb6:	bf00      	nop
 800bfb8:	bf00      	nop
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	885b      	ldrh	r3, [r3, #2]
 800bfd2:	b2da      	uxtb	r2, r3
 800bfd4:	4b4e      	ldr	r3, [pc, #312]	; (800c110 <USBD_SetConfig+0x150>)
 800bfd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bfd8:	4b4d      	ldr	r3, [pc, #308]	; (800c110 <USBD_SetConfig+0x150>)
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d905      	bls.n	800bfec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 f985 	bl	800c2f2 <USBD_CtlError>
    return USBD_FAIL;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	e08c      	b.n	800c106 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d002      	beq.n	800bffe <USBD_SetConfig+0x3e>
 800bff8:	2b03      	cmp	r3, #3
 800bffa:	d029      	beq.n	800c050 <USBD_SetConfig+0x90>
 800bffc:	e075      	b.n	800c0ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bffe:	4b44      	ldr	r3, [pc, #272]	; (800c110 <USBD_SetConfig+0x150>)
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d020      	beq.n	800c048 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c006:	4b42      	ldr	r3, [pc, #264]	; (800c110 <USBD_SetConfig+0x150>)
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	461a      	mov	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c010:	4b3f      	ldr	r3, [pc, #252]	; (800c110 <USBD_SetConfig+0x150>)
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	4619      	mov	r1, r3
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f7fe ffe7 	bl	800afea <USBD_SetClassConfig>
 800c01c:	4603      	mov	r3, r0
 800c01e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c020:	7bfb      	ldrb	r3, [r7, #15]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d008      	beq.n	800c038 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c026:	6839      	ldr	r1, [r7, #0]
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 f962 	bl	800c2f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2202      	movs	r2, #2
 800c032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c036:	e065      	b.n	800c104 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fa25 	bl	800c488 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2203      	movs	r2, #3
 800c042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c046:	e05d      	b.n	800c104 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fa1d 	bl	800c488 <USBD_CtlSendStatus>
      break;
 800c04e:	e059      	b.n	800c104 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c050:	4b2f      	ldr	r3, [pc, #188]	; (800c110 <USBD_SetConfig+0x150>)
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d112      	bne.n	800c07e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2202      	movs	r2, #2
 800c05c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c060:	4b2b      	ldr	r3, [pc, #172]	; (800c110 <USBD_SetConfig+0x150>)
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	461a      	mov	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c06a:	4b29      	ldr	r3, [pc, #164]	; (800c110 <USBD_SetConfig+0x150>)
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7fe ffd6 	bl	800b022 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fa06 	bl	800c488 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c07c:	e042      	b.n	800c104 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c07e:	4b24      	ldr	r3, [pc, #144]	; (800c110 <USBD_SetConfig+0x150>)
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	461a      	mov	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d02a      	beq.n	800c0e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	b2db      	uxtb	r3, r3
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7fe ffc4 	bl	800b022 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c09a:	4b1d      	ldr	r3, [pc, #116]	; (800c110 <USBD_SetConfig+0x150>)
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0a4:	4b1a      	ldr	r3, [pc, #104]	; (800c110 <USBD_SetConfig+0x150>)
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7fe ff9d 	bl	800afea <USBD_SetClassConfig>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00f      	beq.n	800c0da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 f918 	bl	800c2f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7fe ffa9 	bl	800b022 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2202      	movs	r2, #2
 800c0d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c0d8:	e014      	b.n	800c104 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 f9d4 	bl	800c488 <USBD_CtlSendStatus>
      break;
 800c0e0:	e010      	b.n	800c104 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f9d0 	bl	800c488 <USBD_CtlSendStatus>
      break;
 800c0e8:	e00c      	b.n	800c104 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f900 	bl	800c2f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0f2:	4b07      	ldr	r3, [pc, #28]	; (800c110 <USBD_SetConfig+0x150>)
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f7fe ff92 	bl	800b022 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c0fe:	2303      	movs	r3, #3
 800c100:	73fb      	strb	r3, [r7, #15]
      break;
 800c102:	bf00      	nop
  }

  return ret;
 800c104:	7bfb      	ldrb	r3, [r7, #15]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	200003dc 	.word	0x200003dc

0800c114 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	88db      	ldrh	r3, [r3, #6]
 800c122:	2b01      	cmp	r3, #1
 800c124:	d004      	beq.n	800c130 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 f8e2 	bl	800c2f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c12e:	e023      	b.n	800c178 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c136:	b2db      	uxtb	r3, r3
 800c138:	2b02      	cmp	r3, #2
 800c13a:	dc02      	bgt.n	800c142 <USBD_GetConfig+0x2e>
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	dc03      	bgt.n	800c148 <USBD_GetConfig+0x34>
 800c140:	e015      	b.n	800c16e <USBD_GetConfig+0x5a>
 800c142:	2b03      	cmp	r3, #3
 800c144:	d00b      	beq.n	800c15e <USBD_GetConfig+0x4a>
 800c146:	e012      	b.n	800c16e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	3308      	adds	r3, #8
 800c152:	2201      	movs	r2, #1
 800c154:	4619      	mov	r1, r3
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f93c 	bl	800c3d4 <USBD_CtlSendData>
        break;
 800c15c:	e00c      	b.n	800c178 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3304      	adds	r3, #4
 800c162:	2201      	movs	r2, #1
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f934 	bl	800c3d4 <USBD_CtlSendData>
        break;
 800c16c:	e004      	b.n	800c178 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 f8be 	bl	800c2f2 <USBD_CtlError>
        break;
 800c176:	bf00      	nop
}
 800c178:	bf00      	nop
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c190:	b2db      	uxtb	r3, r3
 800c192:	3b01      	subs	r3, #1
 800c194:	2b02      	cmp	r3, #2
 800c196:	d81e      	bhi.n	800c1d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	88db      	ldrh	r3, [r3, #6]
 800c19c:	2b02      	cmp	r3, #2
 800c19e:	d004      	beq.n	800c1aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c1a0:	6839      	ldr	r1, [r7, #0]
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f8a5 	bl	800c2f2 <USBD_CtlError>
        break;
 800c1a8:	e01a      	b.n	800c1e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d005      	beq.n	800c1c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	f043 0202 	orr.w	r2, r3, #2
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	330c      	adds	r3, #12
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 f900 	bl	800c3d4 <USBD_CtlSendData>
      break;
 800c1d4:	e004      	b.n	800c1e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f88a 	bl	800c2f2 <USBD_CtlError>
      break;
 800c1de:	bf00      	nop
  }
}
 800c1e0:	bf00      	nop
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	885b      	ldrh	r3, [r3, #2]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d107      	bne.n	800c20a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f940 	bl	800c488 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c208:	e013      	b.n	800c232 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	885b      	ldrh	r3, [r3, #2]
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d10b      	bne.n	800c22a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	889b      	ldrh	r3, [r3, #4]
 800c216:	0a1b      	lsrs	r3, r3, #8
 800c218:	b29b      	uxth	r3, r3
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 f930 	bl	800c488 <USBD_CtlSendStatus>
}
 800c228:	e003      	b.n	800c232 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c22a:	6839      	ldr	r1, [r7, #0]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f860 	bl	800c2f2 <USBD_CtlError>
}
 800c232:	bf00      	nop
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b082      	sub	sp, #8
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	3b01      	subs	r3, #1
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d80b      	bhi.n	800c26a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	885b      	ldrh	r3, [r3, #2]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d10c      	bne.n	800c274 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 f910 	bl	800c488 <USBD_CtlSendStatus>
      }
      break;
 800c268:	e004      	b.n	800c274 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c26a:	6839      	ldr	r1, [r7, #0]
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 f840 	bl	800c2f2 <USBD_CtlError>
      break;
 800c272:	e000      	b.n	800c276 <USBD_ClrFeature+0x3c>
      break;
 800c274:	bf00      	nop
  }
}
 800c276:	bf00      	nop
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b084      	sub	sp, #16
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
 800c286:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	781a      	ldrb	r2, [r3, #0]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	3301      	adds	r3, #1
 800c298:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	781a      	ldrb	r2, [r3, #0]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f7ff fa41 	bl	800b730 <SWAPBYTE>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f7ff fa34 	bl	800b730 <SWAPBYTE>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f7ff fa27 	bl	800b730 <SWAPBYTE>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	80da      	strh	r2, [r3, #6]
}
 800c2ea:	bf00      	nop
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b082      	sub	sp, #8
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2fc:	2180      	movs	r1, #128	; 0x80
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f003 fa94 	bl	800f82c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c304:	2100      	movs	r1, #0
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f003 fa90 	bl	800f82c <USBD_LL_StallEP>
}
 800c30c:	bf00      	nop
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c320:	2300      	movs	r3, #0
 800c322:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d036      	beq.n	800c398 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c32e:	6938      	ldr	r0, [r7, #16]
 800c330:	f000 f836 	bl	800c3a0 <USBD_GetLen>
 800c334:	4603      	mov	r3, r0
 800c336:	3301      	adds	r3, #1
 800c338:	b29b      	uxth	r3, r3
 800c33a:	005b      	lsls	r3, r3, #1
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c342:	7dfb      	ldrb	r3, [r7, #23]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	4413      	add	r3, r2
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	7812      	ldrb	r2, [r2, #0]
 800c34c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c34e:	7dfb      	ldrb	r3, [r7, #23]
 800c350:	3301      	adds	r3, #1
 800c352:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c354:	7dfb      	ldrb	r3, [r7, #23]
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	4413      	add	r3, r2
 800c35a:	2203      	movs	r2, #3
 800c35c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c35e:	7dfb      	ldrb	r3, [r7, #23]
 800c360:	3301      	adds	r3, #1
 800c362:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c364:	e013      	b.n	800c38e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c366:	7dfb      	ldrb	r3, [r7, #23]
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	4413      	add	r3, r2
 800c36c:	693a      	ldr	r2, [r7, #16]
 800c36e:	7812      	ldrb	r2, [r2, #0]
 800c370:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	3301      	adds	r3, #1
 800c376:	613b      	str	r3, [r7, #16]
    idx++;
 800c378:	7dfb      	ldrb	r3, [r7, #23]
 800c37a:	3301      	adds	r3, #1
 800c37c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c37e:	7dfb      	ldrb	r3, [r7, #23]
 800c380:	68ba      	ldr	r2, [r7, #8]
 800c382:	4413      	add	r3, r2
 800c384:	2200      	movs	r2, #0
 800c386:	701a      	strb	r2, [r3, #0]
    idx++;
 800c388:	7dfb      	ldrb	r3, [r7, #23]
 800c38a:	3301      	adds	r3, #1
 800c38c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1e7      	bne.n	800c366 <USBD_GetString+0x52>
 800c396:	e000      	b.n	800c39a <USBD_GetString+0x86>
    return;
 800c398:	bf00      	nop
  }
}
 800c39a:	3718      	adds	r7, #24
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c3b0:	e005      	b.n	800c3be <USBD_GetLen+0x1e>
  {
    len++;
 800c3b2:	7bfb      	ldrb	r3, [r7, #15]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1f5      	bne.n	800c3b2 <USBD_GetLen+0x12>
  }

  return len;
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3714      	adds	r7, #20
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2202      	movs	r2, #2
 800c3e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	68ba      	ldr	r2, [r7, #8]
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f003 fa9f 	bl	800f93e <USBD_LL_Transmit>

  return USBD_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b084      	sub	sp, #16
 800c40e:	af00      	add	r7, sp, #0
 800c410:	60f8      	str	r0, [r7, #12]
 800c412:	60b9      	str	r1, [r7, #8]
 800c414:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	2100      	movs	r1, #0
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f003 fa8e 	bl	800f93e <USBD_LL_Transmit>

  return USBD_OK;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	3710      	adds	r7, #16
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2203      	movs	r2, #3
 800c43c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	68ba      	ldr	r2, [r7, #8]
 800c454:	2100      	movs	r1, #0
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f003 fa92 	bl	800f980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c45c:	2300      	movs	r3, #0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	b084      	sub	sp, #16
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	60f8      	str	r0, [r7, #12]
 800c46e:	60b9      	str	r1, [r7, #8]
 800c470:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	68ba      	ldr	r2, [r7, #8]
 800c476:	2100      	movs	r1, #0
 800c478:	68f8      	ldr	r0, [r7, #12]
 800c47a:	f003 fa81 	bl	800f980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2204      	movs	r2, #4
 800c494:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c498:	2300      	movs	r3, #0
 800c49a:	2200      	movs	r2, #0
 800c49c:	2100      	movs	r1, #0
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f003 fa4d 	bl	800f93e <USBD_LL_Transmit>

  return USBD_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b082      	sub	sp, #8
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2205      	movs	r2, #5
 800c4ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4be:	2300      	movs	r3, #0
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f003 fa5b 	bl	800f980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3708      	adds	r7, #8
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <__NVIC_SetPriority>:
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	6039      	str	r1, [r7, #0]
 800c4de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c4e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	db0a      	blt.n	800c4fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	490c      	ldr	r1, [pc, #48]	; (800c520 <__NVIC_SetPriority+0x4c>)
 800c4ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4f2:	0112      	lsls	r2, r2, #4
 800c4f4:	b2d2      	uxtb	r2, r2
 800c4f6:	440b      	add	r3, r1
 800c4f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c4fc:	e00a      	b.n	800c514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	b2da      	uxtb	r2, r3
 800c502:	4908      	ldr	r1, [pc, #32]	; (800c524 <__NVIC_SetPriority+0x50>)
 800c504:	79fb      	ldrb	r3, [r7, #7]
 800c506:	f003 030f 	and.w	r3, r3, #15
 800c50a:	3b04      	subs	r3, #4
 800c50c:	0112      	lsls	r2, r2, #4
 800c50e:	b2d2      	uxtb	r2, r2
 800c510:	440b      	add	r3, r1
 800c512:	761a      	strb	r2, [r3, #24]
}
 800c514:	bf00      	nop
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	e000e100 	.word	0xe000e100
 800c524:	e000ed00 	.word	0xe000ed00

0800c528 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c528:	b580      	push	{r7, lr}
 800c52a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c52c:	4b05      	ldr	r3, [pc, #20]	; (800c544 <SysTick_Handler+0x1c>)
 800c52e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c530:	f001 fd4c 	bl	800dfcc <xTaskGetSchedulerState>
 800c534:	4603      	mov	r3, r0
 800c536:	2b01      	cmp	r3, #1
 800c538:	d001      	beq.n	800c53e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c53a:	f002 fb35 	bl	800eba8 <xPortSysTickHandler>
  }
}
 800c53e:	bf00      	nop
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	e000e010 	.word	0xe000e010

0800c548 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c548:	b580      	push	{r7, lr}
 800c54a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c54c:	2100      	movs	r1, #0
 800c54e:	f06f 0004 	mvn.w	r0, #4
 800c552:	f7ff ffbf 	bl	800c4d4 <__NVIC_SetPriority>
#endif
}
 800c556:	bf00      	nop
 800c558:	bd80      	pop	{r7, pc}
	...

0800c55c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c562:	f3ef 8305 	mrs	r3, IPSR
 800c566:	603b      	str	r3, [r7, #0]
  return(result);
 800c568:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d003      	beq.n	800c576 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c56e:	f06f 0305 	mvn.w	r3, #5
 800c572:	607b      	str	r3, [r7, #4]
 800c574:	e00c      	b.n	800c590 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c576:	4b0a      	ldr	r3, [pc, #40]	; (800c5a0 <osKernelInitialize+0x44>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d105      	bne.n	800c58a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c57e:	4b08      	ldr	r3, [pc, #32]	; (800c5a0 <osKernelInitialize+0x44>)
 800c580:	2201      	movs	r2, #1
 800c582:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c584:	2300      	movs	r3, #0
 800c586:	607b      	str	r3, [r7, #4]
 800c588:	e002      	b.n	800c590 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c58a:	f04f 33ff 	mov.w	r3, #4294967295
 800c58e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c590:	687b      	ldr	r3, [r7, #4]
}
 800c592:	4618      	mov	r0, r3
 800c594:	370c      	adds	r7, #12
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	200003e0 	.word	0x200003e0

0800c5a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5aa:	f3ef 8305 	mrs	r3, IPSR
 800c5ae:	603b      	str	r3, [r7, #0]
  return(result);
 800c5b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d003      	beq.n	800c5be <osKernelStart+0x1a>
    stat = osErrorISR;
 800c5b6:	f06f 0305 	mvn.w	r3, #5
 800c5ba:	607b      	str	r3, [r7, #4]
 800c5bc:	e010      	b.n	800c5e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c5be:	4b0b      	ldr	r3, [pc, #44]	; (800c5ec <osKernelStart+0x48>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d109      	bne.n	800c5da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c5c6:	f7ff ffbf 	bl	800c548 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c5ca:	4b08      	ldr	r3, [pc, #32]	; (800c5ec <osKernelStart+0x48>)
 800c5cc:	2202      	movs	r2, #2
 800c5ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c5d0:	f001 f880 	bl	800d6d4 <vTaskStartScheduler>
      stat = osOK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	607b      	str	r3, [r7, #4]
 800c5d8:	e002      	b.n	800c5e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c5da:	f04f 33ff 	mov.w	r3, #4294967295
 800c5de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c5e0:	687b      	ldr	r3, [r7, #4]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	200003e0 	.word	0x200003e0

0800c5f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b08e      	sub	sp, #56	; 0x38
 800c5f4:	af04      	add	r7, sp, #16
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c600:	f3ef 8305 	mrs	r3, IPSR
 800c604:	617b      	str	r3, [r7, #20]
  return(result);
 800c606:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d17e      	bne.n	800c70a <osThreadNew+0x11a>
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d07b      	beq.n	800c70a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c612:	2380      	movs	r3, #128	; 0x80
 800c614:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c616:	2318      	movs	r3, #24
 800c618:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c61a:	2300      	movs	r3, #0
 800c61c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c61e:	f04f 33ff 	mov.w	r3, #4294967295
 800c622:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d045      	beq.n	800c6b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d002      	beq.n	800c638 <osThreadNew+0x48>
        name = attr->name;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	699b      	ldr	r3, [r3, #24]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	699b      	ldr	r3, [r3, #24]
 800c644:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d008      	beq.n	800c65e <osThreadNew+0x6e>
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	2b38      	cmp	r3, #56	; 0x38
 800c650:	d805      	bhi.n	800c65e <osThreadNew+0x6e>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d001      	beq.n	800c662 <osThreadNew+0x72>
        return (NULL);
 800c65e:	2300      	movs	r3, #0
 800c660:	e054      	b.n	800c70c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d003      	beq.n	800c672 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	695b      	ldr	r3, [r3, #20]
 800c66e:	089b      	lsrs	r3, r3, #2
 800c670:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00e      	beq.n	800c698 <osThreadNew+0xa8>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	2bbf      	cmp	r3, #191	; 0xbf
 800c680:	d90a      	bls.n	800c698 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c686:	2b00      	cmp	r3, #0
 800c688:	d006      	beq.n	800c698 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	695b      	ldr	r3, [r3, #20]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d002      	beq.n	800c698 <osThreadNew+0xa8>
        mem = 1;
 800c692:	2301      	movs	r3, #1
 800c694:	61bb      	str	r3, [r7, #24]
 800c696:	e010      	b.n	800c6ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10c      	bne.n	800c6ba <osThreadNew+0xca>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d108      	bne.n	800c6ba <osThreadNew+0xca>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d104      	bne.n	800c6ba <osThreadNew+0xca>
          mem = 0;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	61bb      	str	r3, [r7, #24]
 800c6b4:	e001      	b.n	800c6ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d110      	bne.n	800c6e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6c8:	9202      	str	r2, [sp, #8]
 800c6ca:	9301      	str	r3, [sp, #4]
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	6a3a      	ldr	r2, [r7, #32]
 800c6d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f000 fe0c 	bl	800d2f4 <xTaskCreateStatic>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	613b      	str	r3, [r7, #16]
 800c6e0:	e013      	b.n	800c70a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d110      	bne.n	800c70a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c6e8:	6a3b      	ldr	r3, [r7, #32]
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	f107 0310 	add.w	r3, r7, #16
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f000 fe57 	bl	800d3ae <xTaskCreate>
 800c700:	4603      	mov	r3, r0
 800c702:	2b01      	cmp	r3, #1
 800c704:	d001      	beq.n	800c70a <osThreadNew+0x11a>
            hTask = NULL;
 800c706:	2300      	movs	r3, #0
 800c708:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c70a:	693b      	ldr	r3, [r7, #16]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3728      	adds	r7, #40	; 0x28
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c71c:	f3ef 8305 	mrs	r3, IPSR
 800c720:	60bb      	str	r3, [r7, #8]
  return(result);
 800c722:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c724:	2b00      	cmp	r3, #0
 800c726:	d003      	beq.n	800c730 <osDelay+0x1c>
    stat = osErrorISR;
 800c728:	f06f 0305 	mvn.w	r3, #5
 800c72c:	60fb      	str	r3, [r7, #12]
 800c72e:	e007      	b.n	800c740 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c730:	2300      	movs	r3, #0
 800c732:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d002      	beq.n	800c740 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 ff96 	bl	800d66c <vTaskDelay>
    }
  }

  return (stat);
 800c740:	68fb      	ldr	r3, [r7, #12]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
	...

0800c74c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	4a07      	ldr	r2, [pc, #28]	; (800c778 <vApplicationGetIdleTaskMemory+0x2c>)
 800c75c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	4a06      	ldr	r2, [pc, #24]	; (800c77c <vApplicationGetIdleTaskMemory+0x30>)
 800c762:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2280      	movs	r2, #128	; 0x80
 800c768:	601a      	str	r2, [r3, #0]
}
 800c76a:	bf00      	nop
 800c76c:	3714      	adds	r7, #20
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	200003e4 	.word	0x200003e4
 800c77c:	200004a4 	.word	0x200004a4

0800c780 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	4a07      	ldr	r2, [pc, #28]	; (800c7ac <vApplicationGetTimerTaskMemory+0x2c>)
 800c790:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	4a06      	ldr	r2, [pc, #24]	; (800c7b0 <vApplicationGetTimerTaskMemory+0x30>)
 800c796:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c79e:	601a      	str	r2, [r3, #0]
}
 800c7a0:	bf00      	nop
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	200006a4 	.word	0x200006a4
 800c7b0:	20000764 	.word	0x20000764

0800c7b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f103 0208 	add.w	r2, r3, #8
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f103 0208 	add.w	r2, r3, #8
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f103 0208 	add.w	r2, r3, #8
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c7e8:	bf00      	nop
 800c7ea:	370c      	adds	r7, #12
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c802:	bf00      	nop
 800c804:	370c      	adds	r7, #12
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr

0800c80e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c80e:	b480      	push	{r7}
 800c810:	b085      	sub	sp, #20
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	689a      	ldr	r2, [r3, #8]
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	683a      	ldr	r2, [r7, #0]
 800c832:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	601a      	str	r2, [r3, #0]
}
 800c84a:	bf00      	nop
 800c84c:	3714      	adds	r7, #20
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr

0800c856 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c856:	b480      	push	{r7}
 800c858:	b085      	sub	sp, #20
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
 800c85e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c86c:	d103      	bne.n	800c876 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	691b      	ldr	r3, [r3, #16]
 800c872:	60fb      	str	r3, [r7, #12]
 800c874:	e00c      	b.n	800c890 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	3308      	adds	r3, #8
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	e002      	b.n	800c884 <vListInsert+0x2e>
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d2f6      	bcs.n	800c87e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	685a      	ldr	r2, [r3, #4]
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	683a      	ldr	r2, [r7, #0]
 800c89e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	683a      	ldr	r2, [r7, #0]
 800c8aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	601a      	str	r2, [r3, #0]
}
 800c8bc:	bf00      	nop
 800c8be:	3714      	adds	r7, #20
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	6892      	ldr	r2, [r2, #8]
 800c8de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	6852      	ldr	r2, [r2, #4]
 800c8e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d103      	bne.n	800c8fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	689a      	ldr	r2, [r3, #8]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	1e5a      	subs	r2, r3, #1
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3714      	adds	r7, #20
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10a      	bne.n	800c946 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c942:	bf00      	nop
 800c944:	e7fe      	b.n	800c944 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c946:	f002 f89d 	bl	800ea84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c952:	68f9      	ldr	r1, [r7, #12]
 800c954:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c956:	fb01 f303 	mul.w	r3, r1, r3
 800c95a:	441a      	add	r2, r3
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2200      	movs	r2, #0
 800c964:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c976:	3b01      	subs	r3, #1
 800c978:	68f9      	ldr	r1, [r7, #12]
 800c97a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c97c:	fb01 f303 	mul.w	r3, r1, r3
 800c980:	441a      	add	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	22ff      	movs	r2, #255	; 0xff
 800c98a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	22ff      	movs	r2, #255	; 0xff
 800c992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d114      	bne.n	800c9c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	691b      	ldr	r3, [r3, #16]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d01a      	beq.n	800c9da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3310      	adds	r3, #16
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f001 f94b 	bl	800dc44 <xTaskRemoveFromEventList>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d012      	beq.n	800c9da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c9b4:	4b0c      	ldr	r3, [pc, #48]	; (800c9e8 <xQueueGenericReset+0xcc>)
 800c9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ba:	601a      	str	r2, [r3, #0]
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	e009      	b.n	800c9da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3310      	adds	r3, #16
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7ff fef2 	bl	800c7b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	3324      	adds	r3, #36	; 0x24
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7ff feed 	bl	800c7b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c9da:	f002 f883 	bl	800eae4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c9de:	2301      	movs	r3, #1
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	e000ed04 	.word	0xe000ed04

0800c9ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b08e      	sub	sp, #56	; 0x38
 800c9f0:	af02      	add	r7, sp, #8
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
 800c9f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10a      	bne.n	800ca16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ca00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca12:	bf00      	nop
 800ca14:	e7fe      	b.n	800ca14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10a      	bne.n	800ca32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca2e:	bf00      	nop
 800ca30:	e7fe      	b.n	800ca30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d002      	beq.n	800ca3e <xQueueGenericCreateStatic+0x52>
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d001      	beq.n	800ca42 <xQueueGenericCreateStatic+0x56>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e000      	b.n	800ca44 <xQueueGenericCreateStatic+0x58>
 800ca42:	2300      	movs	r3, #0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10a      	bne.n	800ca5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ca48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	623b      	str	r3, [r7, #32]
}
 800ca5a:	bf00      	nop
 800ca5c:	e7fe      	b.n	800ca5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d102      	bne.n	800ca6a <xQueueGenericCreateStatic+0x7e>
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d101      	bne.n	800ca6e <xQueueGenericCreateStatic+0x82>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e000      	b.n	800ca70 <xQueueGenericCreateStatic+0x84>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d10a      	bne.n	800ca8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ca74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca78:	f383 8811 	msr	BASEPRI, r3
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	f3bf 8f4f 	dsb	sy
 800ca84:	61fb      	str	r3, [r7, #28]
}
 800ca86:	bf00      	nop
 800ca88:	e7fe      	b.n	800ca88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca8a:	2350      	movs	r3, #80	; 0x50
 800ca8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	2b50      	cmp	r3, #80	; 0x50
 800ca92:	d00a      	beq.n	800caaa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca98:	f383 8811 	msr	BASEPRI, r3
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	f3bf 8f4f 	dsb	sy
 800caa4:	61bb      	str	r3, [r7, #24]
}
 800caa6:	bf00      	nop
 800caa8:	e7fe      	b.n	800caa8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800caaa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00d      	beq.n	800cad2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	2201      	movs	r2, #1
 800caba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cabe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	4613      	mov	r3, r2
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	68b9      	ldr	r1, [r7, #8]
 800cacc:	68f8      	ldr	r0, [r7, #12]
 800cace:	f000 f805 	bl	800cadc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3730      	adds	r7, #48	; 0x30
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d103      	bne.n	800caf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	69ba      	ldr	r2, [r7, #24]
 800caf4:	601a      	str	r2, [r3, #0]
 800caf6:	e002      	b.n	800cafe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800caf8:	69bb      	ldr	r3, [r7, #24]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb0a:	2101      	movs	r1, #1
 800cb0c:	69b8      	ldr	r0, [r7, #24]
 800cb0e:	f7ff ff05 	bl	800c91c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	78fa      	ldrb	r2, [r7, #3]
 800cb16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb1a:	bf00      	nop
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
	...

0800cb24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b08e      	sub	sp, #56	; 0x38
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
 800cb30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb32:	2300      	movs	r3, #0
 800cb34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10a      	bne.n	800cb56 <xQueueGenericSend+0x32>
	__asm volatile
 800cb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb44:	f383 8811 	msr	BASEPRI, r3
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb52:	bf00      	nop
 800cb54:	e7fe      	b.n	800cb54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d103      	bne.n	800cb64 <xQueueGenericSend+0x40>
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d101      	bne.n	800cb68 <xQueueGenericSend+0x44>
 800cb64:	2301      	movs	r3, #1
 800cb66:	e000      	b.n	800cb6a <xQueueGenericSend+0x46>
 800cb68:	2300      	movs	r3, #0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10a      	bne.n	800cb84 <xQueueGenericSend+0x60>
	__asm volatile
 800cb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb80:	bf00      	nop
 800cb82:	e7fe      	b.n	800cb82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	d103      	bne.n	800cb92 <xQueueGenericSend+0x6e>
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d101      	bne.n	800cb96 <xQueueGenericSend+0x72>
 800cb92:	2301      	movs	r3, #1
 800cb94:	e000      	b.n	800cb98 <xQueueGenericSend+0x74>
 800cb96:	2300      	movs	r3, #0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10a      	bne.n	800cbb2 <xQueueGenericSend+0x8e>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	623b      	str	r3, [r7, #32]
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbb2:	f001 fa0b 	bl	800dfcc <xTaskGetSchedulerState>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d102      	bne.n	800cbc2 <xQueueGenericSend+0x9e>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d101      	bne.n	800cbc6 <xQueueGenericSend+0xa2>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	e000      	b.n	800cbc8 <xQueueGenericSend+0xa4>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10a      	bne.n	800cbe2 <xQueueGenericSend+0xbe>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd0:	f383 8811 	msr	BASEPRI, r3
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	61fb      	str	r3, [r7, #28]
}
 800cbde:	bf00      	nop
 800cbe0:	e7fe      	b.n	800cbe0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbe2:	f001 ff4f 	bl	800ea84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d302      	bcc.n	800cbf8 <xQueueGenericSend+0xd4>
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d129      	bne.n	800cc4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	68b9      	ldr	r1, [r7, #8]
 800cbfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbfe:	f000 fa0b 	bl	800d018 <prvCopyDataToQueue>
 800cc02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d010      	beq.n	800cc2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0e:	3324      	adds	r3, #36	; 0x24
 800cc10:	4618      	mov	r0, r3
 800cc12:	f001 f817 	bl	800dc44 <xTaskRemoveFromEventList>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d013      	beq.n	800cc44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc1c:	4b3f      	ldr	r3, [pc, #252]	; (800cd1c <xQueueGenericSend+0x1f8>)
 800cc1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc22:	601a      	str	r2, [r3, #0]
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	e00a      	b.n	800cc44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d007      	beq.n	800cc44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc34:	4b39      	ldr	r3, [pc, #228]	; (800cd1c <xQueueGenericSend+0x1f8>)
 800cc36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc3a:	601a      	str	r2, [r3, #0]
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc44:	f001 ff4e 	bl	800eae4 <vPortExitCritical>
				return pdPASS;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e063      	b.n	800cd14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d103      	bne.n	800cc5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc52:	f001 ff47 	bl	800eae4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc56:	2300      	movs	r3, #0
 800cc58:	e05c      	b.n	800cd14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d106      	bne.n	800cc6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc60:	f107 0314 	add.w	r3, r7, #20
 800cc64:	4618      	mov	r0, r3
 800cc66:	f001 f851 	bl	800dd0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc6e:	f001 ff39 	bl	800eae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc72:	f000 fda1 	bl	800d7b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc76:	f001 ff05 	bl	800ea84 <vPortEnterCritical>
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc80:	b25b      	sxtb	r3, r3
 800cc82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc86:	d103      	bne.n	800cc90 <xQueueGenericSend+0x16c>
 800cc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc96:	b25b      	sxtb	r3, r3
 800cc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9c:	d103      	bne.n	800cca6 <xQueueGenericSend+0x182>
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	2200      	movs	r2, #0
 800cca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cca6:	f001 ff1d 	bl	800eae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccaa:	1d3a      	adds	r2, r7, #4
 800ccac:	f107 0314 	add.w	r3, r7, #20
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f001 f840 	bl	800dd38 <xTaskCheckForTimeOut>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d124      	bne.n	800cd08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccc0:	f000 faa2 	bl	800d208 <prvIsQueueFull>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d018      	beq.n	800ccfc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cccc:	3310      	adds	r3, #16
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 ff66 	bl	800dba4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ccd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccda:	f000 fa2d 	bl	800d138 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ccde:	f000 fd79 	bl	800d7d4 <xTaskResumeAll>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f47f af7c 	bne.w	800cbe2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ccea:	4b0c      	ldr	r3, [pc, #48]	; (800cd1c <xQueueGenericSend+0x1f8>)
 800ccec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	e772      	b.n	800cbe2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ccfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccfe:	f000 fa1b 	bl	800d138 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd02:	f000 fd67 	bl	800d7d4 <xTaskResumeAll>
 800cd06:	e76c      	b.n	800cbe2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd0a:	f000 fa15 	bl	800d138 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd0e:	f000 fd61 	bl	800d7d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3738      	adds	r7, #56	; 0x38
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	e000ed04 	.word	0xe000ed04

0800cd20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b090      	sub	sp, #64	; 0x40
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
 800cd2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d10a      	bne.n	800cd4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3c:	f383 8811 	msr	BASEPRI, r3
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd4a:	bf00      	nop
 800cd4c:	e7fe      	b.n	800cd4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d103      	bne.n	800cd5c <xQueueGenericSendFromISR+0x3c>
 800cd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d101      	bne.n	800cd60 <xQueueGenericSendFromISR+0x40>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e000      	b.n	800cd62 <xQueueGenericSendFromISR+0x42>
 800cd60:	2300      	movs	r3, #0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d10a      	bne.n	800cd7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd78:	bf00      	nop
 800cd7a:	e7fe      	b.n	800cd7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d103      	bne.n	800cd8a <xQueueGenericSendFromISR+0x6a>
 800cd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d101      	bne.n	800cd8e <xQueueGenericSendFromISR+0x6e>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e000      	b.n	800cd90 <xQueueGenericSendFromISR+0x70>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10a      	bne.n	800cdaa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd98:	f383 8811 	msr	BASEPRI, r3
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	623b      	str	r3, [r7, #32]
}
 800cda6:	bf00      	nop
 800cda8:	e7fe      	b.n	800cda8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdaa:	f001 ff4d 	bl	800ec48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cdae:	f3ef 8211 	mrs	r2, BASEPRI
 800cdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	61fa      	str	r2, [r7, #28]
 800cdc4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cdc6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdc8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d302      	bcc.n	800cddc <xQueueGenericSendFromISR+0xbc>
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	d12f      	bne.n	800ce3c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cde2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	68b9      	ldr	r1, [r7, #8]
 800cdf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cdf2:	f000 f911 	bl	800d018 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cdf6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdfe:	d112      	bne.n	800ce26 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d016      	beq.n	800ce36 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0a:	3324      	adds	r3, #36	; 0x24
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 ff19 	bl	800dc44 <xTaskRemoveFromEventList>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00e      	beq.n	800ce36 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00b      	beq.n	800ce36 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2201      	movs	r2, #1
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	e007      	b.n	800ce36 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	b25a      	sxtb	r2, r3
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce36:	2301      	movs	r3, #1
 800ce38:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ce3a:	e001      	b.n	800ce40 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce42:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ce4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3740      	adds	r7, #64	; 0x40
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
	...

0800ce58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b08c      	sub	sp, #48	; 0x30
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce64:	2300      	movs	r3, #0
 800ce66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d10a      	bne.n	800ce88 <xQueueReceive+0x30>
	__asm volatile
 800ce72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	623b      	str	r3, [r7, #32]
}
 800ce84:	bf00      	nop
 800ce86:	e7fe      	b.n	800ce86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d103      	bne.n	800ce96 <xQueueReceive+0x3e>
 800ce8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d101      	bne.n	800ce9a <xQueueReceive+0x42>
 800ce96:	2301      	movs	r3, #1
 800ce98:	e000      	b.n	800ce9c <xQueueReceive+0x44>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d10a      	bne.n	800ceb6 <xQueueReceive+0x5e>
	__asm volatile
 800cea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea4:	f383 8811 	msr	BASEPRI, r3
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	61fb      	str	r3, [r7, #28]
}
 800ceb2:	bf00      	nop
 800ceb4:	e7fe      	b.n	800ceb4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ceb6:	f001 f889 	bl	800dfcc <xTaskGetSchedulerState>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d102      	bne.n	800cec6 <xQueueReceive+0x6e>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d101      	bne.n	800ceca <xQueueReceive+0x72>
 800cec6:	2301      	movs	r3, #1
 800cec8:	e000      	b.n	800cecc <xQueueReceive+0x74>
 800ceca:	2300      	movs	r3, #0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d10a      	bne.n	800cee6 <xQueueReceive+0x8e>
	__asm volatile
 800ced0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced4:	f383 8811 	msr	BASEPRI, r3
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	61bb      	str	r3, [r7, #24]
}
 800cee2:	bf00      	nop
 800cee4:	e7fe      	b.n	800cee4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cee6:	f001 fdcd 	bl	800ea84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ceea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d01f      	beq.n	800cf36 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cef6:	68b9      	ldr	r1, [r7, #8]
 800cef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cefa:	f000 f8f7 	bl	800d0ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf00:	1e5a      	subs	r2, r3, #1
 800cf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf08:	691b      	ldr	r3, [r3, #16]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00f      	beq.n	800cf2e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf10:	3310      	adds	r3, #16
 800cf12:	4618      	mov	r0, r3
 800cf14:	f000 fe96 	bl	800dc44 <xTaskRemoveFromEventList>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d007      	beq.n	800cf2e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf1e:	4b3d      	ldr	r3, [pc, #244]	; (800d014 <xQueueReceive+0x1bc>)
 800cf20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf24:	601a      	str	r2, [r3, #0]
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf2e:	f001 fdd9 	bl	800eae4 <vPortExitCritical>
				return pdPASS;
 800cf32:	2301      	movs	r3, #1
 800cf34:	e069      	b.n	800d00a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d103      	bne.n	800cf44 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf3c:	f001 fdd2 	bl	800eae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf40:	2300      	movs	r3, #0
 800cf42:	e062      	b.n	800d00a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d106      	bne.n	800cf58 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf4a:	f107 0310 	add.w	r3, r7, #16
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f000 fedc 	bl	800dd0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf54:	2301      	movs	r3, #1
 800cf56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf58:	f001 fdc4 	bl	800eae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf5c:	f000 fc2c 	bl	800d7b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf60:	f001 fd90 	bl	800ea84 <vPortEnterCritical>
 800cf64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf6a:	b25b      	sxtb	r3, r3
 800cf6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf70:	d103      	bne.n	800cf7a <xQueueReceive+0x122>
 800cf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf74:	2200      	movs	r2, #0
 800cf76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf80:	b25b      	sxtb	r3, r3
 800cf82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf86:	d103      	bne.n	800cf90 <xQueueReceive+0x138>
 800cf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf90:	f001 fda8 	bl	800eae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf94:	1d3a      	adds	r2, r7, #4
 800cf96:	f107 0310 	add.w	r3, r7, #16
 800cf9a:	4611      	mov	r1, r2
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f000 fecb 	bl	800dd38 <xTaskCheckForTimeOut>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d123      	bne.n	800cff0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfaa:	f000 f917 	bl	800d1dc <prvIsQueueEmpty>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d017      	beq.n	800cfe4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb6:	3324      	adds	r3, #36	; 0x24
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	4611      	mov	r1, r2
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f000 fdf1 	bl	800dba4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfc4:	f000 f8b8 	bl	800d138 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfc8:	f000 fc04 	bl	800d7d4 <xTaskResumeAll>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d189      	bne.n	800cee6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cfd2:	4b10      	ldr	r3, [pc, #64]	; (800d014 <xQueueReceive+0x1bc>)
 800cfd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfd8:	601a      	str	r2, [r3, #0]
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	f3bf 8f6f 	isb	sy
 800cfe2:	e780      	b.n	800cee6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cfe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfe6:	f000 f8a7 	bl	800d138 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfea:	f000 fbf3 	bl	800d7d4 <xTaskResumeAll>
 800cfee:	e77a      	b.n	800cee6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cff2:	f000 f8a1 	bl	800d138 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cff6:	f000 fbed 	bl	800d7d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cffc:	f000 f8ee 	bl	800d1dc <prvIsQueueEmpty>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	f43f af6f 	beq.w	800cee6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d008:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3730      	adds	r7, #48	; 0x30
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	e000ed04 	.word	0xe000ed04

0800d018 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b086      	sub	sp, #24
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d024:	2300      	movs	r3, #0
 800d026:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10d      	bne.n	800d052 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d14d      	bne.n	800d0da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	4618      	mov	r0, r3
 800d044:	f000 ffe0 	bl	800e008 <xTaskPriorityDisinherit>
 800d048:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2200      	movs	r2, #0
 800d04e:	609a      	str	r2, [r3, #8]
 800d050:	e043      	b.n	800d0da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d119      	bne.n	800d08c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6858      	ldr	r0, [r3, #4]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d060:	461a      	mov	r2, r3
 800d062:	68b9      	ldr	r1, [r7, #8]
 800d064:	f002 fd40 	bl	800fae8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d070:	441a      	add	r2, r3
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	685a      	ldr	r2, [r3, #4]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d32b      	bcc.n	800d0da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	605a      	str	r2, [r3, #4]
 800d08a:	e026      	b.n	800d0da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	68d8      	ldr	r0, [r3, #12]
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d094:	461a      	mov	r2, r3
 800d096:	68b9      	ldr	r1, [r7, #8]
 800d098:	f002 fd26 	bl	800fae8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	68da      	ldr	r2, [r3, #12]
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a4:	425b      	negs	r3, r3
 800d0a6:	441a      	add	r2, r3
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	68da      	ldr	r2, [r3, #12]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d207      	bcs.n	800d0c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	689a      	ldr	r2, [r3, #8]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c0:	425b      	negs	r3, r3
 800d0c2:	441a      	add	r2, r3
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2b02      	cmp	r3, #2
 800d0cc:	d105      	bne.n	800d0da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	1c5a      	adds	r2, r3, #1
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d0e2:	697b      	ldr	r3, [r7, #20]
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3718      	adds	r7, #24
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d018      	beq.n	800d130 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	68da      	ldr	r2, [r3, #12]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d106:	441a      	add	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	68da      	ldr	r2, [r3, #12]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	429a      	cmp	r2, r3
 800d116:	d303      	bcc.n	800d120 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	68d9      	ldr	r1, [r3, #12]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d128:	461a      	mov	r2, r3
 800d12a:	6838      	ldr	r0, [r7, #0]
 800d12c:	f002 fcdc 	bl	800fae8 <memcpy>
	}
}
 800d130:	bf00      	nop
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d140:	f001 fca0 	bl	800ea84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d14a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d14c:	e011      	b.n	800d172 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d152:	2b00      	cmp	r3, #0
 800d154:	d012      	beq.n	800d17c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	3324      	adds	r3, #36	; 0x24
 800d15a:	4618      	mov	r0, r3
 800d15c:	f000 fd72 	bl	800dc44 <xTaskRemoveFromEventList>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d001      	beq.n	800d16a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d166:	f000 fe49 	bl	800ddfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d16a:	7bfb      	ldrb	r3, [r7, #15]
 800d16c:	3b01      	subs	r3, #1
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d176:	2b00      	cmp	r3, #0
 800d178:	dce9      	bgt.n	800d14e <prvUnlockQueue+0x16>
 800d17a:	e000      	b.n	800d17e <prvUnlockQueue+0x46>
					break;
 800d17c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	22ff      	movs	r2, #255	; 0xff
 800d182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d186:	f001 fcad 	bl	800eae4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d18a:	f001 fc7b 	bl	800ea84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d194:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d196:	e011      	b.n	800d1bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	691b      	ldr	r3, [r3, #16]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d012      	beq.n	800d1c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	3310      	adds	r3, #16
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f000 fd4d 	bl	800dc44 <xTaskRemoveFromEventList>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d001      	beq.n	800d1b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d1b0:	f000 fe24 	bl	800ddfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d1b4:	7bbb      	ldrb	r3, [r7, #14]
 800d1b6:	3b01      	subs	r3, #1
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	dce9      	bgt.n	800d198 <prvUnlockQueue+0x60>
 800d1c4:	e000      	b.n	800d1c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d1c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	22ff      	movs	r2, #255	; 0xff
 800d1cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d1d0:	f001 fc88 	bl	800eae4 <vPortExitCritical>
}
 800d1d4:	bf00      	nop
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d1e4:	f001 fc4e 	bl	800ea84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d102      	bne.n	800d1f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	60fb      	str	r3, [r7, #12]
 800d1f4:	e001      	b.n	800d1fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d1fa:	f001 fc73 	bl	800eae4 <vPortExitCritical>

	return xReturn;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d210:	f001 fc38 	bl	800ea84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d102      	bne.n	800d226 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d220:	2301      	movs	r3, #1
 800d222:	60fb      	str	r3, [r7, #12]
 800d224:	e001      	b.n	800d22a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d226:	2300      	movs	r3, #0
 800d228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d22a:	f001 fc5b 	bl	800eae4 <vPortExitCritical>

	return xReturn;
 800d22e:	68fb      	ldr	r3, [r7, #12]
}
 800d230:	4618      	mov	r0, r3
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d242:	2300      	movs	r3, #0
 800d244:	60fb      	str	r3, [r7, #12]
 800d246:	e014      	b.n	800d272 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d248:	4a0f      	ldr	r2, [pc, #60]	; (800d288 <vQueueAddToRegistry+0x50>)
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d10b      	bne.n	800d26c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d254:	490c      	ldr	r1, [pc, #48]	; (800d288 <vQueueAddToRegistry+0x50>)
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	683a      	ldr	r2, [r7, #0]
 800d25a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d25e:	4a0a      	ldr	r2, [pc, #40]	; (800d288 <vQueueAddToRegistry+0x50>)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	00db      	lsls	r3, r3, #3
 800d264:	4413      	add	r3, r2
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d26a:	e006      	b.n	800d27a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	3301      	adds	r3, #1
 800d270:	60fb      	str	r3, [r7, #12]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2b07      	cmp	r3, #7
 800d276:	d9e7      	bls.n	800d248 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d278:	bf00      	nop
 800d27a:	bf00      	nop
 800d27c:	3714      	adds	r7, #20
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	20000b64 	.word	0x20000b64

0800d28c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b086      	sub	sp, #24
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d29c:	f001 fbf2 	bl	800ea84 <vPortEnterCritical>
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2a6:	b25b      	sxtb	r3, r3
 800d2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ac:	d103      	bne.n	800d2b6 <vQueueWaitForMessageRestricted+0x2a>
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2bc:	b25b      	sxtb	r3, r3
 800d2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2c2:	d103      	bne.n	800d2cc <vQueueWaitForMessageRestricted+0x40>
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2cc:	f001 fc0a 	bl	800eae4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d106      	bne.n	800d2e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	3324      	adds	r3, #36	; 0x24
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	68b9      	ldr	r1, [r7, #8]
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f000 fc83 	bl	800dbec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d2e6:	6978      	ldr	r0, [r7, #20]
 800d2e8:	f7ff ff26 	bl	800d138 <prvUnlockQueue>
	}
 800d2ec:	bf00      	nop
 800d2ee:	3718      	adds	r7, #24
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b08e      	sub	sp, #56	; 0x38
 800d2f8:	af04      	add	r7, sp, #16
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	607a      	str	r2, [r7, #4]
 800d300:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10a      	bne.n	800d31e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30c:	f383 8811 	msr	BASEPRI, r3
 800d310:	f3bf 8f6f 	isb	sy
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	623b      	str	r3, [r7, #32]
}
 800d31a:	bf00      	nop
 800d31c:	e7fe      	b.n	800d31c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d320:	2b00      	cmp	r3, #0
 800d322:	d10a      	bne.n	800d33a <xTaskCreateStatic+0x46>
	__asm volatile
 800d324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d328:	f383 8811 	msr	BASEPRI, r3
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	f3bf 8f4f 	dsb	sy
 800d334:	61fb      	str	r3, [r7, #28]
}
 800d336:	bf00      	nop
 800d338:	e7fe      	b.n	800d338 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d33a:	23c0      	movs	r3, #192	; 0xc0
 800d33c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	2bc0      	cmp	r3, #192	; 0xc0
 800d342:	d00a      	beq.n	800d35a <xTaskCreateStatic+0x66>
	__asm volatile
 800d344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d348:	f383 8811 	msr	BASEPRI, r3
 800d34c:	f3bf 8f6f 	isb	sy
 800d350:	f3bf 8f4f 	dsb	sy
 800d354:	61bb      	str	r3, [r7, #24]
}
 800d356:	bf00      	nop
 800d358:	e7fe      	b.n	800d358 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d35a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d01e      	beq.n	800d3a0 <xTaskCreateStatic+0xac>
 800d362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d364:	2b00      	cmp	r3, #0
 800d366:	d01b      	beq.n	800d3a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d370:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d374:	2202      	movs	r2, #2
 800d376:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d37a:	2300      	movs	r3, #0
 800d37c:	9303      	str	r3, [sp, #12]
 800d37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d380:	9302      	str	r3, [sp, #8]
 800d382:	f107 0314 	add.w	r3, r7, #20
 800d386:	9301      	str	r3, [sp, #4]
 800d388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38a:	9300      	str	r3, [sp, #0]
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	68b9      	ldr	r1, [r7, #8]
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	f000 f850 	bl	800d438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d39a:	f000 f8f7 	bl	800d58c <prvAddNewTaskToReadyList>
 800d39e:	e001      	b.n	800d3a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d3a4:	697b      	ldr	r3, [r7, #20]
	}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3728      	adds	r7, #40	; 0x28
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b08c      	sub	sp, #48	; 0x30
 800d3b2:	af04      	add	r7, sp, #16
 800d3b4:	60f8      	str	r0, [r7, #12]
 800d3b6:	60b9      	str	r1, [r7, #8]
 800d3b8:	603b      	str	r3, [r7, #0]
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d3be:	88fb      	ldrh	r3, [r7, #6]
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f001 fc80 	bl	800ecc8 <pvPortMalloc>
 800d3c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d00e      	beq.n	800d3ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d3d0:	20c0      	movs	r0, #192	; 0xc0
 800d3d2:	f001 fc79 	bl	800ecc8 <pvPortMalloc>
 800d3d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d003      	beq.n	800d3e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	697a      	ldr	r2, [r7, #20]
 800d3e2:	631a      	str	r2, [r3, #48]	; 0x30
 800d3e4:	e005      	b.n	800d3f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d3e6:	6978      	ldr	r0, [r7, #20]
 800d3e8:	f001 fd3a 	bl	800ee60 <vPortFree>
 800d3ec:	e001      	b.n	800d3f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d017      	beq.n	800d428 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d400:	88fa      	ldrh	r2, [r7, #6]
 800d402:	2300      	movs	r3, #0
 800d404:	9303      	str	r3, [sp, #12]
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	9302      	str	r3, [sp, #8]
 800d40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40c:	9301      	str	r3, [sp, #4]
 800d40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	68b9      	ldr	r1, [r7, #8]
 800d416:	68f8      	ldr	r0, [r7, #12]
 800d418:	f000 f80e 	bl	800d438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d41c:	69f8      	ldr	r0, [r7, #28]
 800d41e:	f000 f8b5 	bl	800d58c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d422:	2301      	movs	r3, #1
 800d424:	61bb      	str	r3, [r7, #24]
 800d426:	e002      	b.n	800d42e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d428:	f04f 33ff 	mov.w	r3, #4294967295
 800d42c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d42e:	69bb      	ldr	r3, [r7, #24]
	}
 800d430:	4618      	mov	r0, r3
 800d432:	3720      	adds	r7, #32
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b088      	sub	sp, #32
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
 800d444:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d448:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	461a      	mov	r2, r3
 800d450:	21a5      	movs	r1, #165	; 0xa5
 800d452:	f002 fb57 	bl	800fb04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d460:	3b01      	subs	r3, #1
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	4413      	add	r3, r2
 800d466:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	f023 0307 	bic.w	r3, r3, #7
 800d46e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	f003 0307 	and.w	r3, r3, #7
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00a      	beq.n	800d490 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47e:	f383 8811 	msr	BASEPRI, r3
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	617b      	str	r3, [r7, #20]
}
 800d48c:	bf00      	nop
 800d48e:	e7fe      	b.n	800d48e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d01f      	beq.n	800d4d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d496:	2300      	movs	r3, #0
 800d498:	61fb      	str	r3, [r7, #28]
 800d49a:	e012      	b.n	800d4c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	7819      	ldrb	r1, [r3, #0]
 800d4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	3334      	adds	r3, #52	; 0x34
 800d4ac:	460a      	mov	r2, r1
 800d4ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d4b0:	68ba      	ldr	r2, [r7, #8]
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d006      	beq.n	800d4ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d4bc:	69fb      	ldr	r3, [r7, #28]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	61fb      	str	r3, [r7, #28]
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	2b0f      	cmp	r3, #15
 800d4c6:	d9e9      	bls.n	800d49c <prvInitialiseNewTask+0x64>
 800d4c8:	e000      	b.n	800d4cc <prvInitialiseNewTask+0x94>
			{
				break;
 800d4ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d4d4:	e003      	b.n	800d4de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e0:	2b37      	cmp	r3, #55	; 0x37
 800d4e2:	d901      	bls.n	800d4e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d4e4:	2337      	movs	r3, #55	; 0x37
 800d4e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fc:	3304      	adds	r3, #4
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7ff f978 	bl	800c7f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d506:	3318      	adds	r3, #24
 800d508:	4618      	mov	r0, r3
 800d50a:	f7ff f973 	bl	800c7f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d512:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d516:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d522:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d526:	2200      	movs	r2, #0
 800d528:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52c:	2200      	movs	r2, #0
 800d52e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d534:	2200      	movs	r2, #0
 800d536:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	3358      	adds	r3, #88	; 0x58
 800d53e:	2260      	movs	r2, #96	; 0x60
 800d540:	2100      	movs	r1, #0
 800d542:	4618      	mov	r0, r3
 800d544:	f002 fade 	bl	800fb04 <memset>
 800d548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54a:	4a0d      	ldr	r2, [pc, #52]	; (800d580 <prvInitialiseNewTask+0x148>)
 800d54c:	65da      	str	r2, [r3, #92]	; 0x5c
 800d54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d550:	4a0c      	ldr	r2, [pc, #48]	; (800d584 <prvInitialiseNewTask+0x14c>)
 800d552:	661a      	str	r2, [r3, #96]	; 0x60
 800d554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d556:	4a0c      	ldr	r2, [pc, #48]	; (800d588 <prvInitialiseNewTask+0x150>)
 800d558:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d55a:	683a      	ldr	r2, [r7, #0]
 800d55c:	68f9      	ldr	r1, [r7, #12]
 800d55e:	69b8      	ldr	r0, [r7, #24]
 800d560:	f001 f962 	bl	800e828 <pxPortInitialiseStack>
 800d564:	4602      	mov	r2, r0
 800d566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d568:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d002      	beq.n	800d576 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d576:	bf00      	nop
 800d578:	3720      	adds	r7, #32
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	0801315c 	.word	0x0801315c
 800d584:	0801317c 	.word	0x0801317c
 800d588:	0801313c 	.word	0x0801313c

0800d58c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d594:	f001 fa76 	bl	800ea84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d598:	4b2d      	ldr	r3, [pc, #180]	; (800d650 <prvAddNewTaskToReadyList+0xc4>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	3301      	adds	r3, #1
 800d59e:	4a2c      	ldr	r2, [pc, #176]	; (800d650 <prvAddNewTaskToReadyList+0xc4>)
 800d5a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d5a2:	4b2c      	ldr	r3, [pc, #176]	; (800d654 <prvAddNewTaskToReadyList+0xc8>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d109      	bne.n	800d5be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d5aa:	4a2a      	ldr	r2, [pc, #168]	; (800d654 <prvAddNewTaskToReadyList+0xc8>)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d5b0:	4b27      	ldr	r3, [pc, #156]	; (800d650 <prvAddNewTaskToReadyList+0xc4>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d110      	bne.n	800d5da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d5b8:	f000 fc46 	bl	800de48 <prvInitialiseTaskLists>
 800d5bc:	e00d      	b.n	800d5da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d5be:	4b26      	ldr	r3, [pc, #152]	; (800d658 <prvAddNewTaskToReadyList+0xcc>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d109      	bne.n	800d5da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d5c6:	4b23      	ldr	r3, [pc, #140]	; (800d654 <prvAddNewTaskToReadyList+0xc8>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d802      	bhi.n	800d5da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d5d4:	4a1f      	ldr	r2, [pc, #124]	; (800d654 <prvAddNewTaskToReadyList+0xc8>)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d5da:	4b20      	ldr	r3, [pc, #128]	; (800d65c <prvAddNewTaskToReadyList+0xd0>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	3301      	adds	r3, #1
 800d5e0:	4a1e      	ldr	r2, [pc, #120]	; (800d65c <prvAddNewTaskToReadyList+0xd0>)
 800d5e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d5e4:	4b1d      	ldr	r3, [pc, #116]	; (800d65c <prvAddNewTaskToReadyList+0xd0>)
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f0:	4b1b      	ldr	r3, [pc, #108]	; (800d660 <prvAddNewTaskToReadyList+0xd4>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d903      	bls.n	800d600 <prvAddNewTaskToReadyList+0x74>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5fc:	4a18      	ldr	r2, [pc, #96]	; (800d660 <prvAddNewTaskToReadyList+0xd4>)
 800d5fe:	6013      	str	r3, [r2, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d604:	4613      	mov	r3, r2
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	4413      	add	r3, r2
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	4a15      	ldr	r2, [pc, #84]	; (800d664 <prvAddNewTaskToReadyList+0xd8>)
 800d60e:	441a      	add	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	3304      	adds	r3, #4
 800d614:	4619      	mov	r1, r3
 800d616:	4610      	mov	r0, r2
 800d618:	f7ff f8f9 	bl	800c80e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d61c:	f001 fa62 	bl	800eae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d620:	4b0d      	ldr	r3, [pc, #52]	; (800d658 <prvAddNewTaskToReadyList+0xcc>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00e      	beq.n	800d646 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d628:	4b0a      	ldr	r3, [pc, #40]	; (800d654 <prvAddNewTaskToReadyList+0xc8>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d632:	429a      	cmp	r2, r3
 800d634:	d207      	bcs.n	800d646 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d636:	4b0c      	ldr	r3, [pc, #48]	; (800d668 <prvAddNewTaskToReadyList+0xdc>)
 800d638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d63c:	601a      	str	r2, [r3, #0]
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d646:	bf00      	nop
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	20001078 	.word	0x20001078
 800d654:	20000ba4 	.word	0x20000ba4
 800d658:	20001084 	.word	0x20001084
 800d65c:	20001094 	.word	0x20001094
 800d660:	20001080 	.word	0x20001080
 800d664:	20000ba8 	.word	0x20000ba8
 800d668:	e000ed04 	.word	0xe000ed04

0800d66c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d674:	2300      	movs	r3, #0
 800d676:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d017      	beq.n	800d6ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d67e:	4b13      	ldr	r3, [pc, #76]	; (800d6cc <vTaskDelay+0x60>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00a      	beq.n	800d69c <vTaskDelay+0x30>
	__asm volatile
 800d686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68a:	f383 8811 	msr	BASEPRI, r3
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	60bb      	str	r3, [r7, #8]
}
 800d698:	bf00      	nop
 800d69a:	e7fe      	b.n	800d69a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d69c:	f000 f88c 	bl	800d7b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 fd1e 	bl	800e0e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d6a8:	f000 f894 	bl	800d7d4 <xTaskResumeAll>
 800d6ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d107      	bne.n	800d6c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d6b4:	4b06      	ldr	r3, [pc, #24]	; (800d6d0 <vTaskDelay+0x64>)
 800d6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ba:	601a      	str	r2, [r3, #0]
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6c4:	bf00      	nop
 800d6c6:	3710      	adds	r7, #16
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	200010a0 	.word	0x200010a0
 800d6d0:	e000ed04 	.word	0xe000ed04

0800d6d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b08a      	sub	sp, #40	; 0x28
 800d6d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d6e2:	463a      	mov	r2, r7
 800d6e4:	1d39      	adds	r1, r7, #4
 800d6e6:	f107 0308 	add.w	r3, r7, #8
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7ff f82e 	bl	800c74c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d6f0:	6839      	ldr	r1, [r7, #0]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	68ba      	ldr	r2, [r7, #8]
 800d6f6:	9202      	str	r2, [sp, #8]
 800d6f8:	9301      	str	r3, [sp, #4]
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	9300      	str	r3, [sp, #0]
 800d6fe:	2300      	movs	r3, #0
 800d700:	460a      	mov	r2, r1
 800d702:	4925      	ldr	r1, [pc, #148]	; (800d798 <vTaskStartScheduler+0xc4>)
 800d704:	4825      	ldr	r0, [pc, #148]	; (800d79c <vTaskStartScheduler+0xc8>)
 800d706:	f7ff fdf5 	bl	800d2f4 <xTaskCreateStatic>
 800d70a:	4603      	mov	r3, r0
 800d70c:	4a24      	ldr	r2, [pc, #144]	; (800d7a0 <vTaskStartScheduler+0xcc>)
 800d70e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d710:	4b23      	ldr	r3, [pc, #140]	; (800d7a0 <vTaskStartScheduler+0xcc>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d002      	beq.n	800d71e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d718:	2301      	movs	r3, #1
 800d71a:	617b      	str	r3, [r7, #20]
 800d71c:	e001      	b.n	800d722 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d71e:	2300      	movs	r3, #0
 800d720:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	2b01      	cmp	r3, #1
 800d726:	d102      	bne.n	800d72e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d728:	f000 fd30 	bl	800e18c <xTimerCreateTimerTask>
 800d72c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	2b01      	cmp	r3, #1
 800d732:	d11d      	bne.n	800d770 <vTaskStartScheduler+0x9c>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	613b      	str	r3, [r7, #16]
}
 800d746:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d748:	4b16      	ldr	r3, [pc, #88]	; (800d7a4 <vTaskStartScheduler+0xd0>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	3358      	adds	r3, #88	; 0x58
 800d74e:	4a16      	ldr	r2, [pc, #88]	; (800d7a8 <vTaskStartScheduler+0xd4>)
 800d750:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d752:	4b16      	ldr	r3, [pc, #88]	; (800d7ac <vTaskStartScheduler+0xd8>)
 800d754:	f04f 32ff 	mov.w	r2, #4294967295
 800d758:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d75a:	4b15      	ldr	r3, [pc, #84]	; (800d7b0 <vTaskStartScheduler+0xdc>)
 800d75c:	2201      	movs	r2, #1
 800d75e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d760:	4b14      	ldr	r3, [pc, #80]	; (800d7b4 <vTaskStartScheduler+0xe0>)
 800d762:	2200      	movs	r2, #0
 800d764:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d766:	f7f3 f858 	bl	800081a <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d76a:	f001 f8e9 	bl	800e940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d76e:	e00e      	b.n	800d78e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d776:	d10a      	bne.n	800d78e <vTaskStartScheduler+0xba>
	__asm volatile
 800d778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77c:	f383 8811 	msr	BASEPRI, r3
 800d780:	f3bf 8f6f 	isb	sy
 800d784:	f3bf 8f4f 	dsb	sy
 800d788:	60fb      	str	r3, [r7, #12]
}
 800d78a:	bf00      	nop
 800d78c:	e7fe      	b.n	800d78c <vTaskStartScheduler+0xb8>
}
 800d78e:	bf00      	nop
 800d790:	3718      	adds	r7, #24
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	080107a4 	.word	0x080107a4
 800d79c:	0800de15 	.word	0x0800de15
 800d7a0:	2000109c 	.word	0x2000109c
 800d7a4:	20000ba4 	.word	0x20000ba4
 800d7a8:	2000016c 	.word	0x2000016c
 800d7ac:	20001098 	.word	0x20001098
 800d7b0:	20001084 	.word	0x20001084
 800d7b4:	2000107c 	.word	0x2000107c

0800d7b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d7bc:	4b04      	ldr	r3, [pc, #16]	; (800d7d0 <vTaskSuspendAll+0x18>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	4a03      	ldr	r2, [pc, #12]	; (800d7d0 <vTaskSuspendAll+0x18>)
 800d7c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d7c6:	bf00      	nop
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr
 800d7d0:	200010a0 	.word	0x200010a0

0800d7d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d7e2:	4b42      	ldr	r3, [pc, #264]	; (800d8ec <xTaskResumeAll+0x118>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d10a      	bne.n	800d800 <xTaskResumeAll+0x2c>
	__asm volatile
 800d7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ee:	f383 8811 	msr	BASEPRI, r3
 800d7f2:	f3bf 8f6f 	isb	sy
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	603b      	str	r3, [r7, #0]
}
 800d7fc:	bf00      	nop
 800d7fe:	e7fe      	b.n	800d7fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d800:	f001 f940 	bl	800ea84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d804:	4b39      	ldr	r3, [pc, #228]	; (800d8ec <xTaskResumeAll+0x118>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	3b01      	subs	r3, #1
 800d80a:	4a38      	ldr	r2, [pc, #224]	; (800d8ec <xTaskResumeAll+0x118>)
 800d80c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d80e:	4b37      	ldr	r3, [pc, #220]	; (800d8ec <xTaskResumeAll+0x118>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d162      	bne.n	800d8dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d816:	4b36      	ldr	r3, [pc, #216]	; (800d8f0 <xTaskResumeAll+0x11c>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d05e      	beq.n	800d8dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d81e:	e02f      	b.n	800d880 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d820:	4b34      	ldr	r3, [pc, #208]	; (800d8f4 <xTaskResumeAll+0x120>)
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	68db      	ldr	r3, [r3, #12]
 800d826:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	3318      	adds	r3, #24
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7ff f84b 	bl	800c8c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	3304      	adds	r3, #4
 800d836:	4618      	mov	r0, r3
 800d838:	f7ff f846 	bl	800c8c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d840:	4b2d      	ldr	r3, [pc, #180]	; (800d8f8 <xTaskResumeAll+0x124>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	429a      	cmp	r2, r3
 800d846:	d903      	bls.n	800d850 <xTaskResumeAll+0x7c>
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84c:	4a2a      	ldr	r2, [pc, #168]	; (800d8f8 <xTaskResumeAll+0x124>)
 800d84e:	6013      	str	r3, [r2, #0]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d854:	4613      	mov	r3, r2
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	4413      	add	r3, r2
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	4a27      	ldr	r2, [pc, #156]	; (800d8fc <xTaskResumeAll+0x128>)
 800d85e:	441a      	add	r2, r3
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	3304      	adds	r3, #4
 800d864:	4619      	mov	r1, r3
 800d866:	4610      	mov	r0, r2
 800d868:	f7fe ffd1 	bl	800c80e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d870:	4b23      	ldr	r3, [pc, #140]	; (800d900 <xTaskResumeAll+0x12c>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d876:	429a      	cmp	r2, r3
 800d878:	d302      	bcc.n	800d880 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d87a:	4b22      	ldr	r3, [pc, #136]	; (800d904 <xTaskResumeAll+0x130>)
 800d87c:	2201      	movs	r2, #1
 800d87e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d880:	4b1c      	ldr	r3, [pc, #112]	; (800d8f4 <xTaskResumeAll+0x120>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d1cb      	bne.n	800d820 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d001      	beq.n	800d892 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d88e:	f000 fb7d 	bl	800df8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d892:	4b1d      	ldr	r3, [pc, #116]	; (800d908 <xTaskResumeAll+0x134>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d010      	beq.n	800d8c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d89e:	f000 f847 	bl	800d930 <xTaskIncrementTick>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d8a8:	4b16      	ldr	r3, [pc, #88]	; (800d904 <xTaskResumeAll+0x130>)
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	3b01      	subs	r3, #1
 800d8b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d1f1      	bne.n	800d89e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d8ba:	4b13      	ldr	r3, [pc, #76]	; (800d908 <xTaskResumeAll+0x134>)
 800d8bc:	2200      	movs	r2, #0
 800d8be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d8c0:	4b10      	ldr	r3, [pc, #64]	; (800d904 <xTaskResumeAll+0x130>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d009      	beq.n	800d8dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d8cc:	4b0f      	ldr	r3, [pc, #60]	; (800d90c <xTaskResumeAll+0x138>)
 800d8ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8d2:	601a      	str	r2, [r3, #0]
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8dc:	f001 f902 	bl	800eae4 <vPortExitCritical>

	return xAlreadyYielded;
 800d8e0:	68bb      	ldr	r3, [r7, #8]
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	200010a0 	.word	0x200010a0
 800d8f0:	20001078 	.word	0x20001078
 800d8f4:	20001038 	.word	0x20001038
 800d8f8:	20001080 	.word	0x20001080
 800d8fc:	20000ba8 	.word	0x20000ba8
 800d900:	20000ba4 	.word	0x20000ba4
 800d904:	2000108c 	.word	0x2000108c
 800d908:	20001088 	.word	0x20001088
 800d90c:	e000ed04 	.word	0xe000ed04

0800d910 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d916:	4b05      	ldr	r3, [pc, #20]	; (800d92c <xTaskGetTickCount+0x1c>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d91c:	687b      	ldr	r3, [r7, #4]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	370c      	adds	r7, #12
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	2000107c 	.word	0x2000107c

0800d930 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b086      	sub	sp, #24
 800d934:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d936:	2300      	movs	r3, #0
 800d938:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d93a:	4b4f      	ldr	r3, [pc, #316]	; (800da78 <xTaskIncrementTick+0x148>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f040 808f 	bne.w	800da62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d944:	4b4d      	ldr	r3, [pc, #308]	; (800da7c <xTaskIncrementTick+0x14c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	3301      	adds	r3, #1
 800d94a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d94c:	4a4b      	ldr	r2, [pc, #300]	; (800da7c <xTaskIncrementTick+0x14c>)
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d120      	bne.n	800d99a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d958:	4b49      	ldr	r3, [pc, #292]	; (800da80 <xTaskIncrementTick+0x150>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00a      	beq.n	800d978 <xTaskIncrementTick+0x48>
	__asm volatile
 800d962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d966:	f383 8811 	msr	BASEPRI, r3
 800d96a:	f3bf 8f6f 	isb	sy
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	603b      	str	r3, [r7, #0]
}
 800d974:	bf00      	nop
 800d976:	e7fe      	b.n	800d976 <xTaskIncrementTick+0x46>
 800d978:	4b41      	ldr	r3, [pc, #260]	; (800da80 <xTaskIncrementTick+0x150>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	60fb      	str	r3, [r7, #12]
 800d97e:	4b41      	ldr	r3, [pc, #260]	; (800da84 <xTaskIncrementTick+0x154>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a3f      	ldr	r2, [pc, #252]	; (800da80 <xTaskIncrementTick+0x150>)
 800d984:	6013      	str	r3, [r2, #0]
 800d986:	4a3f      	ldr	r2, [pc, #252]	; (800da84 <xTaskIncrementTick+0x154>)
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6013      	str	r3, [r2, #0]
 800d98c:	4b3e      	ldr	r3, [pc, #248]	; (800da88 <xTaskIncrementTick+0x158>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	3301      	adds	r3, #1
 800d992:	4a3d      	ldr	r2, [pc, #244]	; (800da88 <xTaskIncrementTick+0x158>)
 800d994:	6013      	str	r3, [r2, #0]
 800d996:	f000 faf9 	bl	800df8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d99a:	4b3c      	ldr	r3, [pc, #240]	; (800da8c <xTaskIncrementTick+0x15c>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	693a      	ldr	r2, [r7, #16]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d349      	bcc.n	800da38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9a4:	4b36      	ldr	r3, [pc, #216]	; (800da80 <xTaskIncrementTick+0x150>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d104      	bne.n	800d9b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9ae:	4b37      	ldr	r3, [pc, #220]	; (800da8c <xTaskIncrementTick+0x15c>)
 800d9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b4:	601a      	str	r2, [r3, #0]
					break;
 800d9b6:	e03f      	b.n	800da38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9b8:	4b31      	ldr	r3, [pc, #196]	; (800da80 <xTaskIncrementTick+0x150>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d9c8:	693a      	ldr	r2, [r7, #16]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d203      	bcs.n	800d9d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d9d0:	4a2e      	ldr	r2, [pc, #184]	; (800da8c <xTaskIncrementTick+0x15c>)
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d9d6:	e02f      	b.n	800da38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	3304      	adds	r3, #4
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7fe ff73 	bl	800c8c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d004      	beq.n	800d9f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	3318      	adds	r3, #24
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fe ff6a 	bl	800c8c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f8:	4b25      	ldr	r3, [pc, #148]	; (800da90 <xTaskIncrementTick+0x160>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d903      	bls.n	800da08 <xTaskIncrementTick+0xd8>
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da04:	4a22      	ldr	r2, [pc, #136]	; (800da90 <xTaskIncrementTick+0x160>)
 800da06:	6013      	str	r3, [r2, #0]
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da0c:	4613      	mov	r3, r2
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	4413      	add	r3, r2
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	4a1f      	ldr	r2, [pc, #124]	; (800da94 <xTaskIncrementTick+0x164>)
 800da16:	441a      	add	r2, r3
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	3304      	adds	r3, #4
 800da1c:	4619      	mov	r1, r3
 800da1e:	4610      	mov	r0, r2
 800da20:	f7fe fef5 	bl	800c80e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da28:	4b1b      	ldr	r3, [pc, #108]	; (800da98 <xTaskIncrementTick+0x168>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2e:	429a      	cmp	r2, r3
 800da30:	d3b8      	bcc.n	800d9a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800da32:	2301      	movs	r3, #1
 800da34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da36:	e7b5      	b.n	800d9a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da38:	4b17      	ldr	r3, [pc, #92]	; (800da98 <xTaskIncrementTick+0x168>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da3e:	4915      	ldr	r1, [pc, #84]	; (800da94 <xTaskIncrementTick+0x164>)
 800da40:	4613      	mov	r3, r2
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	4413      	add	r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	440b      	add	r3, r1
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d901      	bls.n	800da54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800da50:	2301      	movs	r3, #1
 800da52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800da54:	4b11      	ldr	r3, [pc, #68]	; (800da9c <xTaskIncrementTick+0x16c>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d007      	beq.n	800da6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800da5c:	2301      	movs	r3, #1
 800da5e:	617b      	str	r3, [r7, #20]
 800da60:	e004      	b.n	800da6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800da62:	4b0f      	ldr	r3, [pc, #60]	; (800daa0 <xTaskIncrementTick+0x170>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	3301      	adds	r3, #1
 800da68:	4a0d      	ldr	r2, [pc, #52]	; (800daa0 <xTaskIncrementTick+0x170>)
 800da6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800da6c:	697b      	ldr	r3, [r7, #20]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3718      	adds	r7, #24
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	200010a0 	.word	0x200010a0
 800da7c:	2000107c 	.word	0x2000107c
 800da80:	20001030 	.word	0x20001030
 800da84:	20001034 	.word	0x20001034
 800da88:	20001090 	.word	0x20001090
 800da8c:	20001098 	.word	0x20001098
 800da90:	20001080 	.word	0x20001080
 800da94:	20000ba8 	.word	0x20000ba8
 800da98:	20000ba4 	.word	0x20000ba4
 800da9c:	2000108c 	.word	0x2000108c
 800daa0:	20001088 	.word	0x20001088

0800daa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800daaa:	4b36      	ldr	r3, [pc, #216]	; (800db84 <vTaskSwitchContext+0xe0>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d003      	beq.n	800daba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dab2:	4b35      	ldr	r3, [pc, #212]	; (800db88 <vTaskSwitchContext+0xe4>)
 800dab4:	2201      	movs	r2, #1
 800dab6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dab8:	e05f      	b.n	800db7a <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800daba:	4b33      	ldr	r3, [pc, #204]	; (800db88 <vTaskSwitchContext+0xe4>)
 800dabc:	2200      	movs	r2, #0
 800dabe:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800dac0:	f7f2 feb2 	bl	8000828 <getRunTimeCounterValue>
 800dac4:	4603      	mov	r3, r0
 800dac6:	4a31      	ldr	r2, [pc, #196]	; (800db8c <vTaskSwitchContext+0xe8>)
 800dac8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800daca:	4b30      	ldr	r3, [pc, #192]	; (800db8c <vTaskSwitchContext+0xe8>)
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	4b30      	ldr	r3, [pc, #192]	; (800db90 <vTaskSwitchContext+0xec>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d909      	bls.n	800daea <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800dad6:	4b2f      	ldr	r3, [pc, #188]	; (800db94 <vTaskSwitchContext+0xf0>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dadc:	4a2b      	ldr	r2, [pc, #172]	; (800db8c <vTaskSwitchContext+0xe8>)
 800dade:	6810      	ldr	r0, [r2, #0]
 800dae0:	4a2b      	ldr	r2, [pc, #172]	; (800db90 <vTaskSwitchContext+0xec>)
 800dae2:	6812      	ldr	r2, [r2, #0]
 800dae4:	1a82      	subs	r2, r0, r2
 800dae6:	440a      	add	r2, r1
 800dae8:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800daea:	4b28      	ldr	r3, [pc, #160]	; (800db8c <vTaskSwitchContext+0xe8>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a28      	ldr	r2, [pc, #160]	; (800db90 <vTaskSwitchContext+0xec>)
 800daf0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daf2:	4b29      	ldr	r3, [pc, #164]	; (800db98 <vTaskSwitchContext+0xf4>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	60fb      	str	r3, [r7, #12]
 800daf8:	e010      	b.n	800db1c <vTaskSwitchContext+0x78>
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d10a      	bne.n	800db16 <vTaskSwitchContext+0x72>
	__asm volatile
 800db00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db04:	f383 8811 	msr	BASEPRI, r3
 800db08:	f3bf 8f6f 	isb	sy
 800db0c:	f3bf 8f4f 	dsb	sy
 800db10:	607b      	str	r3, [r7, #4]
}
 800db12:	bf00      	nop
 800db14:	e7fe      	b.n	800db14 <vTaskSwitchContext+0x70>
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	3b01      	subs	r3, #1
 800db1a:	60fb      	str	r3, [r7, #12]
 800db1c:	491f      	ldr	r1, [pc, #124]	; (800db9c <vTaskSwitchContext+0xf8>)
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	4613      	mov	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	4413      	add	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	440b      	add	r3, r1
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d0e4      	beq.n	800dafa <vTaskSwitchContext+0x56>
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	4613      	mov	r3, r2
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	4413      	add	r3, r2
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	4a18      	ldr	r2, [pc, #96]	; (800db9c <vTaskSwitchContext+0xf8>)
 800db3c:	4413      	add	r3, r2
 800db3e:	60bb      	str	r3, [r7, #8]
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	685a      	ldr	r2, [r3, #4]
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	605a      	str	r2, [r3, #4]
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	685a      	ldr	r2, [r3, #4]
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	3308      	adds	r3, #8
 800db52:	429a      	cmp	r2, r3
 800db54:	d104      	bne.n	800db60 <vTaskSwitchContext+0xbc>
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	685a      	ldr	r2, [r3, #4]
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	605a      	str	r2, [r3, #4]
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	4a0b      	ldr	r2, [pc, #44]	; (800db94 <vTaskSwitchContext+0xf0>)
 800db68:	6013      	str	r3, [r2, #0]
 800db6a:	4a0b      	ldr	r2, [pc, #44]	; (800db98 <vTaskSwitchContext+0xf4>)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db70:	4b08      	ldr	r3, [pc, #32]	; (800db94 <vTaskSwitchContext+0xf0>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	3358      	adds	r3, #88	; 0x58
 800db76:	4a0a      	ldr	r2, [pc, #40]	; (800dba0 <vTaskSwitchContext+0xfc>)
 800db78:	6013      	str	r3, [r2, #0]
}
 800db7a:	bf00      	nop
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	200010a0 	.word	0x200010a0
 800db88:	2000108c 	.word	0x2000108c
 800db8c:	200010a8 	.word	0x200010a8
 800db90:	200010a4 	.word	0x200010a4
 800db94:	20000ba4 	.word	0x20000ba4
 800db98:	20001080 	.word	0x20001080
 800db9c:	20000ba8 	.word	0x20000ba8
 800dba0:	2000016c 	.word	0x2000016c

0800dba4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d10a      	bne.n	800dbca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb8:	f383 8811 	msr	BASEPRI, r3
 800dbbc:	f3bf 8f6f 	isb	sy
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	60fb      	str	r3, [r7, #12]
}
 800dbc6:	bf00      	nop
 800dbc8:	e7fe      	b.n	800dbc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbca:	4b07      	ldr	r3, [pc, #28]	; (800dbe8 <vTaskPlaceOnEventList+0x44>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3318      	adds	r3, #24
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f7fe fe3f 	bl	800c856 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dbd8:	2101      	movs	r1, #1
 800dbda:	6838      	ldr	r0, [r7, #0]
 800dbdc:	f000 fa82 	bl	800e0e4 <prvAddCurrentTaskToDelayedList>
}
 800dbe0:	bf00      	nop
 800dbe2:	3710      	adds	r7, #16
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	20000ba4 	.word	0x20000ba4

0800dbec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d10a      	bne.n	800dc14 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	617b      	str	r3, [r7, #20]
}
 800dc10:	bf00      	nop
 800dc12:	e7fe      	b.n	800dc12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc14:	4b0a      	ldr	r3, [pc, #40]	; (800dc40 <vTaskPlaceOnEventListRestricted+0x54>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	3318      	adds	r3, #24
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	68f8      	ldr	r0, [r7, #12]
 800dc1e:	f7fe fdf6 	bl	800c80e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d002      	beq.n	800dc2e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dc28:	f04f 33ff 	mov.w	r3, #4294967295
 800dc2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dc2e:	6879      	ldr	r1, [r7, #4]
 800dc30:	68b8      	ldr	r0, [r7, #8]
 800dc32:	f000 fa57 	bl	800e0e4 <prvAddCurrentTaskToDelayedList>
	}
 800dc36:	bf00      	nop
 800dc38:	3718      	adds	r7, #24
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	20000ba4 	.word	0x20000ba4

0800dc44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b086      	sub	sp, #24
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d10a      	bne.n	800dc70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5e:	f383 8811 	msr	BASEPRI, r3
 800dc62:	f3bf 8f6f 	isb	sy
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	60fb      	str	r3, [r7, #12]
}
 800dc6c:	bf00      	nop
 800dc6e:	e7fe      	b.n	800dc6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	3318      	adds	r3, #24
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fe fe27 	bl	800c8c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc7a:	4b1e      	ldr	r3, [pc, #120]	; (800dcf4 <xTaskRemoveFromEventList+0xb0>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d11d      	bne.n	800dcbe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	3304      	adds	r3, #4
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fe fe1e 	bl	800c8c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc90:	4b19      	ldr	r3, [pc, #100]	; (800dcf8 <xTaskRemoveFromEventList+0xb4>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d903      	bls.n	800dca0 <xTaskRemoveFromEventList+0x5c>
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9c:	4a16      	ldr	r2, [pc, #88]	; (800dcf8 <xTaskRemoveFromEventList+0xb4>)
 800dc9e:	6013      	str	r3, [r2, #0]
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca4:	4613      	mov	r3, r2
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	4413      	add	r3, r2
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	4a13      	ldr	r2, [pc, #76]	; (800dcfc <xTaskRemoveFromEventList+0xb8>)
 800dcae:	441a      	add	r2, r3
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	4610      	mov	r0, r2
 800dcb8:	f7fe fda9 	bl	800c80e <vListInsertEnd>
 800dcbc:	e005      	b.n	800dcca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	3318      	adds	r3, #24
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	480e      	ldr	r0, [pc, #56]	; (800dd00 <xTaskRemoveFromEventList+0xbc>)
 800dcc6:	f7fe fda2 	bl	800c80e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcce:	4b0d      	ldr	r3, [pc, #52]	; (800dd04 <xTaskRemoveFromEventList+0xc0>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d905      	bls.n	800dce4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dcdc:	4b0a      	ldr	r3, [pc, #40]	; (800dd08 <xTaskRemoveFromEventList+0xc4>)
 800dcde:	2201      	movs	r2, #1
 800dce0:	601a      	str	r2, [r3, #0]
 800dce2:	e001      	b.n	800dce8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dce4:	2300      	movs	r3, #0
 800dce6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dce8:	697b      	ldr	r3, [r7, #20]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3718      	adds	r7, #24
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	200010a0 	.word	0x200010a0
 800dcf8:	20001080 	.word	0x20001080
 800dcfc:	20000ba8 	.word	0x20000ba8
 800dd00:	20001038 	.word	0x20001038
 800dd04:	20000ba4 	.word	0x20000ba4
 800dd08:	2000108c 	.word	0x2000108c

0800dd0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd14:	4b06      	ldr	r3, [pc, #24]	; (800dd30 <vTaskInternalSetTimeOutState+0x24>)
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd1c:	4b05      	ldr	r3, [pc, #20]	; (800dd34 <vTaskInternalSetTimeOutState+0x28>)
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	605a      	str	r2, [r3, #4]
}
 800dd24:	bf00      	nop
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr
 800dd30:	20001090 	.word	0x20001090
 800dd34:	2000107c 	.word	0x2000107c

0800dd38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b088      	sub	sp, #32
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d10a      	bne.n	800dd5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4c:	f383 8811 	msr	BASEPRI, r3
 800dd50:	f3bf 8f6f 	isb	sy
 800dd54:	f3bf 8f4f 	dsb	sy
 800dd58:	613b      	str	r3, [r7, #16]
}
 800dd5a:	bf00      	nop
 800dd5c:	e7fe      	b.n	800dd5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d10a      	bne.n	800dd7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd68:	f383 8811 	msr	BASEPRI, r3
 800dd6c:	f3bf 8f6f 	isb	sy
 800dd70:	f3bf 8f4f 	dsb	sy
 800dd74:	60fb      	str	r3, [r7, #12]
}
 800dd76:	bf00      	nop
 800dd78:	e7fe      	b.n	800dd78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dd7a:	f000 fe83 	bl	800ea84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dd7e:	4b1d      	ldr	r3, [pc, #116]	; (800ddf4 <xTaskCheckForTimeOut+0xbc>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	69ba      	ldr	r2, [r7, #24]
 800dd8a:	1ad3      	subs	r3, r2, r3
 800dd8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd96:	d102      	bne.n	800dd9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	61fb      	str	r3, [r7, #28]
 800dd9c:	e023      	b.n	800dde6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	4b15      	ldr	r3, [pc, #84]	; (800ddf8 <xTaskCheckForTimeOut+0xc0>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d007      	beq.n	800ddba <xTaskCheckForTimeOut+0x82>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	69ba      	ldr	r2, [r7, #24]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d302      	bcc.n	800ddba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	61fb      	str	r3, [r7, #28]
 800ddb8:	e015      	b.n	800dde6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	697a      	ldr	r2, [r7, #20]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d20b      	bcs.n	800dddc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	1ad2      	subs	r2, r2, r3
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f7ff ff9b 	bl	800dd0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	61fb      	str	r3, [r7, #28]
 800ddda:	e004      	b.n	800dde6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	2200      	movs	r2, #0
 800dde0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dde2:	2301      	movs	r3, #1
 800dde4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dde6:	f000 fe7d 	bl	800eae4 <vPortExitCritical>

	return xReturn;
 800ddea:	69fb      	ldr	r3, [r7, #28]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3720      	adds	r7, #32
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	2000107c 	.word	0x2000107c
 800ddf8:	20001090 	.word	0x20001090

0800ddfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800de00:	4b03      	ldr	r3, [pc, #12]	; (800de10 <vTaskMissedYield+0x14>)
 800de02:	2201      	movs	r2, #1
 800de04:	601a      	str	r2, [r3, #0]
}
 800de06:	bf00      	nop
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr
 800de10:	2000108c 	.word	0x2000108c

0800de14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de1c:	f000 f854 	bl	800dec8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de20:	4b07      	ldr	r3, [pc, #28]	; (800de40 <prvIdleTask+0x2c>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d907      	bls.n	800de38 <prvIdleTask+0x24>
			{
				taskYIELD();
 800de28:	4b06      	ldr	r3, [pc, #24]	; (800de44 <prvIdleTask+0x30>)
 800de2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de2e:	601a      	str	r2, [r3, #0]
 800de30:	f3bf 8f4f 	dsb	sy
 800de34:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800de38:	f7f2 fd02 	bl	8000840 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800de3c:	e7ee      	b.n	800de1c <prvIdleTask+0x8>
 800de3e:	bf00      	nop
 800de40:	20000ba8 	.word	0x20000ba8
 800de44:	e000ed04 	.word	0xe000ed04

0800de48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de4e:	2300      	movs	r3, #0
 800de50:	607b      	str	r3, [r7, #4]
 800de52:	e00c      	b.n	800de6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	4613      	mov	r3, r2
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	4413      	add	r3, r2
 800de5c:	009b      	lsls	r3, r3, #2
 800de5e:	4a12      	ldr	r2, [pc, #72]	; (800dea8 <prvInitialiseTaskLists+0x60>)
 800de60:	4413      	add	r3, r2
 800de62:	4618      	mov	r0, r3
 800de64:	f7fe fca6 	bl	800c7b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	3301      	adds	r3, #1
 800de6c:	607b      	str	r3, [r7, #4]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2b37      	cmp	r3, #55	; 0x37
 800de72:	d9ef      	bls.n	800de54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de74:	480d      	ldr	r0, [pc, #52]	; (800deac <prvInitialiseTaskLists+0x64>)
 800de76:	f7fe fc9d 	bl	800c7b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800de7a:	480d      	ldr	r0, [pc, #52]	; (800deb0 <prvInitialiseTaskLists+0x68>)
 800de7c:	f7fe fc9a 	bl	800c7b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800de80:	480c      	ldr	r0, [pc, #48]	; (800deb4 <prvInitialiseTaskLists+0x6c>)
 800de82:	f7fe fc97 	bl	800c7b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800de86:	480c      	ldr	r0, [pc, #48]	; (800deb8 <prvInitialiseTaskLists+0x70>)
 800de88:	f7fe fc94 	bl	800c7b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800de8c:	480b      	ldr	r0, [pc, #44]	; (800debc <prvInitialiseTaskLists+0x74>)
 800de8e:	f7fe fc91 	bl	800c7b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800de92:	4b0b      	ldr	r3, [pc, #44]	; (800dec0 <prvInitialiseTaskLists+0x78>)
 800de94:	4a05      	ldr	r2, [pc, #20]	; (800deac <prvInitialiseTaskLists+0x64>)
 800de96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de98:	4b0a      	ldr	r3, [pc, #40]	; (800dec4 <prvInitialiseTaskLists+0x7c>)
 800de9a:	4a05      	ldr	r2, [pc, #20]	; (800deb0 <prvInitialiseTaskLists+0x68>)
 800de9c:	601a      	str	r2, [r3, #0]
}
 800de9e:	bf00      	nop
 800dea0:	3708      	adds	r7, #8
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	20000ba8 	.word	0x20000ba8
 800deac:	20001008 	.word	0x20001008
 800deb0:	2000101c 	.word	0x2000101c
 800deb4:	20001038 	.word	0x20001038
 800deb8:	2000104c 	.word	0x2000104c
 800debc:	20001064 	.word	0x20001064
 800dec0:	20001030 	.word	0x20001030
 800dec4:	20001034 	.word	0x20001034

0800dec8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dece:	e019      	b.n	800df04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ded0:	f000 fdd8 	bl	800ea84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ded4:	4b10      	ldr	r3, [pc, #64]	; (800df18 <prvCheckTasksWaitingTermination+0x50>)
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	68db      	ldr	r3, [r3, #12]
 800deda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	3304      	adds	r3, #4
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7fe fcf1 	bl	800c8c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dee6:	4b0d      	ldr	r3, [pc, #52]	; (800df1c <prvCheckTasksWaitingTermination+0x54>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	3b01      	subs	r3, #1
 800deec:	4a0b      	ldr	r2, [pc, #44]	; (800df1c <prvCheckTasksWaitingTermination+0x54>)
 800deee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800def0:	4b0b      	ldr	r3, [pc, #44]	; (800df20 <prvCheckTasksWaitingTermination+0x58>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	3b01      	subs	r3, #1
 800def6:	4a0a      	ldr	r2, [pc, #40]	; (800df20 <prvCheckTasksWaitingTermination+0x58>)
 800def8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800defa:	f000 fdf3 	bl	800eae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f000 f810 	bl	800df24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df04:	4b06      	ldr	r3, [pc, #24]	; (800df20 <prvCheckTasksWaitingTermination+0x58>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1e1      	bne.n	800ded0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	3708      	adds	r7, #8
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	2000104c 	.word	0x2000104c
 800df1c:	20001078 	.word	0x20001078
 800df20:	20001060 	.word	0x20001060

0800df24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df24:	b580      	push	{r7, lr}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	3358      	adds	r3, #88	; 0x58
 800df30:	4618      	mov	r0, r3
 800df32:	f001 fedd 	bl	800fcf0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d108      	bne.n	800df52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df44:	4618      	mov	r0, r3
 800df46:	f000 ff8b 	bl	800ee60 <vPortFree>
				vPortFree( pxTCB );
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 ff88 	bl	800ee60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df50:	e018      	b.n	800df84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d103      	bne.n	800df64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 ff7f 	bl	800ee60 <vPortFree>
	}
 800df62:	e00f      	b.n	800df84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800df6a:	2b02      	cmp	r3, #2
 800df6c:	d00a      	beq.n	800df84 <prvDeleteTCB+0x60>
	__asm volatile
 800df6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df72:	f383 8811 	msr	BASEPRI, r3
 800df76:	f3bf 8f6f 	isb	sy
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	60fb      	str	r3, [r7, #12]
}
 800df80:	bf00      	nop
 800df82:	e7fe      	b.n	800df82 <prvDeleteTCB+0x5e>
	}
 800df84:	bf00      	nop
 800df86:	3710      	adds	r7, #16
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df92:	4b0c      	ldr	r3, [pc, #48]	; (800dfc4 <prvResetNextTaskUnblockTime+0x38>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d104      	bne.n	800dfa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df9c:	4b0a      	ldr	r3, [pc, #40]	; (800dfc8 <prvResetNextTaskUnblockTime+0x3c>)
 800df9e:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dfa4:	e008      	b.n	800dfb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfa6:	4b07      	ldr	r3, [pc, #28]	; (800dfc4 <prvResetNextTaskUnblockTime+0x38>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	4a04      	ldr	r2, [pc, #16]	; (800dfc8 <prvResetNextTaskUnblockTime+0x3c>)
 800dfb6:	6013      	str	r3, [r2, #0]
}
 800dfb8:	bf00      	nop
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr
 800dfc4:	20001030 	.word	0x20001030
 800dfc8:	20001098 	.word	0x20001098

0800dfcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dfd2:	4b0b      	ldr	r3, [pc, #44]	; (800e000 <xTaskGetSchedulerState+0x34>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d102      	bne.n	800dfe0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	607b      	str	r3, [r7, #4]
 800dfde:	e008      	b.n	800dff2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfe0:	4b08      	ldr	r3, [pc, #32]	; (800e004 <xTaskGetSchedulerState+0x38>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d102      	bne.n	800dfee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dfe8:	2302      	movs	r3, #2
 800dfea:	607b      	str	r3, [r7, #4]
 800dfec:	e001      	b.n	800dff2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dfee:	2300      	movs	r3, #0
 800dff0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dff2:	687b      	ldr	r3, [r7, #4]
	}
 800dff4:	4618      	mov	r0, r3
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr
 800e000:	20001084 	.word	0x20001084
 800e004:	200010a0 	.word	0x200010a0

0800e008 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b086      	sub	sp, #24
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e014:	2300      	movs	r3, #0
 800e016:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d056      	beq.n	800e0cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e01e:	4b2e      	ldr	r3, [pc, #184]	; (800e0d8 <xTaskPriorityDisinherit+0xd0>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	693a      	ldr	r2, [r7, #16]
 800e024:	429a      	cmp	r2, r3
 800e026:	d00a      	beq.n	800e03e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02c:	f383 8811 	msr	BASEPRI, r3
 800e030:	f3bf 8f6f 	isb	sy
 800e034:	f3bf 8f4f 	dsb	sy
 800e038:	60fb      	str	r3, [r7, #12]
}
 800e03a:	bf00      	nop
 800e03c:	e7fe      	b.n	800e03c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e042:	2b00      	cmp	r3, #0
 800e044:	d10a      	bne.n	800e05c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04a:	f383 8811 	msr	BASEPRI, r3
 800e04e:	f3bf 8f6f 	isb	sy
 800e052:	f3bf 8f4f 	dsb	sy
 800e056:	60bb      	str	r3, [r7, #8]
}
 800e058:	bf00      	nop
 800e05a:	e7fe      	b.n	800e05a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e060:	1e5a      	subs	r2, r3, #1
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e06e:	429a      	cmp	r2, r3
 800e070:	d02c      	beq.n	800e0cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e076:	2b00      	cmp	r3, #0
 800e078:	d128      	bne.n	800e0cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	3304      	adds	r3, #4
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fe fc22 	bl	800c8c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e090:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e09c:	4b0f      	ldr	r3, [pc, #60]	; (800e0dc <xTaskPriorityDisinherit+0xd4>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d903      	bls.n	800e0ac <xTaskPriorityDisinherit+0xa4>
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a8:	4a0c      	ldr	r2, [pc, #48]	; (800e0dc <xTaskPriorityDisinherit+0xd4>)
 800e0aa:	6013      	str	r3, [r2, #0]
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	4413      	add	r3, r2
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	4a09      	ldr	r2, [pc, #36]	; (800e0e0 <xTaskPriorityDisinherit+0xd8>)
 800e0ba:	441a      	add	r2, r3
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	3304      	adds	r3, #4
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	4610      	mov	r0, r2
 800e0c4:	f7fe fba3 	bl	800c80e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e0cc:	697b      	ldr	r3, [r7, #20]
	}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3718      	adds	r7, #24
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	20000ba4 	.word	0x20000ba4
 800e0dc:	20001080 	.word	0x20001080
 800e0e0:	20000ba8 	.word	0x20000ba8

0800e0e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e0ee:	4b21      	ldr	r3, [pc, #132]	; (800e174 <prvAddCurrentTaskToDelayedList+0x90>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0f4:	4b20      	ldr	r3, [pc, #128]	; (800e178 <prvAddCurrentTaskToDelayedList+0x94>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	3304      	adds	r3, #4
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7fe fbe4 	bl	800c8c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e106:	d10a      	bne.n	800e11e <prvAddCurrentTaskToDelayedList+0x3a>
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d007      	beq.n	800e11e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e10e:	4b1a      	ldr	r3, [pc, #104]	; (800e178 <prvAddCurrentTaskToDelayedList+0x94>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	3304      	adds	r3, #4
 800e114:	4619      	mov	r1, r3
 800e116:	4819      	ldr	r0, [pc, #100]	; (800e17c <prvAddCurrentTaskToDelayedList+0x98>)
 800e118:	f7fe fb79 	bl	800c80e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e11c:	e026      	b.n	800e16c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	4413      	add	r3, r2
 800e124:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e126:	4b14      	ldr	r3, [pc, #80]	; (800e178 <prvAddCurrentTaskToDelayedList+0x94>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	68ba      	ldr	r2, [r7, #8]
 800e12c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e12e:	68ba      	ldr	r2, [r7, #8]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	429a      	cmp	r2, r3
 800e134:	d209      	bcs.n	800e14a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e136:	4b12      	ldr	r3, [pc, #72]	; (800e180 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	4b0f      	ldr	r3, [pc, #60]	; (800e178 <prvAddCurrentTaskToDelayedList+0x94>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	3304      	adds	r3, #4
 800e140:	4619      	mov	r1, r3
 800e142:	4610      	mov	r0, r2
 800e144:	f7fe fb87 	bl	800c856 <vListInsert>
}
 800e148:	e010      	b.n	800e16c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e14a:	4b0e      	ldr	r3, [pc, #56]	; (800e184 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	4b0a      	ldr	r3, [pc, #40]	; (800e178 <prvAddCurrentTaskToDelayedList+0x94>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	3304      	adds	r3, #4
 800e154:	4619      	mov	r1, r3
 800e156:	4610      	mov	r0, r2
 800e158:	f7fe fb7d 	bl	800c856 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e15c:	4b0a      	ldr	r3, [pc, #40]	; (800e188 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	68ba      	ldr	r2, [r7, #8]
 800e162:	429a      	cmp	r2, r3
 800e164:	d202      	bcs.n	800e16c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e166:	4a08      	ldr	r2, [pc, #32]	; (800e188 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	6013      	str	r3, [r2, #0]
}
 800e16c:	bf00      	nop
 800e16e:	3710      	adds	r7, #16
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	2000107c 	.word	0x2000107c
 800e178:	20000ba4 	.word	0x20000ba4
 800e17c:	20001064 	.word	0x20001064
 800e180:	20001034 	.word	0x20001034
 800e184:	20001030 	.word	0x20001030
 800e188:	20001098 	.word	0x20001098

0800e18c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08a      	sub	sp, #40	; 0x28
 800e190:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e192:	2300      	movs	r3, #0
 800e194:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e196:	f000 fb07 	bl	800e7a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e19a:	4b1c      	ldr	r3, [pc, #112]	; (800e20c <xTimerCreateTimerTask+0x80>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d021      	beq.n	800e1e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e1aa:	1d3a      	adds	r2, r7, #4
 800e1ac:	f107 0108 	add.w	r1, r7, #8
 800e1b0:	f107 030c 	add.w	r3, r7, #12
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7fe fae3 	bl	800c780 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e1ba:	6879      	ldr	r1, [r7, #4]
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	68fa      	ldr	r2, [r7, #12]
 800e1c0:	9202      	str	r2, [sp, #8]
 800e1c2:	9301      	str	r3, [sp, #4]
 800e1c4:	2302      	movs	r3, #2
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	460a      	mov	r2, r1
 800e1cc:	4910      	ldr	r1, [pc, #64]	; (800e210 <xTimerCreateTimerTask+0x84>)
 800e1ce:	4811      	ldr	r0, [pc, #68]	; (800e214 <xTimerCreateTimerTask+0x88>)
 800e1d0:	f7ff f890 	bl	800d2f4 <xTaskCreateStatic>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	4a10      	ldr	r2, [pc, #64]	; (800e218 <xTimerCreateTimerTask+0x8c>)
 800e1d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e1da:	4b0f      	ldr	r3, [pc, #60]	; (800e218 <xTimerCreateTimerTask+0x8c>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10a      	bne.n	800e202 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f0:	f383 8811 	msr	BASEPRI, r3
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	f3bf 8f4f 	dsb	sy
 800e1fc:	613b      	str	r3, [r7, #16]
}
 800e1fe:	bf00      	nop
 800e200:	e7fe      	b.n	800e200 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e202:	697b      	ldr	r3, [r7, #20]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3718      	adds	r7, #24
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	200010dc 	.word	0x200010dc
 800e210:	080107d4 	.word	0x080107d4
 800e214:	0800e351 	.word	0x0800e351
 800e218:	200010e0 	.word	0x200010e0

0800e21c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08a      	sub	sp, #40	; 0x28
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]
 800e228:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e22a:	2300      	movs	r3, #0
 800e22c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10a      	bne.n	800e24a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	623b      	str	r3, [r7, #32]
}
 800e246:	bf00      	nop
 800e248:	e7fe      	b.n	800e248 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e24a:	4b1a      	ldr	r3, [pc, #104]	; (800e2b4 <xTimerGenericCommand+0x98>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d02a      	beq.n	800e2a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	2b05      	cmp	r3, #5
 800e262:	dc18      	bgt.n	800e296 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e264:	f7ff feb2 	bl	800dfcc <xTaskGetSchedulerState>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b02      	cmp	r3, #2
 800e26c:	d109      	bne.n	800e282 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e26e:	4b11      	ldr	r3, [pc, #68]	; (800e2b4 <xTimerGenericCommand+0x98>)
 800e270:	6818      	ldr	r0, [r3, #0]
 800e272:	f107 0110 	add.w	r1, r7, #16
 800e276:	2300      	movs	r3, #0
 800e278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e27a:	f7fe fc53 	bl	800cb24 <xQueueGenericSend>
 800e27e:	6278      	str	r0, [r7, #36]	; 0x24
 800e280:	e012      	b.n	800e2a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e282:	4b0c      	ldr	r3, [pc, #48]	; (800e2b4 <xTimerGenericCommand+0x98>)
 800e284:	6818      	ldr	r0, [r3, #0]
 800e286:	f107 0110 	add.w	r1, r7, #16
 800e28a:	2300      	movs	r3, #0
 800e28c:	2200      	movs	r2, #0
 800e28e:	f7fe fc49 	bl	800cb24 <xQueueGenericSend>
 800e292:	6278      	str	r0, [r7, #36]	; 0x24
 800e294:	e008      	b.n	800e2a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e296:	4b07      	ldr	r3, [pc, #28]	; (800e2b4 <xTimerGenericCommand+0x98>)
 800e298:	6818      	ldr	r0, [r3, #0]
 800e29a:	f107 0110 	add.w	r1, r7, #16
 800e29e:	2300      	movs	r3, #0
 800e2a0:	683a      	ldr	r2, [r7, #0]
 800e2a2:	f7fe fd3d 	bl	800cd20 <xQueueGenericSendFromISR>
 800e2a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3728      	adds	r7, #40	; 0x28
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	200010dc 	.word	0x200010dc

0800e2b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b088      	sub	sp, #32
 800e2bc:	af02      	add	r7, sp, #8
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2c2:	4b22      	ldr	r3, [pc, #136]	; (800e34c <prvProcessExpiredTimer+0x94>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	68db      	ldr	r3, [r3, #12]
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7fe faf9 	bl	800c8c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2dc:	f003 0304 	and.w	r3, r3, #4
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d022      	beq.n	800e32a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	699a      	ldr	r2, [r3, #24]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	18d1      	adds	r1, r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	683a      	ldr	r2, [r7, #0]
 800e2f0:	6978      	ldr	r0, [r7, #20]
 800e2f2:	f000 f8d1 	bl	800e498 <prvInsertTimerInActiveList>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d01f      	beq.n	800e33c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	9300      	str	r3, [sp, #0]
 800e300:	2300      	movs	r3, #0
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	2100      	movs	r1, #0
 800e306:	6978      	ldr	r0, [r7, #20]
 800e308:	f7ff ff88 	bl	800e21c <xTimerGenericCommand>
 800e30c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d113      	bne.n	800e33c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e318:	f383 8811 	msr	BASEPRI, r3
 800e31c:	f3bf 8f6f 	isb	sy
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	60fb      	str	r3, [r7, #12]
}
 800e326:	bf00      	nop
 800e328:	e7fe      	b.n	800e328 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e330:	f023 0301 	bic.w	r3, r3, #1
 800e334:	b2da      	uxtb	r2, r3
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	6a1b      	ldr	r3, [r3, #32]
 800e340:	6978      	ldr	r0, [r7, #20]
 800e342:	4798      	blx	r3
}
 800e344:	bf00      	nop
 800e346:	3718      	adds	r7, #24
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	200010d4 	.word	0x200010d4

0800e350 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e358:	f107 0308 	add.w	r3, r7, #8
 800e35c:	4618      	mov	r0, r3
 800e35e:	f000 f857 	bl	800e410 <prvGetNextExpireTime>
 800e362:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	4619      	mov	r1, r3
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	f000 f803 	bl	800e374 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e36e:	f000 f8d5 	bl	800e51c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e372:	e7f1      	b.n	800e358 <prvTimerTask+0x8>

0800e374 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e37e:	f7ff fa1b 	bl	800d7b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e382:	f107 0308 	add.w	r3, r7, #8
 800e386:	4618      	mov	r0, r3
 800e388:	f000 f866 	bl	800e458 <prvSampleTimeNow>
 800e38c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d130      	bne.n	800e3f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d10a      	bne.n	800e3b0 <prvProcessTimerOrBlockTask+0x3c>
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d806      	bhi.n	800e3b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e3a2:	f7ff fa17 	bl	800d7d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e3a6:	68f9      	ldr	r1, [r7, #12]
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f7ff ff85 	bl	800e2b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e3ae:	e024      	b.n	800e3fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d008      	beq.n	800e3c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e3b6:	4b13      	ldr	r3, [pc, #76]	; (800e404 <prvProcessTimerOrBlockTask+0x90>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d101      	bne.n	800e3c4 <prvProcessTimerOrBlockTask+0x50>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e000      	b.n	800e3c6 <prvProcessTimerOrBlockTask+0x52>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e3c8:	4b0f      	ldr	r3, [pc, #60]	; (800e408 <prvProcessTimerOrBlockTask+0x94>)
 800e3ca:	6818      	ldr	r0, [r3, #0]
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	683a      	ldr	r2, [r7, #0]
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	f7fe ff59 	bl	800d28c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e3da:	f7ff f9fb 	bl	800d7d4 <xTaskResumeAll>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d10a      	bne.n	800e3fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e3e4:	4b09      	ldr	r3, [pc, #36]	; (800e40c <prvProcessTimerOrBlockTask+0x98>)
 800e3e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ea:	601a      	str	r2, [r3, #0]
 800e3ec:	f3bf 8f4f 	dsb	sy
 800e3f0:	f3bf 8f6f 	isb	sy
}
 800e3f4:	e001      	b.n	800e3fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e3f6:	f7ff f9ed 	bl	800d7d4 <xTaskResumeAll>
}
 800e3fa:	bf00      	nop
 800e3fc:	3710      	adds	r7, #16
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	200010d8 	.word	0x200010d8
 800e408:	200010dc 	.word	0x200010dc
 800e40c:	e000ed04 	.word	0xe000ed04

0800e410 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e410:	b480      	push	{r7}
 800e412:	b085      	sub	sp, #20
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e418:	4b0e      	ldr	r3, [pc, #56]	; (800e454 <prvGetNextExpireTime+0x44>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d101      	bne.n	800e426 <prvGetNextExpireTime+0x16>
 800e422:	2201      	movs	r2, #1
 800e424:	e000      	b.n	800e428 <prvGetNextExpireTime+0x18>
 800e426:	2200      	movs	r2, #0
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d105      	bne.n	800e440 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e434:	4b07      	ldr	r3, [pc, #28]	; (800e454 <prvGetNextExpireTime+0x44>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	68db      	ldr	r3, [r3, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	60fb      	str	r3, [r7, #12]
 800e43e:	e001      	b.n	800e444 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e440:	2300      	movs	r3, #0
 800e442:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e444:	68fb      	ldr	r3, [r7, #12]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3714      	adds	r7, #20
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop
 800e454:	200010d4 	.word	0x200010d4

0800e458 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e460:	f7ff fa56 	bl	800d910 <xTaskGetTickCount>
 800e464:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e466:	4b0b      	ldr	r3, [pc, #44]	; (800e494 <prvSampleTimeNow+0x3c>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	68fa      	ldr	r2, [r7, #12]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d205      	bcs.n	800e47c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e470:	f000 f936 	bl	800e6e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2201      	movs	r2, #1
 800e478:	601a      	str	r2, [r3, #0]
 800e47a:	e002      	b.n	800e482 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2200      	movs	r2, #0
 800e480:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e482:	4a04      	ldr	r2, [pc, #16]	; (800e494 <prvSampleTimeNow+0x3c>)
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e488:	68fb      	ldr	r3, [r7, #12]
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	200010e4 	.word	0x200010e4

0800e498 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b086      	sub	sp, #24
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
 800e4a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	68ba      	ldr	r2, [r7, #8]
 800e4ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	68fa      	ldr	r2, [r7, #12]
 800e4b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e4b6:	68ba      	ldr	r2, [r7, #8]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d812      	bhi.n	800e4e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	1ad2      	subs	r2, r2, r3
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	699b      	ldr	r3, [r3, #24]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d302      	bcc.n	800e4d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	617b      	str	r3, [r7, #20]
 800e4d0:	e01b      	b.n	800e50a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e4d2:	4b10      	ldr	r3, [pc, #64]	; (800e514 <prvInsertTimerInActiveList+0x7c>)
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	3304      	adds	r3, #4
 800e4da:	4619      	mov	r1, r3
 800e4dc:	4610      	mov	r0, r2
 800e4de:	f7fe f9ba 	bl	800c856 <vListInsert>
 800e4e2:	e012      	b.n	800e50a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d206      	bcs.n	800e4fa <prvInsertTimerInActiveList+0x62>
 800e4ec:	68ba      	ldr	r2, [r7, #8]
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d302      	bcc.n	800e4fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	617b      	str	r3, [r7, #20]
 800e4f8:	e007      	b.n	800e50a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e4fa:	4b07      	ldr	r3, [pc, #28]	; (800e518 <prvInsertTimerInActiveList+0x80>)
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	3304      	adds	r3, #4
 800e502:	4619      	mov	r1, r3
 800e504:	4610      	mov	r0, r2
 800e506:	f7fe f9a6 	bl	800c856 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e50a:	697b      	ldr	r3, [r7, #20]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3718      	adds	r7, #24
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	200010d8 	.word	0x200010d8
 800e518:	200010d4 	.word	0x200010d4

0800e51c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b08e      	sub	sp, #56	; 0x38
 800e520:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e522:	e0ca      	b.n	800e6ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	da18      	bge.n	800e55c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e52a:	1d3b      	adds	r3, r7, #4
 800e52c:	3304      	adds	r3, #4
 800e52e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e532:	2b00      	cmp	r3, #0
 800e534:	d10a      	bne.n	800e54c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53a:	f383 8811 	msr	BASEPRI, r3
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f3bf 8f4f 	dsb	sy
 800e546:	61fb      	str	r3, [r7, #28]
}
 800e548:	bf00      	nop
 800e54a:	e7fe      	b.n	800e54a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e552:	6850      	ldr	r0, [r2, #4]
 800e554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e556:	6892      	ldr	r2, [r2, #8]
 800e558:	4611      	mov	r1, r2
 800e55a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	f2c0 80aa 	blt.w	800e6b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56a:	695b      	ldr	r3, [r3, #20]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d004      	beq.n	800e57a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e572:	3304      	adds	r3, #4
 800e574:	4618      	mov	r0, r3
 800e576:	f7fe f9a7 	bl	800c8c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e57a:	463b      	mov	r3, r7
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7ff ff6b 	bl	800e458 <prvSampleTimeNow>
 800e582:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b09      	cmp	r3, #9
 800e588:	f200 8097 	bhi.w	800e6ba <prvProcessReceivedCommands+0x19e>
 800e58c:	a201      	add	r2, pc, #4	; (adr r2, 800e594 <prvProcessReceivedCommands+0x78>)
 800e58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e592:	bf00      	nop
 800e594:	0800e5bd 	.word	0x0800e5bd
 800e598:	0800e5bd 	.word	0x0800e5bd
 800e59c:	0800e5bd 	.word	0x0800e5bd
 800e5a0:	0800e631 	.word	0x0800e631
 800e5a4:	0800e645 	.word	0x0800e645
 800e5a8:	0800e68f 	.word	0x0800e68f
 800e5ac:	0800e5bd 	.word	0x0800e5bd
 800e5b0:	0800e5bd 	.word	0x0800e5bd
 800e5b4:	0800e631 	.word	0x0800e631
 800e5b8:	0800e645 	.word	0x0800e645
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5c2:	f043 0301 	orr.w	r3, r3, #1
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e5ce:	68ba      	ldr	r2, [r7, #8]
 800e5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d2:	699b      	ldr	r3, [r3, #24]
 800e5d4:	18d1      	adds	r1, r2, r3
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5dc:	f7ff ff5c 	bl	800e498 <prvInsertTimerInActiveList>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d069      	beq.n	800e6ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e8:	6a1b      	ldr	r3, [r3, #32]
 800e5ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5f4:	f003 0304 	and.w	r3, r3, #4
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d05e      	beq.n	800e6ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e600:	699b      	ldr	r3, [r3, #24]
 800e602:	441a      	add	r2, r3
 800e604:	2300      	movs	r3, #0
 800e606:	9300      	str	r3, [sp, #0]
 800e608:	2300      	movs	r3, #0
 800e60a:	2100      	movs	r1, #0
 800e60c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e60e:	f7ff fe05 	bl	800e21c <xTimerGenericCommand>
 800e612:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e614:	6a3b      	ldr	r3, [r7, #32]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d14f      	bne.n	800e6ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61e:	f383 8811 	msr	BASEPRI, r3
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	61bb      	str	r3, [r7, #24]
}
 800e62c:	bf00      	nop
 800e62e:	e7fe      	b.n	800e62e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e636:	f023 0301 	bic.w	r3, r3, #1
 800e63a:	b2da      	uxtb	r2, r3
 800e63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e642:	e03a      	b.n	800e6ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e64a:	f043 0301 	orr.w	r3, r3, #1
 800e64e:	b2da      	uxtb	r2, r3
 800e650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e656:	68ba      	ldr	r2, [r7, #8]
 800e658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65e:	699b      	ldr	r3, [r3, #24]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d10a      	bne.n	800e67a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e668:	f383 8811 	msr	BASEPRI, r3
 800e66c:	f3bf 8f6f 	isb	sy
 800e670:	f3bf 8f4f 	dsb	sy
 800e674:	617b      	str	r3, [r7, #20]
}
 800e676:	bf00      	nop
 800e678:	e7fe      	b.n	800e678 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67c:	699a      	ldr	r2, [r3, #24]
 800e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e680:	18d1      	adds	r1, r2, r3
 800e682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e688:	f7ff ff06 	bl	800e498 <prvInsertTimerInActiveList>
					break;
 800e68c:	e015      	b.n	800e6ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e694:	f003 0302 	and.w	r3, r3, #2
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d103      	bne.n	800e6a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e69c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e69e:	f000 fbdf 	bl	800ee60 <vPortFree>
 800e6a2:	e00a      	b.n	800e6ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6aa:	f023 0301 	bic.w	r3, r3, #1
 800e6ae:	b2da      	uxtb	r2, r3
 800e6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e6b6:	e000      	b.n	800e6ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e6b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6ba:	4b08      	ldr	r3, [pc, #32]	; (800e6dc <prvProcessReceivedCommands+0x1c0>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	1d39      	adds	r1, r7, #4
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7fe fbc8 	bl	800ce58 <xQueueReceive>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	f47f af2a 	bne.w	800e524 <prvProcessReceivedCommands+0x8>
	}
}
 800e6d0:	bf00      	nop
 800e6d2:	bf00      	nop
 800e6d4:	3730      	adds	r7, #48	; 0x30
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	200010dc 	.word	0x200010dc

0800e6e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b088      	sub	sp, #32
 800e6e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e6e6:	e048      	b.n	800e77a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e6e8:	4b2d      	ldr	r3, [pc, #180]	; (800e7a0 <prvSwitchTimerLists+0xc0>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	68db      	ldr	r3, [r3, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6f2:	4b2b      	ldr	r3, [pc, #172]	; (800e7a0 <prvSwitchTimerLists+0xc0>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	68db      	ldr	r3, [r3, #12]
 800e6fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	3304      	adds	r3, #4
 800e700:	4618      	mov	r0, r3
 800e702:	f7fe f8e1 	bl	800c8c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	6a1b      	ldr	r3, [r3, #32]
 800e70a:	68f8      	ldr	r0, [r7, #12]
 800e70c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e714:	f003 0304 	and.w	r3, r3, #4
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d02e      	beq.n	800e77a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	699b      	ldr	r3, [r3, #24]
 800e720:	693a      	ldr	r2, [r7, #16]
 800e722:	4413      	add	r3, r2
 800e724:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d90e      	bls.n	800e74c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	68ba      	ldr	r2, [r7, #8]
 800e732:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	68fa      	ldr	r2, [r7, #12]
 800e738:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e73a:	4b19      	ldr	r3, [pc, #100]	; (800e7a0 <prvSwitchTimerLists+0xc0>)
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	3304      	adds	r3, #4
 800e742:	4619      	mov	r1, r3
 800e744:	4610      	mov	r0, r2
 800e746:	f7fe f886 	bl	800c856 <vListInsert>
 800e74a:	e016      	b.n	800e77a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e74c:	2300      	movs	r3, #0
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	2300      	movs	r3, #0
 800e752:	693a      	ldr	r2, [r7, #16]
 800e754:	2100      	movs	r1, #0
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	f7ff fd60 	bl	800e21c <xTimerGenericCommand>
 800e75c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d10a      	bne.n	800e77a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e768:	f383 8811 	msr	BASEPRI, r3
 800e76c:	f3bf 8f6f 	isb	sy
 800e770:	f3bf 8f4f 	dsb	sy
 800e774:	603b      	str	r3, [r7, #0]
}
 800e776:	bf00      	nop
 800e778:	e7fe      	b.n	800e778 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e77a:	4b09      	ldr	r3, [pc, #36]	; (800e7a0 <prvSwitchTimerLists+0xc0>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d1b1      	bne.n	800e6e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e784:	4b06      	ldr	r3, [pc, #24]	; (800e7a0 <prvSwitchTimerLists+0xc0>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e78a:	4b06      	ldr	r3, [pc, #24]	; (800e7a4 <prvSwitchTimerLists+0xc4>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4a04      	ldr	r2, [pc, #16]	; (800e7a0 <prvSwitchTimerLists+0xc0>)
 800e790:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e792:	4a04      	ldr	r2, [pc, #16]	; (800e7a4 <prvSwitchTimerLists+0xc4>)
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	6013      	str	r3, [r2, #0]
}
 800e798:	bf00      	nop
 800e79a:	3718      	adds	r7, #24
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	200010d4 	.word	0x200010d4
 800e7a4:	200010d8 	.word	0x200010d8

0800e7a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e7ae:	f000 f969 	bl	800ea84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e7b2:	4b15      	ldr	r3, [pc, #84]	; (800e808 <prvCheckForValidListAndQueue+0x60>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d120      	bne.n	800e7fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e7ba:	4814      	ldr	r0, [pc, #80]	; (800e80c <prvCheckForValidListAndQueue+0x64>)
 800e7bc:	f7fd fffa 	bl	800c7b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e7c0:	4813      	ldr	r0, [pc, #76]	; (800e810 <prvCheckForValidListAndQueue+0x68>)
 800e7c2:	f7fd fff7 	bl	800c7b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e7c6:	4b13      	ldr	r3, [pc, #76]	; (800e814 <prvCheckForValidListAndQueue+0x6c>)
 800e7c8:	4a10      	ldr	r2, [pc, #64]	; (800e80c <prvCheckForValidListAndQueue+0x64>)
 800e7ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e7cc:	4b12      	ldr	r3, [pc, #72]	; (800e818 <prvCheckForValidListAndQueue+0x70>)
 800e7ce:	4a10      	ldr	r2, [pc, #64]	; (800e810 <prvCheckForValidListAndQueue+0x68>)
 800e7d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	9300      	str	r3, [sp, #0]
 800e7d6:	4b11      	ldr	r3, [pc, #68]	; (800e81c <prvCheckForValidListAndQueue+0x74>)
 800e7d8:	4a11      	ldr	r2, [pc, #68]	; (800e820 <prvCheckForValidListAndQueue+0x78>)
 800e7da:	2110      	movs	r1, #16
 800e7dc:	200a      	movs	r0, #10
 800e7de:	f7fe f905 	bl	800c9ec <xQueueGenericCreateStatic>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	4a08      	ldr	r2, [pc, #32]	; (800e808 <prvCheckForValidListAndQueue+0x60>)
 800e7e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e7e8:	4b07      	ldr	r3, [pc, #28]	; (800e808 <prvCheckForValidListAndQueue+0x60>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d005      	beq.n	800e7fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e7f0:	4b05      	ldr	r3, [pc, #20]	; (800e808 <prvCheckForValidListAndQueue+0x60>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	490b      	ldr	r1, [pc, #44]	; (800e824 <prvCheckForValidListAndQueue+0x7c>)
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7fe fd1e 	bl	800d238 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e7fc:	f000 f972 	bl	800eae4 <vPortExitCritical>
}
 800e800:	bf00      	nop
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	200010dc 	.word	0x200010dc
 800e80c:	200010ac 	.word	0x200010ac
 800e810:	200010c0 	.word	0x200010c0
 800e814:	200010d4 	.word	0x200010d4
 800e818:	200010d8 	.word	0x200010d8
 800e81c:	20001188 	.word	0x20001188
 800e820:	200010e8 	.word	0x200010e8
 800e824:	080107dc 	.word	0x080107dc

0800e828 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e828:	b480      	push	{r7}
 800e82a:	b085      	sub	sp, #20
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	60f8      	str	r0, [r7, #12]
 800e830:	60b9      	str	r1, [r7, #8]
 800e832:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	3b04      	subs	r3, #4
 800e838:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	3b04      	subs	r3, #4
 800e846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	f023 0201 	bic.w	r2, r3, #1
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	3b04      	subs	r3, #4
 800e856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e858:	4a0c      	ldr	r2, [pc, #48]	; (800e88c <pxPortInitialiseStack+0x64>)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	3b14      	subs	r3, #20
 800e862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	3b04      	subs	r3, #4
 800e86e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f06f 0202 	mvn.w	r2, #2
 800e876:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	3b20      	subs	r3, #32
 800e87c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e87e:	68fb      	ldr	r3, [r7, #12]
}
 800e880:	4618      	mov	r0, r3
 800e882:	3714      	adds	r7, #20
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr
 800e88c:	0800e891 	.word	0x0800e891

0800e890 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e890:	b480      	push	{r7}
 800e892:	b085      	sub	sp, #20
 800e894:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e896:	2300      	movs	r3, #0
 800e898:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e89a:	4b12      	ldr	r3, [pc, #72]	; (800e8e4 <prvTaskExitError+0x54>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a2:	d00a      	beq.n	800e8ba <prvTaskExitError+0x2a>
	__asm volatile
 800e8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a8:	f383 8811 	msr	BASEPRI, r3
 800e8ac:	f3bf 8f6f 	isb	sy
 800e8b0:	f3bf 8f4f 	dsb	sy
 800e8b4:	60fb      	str	r3, [r7, #12]
}
 800e8b6:	bf00      	nop
 800e8b8:	e7fe      	b.n	800e8b8 <prvTaskExitError+0x28>
	__asm volatile
 800e8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8be:	f383 8811 	msr	BASEPRI, r3
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	f3bf 8f4f 	dsb	sy
 800e8ca:	60bb      	str	r3, [r7, #8]
}
 800e8cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e8ce:	bf00      	nop
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d0fc      	beq.n	800e8d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e8d6:	bf00      	nop
 800e8d8:	bf00      	nop
 800e8da:	3714      	adds	r7, #20
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr
 800e8e4:	20000104 	.word	0x20000104
	...

0800e8f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e8f0:	4b07      	ldr	r3, [pc, #28]	; (800e910 <pxCurrentTCBConst2>)
 800e8f2:	6819      	ldr	r1, [r3, #0]
 800e8f4:	6808      	ldr	r0, [r1, #0]
 800e8f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8fa:	f380 8809 	msr	PSP, r0
 800e8fe:	f3bf 8f6f 	isb	sy
 800e902:	f04f 0000 	mov.w	r0, #0
 800e906:	f380 8811 	msr	BASEPRI, r0
 800e90a:	4770      	bx	lr
 800e90c:	f3af 8000 	nop.w

0800e910 <pxCurrentTCBConst2>:
 800e910:	20000ba4 	.word	0x20000ba4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e914:	bf00      	nop
 800e916:	bf00      	nop

0800e918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e918:	4808      	ldr	r0, [pc, #32]	; (800e93c <prvPortStartFirstTask+0x24>)
 800e91a:	6800      	ldr	r0, [r0, #0]
 800e91c:	6800      	ldr	r0, [r0, #0]
 800e91e:	f380 8808 	msr	MSP, r0
 800e922:	f04f 0000 	mov.w	r0, #0
 800e926:	f380 8814 	msr	CONTROL, r0
 800e92a:	b662      	cpsie	i
 800e92c:	b661      	cpsie	f
 800e92e:	f3bf 8f4f 	dsb	sy
 800e932:	f3bf 8f6f 	isb	sy
 800e936:	df00      	svc	0
 800e938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e93a:	bf00      	nop
 800e93c:	e000ed08 	.word	0xe000ed08

0800e940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b086      	sub	sp, #24
 800e944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e946:	4b46      	ldr	r3, [pc, #280]	; (800ea60 <xPortStartScheduler+0x120>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a46      	ldr	r2, [pc, #280]	; (800ea64 <xPortStartScheduler+0x124>)
 800e94c:	4293      	cmp	r3, r2
 800e94e:	d10a      	bne.n	800e966 <xPortStartScheduler+0x26>
	__asm volatile
 800e950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e954:	f383 8811 	msr	BASEPRI, r3
 800e958:	f3bf 8f6f 	isb	sy
 800e95c:	f3bf 8f4f 	dsb	sy
 800e960:	613b      	str	r3, [r7, #16]
}
 800e962:	bf00      	nop
 800e964:	e7fe      	b.n	800e964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e966:	4b3e      	ldr	r3, [pc, #248]	; (800ea60 <xPortStartScheduler+0x120>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a3f      	ldr	r2, [pc, #252]	; (800ea68 <xPortStartScheduler+0x128>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d10a      	bne.n	800e986 <xPortStartScheduler+0x46>
	__asm volatile
 800e970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e974:	f383 8811 	msr	BASEPRI, r3
 800e978:	f3bf 8f6f 	isb	sy
 800e97c:	f3bf 8f4f 	dsb	sy
 800e980:	60fb      	str	r3, [r7, #12]
}
 800e982:	bf00      	nop
 800e984:	e7fe      	b.n	800e984 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e986:	4b39      	ldr	r3, [pc, #228]	; (800ea6c <xPortStartScheduler+0x12c>)
 800e988:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	22ff      	movs	r2, #255	; 0xff
 800e996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e9a0:	78fb      	ldrb	r3, [r7, #3]
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e9a8:	b2da      	uxtb	r2, r3
 800e9aa:	4b31      	ldr	r3, [pc, #196]	; (800ea70 <xPortStartScheduler+0x130>)
 800e9ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e9ae:	4b31      	ldr	r3, [pc, #196]	; (800ea74 <xPortStartScheduler+0x134>)
 800e9b0:	2207      	movs	r2, #7
 800e9b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9b4:	e009      	b.n	800e9ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e9b6:	4b2f      	ldr	r3, [pc, #188]	; (800ea74 <xPortStartScheduler+0x134>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	3b01      	subs	r3, #1
 800e9bc:	4a2d      	ldr	r2, [pc, #180]	; (800ea74 <xPortStartScheduler+0x134>)
 800e9be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e9c0:	78fb      	ldrb	r3, [r7, #3]
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9ca:	78fb      	ldrb	r3, [r7, #3]
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9d2:	2b80      	cmp	r3, #128	; 0x80
 800e9d4:	d0ef      	beq.n	800e9b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e9d6:	4b27      	ldr	r3, [pc, #156]	; (800ea74 <xPortStartScheduler+0x134>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f1c3 0307 	rsb	r3, r3, #7
 800e9de:	2b04      	cmp	r3, #4
 800e9e0:	d00a      	beq.n	800e9f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e6:	f383 8811 	msr	BASEPRI, r3
 800e9ea:	f3bf 8f6f 	isb	sy
 800e9ee:	f3bf 8f4f 	dsb	sy
 800e9f2:	60bb      	str	r3, [r7, #8]
}
 800e9f4:	bf00      	nop
 800e9f6:	e7fe      	b.n	800e9f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e9f8:	4b1e      	ldr	r3, [pc, #120]	; (800ea74 <xPortStartScheduler+0x134>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	021b      	lsls	r3, r3, #8
 800e9fe:	4a1d      	ldr	r2, [pc, #116]	; (800ea74 <xPortStartScheduler+0x134>)
 800ea00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ea02:	4b1c      	ldr	r3, [pc, #112]	; (800ea74 <xPortStartScheduler+0x134>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ea0a:	4a1a      	ldr	r2, [pc, #104]	; (800ea74 <xPortStartScheduler+0x134>)
 800ea0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	b2da      	uxtb	r2, r3
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ea16:	4b18      	ldr	r3, [pc, #96]	; (800ea78 <xPortStartScheduler+0x138>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4a17      	ldr	r2, [pc, #92]	; (800ea78 <xPortStartScheduler+0x138>)
 800ea1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ea20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ea22:	4b15      	ldr	r3, [pc, #84]	; (800ea78 <xPortStartScheduler+0x138>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4a14      	ldr	r2, [pc, #80]	; (800ea78 <xPortStartScheduler+0x138>)
 800ea28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ea2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ea2e:	f000 f8dd 	bl	800ebec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ea32:	4b12      	ldr	r3, [pc, #72]	; (800ea7c <xPortStartScheduler+0x13c>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ea38:	f000 f8fc 	bl	800ec34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ea3c:	4b10      	ldr	r3, [pc, #64]	; (800ea80 <xPortStartScheduler+0x140>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a0f      	ldr	r2, [pc, #60]	; (800ea80 <xPortStartScheduler+0x140>)
 800ea42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ea46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ea48:	f7ff ff66 	bl	800e918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ea4c:	f7ff f82a 	bl	800daa4 <vTaskSwitchContext>
	prvTaskExitError();
 800ea50:	f7ff ff1e 	bl	800e890 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ea54:	2300      	movs	r3, #0
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3718      	adds	r7, #24
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	e000ed00 	.word	0xe000ed00
 800ea64:	410fc271 	.word	0x410fc271
 800ea68:	410fc270 	.word	0x410fc270
 800ea6c:	e000e400 	.word	0xe000e400
 800ea70:	200011d8 	.word	0x200011d8
 800ea74:	200011dc 	.word	0x200011dc
 800ea78:	e000ed20 	.word	0xe000ed20
 800ea7c:	20000104 	.word	0x20000104
 800ea80:	e000ef34 	.word	0xe000ef34

0800ea84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
	__asm volatile
 800ea8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8e:	f383 8811 	msr	BASEPRI, r3
 800ea92:	f3bf 8f6f 	isb	sy
 800ea96:	f3bf 8f4f 	dsb	sy
 800ea9a:	607b      	str	r3, [r7, #4]
}
 800ea9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ea9e:	4b0f      	ldr	r3, [pc, #60]	; (800eadc <vPortEnterCritical+0x58>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	4a0d      	ldr	r2, [pc, #52]	; (800eadc <vPortEnterCritical+0x58>)
 800eaa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eaa8:	4b0c      	ldr	r3, [pc, #48]	; (800eadc <vPortEnterCritical+0x58>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d10f      	bne.n	800ead0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eab0:	4b0b      	ldr	r3, [pc, #44]	; (800eae0 <vPortEnterCritical+0x5c>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	b2db      	uxtb	r3, r3
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d00a      	beq.n	800ead0 <vPortEnterCritical+0x4c>
	__asm volatile
 800eaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eabe:	f383 8811 	msr	BASEPRI, r3
 800eac2:	f3bf 8f6f 	isb	sy
 800eac6:	f3bf 8f4f 	dsb	sy
 800eaca:	603b      	str	r3, [r7, #0]
}
 800eacc:	bf00      	nop
 800eace:	e7fe      	b.n	800eace <vPortEnterCritical+0x4a>
	}
}
 800ead0:	bf00      	nop
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr
 800eadc:	20000104 	.word	0x20000104
 800eae0:	e000ed04 	.word	0xe000ed04

0800eae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eaea:	4b12      	ldr	r3, [pc, #72]	; (800eb34 <vPortExitCritical+0x50>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d10a      	bne.n	800eb08 <vPortExitCritical+0x24>
	__asm volatile
 800eaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf6:	f383 8811 	msr	BASEPRI, r3
 800eafa:	f3bf 8f6f 	isb	sy
 800eafe:	f3bf 8f4f 	dsb	sy
 800eb02:	607b      	str	r3, [r7, #4]
}
 800eb04:	bf00      	nop
 800eb06:	e7fe      	b.n	800eb06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eb08:	4b0a      	ldr	r3, [pc, #40]	; (800eb34 <vPortExitCritical+0x50>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	3b01      	subs	r3, #1
 800eb0e:	4a09      	ldr	r2, [pc, #36]	; (800eb34 <vPortExitCritical+0x50>)
 800eb10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eb12:	4b08      	ldr	r3, [pc, #32]	; (800eb34 <vPortExitCritical+0x50>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d105      	bne.n	800eb26 <vPortExitCritical+0x42>
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	f383 8811 	msr	BASEPRI, r3
}
 800eb24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eb26:	bf00      	nop
 800eb28:	370c      	adds	r7, #12
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	20000104 	.word	0x20000104
	...

0800eb40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eb40:	f3ef 8009 	mrs	r0, PSP
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	4b15      	ldr	r3, [pc, #84]	; (800eba0 <pxCurrentTCBConst>)
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	f01e 0f10 	tst.w	lr, #16
 800eb50:	bf08      	it	eq
 800eb52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eb56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb5a:	6010      	str	r0, [r2, #0]
 800eb5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eb60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eb64:	f380 8811 	msr	BASEPRI, r0
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	f3bf 8f6f 	isb	sy
 800eb70:	f7fe ff98 	bl	800daa4 <vTaskSwitchContext>
 800eb74:	f04f 0000 	mov.w	r0, #0
 800eb78:	f380 8811 	msr	BASEPRI, r0
 800eb7c:	bc09      	pop	{r0, r3}
 800eb7e:	6819      	ldr	r1, [r3, #0]
 800eb80:	6808      	ldr	r0, [r1, #0]
 800eb82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb86:	f01e 0f10 	tst.w	lr, #16
 800eb8a:	bf08      	it	eq
 800eb8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eb90:	f380 8809 	msr	PSP, r0
 800eb94:	f3bf 8f6f 	isb	sy
 800eb98:	4770      	bx	lr
 800eb9a:	bf00      	nop
 800eb9c:	f3af 8000 	nop.w

0800eba0 <pxCurrentTCBConst>:
 800eba0:	20000ba4 	.word	0x20000ba4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eba4:	bf00      	nop
 800eba6:	bf00      	nop

0800eba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
	__asm volatile
 800ebae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb2:	f383 8811 	msr	BASEPRI, r3
 800ebb6:	f3bf 8f6f 	isb	sy
 800ebba:	f3bf 8f4f 	dsb	sy
 800ebbe:	607b      	str	r3, [r7, #4]
}
 800ebc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ebc2:	f7fe feb5 	bl	800d930 <xTaskIncrementTick>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d003      	beq.n	800ebd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ebcc:	4b06      	ldr	r3, [pc, #24]	; (800ebe8 <xPortSysTickHandler+0x40>)
 800ebce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebd2:	601a      	str	r2, [r3, #0]
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	f383 8811 	msr	BASEPRI, r3
}
 800ebde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ebe0:	bf00      	nop
 800ebe2:	3708      	adds	r7, #8
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	e000ed04 	.word	0xe000ed04

0800ebec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ebec:	b480      	push	{r7}
 800ebee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ebf0:	4b0b      	ldr	r3, [pc, #44]	; (800ec20 <vPortSetupTimerInterrupt+0x34>)
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ebf6:	4b0b      	ldr	r3, [pc, #44]	; (800ec24 <vPortSetupTimerInterrupt+0x38>)
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ebfc:	4b0a      	ldr	r3, [pc, #40]	; (800ec28 <vPortSetupTimerInterrupt+0x3c>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4a0a      	ldr	r2, [pc, #40]	; (800ec2c <vPortSetupTimerInterrupt+0x40>)
 800ec02:	fba2 2303 	umull	r2, r3, r2, r3
 800ec06:	099b      	lsrs	r3, r3, #6
 800ec08:	4a09      	ldr	r2, [pc, #36]	; (800ec30 <vPortSetupTimerInterrupt+0x44>)
 800ec0a:	3b01      	subs	r3, #1
 800ec0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ec0e:	4b04      	ldr	r3, [pc, #16]	; (800ec20 <vPortSetupTimerInterrupt+0x34>)
 800ec10:	2207      	movs	r2, #7
 800ec12:	601a      	str	r2, [r3, #0]
}
 800ec14:	bf00      	nop
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop
 800ec20:	e000e010 	.word	0xe000e010
 800ec24:	e000e018 	.word	0xe000e018
 800ec28:	2000006c 	.word	0x2000006c
 800ec2c:	10624dd3 	.word	0x10624dd3
 800ec30:	e000e014 	.word	0xe000e014

0800ec34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ec34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ec44 <vPortEnableVFP+0x10>
 800ec38:	6801      	ldr	r1, [r0, #0]
 800ec3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ec3e:	6001      	str	r1, [r0, #0]
 800ec40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ec42:	bf00      	nop
 800ec44:	e000ed88 	.word	0xe000ed88

0800ec48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ec48:	b480      	push	{r7}
 800ec4a:	b085      	sub	sp, #20
 800ec4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ec4e:	f3ef 8305 	mrs	r3, IPSR
 800ec52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2b0f      	cmp	r3, #15
 800ec58:	d914      	bls.n	800ec84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ec5a:	4a17      	ldr	r2, [pc, #92]	; (800ecb8 <vPortValidateInterruptPriority+0x70>)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	4413      	add	r3, r2
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec64:	4b15      	ldr	r3, [pc, #84]	; (800ecbc <vPortValidateInterruptPriority+0x74>)
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	7afa      	ldrb	r2, [r7, #11]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d20a      	bcs.n	800ec84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ec6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	607b      	str	r3, [r7, #4]
}
 800ec80:	bf00      	nop
 800ec82:	e7fe      	b.n	800ec82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec84:	4b0e      	ldr	r3, [pc, #56]	; (800ecc0 <vPortValidateInterruptPriority+0x78>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ec8c:	4b0d      	ldr	r3, [pc, #52]	; (800ecc4 <vPortValidateInterruptPriority+0x7c>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d90a      	bls.n	800ecaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ec94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec98:	f383 8811 	msr	BASEPRI, r3
 800ec9c:	f3bf 8f6f 	isb	sy
 800eca0:	f3bf 8f4f 	dsb	sy
 800eca4:	603b      	str	r3, [r7, #0]
}
 800eca6:	bf00      	nop
 800eca8:	e7fe      	b.n	800eca8 <vPortValidateInterruptPriority+0x60>
	}
 800ecaa:	bf00      	nop
 800ecac:	3714      	adds	r7, #20
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	e000e3f0 	.word	0xe000e3f0
 800ecbc:	200011d8 	.word	0x200011d8
 800ecc0:	e000ed0c 	.word	0xe000ed0c
 800ecc4:	200011dc 	.word	0x200011dc

0800ecc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b08a      	sub	sp, #40	; 0x28
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ecd4:	f7fe fd70 	bl	800d7b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ecd8:	4b5b      	ldr	r3, [pc, #364]	; (800ee48 <pvPortMalloc+0x180>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d101      	bne.n	800ece4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ece0:	f000 f920 	bl	800ef24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ece4:	4b59      	ldr	r3, [pc, #356]	; (800ee4c <pvPortMalloc+0x184>)
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	4013      	ands	r3, r2
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	f040 8093 	bne.w	800ee18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d01d      	beq.n	800ed34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ecf8:	2208      	movs	r2, #8
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f003 0307 	and.w	r3, r3, #7
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d014      	beq.n	800ed34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f023 0307 	bic.w	r3, r3, #7
 800ed10:	3308      	adds	r3, #8
 800ed12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f003 0307 	and.w	r3, r3, #7
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d00a      	beq.n	800ed34 <pvPortMalloc+0x6c>
	__asm volatile
 800ed1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed22:	f383 8811 	msr	BASEPRI, r3
 800ed26:	f3bf 8f6f 	isb	sy
 800ed2a:	f3bf 8f4f 	dsb	sy
 800ed2e:	617b      	str	r3, [r7, #20]
}
 800ed30:	bf00      	nop
 800ed32:	e7fe      	b.n	800ed32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d06e      	beq.n	800ee18 <pvPortMalloc+0x150>
 800ed3a:	4b45      	ldr	r3, [pc, #276]	; (800ee50 <pvPortMalloc+0x188>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d869      	bhi.n	800ee18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ed44:	4b43      	ldr	r3, [pc, #268]	; (800ee54 <pvPortMalloc+0x18c>)
 800ed46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ed48:	4b42      	ldr	r3, [pc, #264]	; (800ee54 <pvPortMalloc+0x18c>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed4e:	e004      	b.n	800ed5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ed50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ed54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d903      	bls.n	800ed6c <pvPortMalloc+0xa4>
 800ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d1f1      	bne.n	800ed50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed6c:	4b36      	ldr	r3, [pc, #216]	; (800ee48 <pvPortMalloc+0x180>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d050      	beq.n	800ee18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed76:	6a3b      	ldr	r3, [r7, #32]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	2208      	movs	r2, #8
 800ed7c:	4413      	add	r3, r2
 800ed7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	6a3b      	ldr	r3, [r7, #32]
 800ed86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8a:	685a      	ldr	r2, [r3, #4]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	1ad2      	subs	r2, r2, r3
 800ed90:	2308      	movs	r3, #8
 800ed92:	005b      	lsls	r3, r3, #1
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d91f      	bls.n	800edd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	f003 0307 	and.w	r3, r3, #7
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d00a      	beq.n	800edc0 <pvPortMalloc+0xf8>
	__asm volatile
 800edaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edae:	f383 8811 	msr	BASEPRI, r3
 800edb2:	f3bf 8f6f 	isb	sy
 800edb6:	f3bf 8f4f 	dsb	sy
 800edba:	613b      	str	r3, [r7, #16]
}
 800edbc:	bf00      	nop
 800edbe:	e7fe      	b.n	800edbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800edc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc2:	685a      	ldr	r2, [r3, #4]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	1ad2      	subs	r2, r2, r3
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800edcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800edd2:	69b8      	ldr	r0, [r7, #24]
 800edd4:	f000 f908 	bl	800efe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800edd8:	4b1d      	ldr	r3, [pc, #116]	; (800ee50 <pvPortMalloc+0x188>)
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	1ad3      	subs	r3, r2, r3
 800ede2:	4a1b      	ldr	r2, [pc, #108]	; (800ee50 <pvPortMalloc+0x188>)
 800ede4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ede6:	4b1a      	ldr	r3, [pc, #104]	; (800ee50 <pvPortMalloc+0x188>)
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	4b1b      	ldr	r3, [pc, #108]	; (800ee58 <pvPortMalloc+0x190>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d203      	bcs.n	800edfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800edf2:	4b17      	ldr	r3, [pc, #92]	; (800ee50 <pvPortMalloc+0x188>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a18      	ldr	r2, [pc, #96]	; (800ee58 <pvPortMalloc+0x190>)
 800edf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800edfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfc:	685a      	ldr	r2, [r3, #4]
 800edfe:	4b13      	ldr	r3, [pc, #76]	; (800ee4c <pvPortMalloc+0x184>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	431a      	orrs	r2, r3
 800ee04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ee08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ee0e:	4b13      	ldr	r3, [pc, #76]	; (800ee5c <pvPortMalloc+0x194>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	3301      	adds	r3, #1
 800ee14:	4a11      	ldr	r2, [pc, #68]	; (800ee5c <pvPortMalloc+0x194>)
 800ee16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ee18:	f7fe fcdc 	bl	800d7d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	f003 0307 	and.w	r3, r3, #7
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00a      	beq.n	800ee3c <pvPortMalloc+0x174>
	__asm volatile
 800ee26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2a:	f383 8811 	msr	BASEPRI, r3
 800ee2e:	f3bf 8f6f 	isb	sy
 800ee32:	f3bf 8f4f 	dsb	sy
 800ee36:	60fb      	str	r3, [r7, #12]
}
 800ee38:	bf00      	nop
 800ee3a:	e7fe      	b.n	800ee3a <pvPortMalloc+0x172>
	return pvReturn;
 800ee3c:	69fb      	ldr	r3, [r7, #28]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3728      	adds	r7, #40	; 0x28
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	2001a1e8 	.word	0x2001a1e8
 800ee4c:	2001a1fc 	.word	0x2001a1fc
 800ee50:	2001a1ec 	.word	0x2001a1ec
 800ee54:	2001a1e0 	.word	0x2001a1e0
 800ee58:	2001a1f0 	.word	0x2001a1f0
 800ee5c:	2001a1f4 	.word	0x2001a1f4

0800ee60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b086      	sub	sp, #24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d04d      	beq.n	800ef0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee72:	2308      	movs	r3, #8
 800ee74:	425b      	negs	r3, r3
 800ee76:	697a      	ldr	r2, [r7, #20]
 800ee78:	4413      	add	r3, r2
 800ee7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	685a      	ldr	r2, [r3, #4]
 800ee84:	4b24      	ldr	r3, [pc, #144]	; (800ef18 <vPortFree+0xb8>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4013      	ands	r3, r2
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d10a      	bne.n	800eea4 <vPortFree+0x44>
	__asm volatile
 800ee8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee92:	f383 8811 	msr	BASEPRI, r3
 800ee96:	f3bf 8f6f 	isb	sy
 800ee9a:	f3bf 8f4f 	dsb	sy
 800ee9e:	60fb      	str	r3, [r7, #12]
}
 800eea0:	bf00      	nop
 800eea2:	e7fe      	b.n	800eea2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d00a      	beq.n	800eec2 <vPortFree+0x62>
	__asm volatile
 800eeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb0:	f383 8811 	msr	BASEPRI, r3
 800eeb4:	f3bf 8f6f 	isb	sy
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	60bb      	str	r3, [r7, #8]
}
 800eebe:	bf00      	nop
 800eec0:	e7fe      	b.n	800eec0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	685a      	ldr	r2, [r3, #4]
 800eec6:	4b14      	ldr	r3, [pc, #80]	; (800ef18 <vPortFree+0xb8>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4013      	ands	r3, r2
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d01e      	beq.n	800ef0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d11a      	bne.n	800ef0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	685a      	ldr	r2, [r3, #4]
 800eedc:	4b0e      	ldr	r3, [pc, #56]	; (800ef18 <vPortFree+0xb8>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	43db      	mvns	r3, r3
 800eee2:	401a      	ands	r2, r3
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eee8:	f7fe fc66 	bl	800d7b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	685a      	ldr	r2, [r3, #4]
 800eef0:	4b0a      	ldr	r3, [pc, #40]	; (800ef1c <vPortFree+0xbc>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4413      	add	r3, r2
 800eef6:	4a09      	ldr	r2, [pc, #36]	; (800ef1c <vPortFree+0xbc>)
 800eef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eefa:	6938      	ldr	r0, [r7, #16]
 800eefc:	f000 f874 	bl	800efe8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ef00:	4b07      	ldr	r3, [pc, #28]	; (800ef20 <vPortFree+0xc0>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	3301      	adds	r3, #1
 800ef06:	4a06      	ldr	r2, [pc, #24]	; (800ef20 <vPortFree+0xc0>)
 800ef08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ef0a:	f7fe fc63 	bl	800d7d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ef0e:	bf00      	nop
 800ef10:	3718      	adds	r7, #24
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	2001a1fc 	.word	0x2001a1fc
 800ef1c:	2001a1ec 	.word	0x2001a1ec
 800ef20:	2001a1f8 	.word	0x2001a1f8

0800ef24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ef24:	b480      	push	{r7}
 800ef26:	b085      	sub	sp, #20
 800ef28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ef2a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800ef2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ef30:	4b27      	ldr	r3, [pc, #156]	; (800efd0 <prvHeapInit+0xac>)
 800ef32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f003 0307 	and.w	r3, r3, #7
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00c      	beq.n	800ef58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	3307      	adds	r3, #7
 800ef42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f023 0307 	bic.w	r3, r3, #7
 800ef4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ef4c:	68ba      	ldr	r2, [r7, #8]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	1ad3      	subs	r3, r2, r3
 800ef52:	4a1f      	ldr	r2, [pc, #124]	; (800efd0 <prvHeapInit+0xac>)
 800ef54:	4413      	add	r3, r2
 800ef56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef5c:	4a1d      	ldr	r2, [pc, #116]	; (800efd4 <prvHeapInit+0xb0>)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef62:	4b1c      	ldr	r3, [pc, #112]	; (800efd4 <prvHeapInit+0xb0>)
 800ef64:	2200      	movs	r2, #0
 800ef66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	68ba      	ldr	r2, [r7, #8]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef70:	2208      	movs	r2, #8
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	1a9b      	subs	r3, r3, r2
 800ef76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f023 0307 	bic.w	r3, r3, #7
 800ef7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	4a15      	ldr	r2, [pc, #84]	; (800efd8 <prvHeapInit+0xb4>)
 800ef84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef86:	4b14      	ldr	r3, [pc, #80]	; (800efd8 <prvHeapInit+0xb4>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ef8e:	4b12      	ldr	r3, [pc, #72]	; (800efd8 <prvHeapInit+0xb4>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2200      	movs	r2, #0
 800ef94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	1ad2      	subs	r2, r2, r3
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800efa4:	4b0c      	ldr	r3, [pc, #48]	; (800efd8 <prvHeapInit+0xb4>)
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	4a0a      	ldr	r2, [pc, #40]	; (800efdc <prvHeapInit+0xb8>)
 800efb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	4a09      	ldr	r2, [pc, #36]	; (800efe0 <prvHeapInit+0xbc>)
 800efba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800efbc:	4b09      	ldr	r3, [pc, #36]	; (800efe4 <prvHeapInit+0xc0>)
 800efbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800efc2:	601a      	str	r2, [r3, #0]
}
 800efc4:	bf00      	nop
 800efc6:	3714      	adds	r7, #20
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr
 800efd0:	200011e0 	.word	0x200011e0
 800efd4:	2001a1e0 	.word	0x2001a1e0
 800efd8:	2001a1e8 	.word	0x2001a1e8
 800efdc:	2001a1f0 	.word	0x2001a1f0
 800efe0:	2001a1ec 	.word	0x2001a1ec
 800efe4:	2001a1fc 	.word	0x2001a1fc

0800efe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800efe8:	b480      	push	{r7}
 800efea:	b085      	sub	sp, #20
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eff0:	4b28      	ldr	r3, [pc, #160]	; (800f094 <prvInsertBlockIntoFreeList+0xac>)
 800eff2:	60fb      	str	r3, [r7, #12]
 800eff4:	e002      	b.n	800effc <prvInsertBlockIntoFreeList+0x14>
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	60fb      	str	r3, [r7, #12]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	429a      	cmp	r2, r3
 800f004:	d8f7      	bhi.n	800eff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	68ba      	ldr	r2, [r7, #8]
 800f010:	4413      	add	r3, r2
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	429a      	cmp	r2, r3
 800f016:	d108      	bne.n	800f02a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	685a      	ldr	r2, [r3, #4]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	441a      	add	r2, r3
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	68ba      	ldr	r2, [r7, #8]
 800f034:	441a      	add	r2, r3
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d118      	bne.n	800f070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	4b15      	ldr	r3, [pc, #84]	; (800f098 <prvInsertBlockIntoFreeList+0xb0>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	429a      	cmp	r2, r3
 800f048:	d00d      	beq.n	800f066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	685a      	ldr	r2, [r3, #4]
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	441a      	add	r2, r3
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	601a      	str	r2, [r3, #0]
 800f064:	e008      	b.n	800f078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f066:	4b0c      	ldr	r3, [pc, #48]	; (800f098 <prvInsertBlockIntoFreeList+0xb0>)
 800f068:	681a      	ldr	r2, [r3, #0]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	601a      	str	r2, [r3, #0]
 800f06e:	e003      	b.n	800f078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f078:	68fa      	ldr	r2, [r7, #12]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d002      	beq.n	800f086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f086:	bf00      	nop
 800f088:	3714      	adds	r7, #20
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	2001a1e0 	.word	0x2001a1e0
 800f098:	2001a1e8 	.word	0x2001a1e8

0800f09c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	4912      	ldr	r1, [pc, #72]	; (800f0ec <MX_USB_DEVICE_Init+0x50>)
 800f0a4:	4812      	ldr	r0, [pc, #72]	; (800f0f0 <MX_USB_DEVICE_Init+0x54>)
 800f0a6:	f7fb ff23 	bl	800aef0 <USBD_Init>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d001      	beq.n	800f0b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f0b0:	f7f1 ffbf 	bl	8001032 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f0b4:	490f      	ldr	r1, [pc, #60]	; (800f0f4 <MX_USB_DEVICE_Init+0x58>)
 800f0b6:	480e      	ldr	r0, [pc, #56]	; (800f0f0 <MX_USB_DEVICE_Init+0x54>)
 800f0b8:	f7fb ff4a 	bl	800af50 <USBD_RegisterClass>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d001      	beq.n	800f0c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f0c2:	f7f1 ffb6 	bl	8001032 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f0c6:	490c      	ldr	r1, [pc, #48]	; (800f0f8 <MX_USB_DEVICE_Init+0x5c>)
 800f0c8:	4809      	ldr	r0, [pc, #36]	; (800f0f0 <MX_USB_DEVICE_Init+0x54>)
 800f0ca:	f7fb fe81 	bl	800add0 <USBD_CDC_RegisterInterface>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d001      	beq.n	800f0d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f0d4:	f7f1 ffad 	bl	8001032 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f0d8:	4805      	ldr	r0, [pc, #20]	; (800f0f0 <MX_USB_DEVICE_Init+0x54>)
 800f0da:	f7fb ff6f 	bl	800afbc <USBD_Start>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d001      	beq.n	800f0e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f0e4:	f7f1 ffa5 	bl	8001032 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f0e8:	bf00      	nop
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	2000011c 	.word	0x2000011c
 800f0f0:	2001a200 	.word	0x2001a200
 800f0f4:	20000084 	.word	0x20000084
 800f0f8:	20000108 	.word	0x20000108

0800f0fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f100:	2200      	movs	r2, #0
 800f102:	4905      	ldr	r1, [pc, #20]	; (800f118 <CDC_Init_FS+0x1c>)
 800f104:	4805      	ldr	r0, [pc, #20]	; (800f11c <CDC_Init_FS+0x20>)
 800f106:	f7fb fe7d 	bl	800ae04 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f10a:	4905      	ldr	r1, [pc, #20]	; (800f120 <CDC_Init_FS+0x24>)
 800f10c:	4803      	ldr	r0, [pc, #12]	; (800f11c <CDC_Init_FS+0x20>)
 800f10e:	f7fb fe9b 	bl	800ae48 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f112:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f114:	4618      	mov	r0, r3
 800f116:	bd80      	pop	{r7, pc}
 800f118:	2001acdc 	.word	0x2001acdc
 800f11c:	2001a200 	.word	0x2001a200
 800f120:	2001a4dc 	.word	0x2001a4dc

0800f124 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f124:	b480      	push	{r7}
 800f126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f128:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr

0800f134 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f134:	b480      	push	{r7}
 800f136:	b083      	sub	sp, #12
 800f138:	af00      	add	r7, sp, #0
 800f13a:	4603      	mov	r3, r0
 800f13c:	6039      	str	r1, [r7, #0]
 800f13e:	71fb      	strb	r3, [r7, #7]
 800f140:	4613      	mov	r3, r2
 800f142:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f144:	79fb      	ldrb	r3, [r7, #7]
 800f146:	2b23      	cmp	r3, #35	; 0x23
 800f148:	d84a      	bhi.n	800f1e0 <CDC_Control_FS+0xac>
 800f14a:	a201      	add	r2, pc, #4	; (adr r2, 800f150 <CDC_Control_FS+0x1c>)
 800f14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f150:	0800f1e1 	.word	0x0800f1e1
 800f154:	0800f1e1 	.word	0x0800f1e1
 800f158:	0800f1e1 	.word	0x0800f1e1
 800f15c:	0800f1e1 	.word	0x0800f1e1
 800f160:	0800f1e1 	.word	0x0800f1e1
 800f164:	0800f1e1 	.word	0x0800f1e1
 800f168:	0800f1e1 	.word	0x0800f1e1
 800f16c:	0800f1e1 	.word	0x0800f1e1
 800f170:	0800f1e1 	.word	0x0800f1e1
 800f174:	0800f1e1 	.word	0x0800f1e1
 800f178:	0800f1e1 	.word	0x0800f1e1
 800f17c:	0800f1e1 	.word	0x0800f1e1
 800f180:	0800f1e1 	.word	0x0800f1e1
 800f184:	0800f1e1 	.word	0x0800f1e1
 800f188:	0800f1e1 	.word	0x0800f1e1
 800f18c:	0800f1e1 	.word	0x0800f1e1
 800f190:	0800f1e1 	.word	0x0800f1e1
 800f194:	0800f1e1 	.word	0x0800f1e1
 800f198:	0800f1e1 	.word	0x0800f1e1
 800f19c:	0800f1e1 	.word	0x0800f1e1
 800f1a0:	0800f1e1 	.word	0x0800f1e1
 800f1a4:	0800f1e1 	.word	0x0800f1e1
 800f1a8:	0800f1e1 	.word	0x0800f1e1
 800f1ac:	0800f1e1 	.word	0x0800f1e1
 800f1b0:	0800f1e1 	.word	0x0800f1e1
 800f1b4:	0800f1e1 	.word	0x0800f1e1
 800f1b8:	0800f1e1 	.word	0x0800f1e1
 800f1bc:	0800f1e1 	.word	0x0800f1e1
 800f1c0:	0800f1e1 	.word	0x0800f1e1
 800f1c4:	0800f1e1 	.word	0x0800f1e1
 800f1c8:	0800f1e1 	.word	0x0800f1e1
 800f1cc:	0800f1e1 	.word	0x0800f1e1
 800f1d0:	0800f1e1 	.word	0x0800f1e1
 800f1d4:	0800f1e1 	.word	0x0800f1e1
 800f1d8:	0800f1e1 	.word	0x0800f1e1
 800f1dc:	0800f1e1 	.word	0x0800f1e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f1e0:	bf00      	nop
  }

  return (USBD_OK);
 800f1e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f1fa:	6879      	ldr	r1, [r7, #4]
 800f1fc:	4805      	ldr	r0, [pc, #20]	; (800f214 <CDC_Receive_FS+0x24>)
 800f1fe:	f7fb fe23 	bl	800ae48 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f202:	4804      	ldr	r0, [pc, #16]	; (800f214 <CDC_Receive_FS+0x24>)
 800f204:	f7fb fe3e 	bl	800ae84 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f208:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3708      	adds	r7, #8
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	2001a200 	.word	0x2001a200

0800f218 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f218:	b480      	push	{r7}
 800f21a:	b087      	sub	sp, #28
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	4613      	mov	r3, r2
 800f224:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f226:	2300      	movs	r3, #0
 800f228:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f22a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f22e:	4618      	mov	r0, r3
 800f230:	371c      	adds	r7, #28
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr
	...

0800f23c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
 800f242:	4603      	mov	r3, r0
 800f244:	6039      	str	r1, [r7, #0]
 800f246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	2212      	movs	r2, #18
 800f24c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f24e:	4b03      	ldr	r3, [pc, #12]	; (800f25c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f250:	4618      	mov	r0, r3
 800f252:	370c      	adds	r7, #12
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr
 800f25c:	20000138 	.word	0x20000138

0800f260 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	4603      	mov	r3, r0
 800f268:	6039      	str	r1, [r7, #0]
 800f26a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	2204      	movs	r2, #4
 800f270:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f272:	4b03      	ldr	r3, [pc, #12]	; (800f280 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f274:	4618      	mov	r0, r3
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr
 800f280:	2000014c 	.word	0x2000014c

0800f284 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	4603      	mov	r3, r0
 800f28c:	6039      	str	r1, [r7, #0]
 800f28e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f290:	79fb      	ldrb	r3, [r7, #7]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d105      	bne.n	800f2a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f296:	683a      	ldr	r2, [r7, #0]
 800f298:	4907      	ldr	r1, [pc, #28]	; (800f2b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f29a:	4808      	ldr	r0, [pc, #32]	; (800f2bc <USBD_FS_ProductStrDescriptor+0x38>)
 800f29c:	f7fd f83a 	bl	800c314 <USBD_GetString>
 800f2a0:	e004      	b.n	800f2ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2a2:	683a      	ldr	r2, [r7, #0]
 800f2a4:	4904      	ldr	r1, [pc, #16]	; (800f2b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f2a6:	4805      	ldr	r0, [pc, #20]	; (800f2bc <USBD_FS_ProductStrDescriptor+0x38>)
 800f2a8:	f7fd f834 	bl	800c314 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f2ac:	4b02      	ldr	r3, [pc, #8]	; (800f2b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3708      	adds	r7, #8
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	2001b4dc 	.word	0x2001b4dc
 800f2bc:	080107e4 	.word	0x080107e4

0800f2c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	6039      	str	r1, [r7, #0]
 800f2ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f2cc:	683a      	ldr	r2, [r7, #0]
 800f2ce:	4904      	ldr	r1, [pc, #16]	; (800f2e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f2d0:	4804      	ldr	r0, [pc, #16]	; (800f2e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f2d2:	f7fd f81f 	bl	800c314 <USBD_GetString>
  return USBD_StrDesc;
 800f2d6:	4b02      	ldr	r3, [pc, #8]	; (800f2e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	2001b4dc 	.word	0x2001b4dc
 800f2e4:	080107fc 	.word	0x080107fc

0800f2e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	6039      	str	r1, [r7, #0]
 800f2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	221a      	movs	r2, #26
 800f2f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f2fa:	f000 f843 	bl	800f384 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f2fe:	4b02      	ldr	r3, [pc, #8]	; (800f308 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f300:	4618      	mov	r0, r3
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	20000150 	.word	0x20000150

0800f30c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	4603      	mov	r3, r0
 800f314:	6039      	str	r1, [r7, #0]
 800f316:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f318:	79fb      	ldrb	r3, [r7, #7]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d105      	bne.n	800f32a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f31e:	683a      	ldr	r2, [r7, #0]
 800f320:	4907      	ldr	r1, [pc, #28]	; (800f340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f322:	4808      	ldr	r0, [pc, #32]	; (800f344 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f324:	f7fc fff6 	bl	800c314 <USBD_GetString>
 800f328:	e004      	b.n	800f334 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f32a:	683a      	ldr	r2, [r7, #0]
 800f32c:	4904      	ldr	r1, [pc, #16]	; (800f340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f32e:	4805      	ldr	r0, [pc, #20]	; (800f344 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f330:	f7fc fff0 	bl	800c314 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f334:	4b02      	ldr	r3, [pc, #8]	; (800f340 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f336:	4618      	mov	r0, r3
 800f338:	3708      	adds	r7, #8
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	2001b4dc 	.word	0x2001b4dc
 800f344:	08010810 	.word	0x08010810

0800f348 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	4603      	mov	r3, r0
 800f350:	6039      	str	r1, [r7, #0]
 800f352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f354:	79fb      	ldrb	r3, [r7, #7]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d105      	bne.n	800f366 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f35a:	683a      	ldr	r2, [r7, #0]
 800f35c:	4907      	ldr	r1, [pc, #28]	; (800f37c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f35e:	4808      	ldr	r0, [pc, #32]	; (800f380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f360:	f7fc ffd8 	bl	800c314 <USBD_GetString>
 800f364:	e004      	b.n	800f370 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f366:	683a      	ldr	r2, [r7, #0]
 800f368:	4904      	ldr	r1, [pc, #16]	; (800f37c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f36a:	4805      	ldr	r0, [pc, #20]	; (800f380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f36c:	f7fc ffd2 	bl	800c314 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f370:	4b02      	ldr	r3, [pc, #8]	; (800f37c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f372:	4618      	mov	r0, r3
 800f374:	3708      	adds	r7, #8
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	2001b4dc 	.word	0x2001b4dc
 800f380:	0801081c 	.word	0x0801081c

0800f384 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f38a:	4b0f      	ldr	r3, [pc, #60]	; (800f3c8 <Get_SerialNum+0x44>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f390:	4b0e      	ldr	r3, [pc, #56]	; (800f3cc <Get_SerialNum+0x48>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f396:	4b0e      	ldr	r3, [pc, #56]	; (800f3d0 <Get_SerialNum+0x4c>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d009      	beq.n	800f3be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f3aa:	2208      	movs	r2, #8
 800f3ac:	4909      	ldr	r1, [pc, #36]	; (800f3d4 <Get_SerialNum+0x50>)
 800f3ae:	68f8      	ldr	r0, [r7, #12]
 800f3b0:	f000 f814 	bl	800f3dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f3b4:	2204      	movs	r2, #4
 800f3b6:	4908      	ldr	r1, [pc, #32]	; (800f3d8 <Get_SerialNum+0x54>)
 800f3b8:	68b8      	ldr	r0, [r7, #8]
 800f3ba:	f000 f80f 	bl	800f3dc <IntToUnicode>
  }
}
 800f3be:	bf00      	nop
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	1fff7a10 	.word	0x1fff7a10
 800f3cc:	1fff7a14 	.word	0x1fff7a14
 800f3d0:	1fff7a18 	.word	0x1fff7a18
 800f3d4:	20000152 	.word	0x20000152
 800f3d8:	20000162 	.word	0x20000162

0800f3dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b087      	sub	sp, #28
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	60f8      	str	r0, [r7, #12]
 800f3e4:	60b9      	str	r1, [r7, #8]
 800f3e6:	4613      	mov	r3, r2
 800f3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	75fb      	strb	r3, [r7, #23]
 800f3f2:	e027      	b.n	800f444 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	0f1b      	lsrs	r3, r3, #28
 800f3f8:	2b09      	cmp	r3, #9
 800f3fa:	d80b      	bhi.n	800f414 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	0f1b      	lsrs	r3, r3, #28
 800f400:	b2da      	uxtb	r2, r3
 800f402:	7dfb      	ldrb	r3, [r7, #23]
 800f404:	005b      	lsls	r3, r3, #1
 800f406:	4619      	mov	r1, r3
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	440b      	add	r3, r1
 800f40c:	3230      	adds	r2, #48	; 0x30
 800f40e:	b2d2      	uxtb	r2, r2
 800f410:	701a      	strb	r2, [r3, #0]
 800f412:	e00a      	b.n	800f42a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	0f1b      	lsrs	r3, r3, #28
 800f418:	b2da      	uxtb	r2, r3
 800f41a:	7dfb      	ldrb	r3, [r7, #23]
 800f41c:	005b      	lsls	r3, r3, #1
 800f41e:	4619      	mov	r1, r3
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	440b      	add	r3, r1
 800f424:	3237      	adds	r2, #55	; 0x37
 800f426:	b2d2      	uxtb	r2, r2
 800f428:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	011b      	lsls	r3, r3, #4
 800f42e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f430:	7dfb      	ldrb	r3, [r7, #23]
 800f432:	005b      	lsls	r3, r3, #1
 800f434:	3301      	adds	r3, #1
 800f436:	68ba      	ldr	r2, [r7, #8]
 800f438:	4413      	add	r3, r2
 800f43a:	2200      	movs	r2, #0
 800f43c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f43e:	7dfb      	ldrb	r3, [r7, #23]
 800f440:	3301      	adds	r3, #1
 800f442:	75fb      	strb	r3, [r7, #23]
 800f444:	7dfa      	ldrb	r2, [r7, #23]
 800f446:	79fb      	ldrb	r3, [r7, #7]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d3d3      	bcc.n	800f3f4 <IntToUnicode+0x18>
  }
}
 800f44c:	bf00      	nop
 800f44e:	bf00      	nop
 800f450:	371c      	adds	r7, #28
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr
	...

0800f45c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b08a      	sub	sp, #40	; 0x28
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f464:	f107 0314 	add.w	r3, r7, #20
 800f468:	2200      	movs	r2, #0
 800f46a:	601a      	str	r2, [r3, #0]
 800f46c:	605a      	str	r2, [r3, #4]
 800f46e:	609a      	str	r2, [r3, #8]
 800f470:	60da      	str	r2, [r3, #12]
 800f472:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f47c:	d13a      	bne.n	800f4f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f47e:	2300      	movs	r3, #0
 800f480:	613b      	str	r3, [r7, #16]
 800f482:	4b1e      	ldr	r3, [pc, #120]	; (800f4fc <HAL_PCD_MspInit+0xa0>)
 800f484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f486:	4a1d      	ldr	r2, [pc, #116]	; (800f4fc <HAL_PCD_MspInit+0xa0>)
 800f488:	f043 0301 	orr.w	r3, r3, #1
 800f48c:	6313      	str	r3, [r2, #48]	; 0x30
 800f48e:	4b1b      	ldr	r3, [pc, #108]	; (800f4fc <HAL_PCD_MspInit+0xa0>)
 800f490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f492:	f003 0301 	and.w	r3, r3, #1
 800f496:	613b      	str	r3, [r7, #16]
 800f498:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f49a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f49e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4a0:	2302      	movs	r3, #2
 800f4a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4a8:	2303      	movs	r3, #3
 800f4aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f4ac:	230a      	movs	r3, #10
 800f4ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4b0:	f107 0314 	add.w	r3, r7, #20
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	4812      	ldr	r0, [pc, #72]	; (800f500 <HAL_PCD_MspInit+0xa4>)
 800f4b8:	f7f2 fe54 	bl	8002164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f4bc:	4b0f      	ldr	r3, [pc, #60]	; (800f4fc <HAL_PCD_MspInit+0xa0>)
 800f4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4c0:	4a0e      	ldr	r2, [pc, #56]	; (800f4fc <HAL_PCD_MspInit+0xa0>)
 800f4c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4c6:	6353      	str	r3, [r2, #52]	; 0x34
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	60fb      	str	r3, [r7, #12]
 800f4cc:	4b0b      	ldr	r3, [pc, #44]	; (800f4fc <HAL_PCD_MspInit+0xa0>)
 800f4ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4d0:	4a0a      	ldr	r2, [pc, #40]	; (800f4fc <HAL_PCD_MspInit+0xa0>)
 800f4d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f4d6:	6453      	str	r3, [r2, #68]	; 0x44
 800f4d8:	4b08      	ldr	r3, [pc, #32]	; (800f4fc <HAL_PCD_MspInit+0xa0>)
 800f4da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f4e0:	60fb      	str	r3, [r7, #12]
 800f4e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	2105      	movs	r1, #5
 800f4e8:	2043      	movs	r0, #67	; 0x43
 800f4ea:	f7f2 fdf7 	bl	80020dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f4ee:	2043      	movs	r0, #67	; 0x43
 800f4f0:	f7f2 fe20 	bl	8002134 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f4f4:	bf00      	nop
 800f4f6:	3728      	adds	r7, #40	; 0x28
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}
 800f4fc:	40023800 	.word	0x40023800
 800f500:	40020000 	.word	0x40020000

0800f504 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f518:	4619      	mov	r1, r3
 800f51a:	4610      	mov	r0, r2
 800f51c:	f7fb fd9b 	bl	800b056 <USBD_LL_SetupStage>
}
 800f520:	bf00      	nop
 800f522:	3708      	adds	r7, #8
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	460b      	mov	r3, r1
 800f532:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f53a:	78fa      	ldrb	r2, [r7, #3]
 800f53c:	6879      	ldr	r1, [r7, #4]
 800f53e:	4613      	mov	r3, r2
 800f540:	00db      	lsls	r3, r3, #3
 800f542:	4413      	add	r3, r2
 800f544:	009b      	lsls	r3, r3, #2
 800f546:	440b      	add	r3, r1
 800f548:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	78fb      	ldrb	r3, [r7, #3]
 800f550:	4619      	mov	r1, r3
 800f552:	f7fb fdd5 	bl	800b100 <USBD_LL_DataOutStage>
}
 800f556:	bf00      	nop
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}

0800f55e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f55e:	b580      	push	{r7, lr}
 800f560:	b082      	sub	sp, #8
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
 800f566:	460b      	mov	r3, r1
 800f568:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f570:	78fa      	ldrb	r2, [r7, #3]
 800f572:	6879      	ldr	r1, [r7, #4]
 800f574:	4613      	mov	r3, r2
 800f576:	00db      	lsls	r3, r3, #3
 800f578:	4413      	add	r3, r2
 800f57a:	009b      	lsls	r3, r3, #2
 800f57c:	440b      	add	r3, r1
 800f57e:	334c      	adds	r3, #76	; 0x4c
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	78fb      	ldrb	r3, [r7, #3]
 800f584:	4619      	mov	r1, r3
 800f586:	f7fb fe6e 	bl	800b266 <USBD_LL_DataInStage>
}
 800f58a:	bf00      	nop
 800f58c:	3708      	adds	r7, #8
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}

0800f592 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f592:	b580      	push	{r7, lr}
 800f594:	b082      	sub	sp, #8
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7fb ffa2 	bl	800b4ea <USBD_LL_SOF>
}
 800f5a6:	bf00      	nop
 800f5a8:	3708      	adds	r7, #8
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}

0800f5ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5ae:	b580      	push	{r7, lr}
 800f5b0:	b084      	sub	sp, #16
 800f5b2:	af00      	add	r7, sp, #0
 800f5b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	2b02      	cmp	r3, #2
 800f5c0:	d001      	beq.n	800f5c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f5c2:	f7f1 fd36 	bl	8001032 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5cc:	7bfa      	ldrb	r2, [r7, #15]
 800f5ce:	4611      	mov	r1, r2
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7fb ff4c 	bl	800b46e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7fb fef4 	bl	800b3ca <USBD_LL_Reset>
}
 800f5e2:	bf00      	nop
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
	...

0800f5ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7fb ff47 	bl	800b48e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	6812      	ldr	r2, [r2, #0]
 800f60e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f612:	f043 0301 	orr.w	r3, r3, #1
 800f616:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6a1b      	ldr	r3, [r3, #32]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d005      	beq.n	800f62c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f620:	4b04      	ldr	r3, [pc, #16]	; (800f634 <HAL_PCD_SuspendCallback+0x48>)
 800f622:	691b      	ldr	r3, [r3, #16]
 800f624:	4a03      	ldr	r2, [pc, #12]	; (800f634 <HAL_PCD_SuspendCallback+0x48>)
 800f626:	f043 0306 	orr.w	r3, r3, #6
 800f62a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f62c:	bf00      	nop
 800f62e:	3708      	adds	r7, #8
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}
 800f634:	e000ed00 	.word	0xe000ed00

0800f638 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f646:	4618      	mov	r0, r3
 800f648:	f7fb ff37 	bl	800b4ba <USBD_LL_Resume>
}
 800f64c:	bf00      	nop
 800f64e:	3708      	adds	r7, #8
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	460b      	mov	r3, r1
 800f65e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f666:	78fa      	ldrb	r2, [r7, #3]
 800f668:	4611      	mov	r1, r2
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fb ff8f 	bl	800b58e <USBD_LL_IsoOUTIncomplete>
}
 800f670:	bf00      	nop
 800f672:	3708      	adds	r7, #8
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	460b      	mov	r3, r1
 800f682:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f68a:	78fa      	ldrb	r2, [r7, #3]
 800f68c:	4611      	mov	r1, r2
 800f68e:	4618      	mov	r0, r3
 800f690:	f7fb ff4b 	bl	800b52a <USBD_LL_IsoINIncomplete>
}
 800f694:	bf00      	nop
 800f696:	3708      	adds	r7, #8
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fb ffa1 	bl	800b5f2 <USBD_LL_DevConnected>
}
 800f6b0:	bf00      	nop
 800f6b2:	3708      	adds	r7, #8
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fb ff9e 	bl	800b608 <USBD_LL_DevDisconnected>
}
 800f6cc:	bf00      	nop
 800f6ce:	3708      	adds	r7, #8
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d13c      	bne.n	800f75e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f6e4:	4a20      	ldr	r2, [pc, #128]	; (800f768 <USBD_LL_Init+0x94>)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4a1e      	ldr	r2, [pc, #120]	; (800f768 <USBD_LL_Init+0x94>)
 800f6f0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f6f4:	4b1c      	ldr	r3, [pc, #112]	; (800f768 <USBD_LL_Init+0x94>)
 800f6f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f6fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f6fc:	4b1a      	ldr	r3, [pc, #104]	; (800f768 <USBD_LL_Init+0x94>)
 800f6fe:	2204      	movs	r2, #4
 800f700:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f702:	4b19      	ldr	r3, [pc, #100]	; (800f768 <USBD_LL_Init+0x94>)
 800f704:	2202      	movs	r2, #2
 800f706:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f708:	4b17      	ldr	r3, [pc, #92]	; (800f768 <USBD_LL_Init+0x94>)
 800f70a:	2200      	movs	r2, #0
 800f70c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f70e:	4b16      	ldr	r3, [pc, #88]	; (800f768 <USBD_LL_Init+0x94>)
 800f710:	2202      	movs	r2, #2
 800f712:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f714:	4b14      	ldr	r3, [pc, #80]	; (800f768 <USBD_LL_Init+0x94>)
 800f716:	2200      	movs	r2, #0
 800f718:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f71a:	4b13      	ldr	r3, [pc, #76]	; (800f768 <USBD_LL_Init+0x94>)
 800f71c:	2200      	movs	r2, #0
 800f71e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f720:	4b11      	ldr	r3, [pc, #68]	; (800f768 <USBD_LL_Init+0x94>)
 800f722:	2200      	movs	r2, #0
 800f724:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f726:	4b10      	ldr	r3, [pc, #64]	; (800f768 <USBD_LL_Init+0x94>)
 800f728:	2200      	movs	r2, #0
 800f72a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f72c:	4b0e      	ldr	r3, [pc, #56]	; (800f768 <USBD_LL_Init+0x94>)
 800f72e:	2200      	movs	r2, #0
 800f730:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f732:	480d      	ldr	r0, [pc, #52]	; (800f768 <USBD_LL_Init+0x94>)
 800f734:	f7f3 fe40 	bl	80033b8 <HAL_PCD_Init>
 800f738:	4603      	mov	r3, r0
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d001      	beq.n	800f742 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f73e:	f7f1 fc78 	bl	8001032 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f742:	2180      	movs	r1, #128	; 0x80
 800f744:	4808      	ldr	r0, [pc, #32]	; (800f768 <USBD_LL_Init+0x94>)
 800f746:	f7f5 f8a2 	bl	800488e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f74a:	2240      	movs	r2, #64	; 0x40
 800f74c:	2100      	movs	r1, #0
 800f74e:	4806      	ldr	r0, [pc, #24]	; (800f768 <USBD_LL_Init+0x94>)
 800f750:	f7f5 f856 	bl	8004800 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f754:	2280      	movs	r2, #128	; 0x80
 800f756:	2101      	movs	r1, #1
 800f758:	4803      	ldr	r0, [pc, #12]	; (800f768 <USBD_LL_Init+0x94>)
 800f75a:	f7f5 f851 	bl	8004800 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f75e:	2300      	movs	r3, #0
}
 800f760:	4618      	mov	r0, r3
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	2001b6dc 	.word	0x2001b6dc

0800f76c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f774:	2300      	movs	r3, #0
 800f776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f778:	2300      	movs	r3, #0
 800f77a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f782:	4618      	mov	r0, r3
 800f784:	f7f3 ff40 	bl	8003608 <HAL_PCD_Start>
 800f788:	4603      	mov	r3, r0
 800f78a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f78c:	7bfb      	ldrb	r3, [r7, #15]
 800f78e:	4618      	mov	r0, r3
 800f790:	f000 f942 	bl	800fa18 <USBD_Get_USB_Status>
 800f794:	4603      	mov	r3, r0
 800f796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f798:	7bbb      	ldrb	r3, [r7, #14]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3710      	adds	r7, #16
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b084      	sub	sp, #16
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
 800f7aa:	4608      	mov	r0, r1
 800f7ac:	4611      	mov	r1, r2
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	70fb      	strb	r3, [r7, #3]
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	70bb      	strb	r3, [r7, #2]
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f7ca:	78bb      	ldrb	r3, [r7, #2]
 800f7cc:	883a      	ldrh	r2, [r7, #0]
 800f7ce:	78f9      	ldrb	r1, [r7, #3]
 800f7d0:	f7f4 fc11 	bl	8003ff6 <HAL_PCD_EP_Open>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7d8:	7bfb      	ldrb	r3, [r7, #15]
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f000 f91c 	bl	800fa18 <USBD_Get_USB_Status>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3710      	adds	r7, #16
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}

0800f7ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7ee:	b580      	push	{r7, lr}
 800f7f0:	b084      	sub	sp, #16
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7fe:	2300      	movs	r3, #0
 800f800:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f808:	78fa      	ldrb	r2, [r7, #3]
 800f80a:	4611      	mov	r1, r2
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7f4 fc5a 	bl	80040c6 <HAL_PCD_EP_Close>
 800f812:	4603      	mov	r3, r0
 800f814:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f816:	7bfb      	ldrb	r3, [r7, #15]
 800f818:	4618      	mov	r0, r3
 800f81a:	f000 f8fd 	bl	800fa18 <USBD_Get_USB_Status>
 800f81e:	4603      	mov	r3, r0
 800f820:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f822:	7bbb      	ldrb	r3, [r7, #14]
}
 800f824:	4618      	mov	r0, r3
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b084      	sub	sp, #16
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	460b      	mov	r3, r1
 800f836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f838:	2300      	movs	r3, #0
 800f83a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f83c:	2300      	movs	r3, #0
 800f83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f846:	78fa      	ldrb	r2, [r7, #3]
 800f848:	4611      	mov	r1, r2
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7f4 fd32 	bl	80042b4 <HAL_PCD_EP_SetStall>
 800f850:	4603      	mov	r3, r0
 800f852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f854:	7bfb      	ldrb	r3, [r7, #15]
 800f856:	4618      	mov	r0, r3
 800f858:	f000 f8de 	bl	800fa18 <USBD_Get_USB_Status>
 800f85c:	4603      	mov	r3, r0
 800f85e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f860:	7bbb      	ldrb	r3, [r7, #14]
}
 800f862:	4618      	mov	r0, r3
 800f864:	3710      	adds	r7, #16
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b084      	sub	sp, #16
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
 800f872:	460b      	mov	r3, r1
 800f874:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f876:	2300      	movs	r3, #0
 800f878:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f87a:	2300      	movs	r3, #0
 800f87c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f884:	78fa      	ldrb	r2, [r7, #3]
 800f886:	4611      	mov	r1, r2
 800f888:	4618      	mov	r0, r3
 800f88a:	f7f4 fd77 	bl	800437c <HAL_PCD_EP_ClrStall>
 800f88e:	4603      	mov	r3, r0
 800f890:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f892:	7bfb      	ldrb	r3, [r7, #15]
 800f894:	4618      	mov	r0, r3
 800f896:	f000 f8bf 	bl	800fa18 <USBD_Get_USB_Status>
 800f89a:	4603      	mov	r3, r0
 800f89c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f89e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3710      	adds	r7, #16
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}

0800f8a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8a8:	b480      	push	{r7}
 800f8aa:	b085      	sub	sp, #20
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	460b      	mov	r3, r1
 800f8b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f8ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f8bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	da0b      	bge.n	800f8dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f8c4:	78fb      	ldrb	r3, [r7, #3]
 800f8c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f8ca:	68f9      	ldr	r1, [r7, #12]
 800f8cc:	4613      	mov	r3, r2
 800f8ce:	00db      	lsls	r3, r3, #3
 800f8d0:	4413      	add	r3, r2
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	440b      	add	r3, r1
 800f8d6:	333e      	adds	r3, #62	; 0x3e
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	e00b      	b.n	800f8f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f8dc:	78fb      	ldrb	r3, [r7, #3]
 800f8de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f8e2:	68f9      	ldr	r1, [r7, #12]
 800f8e4:	4613      	mov	r3, r2
 800f8e6:	00db      	lsls	r3, r3, #3
 800f8e8:	4413      	add	r3, r2
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	440b      	add	r3, r1
 800f8ee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f8f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3714      	adds	r7, #20
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fe:	4770      	bx	lr

0800f900 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b084      	sub	sp, #16
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	460b      	mov	r3, r1
 800f90a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f90c:	2300      	movs	r3, #0
 800f90e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f910:	2300      	movs	r3, #0
 800f912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f91a:	78fa      	ldrb	r2, [r7, #3]
 800f91c:	4611      	mov	r1, r2
 800f91e:	4618      	mov	r0, r3
 800f920:	f7f4 fb44 	bl	8003fac <HAL_PCD_SetAddress>
 800f924:	4603      	mov	r3, r0
 800f926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f928:	7bfb      	ldrb	r3, [r7, #15]
 800f92a:	4618      	mov	r0, r3
 800f92c:	f000 f874 	bl	800fa18 <USBD_Get_USB_Status>
 800f930:	4603      	mov	r3, r0
 800f932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f934:	7bbb      	ldrb	r3, [r7, #14]
}
 800f936:	4618      	mov	r0, r3
 800f938:	3710      	adds	r7, #16
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}

0800f93e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f93e:	b580      	push	{r7, lr}
 800f940:	b086      	sub	sp, #24
 800f942:	af00      	add	r7, sp, #0
 800f944:	60f8      	str	r0, [r7, #12]
 800f946:	607a      	str	r2, [r7, #4]
 800f948:	603b      	str	r3, [r7, #0]
 800f94a:	460b      	mov	r3, r1
 800f94c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f94e:	2300      	movs	r3, #0
 800f950:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f952:	2300      	movs	r3, #0
 800f954:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f95c:	7af9      	ldrb	r1, [r7, #11]
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	687a      	ldr	r2, [r7, #4]
 800f962:	f7f4 fc5d 	bl	8004220 <HAL_PCD_EP_Transmit>
 800f966:	4603      	mov	r3, r0
 800f968:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f96a:	7dfb      	ldrb	r3, [r7, #23]
 800f96c:	4618      	mov	r0, r3
 800f96e:	f000 f853 	bl	800fa18 <USBD_Get_USB_Status>
 800f972:	4603      	mov	r3, r0
 800f974:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f976:	7dbb      	ldrb	r3, [r7, #22]
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3718      	adds	r7, #24
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b086      	sub	sp, #24
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	607a      	str	r2, [r7, #4]
 800f98a:	603b      	str	r3, [r7, #0]
 800f98c:	460b      	mov	r3, r1
 800f98e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f990:	2300      	movs	r3, #0
 800f992:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f994:	2300      	movs	r3, #0
 800f996:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f99e:	7af9      	ldrb	r1, [r7, #11]
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	f7f4 fbd9 	bl	800415a <HAL_PCD_EP_Receive>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9ac:	7dfb      	ldrb	r3, [r7, #23]
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f000 f832 	bl	800fa18 <USBD_Get_USB_Status>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f9b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3718      	adds	r7, #24
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b082      	sub	sp, #8
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9d4:	78fa      	ldrb	r2, [r7, #3]
 800f9d6:	4611      	mov	r1, r2
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7f4 fc09 	bl	80041f0 <HAL_PCD_EP_GetRxCount>
 800f9de:	4603      	mov	r3, r0
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b083      	sub	sp, #12
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f9f0:	4b03      	ldr	r3, [pc, #12]	; (800fa00 <USBD_static_malloc+0x18>)
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	370c      	adds	r7, #12
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr
 800f9fe:	bf00      	nop
 800fa00:	2001bbe8 	.word	0x2001bbe8

0800fa04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fa04:	b480      	push	{r7}
 800fa06:	b083      	sub	sp, #12
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]

}
 800fa0c:	bf00      	nop
 800fa0e:	370c      	adds	r7, #12
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr

0800fa18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	4603      	mov	r3, r0
 800fa20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa22:	2300      	movs	r3, #0
 800fa24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fa26:	79fb      	ldrb	r3, [r7, #7]
 800fa28:	2b03      	cmp	r3, #3
 800fa2a:	d817      	bhi.n	800fa5c <USBD_Get_USB_Status+0x44>
 800fa2c:	a201      	add	r2, pc, #4	; (adr r2, 800fa34 <USBD_Get_USB_Status+0x1c>)
 800fa2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa32:	bf00      	nop
 800fa34:	0800fa45 	.word	0x0800fa45
 800fa38:	0800fa4b 	.word	0x0800fa4b
 800fa3c:	0800fa51 	.word	0x0800fa51
 800fa40:	0800fa57 	.word	0x0800fa57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fa44:	2300      	movs	r3, #0
 800fa46:	73fb      	strb	r3, [r7, #15]
    break;
 800fa48:	e00b      	b.n	800fa62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa4a:	2303      	movs	r3, #3
 800fa4c:	73fb      	strb	r3, [r7, #15]
    break;
 800fa4e:	e008      	b.n	800fa62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa50:	2301      	movs	r3, #1
 800fa52:	73fb      	strb	r3, [r7, #15]
    break;
 800fa54:	e005      	b.n	800fa62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa56:	2303      	movs	r3, #3
 800fa58:	73fb      	strb	r3, [r7, #15]
    break;
 800fa5a:	e002      	b.n	800fa62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fa5c:	2303      	movs	r3, #3
 800fa5e:	73fb      	strb	r3, [r7, #15]
    break;
 800fa60:	bf00      	nop
  }
  return usb_status;
 800fa62:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3714      	adds	r7, #20
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <__errno>:
 800fa70:	4b01      	ldr	r3, [pc, #4]	; (800fa78 <__errno+0x8>)
 800fa72:	6818      	ldr	r0, [r3, #0]
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop
 800fa78:	2000016c 	.word	0x2000016c

0800fa7c <__libc_init_array>:
 800fa7c:	b570      	push	{r4, r5, r6, lr}
 800fa7e:	4d0d      	ldr	r5, [pc, #52]	; (800fab4 <__libc_init_array+0x38>)
 800fa80:	4c0d      	ldr	r4, [pc, #52]	; (800fab8 <__libc_init_array+0x3c>)
 800fa82:	1b64      	subs	r4, r4, r5
 800fa84:	10a4      	asrs	r4, r4, #2
 800fa86:	2600      	movs	r6, #0
 800fa88:	42a6      	cmp	r6, r4
 800fa8a:	d109      	bne.n	800faa0 <__libc_init_array+0x24>
 800fa8c:	4d0b      	ldr	r5, [pc, #44]	; (800fabc <__libc_init_array+0x40>)
 800fa8e:	4c0c      	ldr	r4, [pc, #48]	; (800fac0 <__libc_init_array+0x44>)
 800fa90:	f000 fd08 	bl	80104a4 <_init>
 800fa94:	1b64      	subs	r4, r4, r5
 800fa96:	10a4      	asrs	r4, r4, #2
 800fa98:	2600      	movs	r6, #0
 800fa9a:	42a6      	cmp	r6, r4
 800fa9c:	d105      	bne.n	800faaa <__libc_init_array+0x2e>
 800fa9e:	bd70      	pop	{r4, r5, r6, pc}
 800faa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800faa4:	4798      	blx	r3
 800faa6:	3601      	adds	r6, #1
 800faa8:	e7ee      	b.n	800fa88 <__libc_init_array+0xc>
 800faaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800faae:	4798      	blx	r3
 800fab0:	3601      	adds	r6, #1
 800fab2:	e7f2      	b.n	800fa9a <__libc_init_array+0x1e>
 800fab4:	080131d8 	.word	0x080131d8
 800fab8:	080131d8 	.word	0x080131d8
 800fabc:	080131d8 	.word	0x080131d8
 800fac0:	080131dc 	.word	0x080131dc

0800fac4 <__retarget_lock_acquire_recursive>:
 800fac4:	4770      	bx	lr

0800fac6 <__retarget_lock_release_recursive>:
 800fac6:	4770      	bx	lr

0800fac8 <malloc>:
 800fac8:	4b02      	ldr	r3, [pc, #8]	; (800fad4 <malloc+0xc>)
 800faca:	4601      	mov	r1, r0
 800facc:	6818      	ldr	r0, [r3, #0]
 800face:	f000 b88d 	b.w	800fbec <_malloc_r>
 800fad2:	bf00      	nop
 800fad4:	2000016c 	.word	0x2000016c

0800fad8 <free>:
 800fad8:	4b02      	ldr	r3, [pc, #8]	; (800fae4 <free+0xc>)
 800fada:	4601      	mov	r1, r0
 800fadc:	6818      	ldr	r0, [r3, #0]
 800fade:	f000 b819 	b.w	800fb14 <_free_r>
 800fae2:	bf00      	nop
 800fae4:	2000016c 	.word	0x2000016c

0800fae8 <memcpy>:
 800fae8:	440a      	add	r2, r1
 800faea:	4291      	cmp	r1, r2
 800faec:	f100 33ff 	add.w	r3, r0, #4294967295
 800faf0:	d100      	bne.n	800faf4 <memcpy+0xc>
 800faf2:	4770      	bx	lr
 800faf4:	b510      	push	{r4, lr}
 800faf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fafa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fafe:	4291      	cmp	r1, r2
 800fb00:	d1f9      	bne.n	800faf6 <memcpy+0xe>
 800fb02:	bd10      	pop	{r4, pc}

0800fb04 <memset>:
 800fb04:	4402      	add	r2, r0
 800fb06:	4603      	mov	r3, r0
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d100      	bne.n	800fb0e <memset+0xa>
 800fb0c:	4770      	bx	lr
 800fb0e:	f803 1b01 	strb.w	r1, [r3], #1
 800fb12:	e7f9      	b.n	800fb08 <memset+0x4>

0800fb14 <_free_r>:
 800fb14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb16:	2900      	cmp	r1, #0
 800fb18:	d044      	beq.n	800fba4 <_free_r+0x90>
 800fb1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb1e:	9001      	str	r0, [sp, #4]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	f1a1 0404 	sub.w	r4, r1, #4
 800fb26:	bfb8      	it	lt
 800fb28:	18e4      	addlt	r4, r4, r3
 800fb2a:	f000 f96d 	bl	800fe08 <__malloc_lock>
 800fb2e:	4a1e      	ldr	r2, [pc, #120]	; (800fba8 <_free_r+0x94>)
 800fb30:	9801      	ldr	r0, [sp, #4]
 800fb32:	6813      	ldr	r3, [r2, #0]
 800fb34:	b933      	cbnz	r3, 800fb44 <_free_r+0x30>
 800fb36:	6063      	str	r3, [r4, #4]
 800fb38:	6014      	str	r4, [r2, #0]
 800fb3a:	b003      	add	sp, #12
 800fb3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb40:	f000 b968 	b.w	800fe14 <__malloc_unlock>
 800fb44:	42a3      	cmp	r3, r4
 800fb46:	d908      	bls.n	800fb5a <_free_r+0x46>
 800fb48:	6825      	ldr	r5, [r4, #0]
 800fb4a:	1961      	adds	r1, r4, r5
 800fb4c:	428b      	cmp	r3, r1
 800fb4e:	bf01      	itttt	eq
 800fb50:	6819      	ldreq	r1, [r3, #0]
 800fb52:	685b      	ldreq	r3, [r3, #4]
 800fb54:	1949      	addeq	r1, r1, r5
 800fb56:	6021      	streq	r1, [r4, #0]
 800fb58:	e7ed      	b.n	800fb36 <_free_r+0x22>
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	b10b      	cbz	r3, 800fb64 <_free_r+0x50>
 800fb60:	42a3      	cmp	r3, r4
 800fb62:	d9fa      	bls.n	800fb5a <_free_r+0x46>
 800fb64:	6811      	ldr	r1, [r2, #0]
 800fb66:	1855      	adds	r5, r2, r1
 800fb68:	42a5      	cmp	r5, r4
 800fb6a:	d10b      	bne.n	800fb84 <_free_r+0x70>
 800fb6c:	6824      	ldr	r4, [r4, #0]
 800fb6e:	4421      	add	r1, r4
 800fb70:	1854      	adds	r4, r2, r1
 800fb72:	42a3      	cmp	r3, r4
 800fb74:	6011      	str	r1, [r2, #0]
 800fb76:	d1e0      	bne.n	800fb3a <_free_r+0x26>
 800fb78:	681c      	ldr	r4, [r3, #0]
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	6053      	str	r3, [r2, #4]
 800fb7e:	4421      	add	r1, r4
 800fb80:	6011      	str	r1, [r2, #0]
 800fb82:	e7da      	b.n	800fb3a <_free_r+0x26>
 800fb84:	d902      	bls.n	800fb8c <_free_r+0x78>
 800fb86:	230c      	movs	r3, #12
 800fb88:	6003      	str	r3, [r0, #0]
 800fb8a:	e7d6      	b.n	800fb3a <_free_r+0x26>
 800fb8c:	6825      	ldr	r5, [r4, #0]
 800fb8e:	1961      	adds	r1, r4, r5
 800fb90:	428b      	cmp	r3, r1
 800fb92:	bf04      	itt	eq
 800fb94:	6819      	ldreq	r1, [r3, #0]
 800fb96:	685b      	ldreq	r3, [r3, #4]
 800fb98:	6063      	str	r3, [r4, #4]
 800fb9a:	bf04      	itt	eq
 800fb9c:	1949      	addeq	r1, r1, r5
 800fb9e:	6021      	streq	r1, [r4, #0]
 800fba0:	6054      	str	r4, [r2, #4]
 800fba2:	e7ca      	b.n	800fb3a <_free_r+0x26>
 800fba4:	b003      	add	sp, #12
 800fba6:	bd30      	pop	{r4, r5, pc}
 800fba8:	2001be0c 	.word	0x2001be0c

0800fbac <sbrk_aligned>:
 800fbac:	b570      	push	{r4, r5, r6, lr}
 800fbae:	4e0e      	ldr	r6, [pc, #56]	; (800fbe8 <sbrk_aligned+0x3c>)
 800fbb0:	460c      	mov	r4, r1
 800fbb2:	6831      	ldr	r1, [r6, #0]
 800fbb4:	4605      	mov	r5, r0
 800fbb6:	b911      	cbnz	r1, 800fbbe <sbrk_aligned+0x12>
 800fbb8:	f000 f8f6 	bl	800fda8 <_sbrk_r>
 800fbbc:	6030      	str	r0, [r6, #0]
 800fbbe:	4621      	mov	r1, r4
 800fbc0:	4628      	mov	r0, r5
 800fbc2:	f000 f8f1 	bl	800fda8 <_sbrk_r>
 800fbc6:	1c43      	adds	r3, r0, #1
 800fbc8:	d00a      	beq.n	800fbe0 <sbrk_aligned+0x34>
 800fbca:	1cc4      	adds	r4, r0, #3
 800fbcc:	f024 0403 	bic.w	r4, r4, #3
 800fbd0:	42a0      	cmp	r0, r4
 800fbd2:	d007      	beq.n	800fbe4 <sbrk_aligned+0x38>
 800fbd4:	1a21      	subs	r1, r4, r0
 800fbd6:	4628      	mov	r0, r5
 800fbd8:	f000 f8e6 	bl	800fda8 <_sbrk_r>
 800fbdc:	3001      	adds	r0, #1
 800fbde:	d101      	bne.n	800fbe4 <sbrk_aligned+0x38>
 800fbe0:	f04f 34ff 	mov.w	r4, #4294967295
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	bd70      	pop	{r4, r5, r6, pc}
 800fbe8:	2001be10 	.word	0x2001be10

0800fbec <_malloc_r>:
 800fbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf0:	1ccd      	adds	r5, r1, #3
 800fbf2:	f025 0503 	bic.w	r5, r5, #3
 800fbf6:	3508      	adds	r5, #8
 800fbf8:	2d0c      	cmp	r5, #12
 800fbfa:	bf38      	it	cc
 800fbfc:	250c      	movcc	r5, #12
 800fbfe:	2d00      	cmp	r5, #0
 800fc00:	4607      	mov	r7, r0
 800fc02:	db01      	blt.n	800fc08 <_malloc_r+0x1c>
 800fc04:	42a9      	cmp	r1, r5
 800fc06:	d905      	bls.n	800fc14 <_malloc_r+0x28>
 800fc08:	230c      	movs	r3, #12
 800fc0a:	603b      	str	r3, [r7, #0]
 800fc0c:	2600      	movs	r6, #0
 800fc0e:	4630      	mov	r0, r6
 800fc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc14:	4e2e      	ldr	r6, [pc, #184]	; (800fcd0 <_malloc_r+0xe4>)
 800fc16:	f000 f8f7 	bl	800fe08 <__malloc_lock>
 800fc1a:	6833      	ldr	r3, [r6, #0]
 800fc1c:	461c      	mov	r4, r3
 800fc1e:	bb34      	cbnz	r4, 800fc6e <_malloc_r+0x82>
 800fc20:	4629      	mov	r1, r5
 800fc22:	4638      	mov	r0, r7
 800fc24:	f7ff ffc2 	bl	800fbac <sbrk_aligned>
 800fc28:	1c43      	adds	r3, r0, #1
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	d14d      	bne.n	800fcca <_malloc_r+0xde>
 800fc2e:	6834      	ldr	r4, [r6, #0]
 800fc30:	4626      	mov	r6, r4
 800fc32:	2e00      	cmp	r6, #0
 800fc34:	d140      	bne.n	800fcb8 <_malloc_r+0xcc>
 800fc36:	6823      	ldr	r3, [r4, #0]
 800fc38:	4631      	mov	r1, r6
 800fc3a:	4638      	mov	r0, r7
 800fc3c:	eb04 0803 	add.w	r8, r4, r3
 800fc40:	f000 f8b2 	bl	800fda8 <_sbrk_r>
 800fc44:	4580      	cmp	r8, r0
 800fc46:	d13a      	bne.n	800fcbe <_malloc_r+0xd2>
 800fc48:	6821      	ldr	r1, [r4, #0]
 800fc4a:	3503      	adds	r5, #3
 800fc4c:	1a6d      	subs	r5, r5, r1
 800fc4e:	f025 0503 	bic.w	r5, r5, #3
 800fc52:	3508      	adds	r5, #8
 800fc54:	2d0c      	cmp	r5, #12
 800fc56:	bf38      	it	cc
 800fc58:	250c      	movcc	r5, #12
 800fc5a:	4629      	mov	r1, r5
 800fc5c:	4638      	mov	r0, r7
 800fc5e:	f7ff ffa5 	bl	800fbac <sbrk_aligned>
 800fc62:	3001      	adds	r0, #1
 800fc64:	d02b      	beq.n	800fcbe <_malloc_r+0xd2>
 800fc66:	6823      	ldr	r3, [r4, #0]
 800fc68:	442b      	add	r3, r5
 800fc6a:	6023      	str	r3, [r4, #0]
 800fc6c:	e00e      	b.n	800fc8c <_malloc_r+0xa0>
 800fc6e:	6822      	ldr	r2, [r4, #0]
 800fc70:	1b52      	subs	r2, r2, r5
 800fc72:	d41e      	bmi.n	800fcb2 <_malloc_r+0xc6>
 800fc74:	2a0b      	cmp	r2, #11
 800fc76:	d916      	bls.n	800fca6 <_malloc_r+0xba>
 800fc78:	1961      	adds	r1, r4, r5
 800fc7a:	42a3      	cmp	r3, r4
 800fc7c:	6025      	str	r5, [r4, #0]
 800fc7e:	bf18      	it	ne
 800fc80:	6059      	strne	r1, [r3, #4]
 800fc82:	6863      	ldr	r3, [r4, #4]
 800fc84:	bf08      	it	eq
 800fc86:	6031      	streq	r1, [r6, #0]
 800fc88:	5162      	str	r2, [r4, r5]
 800fc8a:	604b      	str	r3, [r1, #4]
 800fc8c:	4638      	mov	r0, r7
 800fc8e:	f104 060b 	add.w	r6, r4, #11
 800fc92:	f000 f8bf 	bl	800fe14 <__malloc_unlock>
 800fc96:	f026 0607 	bic.w	r6, r6, #7
 800fc9a:	1d23      	adds	r3, r4, #4
 800fc9c:	1af2      	subs	r2, r6, r3
 800fc9e:	d0b6      	beq.n	800fc0e <_malloc_r+0x22>
 800fca0:	1b9b      	subs	r3, r3, r6
 800fca2:	50a3      	str	r3, [r4, r2]
 800fca4:	e7b3      	b.n	800fc0e <_malloc_r+0x22>
 800fca6:	6862      	ldr	r2, [r4, #4]
 800fca8:	42a3      	cmp	r3, r4
 800fcaa:	bf0c      	ite	eq
 800fcac:	6032      	streq	r2, [r6, #0]
 800fcae:	605a      	strne	r2, [r3, #4]
 800fcb0:	e7ec      	b.n	800fc8c <_malloc_r+0xa0>
 800fcb2:	4623      	mov	r3, r4
 800fcb4:	6864      	ldr	r4, [r4, #4]
 800fcb6:	e7b2      	b.n	800fc1e <_malloc_r+0x32>
 800fcb8:	4634      	mov	r4, r6
 800fcba:	6876      	ldr	r6, [r6, #4]
 800fcbc:	e7b9      	b.n	800fc32 <_malloc_r+0x46>
 800fcbe:	230c      	movs	r3, #12
 800fcc0:	603b      	str	r3, [r7, #0]
 800fcc2:	4638      	mov	r0, r7
 800fcc4:	f000 f8a6 	bl	800fe14 <__malloc_unlock>
 800fcc8:	e7a1      	b.n	800fc0e <_malloc_r+0x22>
 800fcca:	6025      	str	r5, [r4, #0]
 800fccc:	e7de      	b.n	800fc8c <_malloc_r+0xa0>
 800fcce:	bf00      	nop
 800fcd0:	2001be0c 	.word	0x2001be0c

0800fcd4 <cleanup_glue>:
 800fcd4:	b538      	push	{r3, r4, r5, lr}
 800fcd6:	460c      	mov	r4, r1
 800fcd8:	6809      	ldr	r1, [r1, #0]
 800fcda:	4605      	mov	r5, r0
 800fcdc:	b109      	cbz	r1, 800fce2 <cleanup_glue+0xe>
 800fcde:	f7ff fff9 	bl	800fcd4 <cleanup_glue>
 800fce2:	4621      	mov	r1, r4
 800fce4:	4628      	mov	r0, r5
 800fce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcea:	f7ff bf13 	b.w	800fb14 <_free_r>
	...

0800fcf0 <_reclaim_reent>:
 800fcf0:	4b2c      	ldr	r3, [pc, #176]	; (800fda4 <_reclaim_reent+0xb4>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4283      	cmp	r3, r0
 800fcf6:	b570      	push	{r4, r5, r6, lr}
 800fcf8:	4604      	mov	r4, r0
 800fcfa:	d051      	beq.n	800fda0 <_reclaim_reent+0xb0>
 800fcfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fcfe:	b143      	cbz	r3, 800fd12 <_reclaim_reent+0x22>
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d14a      	bne.n	800fd9c <_reclaim_reent+0xac>
 800fd06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd08:	6819      	ldr	r1, [r3, #0]
 800fd0a:	b111      	cbz	r1, 800fd12 <_reclaim_reent+0x22>
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f7ff ff01 	bl	800fb14 <_free_r>
 800fd12:	6961      	ldr	r1, [r4, #20]
 800fd14:	b111      	cbz	r1, 800fd1c <_reclaim_reent+0x2c>
 800fd16:	4620      	mov	r0, r4
 800fd18:	f7ff fefc 	bl	800fb14 <_free_r>
 800fd1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fd1e:	b111      	cbz	r1, 800fd26 <_reclaim_reent+0x36>
 800fd20:	4620      	mov	r0, r4
 800fd22:	f7ff fef7 	bl	800fb14 <_free_r>
 800fd26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd28:	b111      	cbz	r1, 800fd30 <_reclaim_reent+0x40>
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f7ff fef2 	bl	800fb14 <_free_r>
 800fd30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fd32:	b111      	cbz	r1, 800fd3a <_reclaim_reent+0x4a>
 800fd34:	4620      	mov	r0, r4
 800fd36:	f7ff feed 	bl	800fb14 <_free_r>
 800fd3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fd3c:	b111      	cbz	r1, 800fd44 <_reclaim_reent+0x54>
 800fd3e:	4620      	mov	r0, r4
 800fd40:	f7ff fee8 	bl	800fb14 <_free_r>
 800fd44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fd46:	b111      	cbz	r1, 800fd4e <_reclaim_reent+0x5e>
 800fd48:	4620      	mov	r0, r4
 800fd4a:	f7ff fee3 	bl	800fb14 <_free_r>
 800fd4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fd50:	b111      	cbz	r1, 800fd58 <_reclaim_reent+0x68>
 800fd52:	4620      	mov	r0, r4
 800fd54:	f7ff fede 	bl	800fb14 <_free_r>
 800fd58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd5a:	b111      	cbz	r1, 800fd62 <_reclaim_reent+0x72>
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	f7ff fed9 	bl	800fb14 <_free_r>
 800fd62:	69a3      	ldr	r3, [r4, #24]
 800fd64:	b1e3      	cbz	r3, 800fda0 <_reclaim_reent+0xb0>
 800fd66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fd68:	4620      	mov	r0, r4
 800fd6a:	4798      	blx	r3
 800fd6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fd6e:	b1b9      	cbz	r1, 800fda0 <_reclaim_reent+0xb0>
 800fd70:	4620      	mov	r0, r4
 800fd72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd76:	f7ff bfad 	b.w	800fcd4 <cleanup_glue>
 800fd7a:	5949      	ldr	r1, [r1, r5]
 800fd7c:	b941      	cbnz	r1, 800fd90 <_reclaim_reent+0xa0>
 800fd7e:	3504      	adds	r5, #4
 800fd80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd82:	2d80      	cmp	r5, #128	; 0x80
 800fd84:	68d9      	ldr	r1, [r3, #12]
 800fd86:	d1f8      	bne.n	800fd7a <_reclaim_reent+0x8a>
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f7ff fec3 	bl	800fb14 <_free_r>
 800fd8e:	e7ba      	b.n	800fd06 <_reclaim_reent+0x16>
 800fd90:	680e      	ldr	r6, [r1, #0]
 800fd92:	4620      	mov	r0, r4
 800fd94:	f7ff febe 	bl	800fb14 <_free_r>
 800fd98:	4631      	mov	r1, r6
 800fd9a:	e7ef      	b.n	800fd7c <_reclaim_reent+0x8c>
 800fd9c:	2500      	movs	r5, #0
 800fd9e:	e7ef      	b.n	800fd80 <_reclaim_reent+0x90>
 800fda0:	bd70      	pop	{r4, r5, r6, pc}
 800fda2:	bf00      	nop
 800fda4:	2000016c 	.word	0x2000016c

0800fda8 <_sbrk_r>:
 800fda8:	b538      	push	{r3, r4, r5, lr}
 800fdaa:	4d06      	ldr	r5, [pc, #24]	; (800fdc4 <_sbrk_r+0x1c>)
 800fdac:	2300      	movs	r3, #0
 800fdae:	4604      	mov	r4, r0
 800fdb0:	4608      	mov	r0, r1
 800fdb2:	602b      	str	r3, [r5, #0]
 800fdb4:	f7f1 fe2e 	bl	8001a14 <_sbrk>
 800fdb8:	1c43      	adds	r3, r0, #1
 800fdba:	d102      	bne.n	800fdc2 <_sbrk_r+0x1a>
 800fdbc:	682b      	ldr	r3, [r5, #0]
 800fdbe:	b103      	cbz	r3, 800fdc2 <_sbrk_r+0x1a>
 800fdc0:	6023      	str	r3, [r4, #0]
 800fdc2:	bd38      	pop	{r3, r4, r5, pc}
 800fdc4:	2001be14 	.word	0x2001be14

0800fdc8 <siprintf>:
 800fdc8:	b40e      	push	{r1, r2, r3}
 800fdca:	b500      	push	{lr}
 800fdcc:	b09c      	sub	sp, #112	; 0x70
 800fdce:	ab1d      	add	r3, sp, #116	; 0x74
 800fdd0:	9002      	str	r0, [sp, #8]
 800fdd2:	9006      	str	r0, [sp, #24]
 800fdd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fdd8:	4809      	ldr	r0, [pc, #36]	; (800fe00 <siprintf+0x38>)
 800fdda:	9107      	str	r1, [sp, #28]
 800fddc:	9104      	str	r1, [sp, #16]
 800fdde:	4909      	ldr	r1, [pc, #36]	; (800fe04 <siprintf+0x3c>)
 800fde0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fde4:	9105      	str	r1, [sp, #20]
 800fde6:	6800      	ldr	r0, [r0, #0]
 800fde8:	9301      	str	r3, [sp, #4]
 800fdea:	a902      	add	r1, sp, #8
 800fdec:	f000 f874 	bl	800fed8 <_svfiprintf_r>
 800fdf0:	9b02      	ldr	r3, [sp, #8]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	701a      	strb	r2, [r3, #0]
 800fdf6:	b01c      	add	sp, #112	; 0x70
 800fdf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdfc:	b003      	add	sp, #12
 800fdfe:	4770      	bx	lr
 800fe00:	2000016c 	.word	0x2000016c
 800fe04:	ffff0208 	.word	0xffff0208

0800fe08 <__malloc_lock>:
 800fe08:	4801      	ldr	r0, [pc, #4]	; (800fe10 <__malloc_lock+0x8>)
 800fe0a:	f7ff be5b 	b.w	800fac4 <__retarget_lock_acquire_recursive>
 800fe0e:	bf00      	nop
 800fe10:	2001be08 	.word	0x2001be08

0800fe14 <__malloc_unlock>:
 800fe14:	4801      	ldr	r0, [pc, #4]	; (800fe1c <__malloc_unlock+0x8>)
 800fe16:	f7ff be56 	b.w	800fac6 <__retarget_lock_release_recursive>
 800fe1a:	bf00      	nop
 800fe1c:	2001be08 	.word	0x2001be08

0800fe20 <__ssputs_r>:
 800fe20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe24:	688e      	ldr	r6, [r1, #8]
 800fe26:	429e      	cmp	r6, r3
 800fe28:	4682      	mov	sl, r0
 800fe2a:	460c      	mov	r4, r1
 800fe2c:	4690      	mov	r8, r2
 800fe2e:	461f      	mov	r7, r3
 800fe30:	d838      	bhi.n	800fea4 <__ssputs_r+0x84>
 800fe32:	898a      	ldrh	r2, [r1, #12]
 800fe34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe38:	d032      	beq.n	800fea0 <__ssputs_r+0x80>
 800fe3a:	6825      	ldr	r5, [r4, #0]
 800fe3c:	6909      	ldr	r1, [r1, #16]
 800fe3e:	eba5 0901 	sub.w	r9, r5, r1
 800fe42:	6965      	ldr	r5, [r4, #20]
 800fe44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	444b      	add	r3, r9
 800fe50:	106d      	asrs	r5, r5, #1
 800fe52:	429d      	cmp	r5, r3
 800fe54:	bf38      	it	cc
 800fe56:	461d      	movcc	r5, r3
 800fe58:	0553      	lsls	r3, r2, #21
 800fe5a:	d531      	bpl.n	800fec0 <__ssputs_r+0xa0>
 800fe5c:	4629      	mov	r1, r5
 800fe5e:	f7ff fec5 	bl	800fbec <_malloc_r>
 800fe62:	4606      	mov	r6, r0
 800fe64:	b950      	cbnz	r0, 800fe7c <__ssputs_r+0x5c>
 800fe66:	230c      	movs	r3, #12
 800fe68:	f8ca 3000 	str.w	r3, [sl]
 800fe6c:	89a3      	ldrh	r3, [r4, #12]
 800fe6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe72:	81a3      	strh	r3, [r4, #12]
 800fe74:	f04f 30ff 	mov.w	r0, #4294967295
 800fe78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe7c:	6921      	ldr	r1, [r4, #16]
 800fe7e:	464a      	mov	r2, r9
 800fe80:	f7ff fe32 	bl	800fae8 <memcpy>
 800fe84:	89a3      	ldrh	r3, [r4, #12]
 800fe86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe8e:	81a3      	strh	r3, [r4, #12]
 800fe90:	6126      	str	r6, [r4, #16]
 800fe92:	6165      	str	r5, [r4, #20]
 800fe94:	444e      	add	r6, r9
 800fe96:	eba5 0509 	sub.w	r5, r5, r9
 800fe9a:	6026      	str	r6, [r4, #0]
 800fe9c:	60a5      	str	r5, [r4, #8]
 800fe9e:	463e      	mov	r6, r7
 800fea0:	42be      	cmp	r6, r7
 800fea2:	d900      	bls.n	800fea6 <__ssputs_r+0x86>
 800fea4:	463e      	mov	r6, r7
 800fea6:	6820      	ldr	r0, [r4, #0]
 800fea8:	4632      	mov	r2, r6
 800feaa:	4641      	mov	r1, r8
 800feac:	f000 faa8 	bl	8010400 <memmove>
 800feb0:	68a3      	ldr	r3, [r4, #8]
 800feb2:	1b9b      	subs	r3, r3, r6
 800feb4:	60a3      	str	r3, [r4, #8]
 800feb6:	6823      	ldr	r3, [r4, #0]
 800feb8:	4433      	add	r3, r6
 800feba:	6023      	str	r3, [r4, #0]
 800febc:	2000      	movs	r0, #0
 800febe:	e7db      	b.n	800fe78 <__ssputs_r+0x58>
 800fec0:	462a      	mov	r2, r5
 800fec2:	f000 fab7 	bl	8010434 <_realloc_r>
 800fec6:	4606      	mov	r6, r0
 800fec8:	2800      	cmp	r0, #0
 800feca:	d1e1      	bne.n	800fe90 <__ssputs_r+0x70>
 800fecc:	6921      	ldr	r1, [r4, #16]
 800fece:	4650      	mov	r0, sl
 800fed0:	f7ff fe20 	bl	800fb14 <_free_r>
 800fed4:	e7c7      	b.n	800fe66 <__ssputs_r+0x46>
	...

0800fed8 <_svfiprintf_r>:
 800fed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fedc:	4698      	mov	r8, r3
 800fede:	898b      	ldrh	r3, [r1, #12]
 800fee0:	061b      	lsls	r3, r3, #24
 800fee2:	b09d      	sub	sp, #116	; 0x74
 800fee4:	4607      	mov	r7, r0
 800fee6:	460d      	mov	r5, r1
 800fee8:	4614      	mov	r4, r2
 800feea:	d50e      	bpl.n	800ff0a <_svfiprintf_r+0x32>
 800feec:	690b      	ldr	r3, [r1, #16]
 800feee:	b963      	cbnz	r3, 800ff0a <_svfiprintf_r+0x32>
 800fef0:	2140      	movs	r1, #64	; 0x40
 800fef2:	f7ff fe7b 	bl	800fbec <_malloc_r>
 800fef6:	6028      	str	r0, [r5, #0]
 800fef8:	6128      	str	r0, [r5, #16]
 800fefa:	b920      	cbnz	r0, 800ff06 <_svfiprintf_r+0x2e>
 800fefc:	230c      	movs	r3, #12
 800fefe:	603b      	str	r3, [r7, #0]
 800ff00:	f04f 30ff 	mov.w	r0, #4294967295
 800ff04:	e0d1      	b.n	80100aa <_svfiprintf_r+0x1d2>
 800ff06:	2340      	movs	r3, #64	; 0x40
 800ff08:	616b      	str	r3, [r5, #20]
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff0e:	2320      	movs	r3, #32
 800ff10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff18:	2330      	movs	r3, #48	; 0x30
 800ff1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80100c4 <_svfiprintf_r+0x1ec>
 800ff1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff22:	f04f 0901 	mov.w	r9, #1
 800ff26:	4623      	mov	r3, r4
 800ff28:	469a      	mov	sl, r3
 800ff2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff2e:	b10a      	cbz	r2, 800ff34 <_svfiprintf_r+0x5c>
 800ff30:	2a25      	cmp	r2, #37	; 0x25
 800ff32:	d1f9      	bne.n	800ff28 <_svfiprintf_r+0x50>
 800ff34:	ebba 0b04 	subs.w	fp, sl, r4
 800ff38:	d00b      	beq.n	800ff52 <_svfiprintf_r+0x7a>
 800ff3a:	465b      	mov	r3, fp
 800ff3c:	4622      	mov	r2, r4
 800ff3e:	4629      	mov	r1, r5
 800ff40:	4638      	mov	r0, r7
 800ff42:	f7ff ff6d 	bl	800fe20 <__ssputs_r>
 800ff46:	3001      	adds	r0, #1
 800ff48:	f000 80aa 	beq.w	80100a0 <_svfiprintf_r+0x1c8>
 800ff4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff4e:	445a      	add	r2, fp
 800ff50:	9209      	str	r2, [sp, #36]	; 0x24
 800ff52:	f89a 3000 	ldrb.w	r3, [sl]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	f000 80a2 	beq.w	80100a0 <_svfiprintf_r+0x1c8>
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff66:	f10a 0a01 	add.w	sl, sl, #1
 800ff6a:	9304      	str	r3, [sp, #16]
 800ff6c:	9307      	str	r3, [sp, #28]
 800ff6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff72:	931a      	str	r3, [sp, #104]	; 0x68
 800ff74:	4654      	mov	r4, sl
 800ff76:	2205      	movs	r2, #5
 800ff78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff7c:	4851      	ldr	r0, [pc, #324]	; (80100c4 <_svfiprintf_r+0x1ec>)
 800ff7e:	f7f0 f92f 	bl	80001e0 <memchr>
 800ff82:	9a04      	ldr	r2, [sp, #16]
 800ff84:	b9d8      	cbnz	r0, 800ffbe <_svfiprintf_r+0xe6>
 800ff86:	06d0      	lsls	r0, r2, #27
 800ff88:	bf44      	itt	mi
 800ff8a:	2320      	movmi	r3, #32
 800ff8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff90:	0711      	lsls	r1, r2, #28
 800ff92:	bf44      	itt	mi
 800ff94:	232b      	movmi	r3, #43	; 0x2b
 800ff96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff9e:	2b2a      	cmp	r3, #42	; 0x2a
 800ffa0:	d015      	beq.n	800ffce <_svfiprintf_r+0xf6>
 800ffa2:	9a07      	ldr	r2, [sp, #28]
 800ffa4:	4654      	mov	r4, sl
 800ffa6:	2000      	movs	r0, #0
 800ffa8:	f04f 0c0a 	mov.w	ip, #10
 800ffac:	4621      	mov	r1, r4
 800ffae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffb2:	3b30      	subs	r3, #48	; 0x30
 800ffb4:	2b09      	cmp	r3, #9
 800ffb6:	d94e      	bls.n	8010056 <_svfiprintf_r+0x17e>
 800ffb8:	b1b0      	cbz	r0, 800ffe8 <_svfiprintf_r+0x110>
 800ffba:	9207      	str	r2, [sp, #28]
 800ffbc:	e014      	b.n	800ffe8 <_svfiprintf_r+0x110>
 800ffbe:	eba0 0308 	sub.w	r3, r0, r8
 800ffc2:	fa09 f303 	lsl.w	r3, r9, r3
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	9304      	str	r3, [sp, #16]
 800ffca:	46a2      	mov	sl, r4
 800ffcc:	e7d2      	b.n	800ff74 <_svfiprintf_r+0x9c>
 800ffce:	9b03      	ldr	r3, [sp, #12]
 800ffd0:	1d19      	adds	r1, r3, #4
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	9103      	str	r1, [sp, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	bfbb      	ittet	lt
 800ffda:	425b      	neglt	r3, r3
 800ffdc:	f042 0202 	orrlt.w	r2, r2, #2
 800ffe0:	9307      	strge	r3, [sp, #28]
 800ffe2:	9307      	strlt	r3, [sp, #28]
 800ffe4:	bfb8      	it	lt
 800ffe6:	9204      	strlt	r2, [sp, #16]
 800ffe8:	7823      	ldrb	r3, [r4, #0]
 800ffea:	2b2e      	cmp	r3, #46	; 0x2e
 800ffec:	d10c      	bne.n	8010008 <_svfiprintf_r+0x130>
 800ffee:	7863      	ldrb	r3, [r4, #1]
 800fff0:	2b2a      	cmp	r3, #42	; 0x2a
 800fff2:	d135      	bne.n	8010060 <_svfiprintf_r+0x188>
 800fff4:	9b03      	ldr	r3, [sp, #12]
 800fff6:	1d1a      	adds	r2, r3, #4
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	9203      	str	r2, [sp, #12]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	bfb8      	it	lt
 8010000:	f04f 33ff 	movlt.w	r3, #4294967295
 8010004:	3402      	adds	r4, #2
 8010006:	9305      	str	r3, [sp, #20]
 8010008:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80100d4 <_svfiprintf_r+0x1fc>
 801000c:	7821      	ldrb	r1, [r4, #0]
 801000e:	2203      	movs	r2, #3
 8010010:	4650      	mov	r0, sl
 8010012:	f7f0 f8e5 	bl	80001e0 <memchr>
 8010016:	b140      	cbz	r0, 801002a <_svfiprintf_r+0x152>
 8010018:	2340      	movs	r3, #64	; 0x40
 801001a:	eba0 000a 	sub.w	r0, r0, sl
 801001e:	fa03 f000 	lsl.w	r0, r3, r0
 8010022:	9b04      	ldr	r3, [sp, #16]
 8010024:	4303      	orrs	r3, r0
 8010026:	3401      	adds	r4, #1
 8010028:	9304      	str	r3, [sp, #16]
 801002a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801002e:	4826      	ldr	r0, [pc, #152]	; (80100c8 <_svfiprintf_r+0x1f0>)
 8010030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010034:	2206      	movs	r2, #6
 8010036:	f7f0 f8d3 	bl	80001e0 <memchr>
 801003a:	2800      	cmp	r0, #0
 801003c:	d038      	beq.n	80100b0 <_svfiprintf_r+0x1d8>
 801003e:	4b23      	ldr	r3, [pc, #140]	; (80100cc <_svfiprintf_r+0x1f4>)
 8010040:	bb1b      	cbnz	r3, 801008a <_svfiprintf_r+0x1b2>
 8010042:	9b03      	ldr	r3, [sp, #12]
 8010044:	3307      	adds	r3, #7
 8010046:	f023 0307 	bic.w	r3, r3, #7
 801004a:	3308      	adds	r3, #8
 801004c:	9303      	str	r3, [sp, #12]
 801004e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010050:	4433      	add	r3, r6
 8010052:	9309      	str	r3, [sp, #36]	; 0x24
 8010054:	e767      	b.n	800ff26 <_svfiprintf_r+0x4e>
 8010056:	fb0c 3202 	mla	r2, ip, r2, r3
 801005a:	460c      	mov	r4, r1
 801005c:	2001      	movs	r0, #1
 801005e:	e7a5      	b.n	800ffac <_svfiprintf_r+0xd4>
 8010060:	2300      	movs	r3, #0
 8010062:	3401      	adds	r4, #1
 8010064:	9305      	str	r3, [sp, #20]
 8010066:	4619      	mov	r1, r3
 8010068:	f04f 0c0a 	mov.w	ip, #10
 801006c:	4620      	mov	r0, r4
 801006e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010072:	3a30      	subs	r2, #48	; 0x30
 8010074:	2a09      	cmp	r2, #9
 8010076:	d903      	bls.n	8010080 <_svfiprintf_r+0x1a8>
 8010078:	2b00      	cmp	r3, #0
 801007a:	d0c5      	beq.n	8010008 <_svfiprintf_r+0x130>
 801007c:	9105      	str	r1, [sp, #20]
 801007e:	e7c3      	b.n	8010008 <_svfiprintf_r+0x130>
 8010080:	fb0c 2101 	mla	r1, ip, r1, r2
 8010084:	4604      	mov	r4, r0
 8010086:	2301      	movs	r3, #1
 8010088:	e7f0      	b.n	801006c <_svfiprintf_r+0x194>
 801008a:	ab03      	add	r3, sp, #12
 801008c:	9300      	str	r3, [sp, #0]
 801008e:	462a      	mov	r2, r5
 8010090:	4b0f      	ldr	r3, [pc, #60]	; (80100d0 <_svfiprintf_r+0x1f8>)
 8010092:	a904      	add	r1, sp, #16
 8010094:	4638      	mov	r0, r7
 8010096:	f3af 8000 	nop.w
 801009a:	1c42      	adds	r2, r0, #1
 801009c:	4606      	mov	r6, r0
 801009e:	d1d6      	bne.n	801004e <_svfiprintf_r+0x176>
 80100a0:	89ab      	ldrh	r3, [r5, #12]
 80100a2:	065b      	lsls	r3, r3, #25
 80100a4:	f53f af2c 	bmi.w	800ff00 <_svfiprintf_r+0x28>
 80100a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100aa:	b01d      	add	sp, #116	; 0x74
 80100ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b0:	ab03      	add	r3, sp, #12
 80100b2:	9300      	str	r3, [sp, #0]
 80100b4:	462a      	mov	r2, r5
 80100b6:	4b06      	ldr	r3, [pc, #24]	; (80100d0 <_svfiprintf_r+0x1f8>)
 80100b8:	a904      	add	r1, sp, #16
 80100ba:	4638      	mov	r0, r7
 80100bc:	f000 f87a 	bl	80101b4 <_printf_i>
 80100c0:	e7eb      	b.n	801009a <_svfiprintf_r+0x1c2>
 80100c2:	bf00      	nop
 80100c4:	0801319c 	.word	0x0801319c
 80100c8:	080131a6 	.word	0x080131a6
 80100cc:	00000000 	.word	0x00000000
 80100d0:	0800fe21 	.word	0x0800fe21
 80100d4:	080131a2 	.word	0x080131a2

080100d8 <_printf_common>:
 80100d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100dc:	4616      	mov	r6, r2
 80100de:	4699      	mov	r9, r3
 80100e0:	688a      	ldr	r2, [r1, #8]
 80100e2:	690b      	ldr	r3, [r1, #16]
 80100e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100e8:	4293      	cmp	r3, r2
 80100ea:	bfb8      	it	lt
 80100ec:	4613      	movlt	r3, r2
 80100ee:	6033      	str	r3, [r6, #0]
 80100f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100f4:	4607      	mov	r7, r0
 80100f6:	460c      	mov	r4, r1
 80100f8:	b10a      	cbz	r2, 80100fe <_printf_common+0x26>
 80100fa:	3301      	adds	r3, #1
 80100fc:	6033      	str	r3, [r6, #0]
 80100fe:	6823      	ldr	r3, [r4, #0]
 8010100:	0699      	lsls	r1, r3, #26
 8010102:	bf42      	ittt	mi
 8010104:	6833      	ldrmi	r3, [r6, #0]
 8010106:	3302      	addmi	r3, #2
 8010108:	6033      	strmi	r3, [r6, #0]
 801010a:	6825      	ldr	r5, [r4, #0]
 801010c:	f015 0506 	ands.w	r5, r5, #6
 8010110:	d106      	bne.n	8010120 <_printf_common+0x48>
 8010112:	f104 0a19 	add.w	sl, r4, #25
 8010116:	68e3      	ldr	r3, [r4, #12]
 8010118:	6832      	ldr	r2, [r6, #0]
 801011a:	1a9b      	subs	r3, r3, r2
 801011c:	42ab      	cmp	r3, r5
 801011e:	dc26      	bgt.n	801016e <_printf_common+0x96>
 8010120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010124:	1e13      	subs	r3, r2, #0
 8010126:	6822      	ldr	r2, [r4, #0]
 8010128:	bf18      	it	ne
 801012a:	2301      	movne	r3, #1
 801012c:	0692      	lsls	r2, r2, #26
 801012e:	d42b      	bmi.n	8010188 <_printf_common+0xb0>
 8010130:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010134:	4649      	mov	r1, r9
 8010136:	4638      	mov	r0, r7
 8010138:	47c0      	blx	r8
 801013a:	3001      	adds	r0, #1
 801013c:	d01e      	beq.n	801017c <_printf_common+0xa4>
 801013e:	6823      	ldr	r3, [r4, #0]
 8010140:	68e5      	ldr	r5, [r4, #12]
 8010142:	6832      	ldr	r2, [r6, #0]
 8010144:	f003 0306 	and.w	r3, r3, #6
 8010148:	2b04      	cmp	r3, #4
 801014a:	bf08      	it	eq
 801014c:	1aad      	subeq	r5, r5, r2
 801014e:	68a3      	ldr	r3, [r4, #8]
 8010150:	6922      	ldr	r2, [r4, #16]
 8010152:	bf0c      	ite	eq
 8010154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010158:	2500      	movne	r5, #0
 801015a:	4293      	cmp	r3, r2
 801015c:	bfc4      	itt	gt
 801015e:	1a9b      	subgt	r3, r3, r2
 8010160:	18ed      	addgt	r5, r5, r3
 8010162:	2600      	movs	r6, #0
 8010164:	341a      	adds	r4, #26
 8010166:	42b5      	cmp	r5, r6
 8010168:	d11a      	bne.n	80101a0 <_printf_common+0xc8>
 801016a:	2000      	movs	r0, #0
 801016c:	e008      	b.n	8010180 <_printf_common+0xa8>
 801016e:	2301      	movs	r3, #1
 8010170:	4652      	mov	r2, sl
 8010172:	4649      	mov	r1, r9
 8010174:	4638      	mov	r0, r7
 8010176:	47c0      	blx	r8
 8010178:	3001      	adds	r0, #1
 801017a:	d103      	bne.n	8010184 <_printf_common+0xac>
 801017c:	f04f 30ff 	mov.w	r0, #4294967295
 8010180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010184:	3501      	adds	r5, #1
 8010186:	e7c6      	b.n	8010116 <_printf_common+0x3e>
 8010188:	18e1      	adds	r1, r4, r3
 801018a:	1c5a      	adds	r2, r3, #1
 801018c:	2030      	movs	r0, #48	; 0x30
 801018e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010192:	4422      	add	r2, r4
 8010194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801019c:	3302      	adds	r3, #2
 801019e:	e7c7      	b.n	8010130 <_printf_common+0x58>
 80101a0:	2301      	movs	r3, #1
 80101a2:	4622      	mov	r2, r4
 80101a4:	4649      	mov	r1, r9
 80101a6:	4638      	mov	r0, r7
 80101a8:	47c0      	blx	r8
 80101aa:	3001      	adds	r0, #1
 80101ac:	d0e6      	beq.n	801017c <_printf_common+0xa4>
 80101ae:	3601      	adds	r6, #1
 80101b0:	e7d9      	b.n	8010166 <_printf_common+0x8e>
	...

080101b4 <_printf_i>:
 80101b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101b8:	7e0f      	ldrb	r7, [r1, #24]
 80101ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80101bc:	2f78      	cmp	r7, #120	; 0x78
 80101be:	4691      	mov	r9, r2
 80101c0:	4680      	mov	r8, r0
 80101c2:	460c      	mov	r4, r1
 80101c4:	469a      	mov	sl, r3
 80101c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80101ca:	d807      	bhi.n	80101dc <_printf_i+0x28>
 80101cc:	2f62      	cmp	r7, #98	; 0x62
 80101ce:	d80a      	bhi.n	80101e6 <_printf_i+0x32>
 80101d0:	2f00      	cmp	r7, #0
 80101d2:	f000 80d8 	beq.w	8010386 <_printf_i+0x1d2>
 80101d6:	2f58      	cmp	r7, #88	; 0x58
 80101d8:	f000 80a3 	beq.w	8010322 <_printf_i+0x16e>
 80101dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80101e4:	e03a      	b.n	801025c <_printf_i+0xa8>
 80101e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80101ea:	2b15      	cmp	r3, #21
 80101ec:	d8f6      	bhi.n	80101dc <_printf_i+0x28>
 80101ee:	a101      	add	r1, pc, #4	; (adr r1, 80101f4 <_printf_i+0x40>)
 80101f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80101f4:	0801024d 	.word	0x0801024d
 80101f8:	08010261 	.word	0x08010261
 80101fc:	080101dd 	.word	0x080101dd
 8010200:	080101dd 	.word	0x080101dd
 8010204:	080101dd 	.word	0x080101dd
 8010208:	080101dd 	.word	0x080101dd
 801020c:	08010261 	.word	0x08010261
 8010210:	080101dd 	.word	0x080101dd
 8010214:	080101dd 	.word	0x080101dd
 8010218:	080101dd 	.word	0x080101dd
 801021c:	080101dd 	.word	0x080101dd
 8010220:	0801036d 	.word	0x0801036d
 8010224:	08010291 	.word	0x08010291
 8010228:	0801034f 	.word	0x0801034f
 801022c:	080101dd 	.word	0x080101dd
 8010230:	080101dd 	.word	0x080101dd
 8010234:	0801038f 	.word	0x0801038f
 8010238:	080101dd 	.word	0x080101dd
 801023c:	08010291 	.word	0x08010291
 8010240:	080101dd 	.word	0x080101dd
 8010244:	080101dd 	.word	0x080101dd
 8010248:	08010357 	.word	0x08010357
 801024c:	682b      	ldr	r3, [r5, #0]
 801024e:	1d1a      	adds	r2, r3, #4
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	602a      	str	r2, [r5, #0]
 8010254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801025c:	2301      	movs	r3, #1
 801025e:	e0a3      	b.n	80103a8 <_printf_i+0x1f4>
 8010260:	6820      	ldr	r0, [r4, #0]
 8010262:	6829      	ldr	r1, [r5, #0]
 8010264:	0606      	lsls	r6, r0, #24
 8010266:	f101 0304 	add.w	r3, r1, #4
 801026a:	d50a      	bpl.n	8010282 <_printf_i+0xce>
 801026c:	680e      	ldr	r6, [r1, #0]
 801026e:	602b      	str	r3, [r5, #0]
 8010270:	2e00      	cmp	r6, #0
 8010272:	da03      	bge.n	801027c <_printf_i+0xc8>
 8010274:	232d      	movs	r3, #45	; 0x2d
 8010276:	4276      	negs	r6, r6
 8010278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801027c:	485e      	ldr	r0, [pc, #376]	; (80103f8 <_printf_i+0x244>)
 801027e:	230a      	movs	r3, #10
 8010280:	e019      	b.n	80102b6 <_printf_i+0x102>
 8010282:	680e      	ldr	r6, [r1, #0]
 8010284:	602b      	str	r3, [r5, #0]
 8010286:	f010 0f40 	tst.w	r0, #64	; 0x40
 801028a:	bf18      	it	ne
 801028c:	b236      	sxthne	r6, r6
 801028e:	e7ef      	b.n	8010270 <_printf_i+0xbc>
 8010290:	682b      	ldr	r3, [r5, #0]
 8010292:	6820      	ldr	r0, [r4, #0]
 8010294:	1d19      	adds	r1, r3, #4
 8010296:	6029      	str	r1, [r5, #0]
 8010298:	0601      	lsls	r1, r0, #24
 801029a:	d501      	bpl.n	80102a0 <_printf_i+0xec>
 801029c:	681e      	ldr	r6, [r3, #0]
 801029e:	e002      	b.n	80102a6 <_printf_i+0xf2>
 80102a0:	0646      	lsls	r6, r0, #25
 80102a2:	d5fb      	bpl.n	801029c <_printf_i+0xe8>
 80102a4:	881e      	ldrh	r6, [r3, #0]
 80102a6:	4854      	ldr	r0, [pc, #336]	; (80103f8 <_printf_i+0x244>)
 80102a8:	2f6f      	cmp	r7, #111	; 0x6f
 80102aa:	bf0c      	ite	eq
 80102ac:	2308      	moveq	r3, #8
 80102ae:	230a      	movne	r3, #10
 80102b0:	2100      	movs	r1, #0
 80102b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80102b6:	6865      	ldr	r5, [r4, #4]
 80102b8:	60a5      	str	r5, [r4, #8]
 80102ba:	2d00      	cmp	r5, #0
 80102bc:	bfa2      	ittt	ge
 80102be:	6821      	ldrge	r1, [r4, #0]
 80102c0:	f021 0104 	bicge.w	r1, r1, #4
 80102c4:	6021      	strge	r1, [r4, #0]
 80102c6:	b90e      	cbnz	r6, 80102cc <_printf_i+0x118>
 80102c8:	2d00      	cmp	r5, #0
 80102ca:	d04d      	beq.n	8010368 <_printf_i+0x1b4>
 80102cc:	4615      	mov	r5, r2
 80102ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80102d2:	fb03 6711 	mls	r7, r3, r1, r6
 80102d6:	5dc7      	ldrb	r7, [r0, r7]
 80102d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80102dc:	4637      	mov	r7, r6
 80102de:	42bb      	cmp	r3, r7
 80102e0:	460e      	mov	r6, r1
 80102e2:	d9f4      	bls.n	80102ce <_printf_i+0x11a>
 80102e4:	2b08      	cmp	r3, #8
 80102e6:	d10b      	bne.n	8010300 <_printf_i+0x14c>
 80102e8:	6823      	ldr	r3, [r4, #0]
 80102ea:	07de      	lsls	r6, r3, #31
 80102ec:	d508      	bpl.n	8010300 <_printf_i+0x14c>
 80102ee:	6923      	ldr	r3, [r4, #16]
 80102f0:	6861      	ldr	r1, [r4, #4]
 80102f2:	4299      	cmp	r1, r3
 80102f4:	bfde      	ittt	le
 80102f6:	2330      	movle	r3, #48	; 0x30
 80102f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80102fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010300:	1b52      	subs	r2, r2, r5
 8010302:	6122      	str	r2, [r4, #16]
 8010304:	f8cd a000 	str.w	sl, [sp]
 8010308:	464b      	mov	r3, r9
 801030a:	aa03      	add	r2, sp, #12
 801030c:	4621      	mov	r1, r4
 801030e:	4640      	mov	r0, r8
 8010310:	f7ff fee2 	bl	80100d8 <_printf_common>
 8010314:	3001      	adds	r0, #1
 8010316:	d14c      	bne.n	80103b2 <_printf_i+0x1fe>
 8010318:	f04f 30ff 	mov.w	r0, #4294967295
 801031c:	b004      	add	sp, #16
 801031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010322:	4835      	ldr	r0, [pc, #212]	; (80103f8 <_printf_i+0x244>)
 8010324:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010328:	6829      	ldr	r1, [r5, #0]
 801032a:	6823      	ldr	r3, [r4, #0]
 801032c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010330:	6029      	str	r1, [r5, #0]
 8010332:	061d      	lsls	r5, r3, #24
 8010334:	d514      	bpl.n	8010360 <_printf_i+0x1ac>
 8010336:	07df      	lsls	r7, r3, #31
 8010338:	bf44      	itt	mi
 801033a:	f043 0320 	orrmi.w	r3, r3, #32
 801033e:	6023      	strmi	r3, [r4, #0]
 8010340:	b91e      	cbnz	r6, 801034a <_printf_i+0x196>
 8010342:	6823      	ldr	r3, [r4, #0]
 8010344:	f023 0320 	bic.w	r3, r3, #32
 8010348:	6023      	str	r3, [r4, #0]
 801034a:	2310      	movs	r3, #16
 801034c:	e7b0      	b.n	80102b0 <_printf_i+0xfc>
 801034e:	6823      	ldr	r3, [r4, #0]
 8010350:	f043 0320 	orr.w	r3, r3, #32
 8010354:	6023      	str	r3, [r4, #0]
 8010356:	2378      	movs	r3, #120	; 0x78
 8010358:	4828      	ldr	r0, [pc, #160]	; (80103fc <_printf_i+0x248>)
 801035a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801035e:	e7e3      	b.n	8010328 <_printf_i+0x174>
 8010360:	0659      	lsls	r1, r3, #25
 8010362:	bf48      	it	mi
 8010364:	b2b6      	uxthmi	r6, r6
 8010366:	e7e6      	b.n	8010336 <_printf_i+0x182>
 8010368:	4615      	mov	r5, r2
 801036a:	e7bb      	b.n	80102e4 <_printf_i+0x130>
 801036c:	682b      	ldr	r3, [r5, #0]
 801036e:	6826      	ldr	r6, [r4, #0]
 8010370:	6961      	ldr	r1, [r4, #20]
 8010372:	1d18      	adds	r0, r3, #4
 8010374:	6028      	str	r0, [r5, #0]
 8010376:	0635      	lsls	r5, r6, #24
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	d501      	bpl.n	8010380 <_printf_i+0x1cc>
 801037c:	6019      	str	r1, [r3, #0]
 801037e:	e002      	b.n	8010386 <_printf_i+0x1d2>
 8010380:	0670      	lsls	r0, r6, #25
 8010382:	d5fb      	bpl.n	801037c <_printf_i+0x1c8>
 8010384:	8019      	strh	r1, [r3, #0]
 8010386:	2300      	movs	r3, #0
 8010388:	6123      	str	r3, [r4, #16]
 801038a:	4615      	mov	r5, r2
 801038c:	e7ba      	b.n	8010304 <_printf_i+0x150>
 801038e:	682b      	ldr	r3, [r5, #0]
 8010390:	1d1a      	adds	r2, r3, #4
 8010392:	602a      	str	r2, [r5, #0]
 8010394:	681d      	ldr	r5, [r3, #0]
 8010396:	6862      	ldr	r2, [r4, #4]
 8010398:	2100      	movs	r1, #0
 801039a:	4628      	mov	r0, r5
 801039c:	f7ef ff20 	bl	80001e0 <memchr>
 80103a0:	b108      	cbz	r0, 80103a6 <_printf_i+0x1f2>
 80103a2:	1b40      	subs	r0, r0, r5
 80103a4:	6060      	str	r0, [r4, #4]
 80103a6:	6863      	ldr	r3, [r4, #4]
 80103a8:	6123      	str	r3, [r4, #16]
 80103aa:	2300      	movs	r3, #0
 80103ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103b0:	e7a8      	b.n	8010304 <_printf_i+0x150>
 80103b2:	6923      	ldr	r3, [r4, #16]
 80103b4:	462a      	mov	r2, r5
 80103b6:	4649      	mov	r1, r9
 80103b8:	4640      	mov	r0, r8
 80103ba:	47d0      	blx	sl
 80103bc:	3001      	adds	r0, #1
 80103be:	d0ab      	beq.n	8010318 <_printf_i+0x164>
 80103c0:	6823      	ldr	r3, [r4, #0]
 80103c2:	079b      	lsls	r3, r3, #30
 80103c4:	d413      	bmi.n	80103ee <_printf_i+0x23a>
 80103c6:	68e0      	ldr	r0, [r4, #12]
 80103c8:	9b03      	ldr	r3, [sp, #12]
 80103ca:	4298      	cmp	r0, r3
 80103cc:	bfb8      	it	lt
 80103ce:	4618      	movlt	r0, r3
 80103d0:	e7a4      	b.n	801031c <_printf_i+0x168>
 80103d2:	2301      	movs	r3, #1
 80103d4:	4632      	mov	r2, r6
 80103d6:	4649      	mov	r1, r9
 80103d8:	4640      	mov	r0, r8
 80103da:	47d0      	blx	sl
 80103dc:	3001      	adds	r0, #1
 80103de:	d09b      	beq.n	8010318 <_printf_i+0x164>
 80103e0:	3501      	adds	r5, #1
 80103e2:	68e3      	ldr	r3, [r4, #12]
 80103e4:	9903      	ldr	r1, [sp, #12]
 80103e6:	1a5b      	subs	r3, r3, r1
 80103e8:	42ab      	cmp	r3, r5
 80103ea:	dcf2      	bgt.n	80103d2 <_printf_i+0x21e>
 80103ec:	e7eb      	b.n	80103c6 <_printf_i+0x212>
 80103ee:	2500      	movs	r5, #0
 80103f0:	f104 0619 	add.w	r6, r4, #25
 80103f4:	e7f5      	b.n	80103e2 <_printf_i+0x22e>
 80103f6:	bf00      	nop
 80103f8:	080131ad 	.word	0x080131ad
 80103fc:	080131be 	.word	0x080131be

08010400 <memmove>:
 8010400:	4288      	cmp	r0, r1
 8010402:	b510      	push	{r4, lr}
 8010404:	eb01 0402 	add.w	r4, r1, r2
 8010408:	d902      	bls.n	8010410 <memmove+0x10>
 801040a:	4284      	cmp	r4, r0
 801040c:	4623      	mov	r3, r4
 801040e:	d807      	bhi.n	8010420 <memmove+0x20>
 8010410:	1e43      	subs	r3, r0, #1
 8010412:	42a1      	cmp	r1, r4
 8010414:	d008      	beq.n	8010428 <memmove+0x28>
 8010416:	f811 2b01 	ldrb.w	r2, [r1], #1
 801041a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801041e:	e7f8      	b.n	8010412 <memmove+0x12>
 8010420:	4402      	add	r2, r0
 8010422:	4601      	mov	r1, r0
 8010424:	428a      	cmp	r2, r1
 8010426:	d100      	bne.n	801042a <memmove+0x2a>
 8010428:	bd10      	pop	{r4, pc}
 801042a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801042e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010432:	e7f7      	b.n	8010424 <memmove+0x24>

08010434 <_realloc_r>:
 8010434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010438:	4680      	mov	r8, r0
 801043a:	4614      	mov	r4, r2
 801043c:	460e      	mov	r6, r1
 801043e:	b921      	cbnz	r1, 801044a <_realloc_r+0x16>
 8010440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010444:	4611      	mov	r1, r2
 8010446:	f7ff bbd1 	b.w	800fbec <_malloc_r>
 801044a:	b92a      	cbnz	r2, 8010458 <_realloc_r+0x24>
 801044c:	f7ff fb62 	bl	800fb14 <_free_r>
 8010450:	4625      	mov	r5, r4
 8010452:	4628      	mov	r0, r5
 8010454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010458:	f000 f81b 	bl	8010492 <_malloc_usable_size_r>
 801045c:	4284      	cmp	r4, r0
 801045e:	4607      	mov	r7, r0
 8010460:	d802      	bhi.n	8010468 <_realloc_r+0x34>
 8010462:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010466:	d812      	bhi.n	801048e <_realloc_r+0x5a>
 8010468:	4621      	mov	r1, r4
 801046a:	4640      	mov	r0, r8
 801046c:	f7ff fbbe 	bl	800fbec <_malloc_r>
 8010470:	4605      	mov	r5, r0
 8010472:	2800      	cmp	r0, #0
 8010474:	d0ed      	beq.n	8010452 <_realloc_r+0x1e>
 8010476:	42bc      	cmp	r4, r7
 8010478:	4622      	mov	r2, r4
 801047a:	4631      	mov	r1, r6
 801047c:	bf28      	it	cs
 801047e:	463a      	movcs	r2, r7
 8010480:	f7ff fb32 	bl	800fae8 <memcpy>
 8010484:	4631      	mov	r1, r6
 8010486:	4640      	mov	r0, r8
 8010488:	f7ff fb44 	bl	800fb14 <_free_r>
 801048c:	e7e1      	b.n	8010452 <_realloc_r+0x1e>
 801048e:	4635      	mov	r5, r6
 8010490:	e7df      	b.n	8010452 <_realloc_r+0x1e>

08010492 <_malloc_usable_size_r>:
 8010492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010496:	1f18      	subs	r0, r3, #4
 8010498:	2b00      	cmp	r3, #0
 801049a:	bfbc      	itt	lt
 801049c:	580b      	ldrlt	r3, [r1, r0]
 801049e:	18c0      	addlt	r0, r0, r3
 80104a0:	4770      	bx	lr
	...

080104a4 <_init>:
 80104a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104a6:	bf00      	nop
 80104a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104aa:	bc08      	pop	{r3}
 80104ac:	469e      	mov	lr, r3
 80104ae:	4770      	bx	lr

080104b0 <_fini>:
 80104b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104b2:	bf00      	nop
 80104b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104b6:	bc08      	pop	{r3}
 80104b8:	469e      	mov	lr, r3
 80104ba:	4770      	bx	lr
